
CommTestAO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d94  08014138  08014138  00024138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ecc  08016ecc  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08016ecc  08016ecc  00026ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ed4  08016ed4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ed4  08016ed4  00026ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ed8  08016ed8  00026ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08016edc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da70  20000080  08016f5c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000daf0  08016f5c  0003daf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c18f  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078c3  00000000  00000000  0005c23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00063b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be8  00000000  00000000  00065868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034508  00000000  00000000  00067450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031684  00000000  00000000  0009b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d990  00000000  00000000  000ccfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001da96c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008164  00000000  00000000  001da9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001e2b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001e2b5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014120 	.word	0x08014120

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08014120 	.word	0x08014120

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <__NVIC_SystemReset+0x24>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005d6:	4904      	ldr	r1, [pc, #16]	; (80005e8 <__NVIC_SystemReset+0x24>)
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <__NVIC_SystemReset+0x28>)
 80005da:	4313      	orrs	r3, r2
 80005dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005de:	f3bf 8f4f 	dsb	sy
}
 80005e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <__NVIC_SystemReset+0x20>
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	05fa0004 	.word	0x05fa0004

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd86 	bl	8001106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f87f 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f977 	bl	80008f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f91f 	bl	8000844 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000606:	f000 f94d 	bl	80008a4 <MX_DMA_Init>
  MX_LWIP_Init();
 800060a:	f005 ffcf 	bl	80065ac <MX_LWIP_Init>
  MX_TIM6_Init();
 800060e:	f000 f8e3 	bl	80007d8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_DeInit(&huart3);
 8000612:	482e      	ldr	r0, [pc, #184]	; (80006cc <main+0xdc>)
 8000614:	f004 fc94 	bl	8004f40 <HAL_UART_DeInit>
  HAL_UART_Init(&huart3);
 8000618:	482c      	ldr	r0, [pc, #176]	; (80006cc <main+0xdc>)
 800061a:	f004 fc43 	bl	8004ea4 <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart3,(uint8_t *)uartdriver.text,sizeof(uartdriver.text));
 800061e:	2214      	movs	r2, #20
 8000620:	492b      	ldr	r1, [pc, #172]	; (80006d0 <main+0xe0>)
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <main+0xdc>)
 8000624:	f004 fe28 	bl	8005278 <HAL_UART_Receive_DMA>
  RetargetInit(&huart3);
 8000628:	4828      	ldr	r0, [pc, #160]	; (80006cc <main+0xdc>)
 800062a:	f000 fa65 	bl	8000af8 <RetargetInit>

  printf("Merhaba\r\n");
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <main+0xe4>)
 8000630:	f012 fa62 	bl	8012af8 <puts>


  UartDriver_ctor(&uartdriver);
 8000634:	4828      	ldr	r0, [pc, #160]	; (80006d8 <main+0xe8>)
 8000636:	f012 f87f 	bl	8012738 <UartDriver_ctor>
  LwipDriver_ctor(&lwipdriver);
 800063a:	4828      	ldr	r0, [pc, #160]	; (80006dc <main+0xec>)
 800063c:	f011 ff3e 	bl	80124bc <LwipDriver_ctor>

  QF_init();
 8000640:	f011 fe5a 	bl	80122f8 <QF_init>
  QF_psInit(subscrSto, Q_DIM(subscrSto));
 8000644:	210a      	movs	r1, #10
 8000646:	4826      	ldr	r0, [pc, #152]	; (80006e0 <main+0xf0>)
 8000648:	f011 fbb4 	bl	8011db4 <QF_psInit>
  /* initialize event pools... */
  QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 800064c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8000650:	f242 7138 	movw	r1, #10040	; 0x2738
 8000654:	4823      	ldr	r0, [pc, #140]	; (80006e4 <main+0xf4>)
 8000656:	f011 f961 	bl	801191c <QF_poolInit>

  /*Aktif objeler arasındaki öncelik ilişkisine dikkat et , öncelikler kesinlikle aynı olmayacak*/

  QACTIVE_START(AO_LwipDriver,2U,LwipDriver_queue,Q_DIM(LwipDriver_queue),(void *)0,0U,(QEvt *)0);
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <main+0xf8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <main+0x7c>
 8000664:	218b      	movs	r1, #139	; 0x8b
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <main+0xfc>)
 8000668:	f000 fa08 	bl	8000a7c <Q_onAssert>
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <main+0xf8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	689c      	ldr	r4, [r3, #8]
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0xf8>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2300      	movs	r3, #0
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	230a      	movs	r3, #10
 8000686:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <main+0x100>)
 8000688:	2102      	movs	r1, #2
 800068a:	47a0      	blx	r4
  QACTIVE_START(AO_UartDriver,1U,UartDriver_queue,Q_DIM(UartDriver_queue),(void *)0,0U,(QEvt *)0);
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <main+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d103      	bne.n	800069e <main+0xae>
 8000696:	218c      	movs	r1, #140	; 0x8c
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <main+0xfc>)
 800069a:	f000 f9ef 	bl	8000a7c <Q_onAssert>
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <main+0x104>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	689c      	ldr	r4, [r3, #8]
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0x104>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2300      	movs	r3, #0
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2300      	movs	r3, #0
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	230a      	movs	r3, #10
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <main+0x108>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	47a0      	blx	r4
  return QF_run();
 80006be:	f011 fe43 	bl	8012348 <QF_run>
 80006c2:	4603      	mov	r3, r0

//	  MX_LWIP_Process();

  }
  /* USER CODE END 3 */
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3704      	adds	r7, #4
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	200000e8 	.word	0x200000e8
 80006d0:	2000025c 	.word	0x2000025c
 80006d4:	08014138 	.word	0x08014138
 80006d8:	2000022c 	.word	0x2000022c
 80006dc:	20000270 	.word	0x20000270
 80006e0:	200002bc 	.word	0x200002bc
 80006e4:	200002e4 	.word	0x200002e4
 80006e8:	20000000 	.word	0x20000000
 80006ec:	08016bec 	.word	0x08016bec
 80006f0:	20002a1c 	.word	0x20002a1c
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20002a44 	.word	0x20002a44

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f012 f966 	bl	80129dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000720:	f002 ffbc 	bl	800369c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <SystemClock_Config+0xd4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <SystemClock_Config+0xd8>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800076c:	23d8      	movs	r3, #216	; 0xd8
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000774:	2309      	movs	r3, #9
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f002 ffed 	bl	800375c <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000788:	f000 f9b0 	bl	8000aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078c:	f002 ff96 	bl	80036bc <HAL_PWREx_EnableOverDrive>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000796:	f000 f9a9 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2107      	movs	r1, #7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fa73 	bl	8003ca4 <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c4:	f000 f992 	bl	8000aec <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	; 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_TIM6_Init+0x64>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_TIM6_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_TIM6_Init+0x64>)
 80007f0:	f240 221b 	movw	r2, #539	; 0x21b
 80007f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_TIM6_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_TIM6_Init+0x64>)
 80007fe:	2263      	movs	r2, #99	; 0x63
 8000800:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_TIM6_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_TIM6_Init+0x64>)
 800080a:	f004 f861 	bl	80048d0 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000814:	f000 f96a 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_TIM6_Init+0x64>)
 8000826:	f004 fa91 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 f95c 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000009c 	.word	0x2000009c
 8000840:	40001000 	.word	0x40001000

08000844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART3_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_USART3_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART3_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART3_UART_Init+0x58>)
 8000888:	f004 fb0c 	bl	8004ea4 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f92b 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000e8 	.word	0x200000e8
 80008a0:	40004800 	.word	0x40004800

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_DMA_Init+0x48>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_DMA_Init+0x48>)
 80008b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_DMA_Init+0x48>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	200c      	movs	r0, #12
 80008c8:	f000 fd9d 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008cc:	200c      	movs	r0, #12
 80008ce:	f000 fdb6 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	200e      	movs	r0, #14
 80008d8:	f000 fd95 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008dc:	200e      	movs	r0, #14
 80008de:	f000 fdae 	bl	800143e <HAL_NVIC_EnableIRQ>

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <MX_GPIO_Init+0x17c>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a52      	ldr	r2, [pc, #328]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <MX_GPIO_Init+0x17c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a4c      	ldr	r2, [pc, #304]	; (8000a6c <MX_GPIO_Init+0x17c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a46      	ldr	r2, [pc, #280]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x17c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a40      	ldr	r2, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x17c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x17c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f244 0181 	movw	r1, #16513	; 0x4081
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x180>)
 800099e:	f002 fe31 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4833      	ldr	r0, [pc, #204]	; (8000a74 <MX_GPIO_Init+0x184>)
 80009a8:	f002 fe2c 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b8:	2302      	movs	r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	482d      	ldr	r0, [pc, #180]	; (8000a78 <MX_GPIO_Init+0x188>)
 80009c4:	f002 fb66 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4823      	ldr	r0, [pc, #140]	; (8000a70 <MX_GPIO_Init+0x180>)
 80009e2:	f002 fb57 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	481d      	ldr	r0, [pc, #116]	; (8000a74 <MX_GPIO_Init+0x184>)
 80009fe:	f002 fb49 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4817      	ldr	r0, [pc, #92]	; (8000a74 <MX_GPIO_Init+0x184>)
 8000a16:	f002 fb3d 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 8000a1a:	2330      	movs	r3, #48	; 0x30
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a1e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a24:	2302      	movs	r3, #2
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0x180>)
 8000a30:	f002 fb30 	bl	8003094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f000 fce4 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f000 fcfd 	bl	800143e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2017      	movs	r0, #23
 8000a4a:	f000 fcdc 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a4e:	2017      	movs	r0, #23
 8000a50:	f000 fcf5 	bl	800143e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2028      	movs	r0, #40	; 0x28
 8000a5a:	f000 fcd4 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5e:	2028      	movs	r0, #40	; 0x28
 8000a60:	f000 fced 	bl	800143e <HAL_NVIC_EnableIRQ>

}
 8000a64:	bf00      	nop
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40020800 	.word	0x40020800

08000a7c <Q_onAssert>:

/* USER CODE BEGIN 4 */


void Q_onAssert(char const *module, int loc) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000a86:	f7ff fd9d 	bl	80005c4 <__NVIC_SystemReset>

08000a8a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
	QF_TICK_X(0U,(void *)0);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f011 faa6 	bl	8011fe0 <QF_tickX_>
	__NOP();
 8000a94:	bf00      	nop
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */

  __NOP();
 8000aa2:	bf00      	nop
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

//  	QF_TICK_X(0U,(void *)0);
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <QV_onIdle>:


void QV_onIdle(void){
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
#ifndef NDEBUG
	QV_CPU_SLEEP();
 8000ac8:	b672      	cpsid	i
 8000aca:	2300      	movs	r3, #0
 8000acc:	f383 8811 	msr	BASEPRI, r3
 8000ad0:	bf30      	wfi
 8000ad2:	b662      	cpsie	i
#else
	QF_INT_ENABLE();
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <QF_onStartup>:


void QF_onStartup(void){
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <RetargetInit+0x28>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <RetargetInit+0x2c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6898      	ldr	r0, [r3, #8]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2202      	movs	r2, #2
 8000b10:	2100      	movs	r1, #0
 8000b12:	f012 f837 	bl	8012b84 <setvbuf>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20002a6c 	.word	0x20002a6c
 8000b24:	2000001c 	.word	0x2000001c

08000b28 <_isatty>:

int _isatty(int fd) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db04      	blt.n	8000b40 <_isatty+0x18>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	dc01      	bgt.n	8000b40 <_isatty+0x18>
    return 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e003      	b.n	8000b48 <_isatty+0x20>

  errno = EBADF;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <_isatty+0x2c>)
 8000b42:	2209      	movs	r2, #9
 8000b44:	601a      	str	r2, [r3, #0]
  return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	2000dae0 	.word	0x2000dae0

08000b58 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d002      	beq.n	8000b70 <_write+0x18>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d111      	bne.n	8000b94 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <_write+0x50>)
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	f004 fa18 	bl	8004fb2 <HAL_UART_Transmit>
 8000b82:	4603      	mov	r3, r0
 8000b84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <_write+0x38>
      return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e006      	b.n	8000b9e <_write+0x46>
    else
      return EIO;
 8000b90:	2305      	movs	r3, #5
 8000b92:	e004      	b.n	8000b9e <_write+0x46>
  }
  errno = EBADF;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_write+0x54>)
 8000b96:	2209      	movs	r2, #9
 8000b98:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20002a6c 	.word	0x20002a6c
 8000bac:	2000dae0 	.word	0x2000dae0

08000bb0 <_close>:

int _close(int fd) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db04      	blt.n	8000bc8 <_close+0x18>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	dc01      	bgt.n	8000bc8 <_close+0x18>
    return 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e004      	b.n	8000bd2 <_close+0x22>

  errno = EBADF;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <_close+0x30>)
 8000bca:	2209      	movs	r2, #9
 8000bcc:	601a      	str	r2, [r3, #0]
  return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	2000dae0 	.word	0x2000dae0

08000be4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <_lseek+0x24>)
 8000bf2:	2209      	movs	r2, #9
 8000bf4:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000dae0 	.word	0x2000dae0

08000c0c <_read>:

int _read(int fd, char* ptr, int len) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d110      	bne.n	8000c40 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <_read+0x48>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	2201      	movs	r2, #1
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	f004 fa55 	bl	80050d8 <HAL_UART_Receive>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c32:	7dfb      	ldrb	r3, [r7, #23]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <_read+0x30>
      return 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e006      	b.n	8000c4a <_read+0x3e>
    else
      return EIO;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	e004      	b.n	8000c4a <_read+0x3e>
  }
  errno = EBADF;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <_read+0x4c>)
 8000c42:	2209      	movs	r2, #9
 8000c44:	601a      	str	r2, [r3, #0]
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20002a6c 	.word	0x20002a6c
 8000c58:	2000dae0 	.word	0x2000dae0

08000c5c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db08      	blt.n	8000c7e <_fstat+0x22>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	dc05      	bgt.n	8000c7e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c78:	605a      	str	r2, [r3, #4]
    return 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e003      	b.n	8000c86 <_fstat+0x2a>
  }

  errno = EBADF;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <_fstat+0x38>)
 8000c80:	2209      	movs	r2, #9
 8000c82:	601a      	str	r2, [r3, #0]
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2000dae0 	.word	0x2000dae0

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_TIM_Base_MspInit+0x44>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d113      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2036      	movs	r0, #54	; 0x36
 8000d10:	f000 fb79 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 fb92 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0aa      	sub	sp, #168	; 0xa8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	2284      	movs	r2, #132	; 0x84
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f011 fe45 	bl	80129dc <memset>
  if(huart->Instance==USART3)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a55      	ldr	r2, [pc, #340]	; (8000eac <HAL_UART_MspInit+0x180>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	f040 80a2 	bne.w	8000ea2 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 f9bf 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f7ff feb8 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7c:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <HAL_UART_MspInit+0x184>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <HAL_UART_MspInit+0x184>)
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <HAL_UART_MspInit+0x184>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <HAL_UART_MspInit+0x184>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a45      	ldr	r2, [pc, #276]	; (8000eb0 <HAL_UART_MspInit+0x184>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <HAL_UART_MspInit+0x184>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <HAL_UART_MspInit+0x188>)
 8000dd4:	f002 f95e 	bl	8003094 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000dda:	4a38      	ldr	r2, [pc, #224]	; (8000ebc <HAL_UART_MspInit+0x190>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000de0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e1a:	4827      	ldr	r0, [pc, #156]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e1c:	f000 fb3e 	bl	800149c <HAL_DMA_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000e26:	f7ff fe61 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e2e:	671a      	str	r2, [r3, #112]	; 0x70
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <HAL_UART_MspInit+0x18c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_UART_MspInit+0x198>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e42:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e46:	2240      	movs	r2, #64	; 0x40
 8000e48:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e56:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e78:	f000 fb10 	bl	800149c <HAL_DMA_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8000e82:	f7ff fe33 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_UART_MspInit+0x194>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2027      	movs	r0, #39	; 0x27
 8000e98:	f000 fab5 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e9c:	2027      	movs	r0, #39	; 0x27
 8000e9e:	f000 face 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	37a8      	adds	r7, #168	; 0xa8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	2000016c 	.word	0x2000016c
 8000ebc:	40026028 	.word	0x40026028
 8000ec0:	200001cc 	.word	0x200001cc
 8000ec4:	40026058 	.word	0x40026058

08000ec8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_UART_MspDeInit+0x4c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d117      	bne.n	8000f0a <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_UART_MspDeInit+0x50>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_UART_MspDeInit+0x50>)
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8000ee6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <HAL_UART_MspDeInit+0x54>)
 8000eec:	f002 fa7e 	bl	80033ec <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fb7f 	bl	80015f8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fb7a 	bl	80015f8 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000f04:	2027      	movs	r0, #39	; 0x27
 8000f06:	f000 faa8 	bl	800145a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004800 	.word	0x40004800
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f908 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000f70:	f000 fa8d 	bl	800148e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON2_Pin);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f002 fb75 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA1_Stream1_IRQHandler+0x10>)
 8000f8e:	f000 fc83 	bl	8001898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000016c 	.word	0x2000016c

08000f9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA1_Stream3_IRQHandler+0x10>)
 8000fa2:	f000 fc79 	bl	8001898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001cc 	.word	0x200001cc

08000fb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON1_Pin);
 8000fb4:	2020      	movs	r0, #32
 8000fb6:	f002 fb59 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <USART3_IRQHandler+0x10>)
 8000fc6:	f004 f9a5 	bl	8005314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000e8 	.word	0x200000e8

08000fd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fdc:	f002 fb46 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM6_DAC_IRQHandler+0x10>)
 8000fea:	f003 fcc8 	bl	800497e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000009c 	.word	0x2000009c

08000ff8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ETH_IRQHandler+0x10>)
 8000ffe:	f001 fa9d 	bl	800253c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20005b64 	.word	0x20005b64

0800100c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <ETH_WKUP_IRQHandler+0x10>)
 8001012:	f001 fa93 	bl	800253c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20005b64 	.word	0x20005b64

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d205      	bcs.n	800105c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <_sbrk+0x6c>)
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20050000 	.word	0x20050000
 8001080:	00004000 	.word	0x00004000
 8001084:	20002a70 	.word	0x20002a70
 8001088:	2000daf0 	.word	0x2000daf0
 800108c:	2000dae0 	.word	0x2000dae0

08001090 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d0:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010de:	f7ff ffd7 	bl	8001090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f011 fc1f 	bl	8012924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fa83 	bl	80005f0 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010f8:	08016edc 	.word	0x08016edc
  ldr r2, =_sbss
 80010fc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001100:	2000daf0 	.word	0x2000daf0

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>

08001106 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110a:	2003      	movs	r0, #3
 800110c:	f000 f970 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001110:	2000      	movs	r0, #0
 8001112:	f000 f805 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001116:	f7ff fdbf 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f999 	bl	8001476 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f953 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000008 	.word	0x20000008
 8001178:	20000010 	.word	0x20000010
 800117c:	2000000c 	.word	0x2000000c

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000010 	.word	0x20000010
 80011a4:	20002a74 	.word	0x20002a74

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20002a74 	.word	0x20002a74

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000010 	.word	0x20000010

08001208 <__NVIC_SetPriorityGrouping>:
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	4313      	orrs	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	05fa0000 	.word	0x05fa0000

08001250 <__NVIC_GetPriorityGrouping>:
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_DisableIRQ>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db12      	blt.n	80012e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	490a      	ldr	r1, [pc, #40]	; (80012ec <__NVIC_DisableIRQ+0x44>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	3320      	adds	r3, #32
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d4:	f3bf 8f4f 	dsb	sy
}
 80012d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012da:	f3bf 8f6f 	isb	sy
}
 80012de:	bf00      	nop
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff05 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff1a 	bl	8001250 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff0d 	bl	800126c <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff1d 	bl	80012a8 <__NVIC_DisableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff94 	bl	80013ac <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001492:	f7ff fafa 	bl	8000a8a <HAL_SYSTICK_Callback>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff fe7e 	bl	80011a8 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e099      	b.n	80015ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d8:	e00f      	b.n	80014fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014da:	f7ff fe65 	bl	80011a8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d908      	bls.n	80014fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e078      	b.n	80015ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e8      	bne.n	80014da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <HAL_DMA_Init+0x158>)
 8001514:	4013      	ands	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	2b04      	cmp	r3, #4
 8001552:	d107      	bne.n	8001564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4313      	orrs	r3, r2
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4313      	orrs	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f023 0307 	bic.w	r3, r3, #7
 800157a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2b04      	cmp	r3, #4
 800158c:	d117      	bne.n	80015be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb67 	bl	8001c74 <DMA_CheckFifoParam>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015ba:	2301      	movs	r3, #1
 80015bc:	e016      	b.n	80015ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fb1e 	bl	8001c08 <DMA_CalcBaseAndBitshift>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f010803f 	.word	0xf010803f

080015f8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e050      	b.n	80016ac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d101      	bne.n	800161a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001616:	2302      	movs	r3, #2
 8001618:	e048      	b.n	80016ac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2221      	movs	r2, #33	; 0x21
 8001658:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fad4 	bl	8001c08 <DMA_CalcBaseAndBitshift>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	223f      	movs	r2, #63	; 0x3f
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_DMA_Start_IT+0x26>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e048      	b.n	800176c <HAL_DMA_Start_IT+0xb8>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d137      	bne.n	800175e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fa52 	bl	8001bac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	223f      	movs	r2, #63	; 0x3f
 800170e:	409a      	lsls	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0216 	orr.w	r2, r2, #22
 8001722:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001732:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0208 	orr.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e005      	b.n	800176a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001766:	2302      	movs	r3, #2
 8001768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800176a:	7dfb      	ldrb	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001782:	f7ff fd11 	bl	80011a8 <HAL_GetTick>
 8001786:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d008      	beq.n	80017a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e052      	b.n	800184c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0216 	bic.w	r2, r2, #22
 80017b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <HAL_DMA_Abort+0x62>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0208 	bic.w	r2, r2, #8
 80017e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f6:	e013      	b.n	8001820 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f8:	f7ff fcd6 	bl	80011a8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b05      	cmp	r3, #5
 8001804:	d90c      	bls.n	8001820 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2203      	movs	r2, #3
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e015      	b.n	800184c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e4      	bne.n	80017f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	223f      	movs	r2, #63	; 0x3f
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d004      	beq.n	8001872 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00c      	b.n	800188c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2205      	movs	r2, #5
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80018a4:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <HAL_DMA_IRQHandler+0x248>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a8e      	ldr	r2, [pc, #568]	; (8001ae4 <HAL_DMA_IRQHandler+0x24c>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0a9b      	lsrs	r3, r3, #10
 80018b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2208      	movs	r2, #8
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d01a      	beq.n	8001904 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0204 	bic.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	2208      	movs	r2, #8
 80018f2:	409a      	lsls	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	2201      	movs	r2, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d012      	beq.n	800193a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2201      	movs	r2, #1
 8001928:	409a      	lsls	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	f043 0202 	orr.w	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	2204      	movs	r2, #4
 8001940:	409a      	lsls	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d012      	beq.n	8001970 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2204      	movs	r2, #4
 800195e:	409a      	lsls	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	f043 0204 	orr.w	r2, r3, #4
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2210      	movs	r2, #16
 8001976:	409a      	lsls	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d043      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03c      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	2210      	movs	r2, #16
 8001994:	409a      	lsls	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d018      	beq.n	80019da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
 80019c6:	e01f      	b.n	8001a08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01b      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
 80019d8:	e016      	b.n	8001a08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d107      	bne.n	80019f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0208 	bic.w	r2, r2, #8
 80019f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 808f 	beq.w	8001b38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8087 	beq.w	8001b38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2220      	movs	r2, #32
 8001a30:	409a      	lsls	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d136      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0216 	bic.w	r2, r2, #22
 8001a50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x1da>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0208 	bic.w	r2, r2, #8
 8001a80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	223f      	movs	r2, #63	; 0x3f
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07e      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
        }
        return;
 8001aae:	e079      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01d      	beq.n	8001afa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10d      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d031      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e02c      	b.n	8001b38 <HAL_DMA_IRQHandler+0x2a0>
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d023      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
 8001af8:	e01e      	b.n	8001b38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10f      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0210 	bic.w	r2, r2, #16
 8001b16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d032      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2205      	movs	r2, #5
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d307      	bcc.n	8001b80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f2      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x2cc>
 8001b7e:	e000      	b.n	8001b82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
 8001ba2:	e000      	b.n	8001ba6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ba4:	bf00      	nop
    }
  }
}
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b40      	cmp	r3, #64	; 0x40
 8001bd8:	d108      	bne.n	8001bec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bea:	e007      	b.n	8001bfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	60da      	str	r2, [r3, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3b10      	subs	r3, #16
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <DMA_CalcBaseAndBitshift+0x60>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <DMA_CalcBaseAndBitshift+0x64>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d908      	bls.n	8001c48 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <DMA_CalcBaseAndBitshift+0x68>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	1d1a      	adds	r2, r3, #4
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	659a      	str	r2, [r3, #88]	; 0x58
 8001c46:	e006      	b.n	8001c56 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <DMA_CalcBaseAndBitshift+0x68>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	aaaaaaab 	.word	0xaaaaaaab
 8001c6c:	08016c0c 	.word	0x08016c0c
 8001c70:	fffffc00 	.word	0xfffffc00

08001c74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11f      	bne.n	8001cce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d856      	bhi.n	8001d42 <DMA_CheckFifoParam+0xce>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <DMA_CheckFifoParam+0x28>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001cbf 	.word	0x08001cbf
 8001ca4:	08001cad 	.word	0x08001cad
 8001ca8:	08001d43 	.word	0x08001d43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d046      	beq.n	8001d46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cbc:	e043      	b.n	8001d46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc6:	d140      	bne.n	8001d4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ccc:	e03d      	b.n	8001d4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd6:	d121      	bne.n	8001d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d837      	bhi.n	8001d4e <DMA_CheckFifoParam+0xda>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <DMA_CheckFifoParam+0x70>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001cfb 	.word	0x08001cfb
 8001cec:	08001cf5 	.word	0x08001cf5
 8001cf0:	08001d0d 	.word	0x08001d0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf8:	e030      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d025      	beq.n	8001d52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d0a:	e022      	b.n	8001d52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d14:	d11f      	bne.n	8001d56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d1a:	e01c      	b.n	8001d56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d903      	bls.n	8001d2a <DMA_CheckFifoParam+0xb6>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d003      	beq.n	8001d30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d28:	e018      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2e:	e015      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d40:	e00b      	b.n	8001d5a <DMA_CheckFifoParam+0xe6>
      break;
 8001d42:	bf00      	nop
 8001d44:	e00a      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e008      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e006      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e004      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d52:	bf00      	nop
 8001d54:	e002      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop

08001d6c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001d7c:	4ba1      	ldr	r3, [pc, #644]	; (8002004 <HAL_ETH_Init+0x298>)
 8001d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e18e      	b.n	80020b0 <HAL_ETH_Init+0x344>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d111      	bne.n	8001dc2 <HAL_ETH_Init+0x56>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    ETH_InitCallbacksToDefault(heth);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f001 f95a 	bl	8003060 <ETH_InitCallbacksToDefault>

    if(heth->MspInitCallback == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <HAL_ETH_Init+0x4e>
    {
      /* Init the low level hardware : GPIO, CLOCK, NVIC. */
      heth->MspInitCallback = HAL_ETH_MspInit;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a94      	ldr	r2, [pc, #592]	; (8002008 <HAL_ETH_Init+0x29c>)
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    heth->MspInitCallback(heth);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
    HAL_ETH_MspInit(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b92      	ldr	r3, [pc, #584]	; (800200c <HAL_ETH_Init+0x2a0>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a91      	ldr	r2, [pc, #580]	; (800200c <HAL_ETH_Init+0x2a0>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b8f      	ldr	r3, [pc, #572]	; (800200c <HAL_ETH_Init+0x2a0>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dda:	4b8d      	ldr	r3, [pc, #564]	; (8002010 <HAL_ETH_Init+0x2a4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a8c      	ldr	r2, [pc, #560]	; (8002010 <HAL_ETH_Init+0x2a4>)
 8001de0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001de4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001de6:	4b8a      	ldr	r3, [pc, #552]	; (8002010 <HAL_ETH_Init+0x2a4>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4988      	ldr	r1, [pc, #544]	; (8002010 <HAL_ETH_Init+0x2a4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e0a:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0c:	f7ff f9cc 	bl	80011a8 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e12:	e011      	b.n	8001e38 <HAL_ETH_Init+0xcc>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001e14:	f7ff f9c8 	bl	80011a8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e22:	d909      	bls.n	8001e38 <HAL_ETH_Init+0xcc>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e13b      	b.n	80020b0 <HAL_ETH_Init+0x344>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e4      	bne.n	8001e14 <HAL_ETH_Init+0xa8>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f023 031c 	bic.w	r3, r3, #28
 8001e58:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e5a:	f002 f915 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8001e5e:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	4a6c      	ldr	r2, [pc, #432]	; (8002014 <HAL_ETH_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d908      	bls.n	8001e7a <HAL_ETH_Init+0x10e>
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	4a6b      	ldr	r2, [pc, #428]	; (8002018 <HAL_ETH_Init+0x2ac>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d804      	bhi.n	8001e7a <HAL_ETH_Init+0x10e>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e027      	b.n	8001eca <HAL_ETH_Init+0x15e>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_ETH_Init+0x2ac>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d908      	bls.n	8001e94 <HAL_ETH_Init+0x128>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_ETH_Init+0x298>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d204      	bcs.n	8001e94 <HAL_ETH_Init+0x128>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f043 030c 	orr.w	r3, r3, #12
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e01a      	b.n	8001eca <HAL_ETH_Init+0x15e>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4a5b      	ldr	r2, [pc, #364]	; (8002004 <HAL_ETH_Init+0x298>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d303      	bcc.n	8001ea4 <HAL_ETH_Init+0x138>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	4a5f      	ldr	r2, [pc, #380]	; (800201c <HAL_ETH_Init+0x2b0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d911      	bls.n	8001ec8 <HAL_ETH_Init+0x15c>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	4a5d      	ldr	r2, [pc, #372]	; (800201c <HAL_ETH_Init+0x2b0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d908      	bls.n	8001ebe <HAL_ETH_Init+0x152>
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_ETH_Init+0x2b4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d804      	bhi.n	8001ebe <HAL_ETH_Init+0x152>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	e005      	b.n	8001eca <HAL_ETH_Init+0x15e>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e000      	b.n	8001eca <HAL_ETH_Init+0x15e>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ec8:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001ed2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fc12 	bl	8002702 <HAL_ETH_WritePHYRegister>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <HAL_ETH_Init+0x190>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fdc8 	bl	8002a80 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d9      	b.n	80020b0 <HAL_ETH_Init+0x344>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001efc:	20ff      	movs	r0, #255	; 0xff
 8001efe:	f7ff f95f 	bl	80011c0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a7 	beq.w	800205a <HAL_ETH_Init+0x2ee>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f94c 	bl	80011a8 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	461a      	mov	r2, r3
 8001f18:	2101      	movs	r1, #1
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fb89 	bl	8002632 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001f20:	f7ff f942 	bl	80011a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d90f      	bls.n	8001f52 <HAL_ETH_Init+0x1e6>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f36:	6939      	ldr	r1, [r7, #16]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fda1 	bl	8002a80 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0ae      	b.n	80020b0 <HAL_ETH_Init+0x344>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0da      	beq.n	8001f12 <HAL_ETH_Init+0x1a6>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fbcd 	bl	8002702 <HAL_ETH_WritePHYRegister>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_ETH_Init+0x21a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fd83 	bl	8002a80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f82:	2301      	movs	r3, #1
 8001f84:	e094      	b.n	80020b0 <HAL_ETH_Init+0x344>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f86:	f7ff f90f 	bl	80011a8 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	461a      	mov	r2, r3
 8001f92:	2101      	movs	r1, #1
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fb4c 	bl	8002632 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f9a:	f7ff f905 	bl	80011a8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d90f      	bls.n	8001fcc <HAL_ETH_Init+0x260>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fd64 	bl	8002a80 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e071      	b.n	80020b0 <HAL_ETH_Init+0x344>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0da      	beq.n	8001f8c <HAL_ETH_Init+0x220>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2110      	movs	r1, #16
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fb27 	bl	8002632 <HAL_ETH_ReadPHYRegister>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01c      	beq.n	8002024 <HAL_ETH_Init+0x2b8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fee:	6939      	ldr	r1, [r7, #16]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fd45 	bl	8002a80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ffe:	2301      	movs	r3, #1
 8002000:	e056      	b.n	80020b0 <HAL_ETH_Init+0x344>
 8002002:	bf00      	nop
 8002004:	03938700 	.word	0x03938700
 8002008:	08006829 	.word	0x08006829
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	01312cff 	.word	0x01312cff
 8002018:	02160ebf 	.word	0x02160ebf
 800201c:	05f5e0ff 	.word	0x05f5e0ff
 8002020:	08f0d17f 	.word	0x08f0d17f
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_ETH_Init+0x2cc>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e002      	b.n	800203e <HAL_ETH_Init+0x2d2>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_ETH_Init+0x2e4>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	e026      	b.n	800209e <HAL_ETH_Init+0x332>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e021      	b.n	800209e <HAL_ETH_Init+0x332>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800206a:	4313      	orrs	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	2100      	movs	r1, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fb45 	bl	8002702 <HAL_ETH_WritePHYRegister>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_ETH_Init+0x32a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002082:	6939      	ldr	r1, [r7, #16]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fcfb 	bl	8002a80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00c      	b.n	80020b0 <HAL_ETH_Init+0x344>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002096:	f640 70ff 	movw	r0, #4095	; 0xfff
 800209a:	f7ff f891 	bl	80011c0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fced 	bl	8002a80 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ETH_DMATxDescListInit+0x20>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e051      	b.n	800217c <HAL_ETH_DMATxDescListInit+0xc4>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e030      	b.n	8002156 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002104:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	461a      	mov	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d208      	bcs.n	800214a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	461a      	mov	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	e002      	b.n	8002150 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3ca      	bcc.n	80020f4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002168:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_ETH_DMARxDescListInit+0x20>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e055      	b.n	8002254 <HAL_ETH_DMARxDescListInit+0xcc>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e034      	b.n	800222e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	015b      	lsls	r3, r3, #5
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4413      	add	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021d4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80021dc:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3b01      	subs	r3, #1
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	d208      	bcs.n	8002222 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	015b      	lsls	r3, r3, #5
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	4413      	add	r3, r2
 800221a:	461a      	mov	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	e002      	b.n	8002228 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3c6      	bcc.n	80021c4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002240:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_ETH_TransmitFrame+0x24>
 8002280:	2302      	movs	r3, #2
 8002282:	e0cc      	b.n	800241e <HAL_ETH_TransmitFrame+0x1be>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0b7      	b.n	800241e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da09      	bge.n	80022cc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2212      	movs	r2, #18
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0a8      	b.n	800241e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d915      	bls.n	8002302 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_ETH_TransmitFrame+0x1cc>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0a9b      	lsrs	r3, r3, #10
 80022e0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_ETH_TransmitFrame+0x1cc>)
 80022e6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e001      	b.n	8002306 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d11c      	bne.n	8002346 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800231a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002326:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002336:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
 8002344:	e04b      	b.n	80023de <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e044      	b.n	80023d6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800235a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002370:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800237a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3b01      	subs	r3, #1
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d116      	bne.n	80023b4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002394:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <HAL_ETH_TransmitFrame+0x1d0>)
 800239a:	fb03 f202 	mul.w	r2, r3, r2
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80023a6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80023b2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023c2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	3301      	adds	r3, #1
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3b6      	bcc.n	800234c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	461a      	mov	r2, r3
 80023fa:	2304      	movs	r3, #4
 80023fc:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002406:	461a      	mov	r2, r3
 8002408:	2300      	movs	r3, #0
 800240a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	ac02b00b 	.word	0xac02b00b
 8002430:	fffffa0c 	.word	0xfffffa0c

08002434 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ETH_GetReceivedFrame+0x1a>
 800244a:	2302      	movs	r3, #2
 800244c:	e070      	b.n	8002530 <HAL_ETH_GetReceivedFrame+0xfc>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db5a      	blt.n	800251e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d030      	beq.n	80024d8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	2b01      	cmp	r3, #1
 8002486:	d103      	bne.n	8002490 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80024a4:	3b04      	subs	r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e02b      	b.n	8002530 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	461a      	mov	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
 8002506:	e00a      	b.n	800251e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d113      	bne.n	800257e <HAL_ETH_IRQHandler+0x42>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002566:	461a      	mov	r2, r3
 8002568:	2340      	movs	r3, #64	; 0x40
 800256a:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	e01b      	b.n	80025b6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d112      	bne.n	80025b6 <HAL_ETH_IRQHandler+0x7a>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	461a      	mov	r2, r3
 80025a2:	2301      	movs	r3, #1
 80025a4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d8:	d113      	bne.n	8002602 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025f0:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	460b      	mov	r3, r1
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b82      	cmp	r3, #130	; 0x82
 8002652:	d101      	bne.n	8002658 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
 8002656:	e050      	b.n	80026fa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2282      	movs	r2, #130	; 0x82
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 031c 	and.w	r3, r3, #28
 800266e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8a1b      	ldrh	r3, [r3, #16]
 8002674:	02db      	lsls	r3, r3, #11
 8002676:	b29b      	uxth	r3, r3
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0302 	bic.w	r3, r3, #2
 8002692:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026a4:	f7fe fd80 	bl	80011a8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026aa:	e015      	b.n	80026d8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026ac:	f7fe fd7c 	bl	80011a8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ba:	d309      	bcc.n	80026d0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e014      	b.n	80026fa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e4      	bne.n	80026ac <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	460b      	mov	r3, r1
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b42      	cmp	r3, #66	; 0x42
 8002722:	d101      	bne.n	8002728 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
 8002726:	e04e      	b.n	80027c6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2242      	movs	r2, #66	; 0x42
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 031c 	and.w	r3, r3, #28
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8a1b      	ldrh	r3, [r3, #16]
 8002744:	02db      	lsls	r3, r3, #11
 8002746:	b29b      	uxth	r3, r3
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800277e:	f7fe fd13 	bl	80011a8 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002784:	e015      	b.n	80027b2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002786:	f7fe fd0f 	bl	80011a8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d309      	bcc.n	80027aa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e00d      	b.n	80027c6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e4      	bne.n	8002786 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_ETH_Start+0x16>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e01f      	b.n	8002824 <HAL_ETH_Start+0x56>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb41 	bl	8002e7c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fb78 	bl	8002ef0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fc07 	bl	8003014 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fbac 	bl	8002f64 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fbd5 	bl	8002fbc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_ETH_Stop+0x16>
 800283e:	2302      	movs	r3, #2
 8002840:	e01f      	b.n	8002882 <HAL_ETH_Stop+0x56>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fb9c 	bl	8002f90 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fbc5 	bl	8002fe8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fb63 	bl	8002f2a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fbd5 	bl	8003014 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fb23 	bl	8002eb6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_ETH_ConfigMAC+0x1c>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0e4      	b.n	8002a72 <HAL_ETH_ConfigMAC+0x1e6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80b1 	beq.w	8002a22 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <HAL_ETH_ConfigMAC+0x1f0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80028d8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80028de:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80028e4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80028ea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80028f0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80028f6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80028fc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002902:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002908:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800290e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002914:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800291a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002932:	2001      	movs	r0, #1
 8002934:	f7fe fc44 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002948:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800294e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002954:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800295a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002960:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002966:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002972:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002974:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800297e:	2001      	movs	r0, #1
 8002980:	f7fe fc1e 	bl	80011c0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002994:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800299e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029ae:	4013      	ands	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80029c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80029c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80029ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80029d4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7fe fbe7 	bl	80011c0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7fe fbd4 	bl	80011c0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	61da      	str	r2, [r3, #28]
 8002a20:	e01e      	b.n	8002a60 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a30:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f7fe fbb4 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	ff20810f 	.word	0xff20810f

08002a80 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0b0      	sub	sp, #192	; 0xc0
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
 8002acc:	e001      	b.n	8002ad2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002adc:	2300      	movs	r3, #0
 8002ade:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002aec:	2340      	movs	r3, #64	; 0x40
 8002aee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b58:	4ba9      	ldr	r3, [pc, #676]	; (8002e00 <ETH_MACDMAConfig+0x380>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b64:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002b68:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002b6c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b72:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002b76:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002b7a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002b80:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002b84:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002b88:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002b8c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002b90:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002b94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ba8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7fe fb03 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bc8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002bcc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002bd2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002bd8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002bde:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002be4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002be8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002bf0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bf2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fe fade 	bl	80011c0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c0c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c16:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c20:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c30:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c34:	4013      	ands	r3, r2
 8002c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c3e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c44:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c4a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c50:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c56:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c5c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c70:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7fe fa9f 	bl	80011c0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c8a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c8c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002c90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f7fe fa8a 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cb4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cc8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <ETH_MACDMAConfig+0x384>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d1c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d20:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d22:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d24:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d26:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d28:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d2a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d2c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d2e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d30:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d32:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d34:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d38:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d3c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d50:	461a      	mov	r2, r3
 8002d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d56:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f7fe fa2a 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d74:	461a      	mov	r2, r3
 8002d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d7a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d80:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002d84:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d88:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002d8c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d90:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002d92:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d96:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002da0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002da4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7fe fa03 	bl	80011c0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dc8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d10b      	bne.n	8002dea <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <ETH_MACDMAConfig+0x388>)
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002de8:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	461a      	mov	r2, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f80a 	bl	8002e0c <ETH_MACAddressConfig>
}
 8002df8:	bf00      	nop
 8002dfa:	37c0      	adds	r7, #192	; 0xc0
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	ff20810f 	.word	0xff20810f
 8002e04:	f8de3f23 	.word	0xf8de3f23
 8002e08:	00010040 	.word	0x00010040

08002e0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3305      	adds	r3, #5
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	3204      	adds	r2, #4
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <ETH_MACAddressConfig+0x68>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3303      	adds	r3, #3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	061a      	lsls	r2, r3, #24
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3302      	adds	r3, #2
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	4313      	orrs	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <ETH_MACAddressConfig+0x6c>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	6013      	str	r3, [r2, #0]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40028040 	.word	0x40028040
 8002e78:	40028044 	.word	0x40028044

08002e7c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0208 	orr.w	r2, r2, #8
 8002e96:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f7fe f98d 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7fe f970 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0204 	orr.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7fe f953 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fe f936 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f82:	6193      	str	r3, [r2, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fae:	6193      	str	r3, [r2, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fda:	6193      	str	r3, [r2, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	f023 0302 	bic.w	r3, r3, #2
 8003002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003006:	6193      	str	r3, [r2, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003032:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003036:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003044:	2001      	movs	r0, #1
 8003046:	f7fe f8bb 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003054:	6193      	str	r3, [r2, #24]
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <ETH_InitCallbacksToDefault>:

#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
static void ETH_InitCallbacksToDefault(ETH_HandleTypeDef *heth)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Init the ETH Callback settings */
  heth->TxCpltCallback       = HAL_ETH_TxCpltCallback; /* Legacy weak TxCpltCallback   */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <ETH_InitCallbacksToDefault+0x28>)
 800306c:	649a      	str	r2, [r3, #72]	; 0x48
  heth->RxCpltCallback       = HAL_ETH_RxCpltCallback; /* Legacy weak RxCpltCallback   */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <ETH_InitCallbacksToDefault+0x2c>)
 8003072:	64da      	str	r2, [r3, #76]	; 0x4c
  heth->DMAErrorCallback     = HAL_ETH_ErrorCallback;  /* Legacy weak DMAErrorCallback */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a06      	ldr	r2, [pc, #24]	; (8003090 <ETH_InitCallbacksToDefault+0x30>)
 8003078:	651a      	str	r2, [r3, #80]	; 0x50
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	0800260b 	.word	0x0800260b
 800308c:	08000a9b 	.word	0x08000a9b
 8003090:	0800261f 	.word	0x0800261f

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e175      	b.n	80033a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f040 8164 	bne.w	800339a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d005      	beq.n	80030ea <HAL_GPIO_Init+0x56>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d130      	bne.n	800314c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 0201 	and.w	r2, r3, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b03      	cmp	r3, #3
 8003156:	d017      	beq.n	8003188 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d123      	bne.n	80031dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	08da      	lsrs	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	220f      	movs	r2, #15
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80be 	beq.w	800339a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321e:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_GPIO_Init+0x324>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	4a65      	ldr	r2, [pc, #404]	; (80033b8 <HAL_GPIO_Init+0x324>)
 8003224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003228:	6453      	str	r3, [r2, #68]	; 0x44
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_GPIO_Init+0x324>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003236:	4a61      	ldr	r2, [pc, #388]	; (80033bc <HAL_GPIO_Init+0x328>)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_GPIO_Init+0x32c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d037      	beq.n	80032d2 <HAL_GPIO_Init+0x23e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a57      	ldr	r2, [pc, #348]	; (80033c4 <HAL_GPIO_Init+0x330>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d031      	beq.n	80032ce <HAL_GPIO_Init+0x23a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a56      	ldr	r2, [pc, #344]	; (80033c8 <HAL_GPIO_Init+0x334>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02b      	beq.n	80032ca <HAL_GPIO_Init+0x236>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a55      	ldr	r2, [pc, #340]	; (80033cc <HAL_GPIO_Init+0x338>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d025      	beq.n	80032c6 <HAL_GPIO_Init+0x232>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a54      	ldr	r2, [pc, #336]	; (80033d0 <HAL_GPIO_Init+0x33c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01f      	beq.n	80032c2 <HAL_GPIO_Init+0x22e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a53      	ldr	r2, [pc, #332]	; (80033d4 <HAL_GPIO_Init+0x340>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d019      	beq.n	80032be <HAL_GPIO_Init+0x22a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_GPIO_Init+0x344>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0x226>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_GPIO_Init+0x348>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00d      	beq.n	80032b6 <HAL_GPIO_Init+0x222>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_GPIO_Init+0x34c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x21e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <HAL_GPIO_Init+0x350>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_GPIO_Init+0x21a>
 80032aa:	2309      	movs	r3, #9
 80032ac:	e012      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032ae:	230a      	movs	r3, #10
 80032b0:	e010      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032b2:	2308      	movs	r3, #8
 80032b4:	e00e      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032b6:	2307      	movs	r3, #7
 80032b8:	e00c      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032ba:	2306      	movs	r3, #6
 80032bc:	e00a      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032be:	2305      	movs	r3, #5
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x240>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	; (80033bc <HAL_GPIO_Init+0x328>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_GPIO_Init+0x354>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_GPIO_Init+0x354>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <HAL_GPIO_Init+0x354>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <HAL_GPIO_Init+0x354>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_GPIO_Init+0x354>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <HAL_GPIO_Init+0x354>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x354>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <HAL_GPIO_Init+0x354>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f ae86 	bls.w	80030b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40021400 	.word	0x40021400
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40021c00 	.word	0x40021c00
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40022400 	.word	0x40022400
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e0d9      	b.n	80035bc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003408:	2201      	movs	r2, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	f040 80c9 	bne.w	80035b6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003424:	4a6b      	ldr	r2, [pc, #428]	; (80035d4 <HAL_GPIO_DeInit+0x1e8>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220f      	movs	r2, #15
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a63      	ldr	r2, [pc, #396]	; (80035d8 <HAL_GPIO_DeInit+0x1ec>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d037      	beq.n	80034be <HAL_GPIO_DeInit+0xd2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a62      	ldr	r2, [pc, #392]	; (80035dc <HAL_GPIO_DeInit+0x1f0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d031      	beq.n	80034ba <HAL_GPIO_DeInit+0xce>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_GPIO_DeInit+0x1f4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d02b      	beq.n	80034b6 <HAL_GPIO_DeInit+0xca>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a60      	ldr	r2, [pc, #384]	; (80035e4 <HAL_GPIO_DeInit+0x1f8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d025      	beq.n	80034b2 <HAL_GPIO_DeInit+0xc6>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a5f      	ldr	r2, [pc, #380]	; (80035e8 <HAL_GPIO_DeInit+0x1fc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01f      	beq.n	80034ae <HAL_GPIO_DeInit+0xc2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <HAL_GPIO_DeInit+0x200>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d019      	beq.n	80034aa <HAL_GPIO_DeInit+0xbe>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_GPIO_DeInit+0x204>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_GPIO_DeInit+0xba>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_GPIO_DeInit+0x208>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00d      	beq.n	80034a2 <HAL_GPIO_DeInit+0xb6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <HAL_GPIO_DeInit+0x20c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <HAL_GPIO_DeInit+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a5a      	ldr	r2, [pc, #360]	; (80035fc <HAL_GPIO_DeInit+0x210>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_GPIO_DeInit+0xae>
 8003496:	2309      	movs	r3, #9
 8003498:	e012      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 800349a:	230a      	movs	r3, #10
 800349c:	e010      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 800349e:	2308      	movs	r3, #8
 80034a0:	e00e      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034a2:	2307      	movs	r3, #7
 80034a4:	e00c      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034a6:	2306      	movs	r3, #6
 80034a8:	e00a      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034aa:	2305      	movs	r3, #5
 80034ac:	e008      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034ae:	2304      	movs	r3, #4
 80034b0:	e006      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034b2:	2303      	movs	r3, #3
 80034b4:	e004      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_GPIO_DeInit+0xd4>
 80034be:	2300      	movs	r3, #0
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	f002 0203 	and.w	r2, r2, #3
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	4093      	lsls	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d132      	bne.n	8003536 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034d0:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	4949      	ldr	r1, [pc, #292]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034da:	4013      	ands	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034de:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	4946      	ldr	r1, [pc, #280]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034ec:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4942      	ldr	r1, [pc, #264]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	493f      	ldr	r1, [pc, #252]	; (8003600 <HAL_GPIO_DeInit+0x214>)
 8003504:	4013      	ands	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003518:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <HAL_GPIO_DeInit+0x1e8>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	43da      	mvns	r2, r3
 8003528:	482a      	ldr	r0, [pc, #168]	; (80035d4 <HAL_GPIO_DeInit+0x1e8>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	400a      	ands	r2, r1
 8003530:	3302      	adds	r3, #2
 8003532:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2103      	movs	r1, #3
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	08d2      	lsrs	r2, r2, #3
 800356c:	4019      	ands	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3208      	adds	r2, #8
 8003572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2103      	movs	r1, #3
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	2101      	movs	r1, #1
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2103      	movs	r1, #3
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	401a      	ands	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	f67f af22 	bls.w	8003408 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40022400 	.word	0x40022400
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43d9      	mvns	r1, r3
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	400b      	ands	r3, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	4618      	mov	r0, r3
 800368c:	f00f f814 	bl	80126b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013c00 	.word	0x40013c00

0800369c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007000 	.word	0x40007000

080036bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_PWREx_EnableOverDrive+0x98>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_PWREx_EnableOverDrive+0x98>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_PWREx_EnableOverDrive+0x98>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ea:	f7fd fd5d 	bl	80011a8 <HAL_GetTick>
 80036ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036f0:	e009      	b.n	8003706 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036f2:	f7fd fd59 	bl	80011a8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003700:	d901      	bls.n	8003706 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e022      	b.n	800374c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d1ee      	bne.n	80036f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <HAL_PWREx_EnableOverDrive+0x9c>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003720:	f7fd fd42 	bl	80011a8 <HAL_GetTick>
 8003724:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003726:	e009      	b.n	800373c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003728:	f7fd fd3e 	bl	80011a8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003736:	d901      	bls.n	800373c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e007      	b.n	800374c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_PWREx_EnableOverDrive+0x9c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003748:	d1ee      	bne.n	8003728 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e291      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8087 	beq.w	800388e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003780:	4b96      	ldr	r3, [pc, #600]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b04      	cmp	r3, #4
 800378a:	d00c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378c:	4b93      	ldr	r3, [pc, #588]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d112      	bne.n	80037be <HAL_RCC_OscConfig+0x62>
 8003798:	4b90      	ldr	r3, [pc, #576]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d10b      	bne.n	80037be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a6:	4b8d      	ldr	r3, [pc, #564]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d06c      	beq.n	800388c <HAL_RCC_OscConfig+0x130>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d168      	bne.n	800388c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e26b      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x7a>
 80037c8:	4b84      	ldr	r3, [pc, #528]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a83      	ldr	r2, [pc, #524]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e02e      	b.n	8003834 <HAL_RCC_OscConfig+0xd8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x9c>
 80037de:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7e      	ldr	r2, [pc, #504]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a7b      	ldr	r2, [pc, #492]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80037f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e01d      	b.n	8003834 <HAL_RCC_OscConfig+0xd8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0xc0>
 8003802:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a75      	ldr	r2, [pc, #468]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	4b73      	ldr	r3, [pc, #460]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a72      	ldr	r2, [pc, #456]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0xd8>
 800381c:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6e      	ldr	r2, [pc, #440]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b6c      	ldr	r3, [pc, #432]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6b      	ldr	r2, [pc, #428]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800382e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fcb4 	bl	80011a8 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fd fcb0 	bl	80011a8 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e21f      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	4b61      	ldr	r3, [pc, #388]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0xe8>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fca0 	bl	80011a8 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386c:	f7fd fc9c 	bl	80011a8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e20b      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387e:	4b57      	ldr	r3, [pc, #348]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x110>
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d069      	beq.n	800396e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389a:	4b50      	ldr	r3, [pc, #320]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a6:	4b4d      	ldr	r3, [pc, #308]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d11c      	bne.n	80038ec <HAL_RCC_OscConfig+0x190>
 80038b2:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_RCC_OscConfig+0x17a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e1df      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b41      	ldr	r3, [pc, #260]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	493d      	ldr	r1, [pc, #244]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	e040      	b.n	800396e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d023      	beq.n	800393c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f4:	4b39      	ldr	r3, [pc, #228]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a38      	ldr	r2, [pc, #224]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fc52 	bl	80011a8 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fd fc4e 	bl	80011a8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1bd      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4929      	ldr	r1, [pc, #164]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
 800393a:	e018      	b.n	800396e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393c:	4b27      	ldr	r3, [pc, #156]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a26      	ldr	r2, [pc, #152]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fc2e 	bl	80011a8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003950:	f7fd fc2a 	bl	80011a8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e199      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d038      	beq.n	80039ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d019      	beq.n	80039b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd fc0b 	bl	80011a8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fd fc07 	bl	80011a8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e176      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x23a>
 80039b4:	e01a      	b.n	80039ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80039b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ba:	4a08      	ldr	r2, [pc, #32]	; (80039dc <HAL_RCC_OscConfig+0x280>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7fd fbf1 	bl	80011a8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fd fbed 	bl	80011a8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d903      	bls.n	80039e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e15c      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
 80039dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b91      	ldr	r3, [pc, #580]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ee      	bne.n	80039ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a4 	beq.w	8003b42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b8b      	ldr	r3, [pc, #556]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a87      	ldr	r2, [pc, #540]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a22:	4b82      	ldr	r3, [pc, #520]	; (8003c2c <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7e      	ldr	r2, [pc, #504]	; (8003c2c <HAL_RCC_OscConfig+0x4d0>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fbb5 	bl	80011a8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fd fbb1 	bl	80011a8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e120      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a54:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <HAL_RCC_OscConfig+0x4d0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x31a>
 8003a68:	4b6f      	ldr	r3, [pc, #444]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a6e      	ldr	r2, [pc, #440]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70
 8003a74:	e02d      	b.n	8003ad2 <HAL_RCC_OscConfig+0x376>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x33c>
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a69      	ldr	r2, [pc, #420]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a66      	ldr	r2, [pc, #408]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x376>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x35e>
 8003aa0:	4b61      	ldr	r3, [pc, #388]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a60      	ldr	r2, [pc, #384]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x376>
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a5a      	ldr	r2, [pc, #360]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	4b58      	ldr	r3, [pc, #352]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd fb65 	bl	80011a8 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fd fb61 	bl	80011a8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0ce      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x386>
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fd fb4f 	bl	80011a8 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fb4b 	bl	80011a8 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0b8      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	4b40      	ldr	r3, [pc, #256]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b36:	4b3c      	ldr	r3, [pc, #240]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a3b      	ldr	r2, [pc, #236]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80a4 	beq.w	8003c94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d06b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d149      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a30      	ldr	r2, [pc, #192]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fb1c 	bl	80011a8 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fd fb18 	bl	80011a8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e087      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	3b01      	subs	r3, #1
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bbe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd faec 	bl	80011a8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd fae8 	bl	80011a8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e057      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x478>
 8003bf2:	e04f      	b.n	8003c94 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fad2 	bl	80011a8 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd face 	bl	80011a8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e03d      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4ac>
 8003c26:	e035      	b.n	8003c94 <HAL_RCC_OscConfig+0x538>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x544>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d028      	beq.n	8003c90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d121      	bne.n	8003c90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d11a      	bne.n	8003c90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d111      	bne.n	8003c90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d0      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 020f 	bic.w	r2, r3, #15
 8003cd2:	4965      	ldr	r1, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e073      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4936      	ldr	r1, [pc, #216]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd fa06 	bl	80011a8 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fd fa02 	bl	80011a8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e053      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d210      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 020f 	bic.w	r2, r3, #15
 8003dde:	4922      	ldr	r1, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1cc>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1d0>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1d4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd f962 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08016bf4 	.word	0x08016bf4
 8003e74:	20000008 	.word	0x20000008
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b094      	sub	sp, #80	; 0x50
 8003e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	647b      	str	r3, [r7, #68]	; 0x44
 8003e88:	2300      	movs	r3, #0
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e94:	4b79      	ldr	r3, [pc, #484]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x40>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	f200 80e1 	bhi.w	8004068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eae:	e0db      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b73      	ldr	r3, [pc, #460]	; (8004080 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb4:	e0db      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb6:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_RCC_GetSysClockFreq+0x208>)
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eba:	e0d8      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ebc:	4b6f      	ldr	r3, [pc, #444]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ec6:	4b6d      	ldr	r3, [pc, #436]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d063      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	2200      	movs	r2, #0
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4621      	mov	r1, r4
 8003f08:	1a51      	subs	r1, r2, r1
 8003f0a:	6139      	str	r1, [r7, #16]
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f20:	4659      	mov	r1, fp
 8003f22:	018b      	lsls	r3, r1, #6
 8003f24:	4651      	mov	r1, sl
 8003f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	018a      	lsls	r2, r1, #6
 8003f2e:	4651      	mov	r1, sl
 8003f30:	ebb2 0801 	subs.w	r8, r2, r1
 8003f34:	4659      	mov	r1, fp
 8003f36:	eb63 0901 	sbc.w	r9, r3, r1
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4699      	mov	r9, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	eb18 0303 	adds.w	r3, r8, r3
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	eb49 0303 	adc.w	r3, r9, r3
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	024b      	lsls	r3, r1, #9
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f78:	4621      	mov	r1, r4
 8003f7a:	024a      	lsls	r2, r1, #9
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f8c:	f7fc f998 	bl	80002c0 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f98:	e058      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0159      	lsls	r1, r3, #5
 8003fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc6:	0150      	lsls	r0, r2, #5
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fec:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	464b      	mov	r3, r9
 8004010:	eb45 0303 	adc.w	r3, r5, r3
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004022:	4629      	mov	r1, r5
 8004024:	028b      	lsls	r3, r1, #10
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800402c:	4621      	mov	r1, r4
 800402e:	028a      	lsls	r2, r1, #10
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004036:	2200      	movs	r2, #0
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	61fa      	str	r2, [r7, #28]
 800403c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004040:	f7fc f93e 	bl	80002c0 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800405c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800405e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004066:	e002      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetSysClockFreq+0x204>)
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800406c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004070:	4618      	mov	r0, r3
 8004072:	3750      	adds	r7, #80	; 0x50
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	00f42400 	.word	0x00f42400
 8004084:	007a1200 	.word	0x007a1200

08004088 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_RCC_GetHCLKFreq+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000008 	.word	0x20000008

080040a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a4:	f7ff fff0 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	0a9b      	lsrs	r3, r3, #10
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	08016c04 	.word	0x08016c04

080040c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040cc:	f7ff ffdc 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0b5b      	lsrs	r3, r3, #13
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	08016c04 	.word	0x08016c04

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d012      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004118:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004122:	6093      	str	r3, [r2, #8]
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	4964      	ldr	r1, [pc, #400]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d017      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800414a:	4b5d      	ldr	r3, [pc, #372]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	4959      	ldr	r1, [pc, #356]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d017      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004186:	4b4e      	ldr	r3, [pc, #312]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	494a      	ldr	r1, [pc, #296]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808b 	beq.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d4:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	4a39      	ldr	r2, [pc, #228]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041de:	6413      	str	r3, [r2, #64]	; 0x40
 80041e0:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fc ffd6 	bl	80011a8 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fc ffd2 	bl	80011a8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e357      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800421e:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d035      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d02e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004264:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d114      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fc ff9a 	bl	80011a8 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fc ff96 	bl	80011a8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e319      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ee      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a6:	d111      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042b6:	400b      	ands	r3, r1
 80042b8:	4901      	ldr	r1, [pc, #4]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
 80042be:	e00b      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	0ffffcff 	.word	0x0ffffcff
 80042cc:	4baa      	ldr	r3, [pc, #680]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4aa9      	ldr	r2, [pc, #676]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042d6:	6093      	str	r3, [r2, #8]
 80042d8:	4ba7      	ldr	r3, [pc, #668]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	49a4      	ldr	r1, [pc, #656]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042f6:	4ba0      	ldr	r3, [pc, #640]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	4a9e      	ldr	r2, [pc, #632]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004306:	4b9c      	ldr	r3, [pc, #624]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004308:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	4999      	ldr	r1, [pc, #612]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004324:	4b94      	ldr	r3, [pc, #592]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004332:	4991      	ldr	r1, [pc, #580]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004346:	4b8c      	ldr	r3, [pc, #560]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004354:	4988      	ldr	r1, [pc, #544]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004368:	4b83      	ldr	r3, [pc, #524]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004376:	4980      	ldr	r1, [pc, #512]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800438a:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4977      	ldr	r1, [pc, #476]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ac:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	496f      	ldr	r1, [pc, #444]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ce:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f023 020c 	bic.w	r2, r3, #12
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043dc:	4966      	ldr	r1, [pc, #408]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f0:	4b61      	ldr	r3, [pc, #388]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	495e      	ldr	r1, [pc, #376]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004412:	4b59      	ldr	r3, [pc, #356]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	4955      	ldr	r1, [pc, #340]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004434:	4b50      	ldr	r3, [pc, #320]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	494d      	ldr	r1, [pc, #308]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	4944      	ldr	r1, [pc, #272]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004478:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	493c      	ldr	r1, [pc, #240]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800449a:	4b37      	ldr	r3, [pc, #220]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	4933      	ldr	r1, [pc, #204]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044bc:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ca:	492b      	ldr	r1, [pc, #172]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d011      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ec:	4922      	ldr	r1, [pc, #136]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	4912      	ldr	r1, [pc, #72]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d006      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80d9 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800456c:	4b02      	ldr	r3, [pc, #8]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a01      	ldr	r2, [pc, #4]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004576:	e001      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004578:	40023800 	.word	0x40023800
 800457c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457e:	f7fc fe13 	bl	80011a8 <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004586:	f7fc fe0f 	bl	80011a8 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	; 0x64
 8004592:	d901      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e194      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004598:	4b6c      	ldr	r3, [pc, #432]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d021      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11d      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045b8:	4b64      	ldr	r3, [pc, #400]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	0e1b      	lsrs	r3, r3, #24
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	019a      	lsls	r2, r3, #6
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	071b      	lsls	r3, r3, #28
 80045ec:	4957      	ldr	r1, [pc, #348]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02e      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461e:	d129      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004620:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004634:	0f1b      	lsrs	r3, r3, #28
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	019a      	lsls	r2, r3, #6
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	431a      	orrs	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	071b      	lsls	r3, r3, #28
 8004654:	493d      	ldr	r1, [pc, #244]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800465c:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004662:	f023 021f 	bic.w	r2, r3, #31
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	3b01      	subs	r3, #1
 800466c:	4937      	ldr	r1, [pc, #220]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01d      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004680:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	0e1b      	lsrs	r3, r3, #24
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800468e:	4b2f      	ldr	r3, [pc, #188]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004694:	0f1b      	lsrs	r3, r3, #28
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	019a      	lsls	r2, r3, #6
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	071b      	lsls	r3, r3, #28
 80046b4:	4925      	ldr	r1, [pc, #148]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	019a      	lsls	r2, r3, #6
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	061b      	lsls	r3, r3, #24
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	071b      	lsls	r3, r3, #28
 80046e4:	4919      	ldr	r1, [pc, #100]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a16      	ldr	r2, [pc, #88]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fc fd56 	bl	80011a8 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004700:	f7fc fd52 	bl	80011a8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0d7      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b01      	cmp	r3, #1
 8004722:	f040 80cd 	bne.w	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004732:	f7fc fd39 	bl	80011a8 <HAL_GetTick>
 8004736:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800473a:	f7fc fd35 	bl	80011a8 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b64      	cmp	r3, #100	; 0x64
 8004746:	d903      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0ba      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800474c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004750:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475c:	d0ed      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800477a:	2b00      	cmp	r3, #0
 800477c:	d02e      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d12a      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004786:	4b51      	ldr	r3, [pc, #324]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004794:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	0f1b      	lsrs	r3, r3, #28
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	019a      	lsls	r2, r3, #6
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	071b      	lsls	r3, r3, #28
 80047ba:	4944      	ldr	r1, [pc, #272]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047c2:	4b42      	ldr	r3, [pc, #264]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	493d      	ldr	r1, [pc, #244]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d022      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f0:	d11d      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047f2:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	0e1b      	lsrs	r3, r3, #24
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	0f1b      	lsrs	r3, r3, #28
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	019a      	lsls	r2, r3, #6
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	431a      	orrs	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	061b      	lsls	r3, r3, #24
 8004820:	431a      	orrs	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	4929      	ldr	r1, [pc, #164]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d028      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004848:	4b20      	ldr	r3, [pc, #128]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	4917      	ldr	r1, [pc, #92]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4911      	ldr	r1, [pc, #68]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004898:	f7fc fc86 	bl	80011a8 <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048a0:	f7fc fc82 	bl	80011a8 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e007      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048be:	d1ef      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800

080048d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e049      	b.n	8004976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc f9f2 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 f97c 	bl	8004c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d122      	bne.n	80049da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0202 	mvn.w	r2, #2
 80049aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f905 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8f7 	bl	8004bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f908 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d122      	bne.n	8004a2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d11b      	bne.n	8004a2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0204 	mvn.w	r2, #4
 80049fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f8db 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8004a1a:	e005      	b.n	8004a28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8cd 	bl	8004bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8de 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d122      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d11b      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0208 	mvn.w	r2, #8
 8004a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2204      	movs	r2, #4
 8004a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8b1 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e005      	b.n	8004a7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8a3 	bl	8004bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8b4 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d122      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d11b      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0210 	mvn.w	r2, #16
 8004aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2208      	movs	r2, #8
 8004aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f887 	bl	8004bd0 <HAL_TIM_IC_CaptureCallback>
 8004ac2:	e005      	b.n	8004ad0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f879 	bl	8004bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f88a 	bl	8004be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d10e      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0201 	mvn.w	r2, #1
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fb ffd7 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d10e      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b80      	cmp	r3, #128	; 0x80
 8004b1c:	d107      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f9a7 	bl	8004e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	2b80      	cmp	r3, #128	; 0x80
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f99a 	bl	8004e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f838 	bl	8004bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0220 	mvn.w	r2, #32
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f95a 	bl	8004e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a40      	ldr	r2, [pc, #256]	; (8004d20 <TIM_Base_SetConfig+0x114>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d00f      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <TIM_Base_SetConfig+0x118>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <TIM_Base_SetConfig+0x11c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d007      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3b      	ldr	r2, [pc, #236]	; (8004d2c <TIM_Base_SetConfig+0x120>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a3a      	ldr	r2, [pc, #232]	; (8004d30 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d108      	bne.n	8004c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <TIM_Base_SetConfig+0x114>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02b      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6c:	d027      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2c      	ldr	r2, [pc, #176]	; (8004d24 <TIM_Base_SetConfig+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d023      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <TIM_Base_SetConfig+0x11c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01f      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <TIM_Base_SetConfig+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01b      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <TIM_Base_SetConfig+0x124>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d017      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <TIM_Base_SetConfig+0x128>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <TIM_Base_SetConfig+0x12c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00f      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <TIM_Base_SetConfig+0x130>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <TIM_Base_SetConfig+0x134>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <TIM_Base_SetConfig+0x138>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <TIM_Base_SetConfig+0x13c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <TIM_Base_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0xf8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <TIM_Base_SetConfig+0x124>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	615a      	str	r2, [r3, #20]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40010400 	.word	0x40010400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800
 8004d40:	40001800 	.word	0x40001800
 8004d44:	40001c00 	.word	0x40001c00
 8004d48:	40002000 	.word	0x40002000

08004d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e06d      	b.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a30      	ldr	r2, [pc, #192]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2f      	ldr	r2, [pc, #188]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d108      	bne.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a20      	ldr	r2, [pc, #128]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d01d      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d10c      	bne.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40001800 	.word	0x40001800

08004e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e040      	b.n	8004f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb ff30 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd0a 	bl	80058fc <UART_SetConfig>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e022      	b.n	8004f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 ff62 	bl	8005dc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 ffe9 	bl	8005f08 <UART_CheckIdleState>
 8004f36:	4603      	mov	r3, r0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02b      	b.n	8004faa <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2224      	movs	r2, #36	; 0x24
 8004f56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fb ffa1 	bl	8000ec8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b08a      	sub	sp, #40	; 0x28
 8004fb6:	af02      	add	r7, sp, #8
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	f040 8081 	bne.w	80050ce <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Transmit+0x26>
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e079      	b.n	80050d0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Transmit+0x38>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e072      	b.n	80050d0 <HAL_UART_Transmit+0x11e>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2221      	movs	r2, #33	; 0x21
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005000:	f7fc f8d2 	bl	80011a8 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d108      	bne.n	8005032 <HAL_UART_Transmit+0x80>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e003      	b.n	800503a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005042:	e02c      	b.n	800509e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 ff8d 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e038      	b.n	80050d0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	3302      	adds	r3, #2
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e007      	b.n	800508c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3301      	adds	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1cc      	bne.n	8005044 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2140      	movs	r1, #64	; 0x40
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 ff5a 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e005      	b.n	80050d0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
  }
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	f040 80be 	bne.w	800526e <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_UART_Receive+0x26>
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e0b6      	b.n	8005270 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_UART_Receive+0x38>
 800510c:	2302      	movs	r3, #2
 800510e:	e0af      	b.n	8005270 <HAL_UART_Receive+0x198>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2222      	movs	r2, #34	; 0x22
 8005124:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800512c:	f7fc f83c 	bl	80011a8 <HAL_GetTick>
 8005130:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514a:	d10e      	bne.n	800516a <HAL_UART_Receive+0x92>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <HAL_UART_Receive+0x88>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f240 12ff 	movw	r2, #511	; 0x1ff
 800515a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800515e:	e02d      	b.n	80051bc <HAL_UART_Receive+0xe4>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	22ff      	movs	r2, #255	; 0xff
 8005164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005168:	e028      	b.n	80051bc <HAL_UART_Receive+0xe4>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10d      	bne.n	800518e <HAL_UART_Receive+0xb6>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <HAL_UART_Receive+0xac>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	22ff      	movs	r2, #255	; 0xff
 800517e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005182:	e01b      	b.n	80051bc <HAL_UART_Receive+0xe4>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	227f      	movs	r2, #127	; 0x7f
 8005188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800518c:	e016      	b.n	80051bc <HAL_UART_Receive+0xe4>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005196:	d10d      	bne.n	80051b4 <HAL_UART_Receive+0xdc>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_UART_Receive+0xd2>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	227f      	movs	r2, #127	; 0x7f
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a8:	e008      	b.n	80051bc <HAL_UART_Receive+0xe4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	223f      	movs	r2, #63	; 0x3f
 80051ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051b2:	e003      	b.n	80051bc <HAL_UART_Receive+0xe4>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d108      	bne.n	80051e0 <HAL_UART_Receive+0x108>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e003      	b.n	80051e8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80051f0:	e032      	b.n	8005258 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2120      	movs	r1, #32
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 feb6 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e031      	b.n	8005270 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10c      	bne.n	800522c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	b29a      	uxth	r2, r3
 800521a:	8a7b      	ldrh	r3, [r7, #18]
 800521c:	4013      	ands	r3, r2
 800521e:	b29a      	uxth	r2, r3
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	3302      	adds	r3, #2
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e00c      	b.n	8005246 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2da      	uxtb	r2, r3
 8005234:	8a7b      	ldrh	r3, [r7, #18]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	4013      	ands	r3, r2
 800523a:	b2da      	uxtb	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1c6      	bne.n	80051f2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528a:	2b20      	cmp	r3, #32
 800528c:	d13d      	bne.n	800530a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_Receive_DMA+0x22>
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e036      	b.n	800530c <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_UART_Receive_DMA+0x34>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e02f      	b.n	800530c <HAL_UART_Receive_DMA+0x94>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d018      	beq.n	80052fa <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	69f9      	ldr	r1, [r7, #28]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	461a      	mov	r2, r3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fef9 	bl	80060f8 <UART_Start_Receive_DMA>
 8005306:	4603      	mov	r3, r0
 8005308:	e000      	b.n	800530c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3728      	adds	r7, #40	; 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b0ba      	sub	sp, #232	; 0xe8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800533a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800533e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005342:	4013      	ands	r3, r2
 8005344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d115      	bne.n	800537c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00f      	beq.n	800537c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 828f 	beq.w	8005890 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
      }
      return;
 800537a:	e289      	b.n	8005890 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800537c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8117 	beq.w	80055b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005396:	4b85      	ldr	r3, [pc, #532]	; (80055ac <HAL_UART_IRQHandler+0x298>)
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 810a 	beq.w	80055b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <HAL_UART_IRQHandler+0xbc>
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d011      	beq.n	8005400 <HAL_UART_IRQHandler+0xec>
 80053dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2202      	movs	r2, #2
 80053ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d011      	beq.n	8005430 <HAL_UART_IRQHandler+0x11c>
 800540c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2204      	movs	r2, #4
 800541e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005426:	f043 0202 	orr.w	r2, r3, #2
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d017      	beq.n	800546c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800544c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2208      	movs	r2, #8
 800545a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	f043 0208 	orr.w	r2, r3, #8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005474:	2b00      	cmp	r3, #0
 8005476:	d012      	beq.n	800549e <HAL_UART_IRQHandler+0x18a>
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00c      	beq.n	800549e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 81f5 	beq.w	8005894 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d005      	beq.n	80054f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04f      	beq.n	8005596 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 feca 	bl	8006290 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d141      	bne.n	800558e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800553a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	2b00      	cmp	r3, #0
 800555c:	d013      	beq.n	8005586 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	4a13      	ldr	r2, [pc, #76]	; (80055b0 <HAL_UART_IRQHandler+0x29c>)
 8005564:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4618      	mov	r0, r3
 800556c:	f7fc f972 	bl	8001854 <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00f      	b.n	80055a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9a2 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00b      	b.n	80055a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f99e 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e007      	b.n	80055a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f99a 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80055a4:	e176      	b.n	8005894 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a6:	bf00      	nop
    return;
 80055a8:	e174      	b.n	8005894 <HAL_UART_IRQHandler+0x580>
 80055aa:	bf00      	nop
 80055ac:	04000120 	.word	0x04000120
 80055b0:	0800652b 	.word	0x0800652b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	f040 8144 	bne.w	8005846 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 813d 	beq.w	8005846 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8136 	beq.w	8005846 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2210      	movs	r2, #16
 80055e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	f040 80b2 	bne.w	8005756 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8148 	beq.w	8005898 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005612:	429a      	cmp	r2, r3
 8005614:	f080 8140 	bcs.w	8005898 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800561e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562c:	f000 8085 	beq.w	800573a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800564c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800565a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800565e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1da      	bne.n	8005630 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3308      	adds	r3, #8
 8005680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800568a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3308      	adds	r3, #8
 800569a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800569e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e1      	bne.n	800567a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800571c:	65bb      	str	r3, [r7, #88]	; 0x58
 800571e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800572a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e4      	bne.n	80056fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4618      	mov	r0, r3
 8005736:	f7fc f81d 	bl	8001774 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005746:	b29b      	uxth	r3, r3
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8c8 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005754:	e0a0      	b.n	8005898 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005762:	b29b      	uxth	r3, r3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8092 	beq.w	800589c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8005778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 808d 	beq.w	800589c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
 80057a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e4      	bne.n	8005782 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	623b      	str	r3, [r7, #32]
   return(result);
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057dc:	633a      	str	r2, [r7, #48]	; 0x30
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e3      	bne.n	80057b8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	617b      	str	r3, [r7, #20]
   return(result);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e4      	bne.n	8005802 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f850 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005844:	e02a      	b.n	800589c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01c      	beq.n	80058a0 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
    }
    return;
 800586e:	e017      	b.n	80058a0 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_UART_IRQHandler+0x58e>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00c      	beq.n	80058a2 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fe64 	bl	8006556 <UART_EndTransmit_IT>
    return;
 800588e:	e008      	b.n	80058a2 <HAL_UART_IRQHandler+0x58e>
      return;
 8005890:	bf00      	nop
 8005892:	e006      	b.n	80058a2 <HAL_UART_IRQHandler+0x58e>
    return;
 8005894:	bf00      	nop
 8005896:	e004      	b.n	80058a2 <HAL_UART_IRQHandler+0x58e>
      return;
 8005898:	bf00      	nop
 800589a:	e002      	b.n	80058a2 <HAL_UART_IRQHandler+0x58e>
      return;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <HAL_UART_IRQHandler+0x58e>
    return;
 80058a0:	bf00      	nop
  }

}
 80058a2:	37e8      	adds	r7, #232	; 0xe8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4ba6      	ldr	r3, [pc, #664]	; (8005bc0 <UART_SetConfig+0x2c4>)
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	6979      	ldr	r1, [r7, #20]
 8005930:	430b      	orrs	r3, r1
 8005932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a94      	ldr	r2, [pc, #592]	; (8005bc4 <UART_SetConfig+0x2c8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d120      	bne.n	80059ba <UART_SetConfig+0xbe>
 8005978:	4b93      	ldr	r3, [pc, #588]	; (8005bc8 <UART_SetConfig+0x2cc>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d816      	bhi.n	80059b4 <UART_SetConfig+0xb8>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x90>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	0800599d 	.word	0x0800599d
 8005990:	080059a9 	.word	0x080059a9
 8005994:	080059a3 	.word	0x080059a3
 8005998:	080059af 	.word	0x080059af
 800599c:	2301      	movs	r3, #1
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e150      	b.n	8005c44 <UART_SetConfig+0x348>
 80059a2:	2302      	movs	r3, #2
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	e14d      	b.n	8005c44 <UART_SetConfig+0x348>
 80059a8:	2304      	movs	r3, #4
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e14a      	b.n	8005c44 <UART_SetConfig+0x348>
 80059ae:	2308      	movs	r3, #8
 80059b0:	77fb      	strb	r3, [r7, #31]
 80059b2:	e147      	b.n	8005c44 <UART_SetConfig+0x348>
 80059b4:	2310      	movs	r3, #16
 80059b6:	77fb      	strb	r3, [r7, #31]
 80059b8:	e144      	b.n	8005c44 <UART_SetConfig+0x348>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a83      	ldr	r2, [pc, #524]	; (8005bcc <UART_SetConfig+0x2d0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d132      	bne.n	8005a2a <UART_SetConfig+0x12e>
 80059c4:	4b80      	ldr	r3, [pc, #512]	; (8005bc8 <UART_SetConfig+0x2cc>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d828      	bhi.n	8005a24 <UART_SetConfig+0x128>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <UART_SetConfig+0xdc>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005a25 	.word	0x08005a25
 80059e0:	08005a25 	.word	0x08005a25
 80059e4:	08005a25 	.word	0x08005a25
 80059e8:	08005a19 	.word	0x08005a19
 80059ec:	08005a25 	.word	0x08005a25
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005a25 	.word	0x08005a25
 80059f8:	08005a13 	.word	0x08005a13
 80059fc:	08005a25 	.word	0x08005a25
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a25 	.word	0x08005a25
 8005a08:	08005a1f 	.word	0x08005a1f
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e118      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e115      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e112      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e10f      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e10c      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a68      	ldr	r2, [pc, #416]	; (8005bd0 <UART_SetConfig+0x2d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d120      	bne.n	8005a76 <UART_SetConfig+0x17a>
 8005a34:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <UART_SetConfig+0x2cc>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a3e:	2b30      	cmp	r3, #48	; 0x30
 8005a40:	d013      	beq.n	8005a6a <UART_SetConfig+0x16e>
 8005a42:	2b30      	cmp	r3, #48	; 0x30
 8005a44:	d814      	bhi.n	8005a70 <UART_SetConfig+0x174>
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d009      	beq.n	8005a5e <UART_SetConfig+0x162>
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d810      	bhi.n	8005a70 <UART_SetConfig+0x174>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <UART_SetConfig+0x15c>
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d006      	beq.n	8005a64 <UART_SetConfig+0x168>
 8005a56:	e00b      	b.n	8005a70 <UART_SetConfig+0x174>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e0f2      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	77fb      	strb	r3, [r7, #31]
 8005a62:	e0ef      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a64:	2304      	movs	r3, #4
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e0ec      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e0e9      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a70:	2310      	movs	r3, #16
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e0e6      	b.n	8005c44 <UART_SetConfig+0x348>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a56      	ldr	r2, [pc, #344]	; (8005bd4 <UART_SetConfig+0x2d8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d120      	bne.n	8005ac2 <UART_SetConfig+0x1c6>
 8005a80:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <UART_SetConfig+0x2cc>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a8c:	d013      	beq.n	8005ab6 <UART_SetConfig+0x1ba>
 8005a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a90:	d814      	bhi.n	8005abc <UART_SetConfig+0x1c0>
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d009      	beq.n	8005aaa <UART_SetConfig+0x1ae>
 8005a96:	2b80      	cmp	r3, #128	; 0x80
 8005a98:	d810      	bhi.n	8005abc <UART_SetConfig+0x1c0>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <UART_SetConfig+0x1a8>
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d006      	beq.n	8005ab0 <UART_SetConfig+0x1b4>
 8005aa2:	e00b      	b.n	8005abc <UART_SetConfig+0x1c0>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e0cc      	b.n	8005c44 <UART_SetConfig+0x348>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e0c9      	b.n	8005c44 <UART_SetConfig+0x348>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e0c6      	b.n	8005c44 <UART_SetConfig+0x348>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e0c3      	b.n	8005c44 <UART_SetConfig+0x348>
 8005abc:	2310      	movs	r3, #16
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e0c0      	b.n	8005c44 <UART_SetConfig+0x348>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a44      	ldr	r2, [pc, #272]	; (8005bd8 <UART_SetConfig+0x2dc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d125      	bne.n	8005b18 <UART_SetConfig+0x21c>
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <UART_SetConfig+0x2cc>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ada:	d017      	beq.n	8005b0c <UART_SetConfig+0x210>
 8005adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae0:	d817      	bhi.n	8005b12 <UART_SetConfig+0x216>
 8005ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae6:	d00b      	beq.n	8005b00 <UART_SetConfig+0x204>
 8005ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aec:	d811      	bhi.n	8005b12 <UART_SetConfig+0x216>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <UART_SetConfig+0x1fe>
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af6:	d006      	beq.n	8005b06 <UART_SetConfig+0x20a>
 8005af8:	e00b      	b.n	8005b12 <UART_SetConfig+0x216>
 8005afa:	2300      	movs	r3, #0
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e0a1      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b00:	2302      	movs	r3, #2
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e09e      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b06:	2304      	movs	r3, #4
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e09b      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e098      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b12:	2310      	movs	r3, #16
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e095      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2f      	ldr	r2, [pc, #188]	; (8005bdc <UART_SetConfig+0x2e0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d125      	bne.n	8005b6e <UART_SetConfig+0x272>
 8005b22:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <UART_SetConfig+0x2cc>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b30:	d017      	beq.n	8005b62 <UART_SetConfig+0x266>
 8005b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b36:	d817      	bhi.n	8005b68 <UART_SetConfig+0x26c>
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3c:	d00b      	beq.n	8005b56 <UART_SetConfig+0x25a>
 8005b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b42:	d811      	bhi.n	8005b68 <UART_SetConfig+0x26c>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <UART_SetConfig+0x254>
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4c:	d006      	beq.n	8005b5c <UART_SetConfig+0x260>
 8005b4e:	e00b      	b.n	8005b68 <UART_SetConfig+0x26c>
 8005b50:	2301      	movs	r3, #1
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e076      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b56:	2302      	movs	r3, #2
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e073      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e070      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b62:	2308      	movs	r3, #8
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e06d      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e06a      	b.n	8005c44 <UART_SetConfig+0x348>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <UART_SetConfig+0x2e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d138      	bne.n	8005bea <UART_SetConfig+0x2ee>
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <UART_SetConfig+0x2cc>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b86:	d017      	beq.n	8005bb8 <UART_SetConfig+0x2bc>
 8005b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b8c:	d82a      	bhi.n	8005be4 <UART_SetConfig+0x2e8>
 8005b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b92:	d00b      	beq.n	8005bac <UART_SetConfig+0x2b0>
 8005b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b98:	d824      	bhi.n	8005be4 <UART_SetConfig+0x2e8>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <UART_SetConfig+0x2aa>
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d006      	beq.n	8005bb2 <UART_SetConfig+0x2b6>
 8005ba4:	e01e      	b.n	8005be4 <UART_SetConfig+0x2e8>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e04b      	b.n	8005c44 <UART_SetConfig+0x348>
 8005bac:	2302      	movs	r3, #2
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e048      	b.n	8005c44 <UART_SetConfig+0x348>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e045      	b.n	8005c44 <UART_SetConfig+0x348>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e042      	b.n	8005c44 <UART_SetConfig+0x348>
 8005bbe:	bf00      	nop
 8005bc0:	efff69f3 	.word	0xefff69f3
 8005bc4:	40011000 	.word	0x40011000
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	40004400 	.word	0x40004400
 8005bd0:	40004800 	.word	0x40004800
 8005bd4:	40004c00 	.word	0x40004c00
 8005bd8:	40005000 	.word	0x40005000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	40007800 	.word	0x40007800
 8005be4:	2310      	movs	r3, #16
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e02c      	b.n	8005c44 <UART_SetConfig+0x348>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a72      	ldr	r2, [pc, #456]	; (8005db8 <UART_SetConfig+0x4bc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d125      	bne.n	8005c40 <UART_SetConfig+0x344>
 8005bf4:	4b71      	ldr	r3, [pc, #452]	; (8005dbc <UART_SetConfig+0x4c0>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c02:	d017      	beq.n	8005c34 <UART_SetConfig+0x338>
 8005c04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c08:	d817      	bhi.n	8005c3a <UART_SetConfig+0x33e>
 8005c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0e:	d00b      	beq.n	8005c28 <UART_SetConfig+0x32c>
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	d811      	bhi.n	8005c3a <UART_SetConfig+0x33e>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <UART_SetConfig+0x326>
 8005c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c1e:	d006      	beq.n	8005c2e <UART_SetConfig+0x332>
 8005c20:	e00b      	b.n	8005c3a <UART_SetConfig+0x33e>
 8005c22:	2300      	movs	r3, #0
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e00d      	b.n	8005c44 <UART_SetConfig+0x348>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e00a      	b.n	8005c44 <UART_SetConfig+0x348>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e007      	b.n	8005c44 <UART_SetConfig+0x348>
 8005c34:	2308      	movs	r3, #8
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e004      	b.n	8005c44 <UART_SetConfig+0x348>
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e001      	b.n	8005c44 <UART_SetConfig+0x348>
 8005c40:	2310      	movs	r3, #16
 8005c42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	d15b      	bne.n	8005d06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c4e:	7ffb      	ldrb	r3, [r7, #31]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d828      	bhi.n	8005ca6 <UART_SetConfig+0x3aa>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <UART_SetConfig+0x360>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c89 	.word	0x08005c89
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005ca7 	.word	0x08005ca7
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005ca7 	.word	0x08005ca7
 8005c74:	08005ca7 	.word	0x08005ca7
 8005c78:	08005ca7 	.word	0x08005ca7
 8005c7c:	08005c9f 	.word	0x08005c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fe fa0e 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8005c84:	61b8      	str	r0, [r7, #24]
        break;
 8005c86:	e013      	b.n	8005cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fe fa1e 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	61b8      	str	r0, [r7, #24]
        break;
 8005c8e:	e00f      	b.n	8005cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c90:	4b4b      	ldr	r3, [pc, #300]	; (8005dc0 <UART_SetConfig+0x4c4>)
 8005c92:	61bb      	str	r3, [r7, #24]
        break;
 8005c94:	e00c      	b.n	8005cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c96:	f7fe f8f1 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8005c9a:	61b8      	str	r0, [r7, #24]
        break;
 8005c9c:	e008      	b.n	8005cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca2:	61bb      	str	r3, [r7, #24]
        break;
 8005ca4:	e004      	b.n	8005cb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	77bb      	strb	r3, [r7, #30]
        break;
 8005cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d074      	beq.n	8005da0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	005a      	lsls	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b0f      	cmp	r3, #15
 8005cd0:	d916      	bls.n	8005d00 <UART_SetConfig+0x404>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd8:	d212      	bcs.n	8005d00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f023 030f 	bic.w	r3, r3, #15
 8005ce2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	89fa      	ldrh	r2, [r7, #14]
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	e04f      	b.n	8005da0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	77bb      	strb	r3, [r7, #30]
 8005d04:	e04c      	b.n	8005da0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d828      	bhi.n	8005d5e <UART_SetConfig+0x462>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x418>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d5f 	.word	0x08005d5f
 8005d24:	08005d4f 	.word	0x08005d4f
 8005d28:	08005d5f 	.word	0x08005d5f
 8005d2c:	08005d5f 	.word	0x08005d5f
 8005d30:	08005d5f 	.word	0x08005d5f
 8005d34:	08005d57 	.word	0x08005d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d38:	f7fe f9b2 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8005d3c:	61b8      	str	r0, [r7, #24]
        break;
 8005d3e:	e013      	b.n	8005d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d40:	f7fe f9c2 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8005d44:	61b8      	str	r0, [r7, #24]
        break;
 8005d46:	e00f      	b.n	8005d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <UART_SetConfig+0x4c4>)
 8005d4a:	61bb      	str	r3, [r7, #24]
        break;
 8005d4c:	e00c      	b.n	8005d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4e:	f7fe f895 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8005d52:	61b8      	str	r0, [r7, #24]
        break;
 8005d54:	e008      	b.n	8005d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5a:	61bb      	str	r3, [r7, #24]
        break;
 8005d5c:	e004      	b.n	8005d68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	77bb      	strb	r3, [r7, #30]
        break;
 8005d66:	bf00      	nop
    }

    if (pclk != 0U)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d018      	beq.n	8005da0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	085a      	lsrs	r2, r3, #1
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	441a      	add	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d909      	bls.n	8005d9c <UART_SetConfig+0x4a0>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8e:	d205      	bcs.n	8005d9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e001      	b.n	8005da0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dac:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40007c00 	.word	0x40007c00
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	00f42400 	.word	0x00f42400

08005dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01a      	beq.n	8005eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec2:	d10a      	bne.n	8005eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f18:	f7fb f946 	bl	80011a8 <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d10e      	bne.n	8005f4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f817 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e00d      	b.n	8005f66 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b09c      	sub	sp, #112	; 0x70
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7e:	e0a5      	b.n	80060cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	f000 80a1 	beq.w	80060cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fb f90d 	bl	80011a8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d13e      	bne.n	800601e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e6      	bne.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ff2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ff4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e067      	b.n	80060ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d04f      	beq.n	80060cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800603a:	d147      	bne.n	80060cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006044:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800605a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
 8006066:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800606a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	613b      	str	r3, [r7, #16]
   return(result);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3308      	adds	r3, #8
 8006096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006098:	623a      	str	r2, [r7, #32]
 800609a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	69f9      	ldr	r1, [r7, #28]
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e010      	b.n	80060ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	4013      	ands	r3, r2
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	f43f af4a 	beq.w	8005f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3770      	adds	r7, #112	; 0x70
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b096      	sub	sp, #88	; 0x58
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2222      	movs	r2, #34	; 0x22
 8006120:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02b      	beq.n	8006182 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a42      	ldr	r2, [pc, #264]	; (8006238 <UART_Start_Receive_DMA+0x140>)
 8006130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	4a41      	ldr	r2, [pc, #260]	; (800623c <UART_Start_Receive_DMA+0x144>)
 8006138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4a40      	ldr	r2, [pc, #256]	; (8006240 <UART_Start_Receive_DMA+0x148>)
 8006140:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	2200      	movs	r2, #0
 8006148:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3324      	adds	r3, #36	; 0x24
 8006154:	4619      	mov	r1, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	461a      	mov	r2, r3
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	f7fb faa9 	bl	80016b4 <HAL_DMA_Start_IT>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00c      	beq.n	8006182 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2210      	movs	r2, #16
 800616c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e055      	b.n	800622e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d018      	beq.n	80061c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3308      	adds	r3, #8
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	653b      	str	r3, [r7, #80]	; 0x50
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061e4:	637a      	str	r2, [r7, #52]	; 0x34
 80061e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e5      	bne.n	80061c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3308      	adds	r3, #8
 80061fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	613b      	str	r3, [r7, #16]
   return(result);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006218:	623a      	str	r2, [r7, #32]
 800621a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	69f9      	ldr	r1, [r7, #28]
 800621e:	6a3a      	ldr	r2, [r7, #32]
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	61bb      	str	r3, [r7, #24]
   return(result);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e5      	bne.n	80061f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3758      	adds	r7, #88	; 0x58
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	08006357 	.word	0x08006357
 800623c:	08006477 	.word	0x08006477
 8006240:	080064af 	.word	0x080064af

08006244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	; 0x24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	60bb      	str	r3, [r7, #8]
   return(result);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6979      	ldr	r1, [r7, #20]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	613b      	str	r3, [r7, #16]
   return(result);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e6      	bne.n	800624c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006284:	bf00      	nop
 8006286:	3724      	adds	r7, #36	; 0x24
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b095      	sub	sp, #84	; 0x54
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b6:	643b      	str	r3, [r7, #64]	; 0x40
 80062b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	2b01      	cmp	r3, #1
 8006304:	d118      	bne.n	8006338 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	60bb      	str	r3, [r7, #8]
   return(result);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0310 	bic.w	r3, r3, #16
 800631a:	647b      	str	r3, [r7, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	613b      	str	r3, [r7, #16]
   return(result);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	665a      	str	r2, [r3, #100]	; 0x64
}
 800634a:	bf00      	nop
 800634c:	3754      	adds	r7, #84	; 0x54
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b09c      	sub	sp, #112	; 0x70
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d070      	beq.n	8006450 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	2200      	movs	r2, #0
 8006372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
 800638c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006394:	65bb      	str	r3, [r7, #88]	; 0x58
 8006396:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800639a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	667b      	str	r3, [r7, #100]	; 0x64
 80063c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063c8:	647a      	str	r2, [r7, #68]	; 0x44
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	623b      	str	r3, [r7, #32]
   return(result);
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f2:	663b      	str	r3, [r7, #96]	; 0x60
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063fc:	633a      	str	r2, [r7, #48]	; 0x30
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006412:	2220      	movs	r2, #32
 8006414:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641a:	2b01      	cmp	r3, #1
 800641c:	d118      	bne.n	8006450 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	60fb      	str	r3, [r7, #12]
   return(result);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0310 	bic.w	r3, r3, #16
 8006432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	617b      	str	r3, [r7, #20]
   return(result);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006454:	2b01      	cmp	r3, #1
 8006456:	d107      	bne.n	8006468 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800645e:	4619      	mov	r1, r3
 8006460:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006462:	f7ff fa3f 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006466:	e002      	b.n	800646e <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8006468:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800646a:	f00c fa2f 	bl	80128cc <HAL_UART_RxCpltCallback>
}
 800646e:	bf00      	nop
 8006470:	3770      	adds	r7, #112	; 0x70
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006488:	2b01      	cmp	r3, #1
 800648a:	d109      	bne.n	80064a0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	4619      	mov	r1, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7ff fa23 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800649e:	e002      	b.n	80064a6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff fa0b 	bl	80058bc <HAL_UART_RxHalfCpltCallback>
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b80      	cmp	r3, #128	; 0x80
 80064d4:	d109      	bne.n	80064ea <UART_DMAError+0x3c>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b21      	cmp	r3, #33	; 0x21
 80064da:	d106      	bne.n	80064ea <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f7ff fead 	bl	8006244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d109      	bne.n	800650c <UART_DMAError+0x5e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b22      	cmp	r3, #34	; 0x22
 80064fc:	d106      	bne.n	800650c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2200      	movs	r2, #0
 8006502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006506:	6978      	ldr	r0, [r7, #20]
 8006508:	f7ff fec2 	bl	8006290 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006512:	f043 0210 	orr.w	r2, r3, #16
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651c:	6978      	ldr	r0, [r7, #20]
 800651e:	f7ff f9d7 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006522:	bf00      	nop
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff f9c1 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b088      	sub	sp, #32
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	60bb      	str	r3, [r7, #8]
   return(result);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6979      	ldr	r1, [r7, #20]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	613b      	str	r3, [r7, #16]
   return(result);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e6      	bne.n	800655e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff f983 	bl	80058a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a2:	bf00      	nop
 80065a4:	3720      	adds	r7, #32
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80065b2:	4b8d      	ldr	r3, [pc, #564]	; (80067e8 <MX_LWIP_Init+0x23c>)
 80065b4:	22c0      	movs	r2, #192	; 0xc0
 80065b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80065b8:	4b8b      	ldr	r3, [pc, #556]	; (80067e8 <MX_LWIP_Init+0x23c>)
 80065ba:	22a8      	movs	r2, #168	; 0xa8
 80065bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80065be:	4b8a      	ldr	r3, [pc, #552]	; (80067e8 <MX_LWIP_Init+0x23c>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80065c4:	4b88      	ldr	r3, [pc, #544]	; (80067e8 <MX_LWIP_Init+0x23c>)
 80065c6:	220a      	movs	r2, #10
 80065c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80065ca:	4b88      	ldr	r3, [pc, #544]	; (80067ec <MX_LWIP_Init+0x240>)
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80065d0:	4b86      	ldr	r3, [pc, #536]	; (80067ec <MX_LWIP_Init+0x240>)
 80065d2:	22ff      	movs	r2, #255	; 0xff
 80065d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80065d6:	4b85      	ldr	r3, [pc, #532]	; (80067ec <MX_LWIP_Init+0x240>)
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80065dc:	4b83      	ldr	r3, [pc, #524]	; (80067ec <MX_LWIP_Init+0x240>)
 80065de:	2200      	movs	r2, #0
 80065e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80065e2:	4b83      	ldr	r3, [pc, #524]	; (80067f0 <MX_LWIP_Init+0x244>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80065e8:	4b81      	ldr	r3, [pc, #516]	; (80067f0 <MX_LWIP_Init+0x244>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80065ee:	4b80      	ldr	r3, [pc, #512]	; (80067f0 <MX_LWIP_Init+0x244>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80065f4:	4b7e      	ldr	r3, [pc, #504]	; (80067f0 <MX_LWIP_Init+0x244>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80065fa:	f000 fce5 	bl	8006fc8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80065fe:	4b7a      	ldr	r3, [pc, #488]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	061a      	lsls	r2, r3, #24
 8006604:	4b78      	ldr	r3, [pc, #480]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	431a      	orrs	r2, r3
 800660c:	4b76      	ldr	r3, [pc, #472]	; (80067e8 <MX_LWIP_Init+0x23c>)
 800660e:	789b      	ldrb	r3, [r3, #2]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	4313      	orrs	r3, r2
 8006614:	4a74      	ldr	r2, [pc, #464]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006616:	78d2      	ldrb	r2, [r2, #3]
 8006618:	4313      	orrs	r3, r2
 800661a:	061a      	lsls	r2, r3, #24
 800661c:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <MX_LWIP_Init+0x23c>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	0619      	lsls	r1, r3, #24
 8006622:	4b71      	ldr	r3, [pc, #452]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	041b      	lsls	r3, r3, #16
 8006628:	4319      	orrs	r1, r3
 800662a:	4b6f      	ldr	r3, [pc, #444]	; (80067e8 <MX_LWIP_Init+0x23c>)
 800662c:	789b      	ldrb	r3, [r3, #2]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	430b      	orrs	r3, r1
 8006632:	496d      	ldr	r1, [pc, #436]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006634:	78c9      	ldrb	r1, [r1, #3]
 8006636:	430b      	orrs	r3, r1
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800663e:	431a      	orrs	r2, r3
 8006640:	4b69      	ldr	r3, [pc, #420]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	0619      	lsls	r1, r3, #24
 8006646:	4b68      	ldr	r3, [pc, #416]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	4319      	orrs	r1, r3
 800664e:	4b66      	ldr	r3, [pc, #408]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006650:	789b      	ldrb	r3, [r3, #2]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	430b      	orrs	r3, r1
 8006656:	4964      	ldr	r1, [pc, #400]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006658:	78c9      	ldrb	r1, [r1, #3]
 800665a:	430b      	orrs	r3, r1
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006662:	431a      	orrs	r2, r3
 8006664:	4b60      	ldr	r3, [pc, #384]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	0619      	lsls	r1, r3, #24
 800666a:	4b5f      	ldr	r3, [pc, #380]	; (80067e8 <MX_LWIP_Init+0x23c>)
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	4319      	orrs	r1, r3
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <MX_LWIP_Init+0x23c>)
 8006674:	789b      	ldrb	r3, [r3, #2]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	430b      	orrs	r3, r1
 800667a:	495b      	ldr	r1, [pc, #364]	; (80067e8 <MX_LWIP_Init+0x23c>)
 800667c:	78c9      	ldrb	r1, [r1, #3]
 800667e:	430b      	orrs	r3, r1
 8006680:	0e1b      	lsrs	r3, r3, #24
 8006682:	4313      	orrs	r3, r2
 8006684:	4a5b      	ldr	r2, [pc, #364]	; (80067f4 <MX_LWIP_Init+0x248>)
 8006686:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006688:	4b58      	ldr	r3, [pc, #352]	; (80067ec <MX_LWIP_Init+0x240>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	061a      	lsls	r2, r3, #24
 800668e:	4b57      	ldr	r3, [pc, #348]	; (80067ec <MX_LWIP_Init+0x240>)
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	4b55      	ldr	r3, [pc, #340]	; (80067ec <MX_LWIP_Init+0x240>)
 8006698:	789b      	ldrb	r3, [r3, #2]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	4313      	orrs	r3, r2
 800669e:	4a53      	ldr	r2, [pc, #332]	; (80067ec <MX_LWIP_Init+0x240>)
 80066a0:	78d2      	ldrb	r2, [r2, #3]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	061a      	lsls	r2, r3, #24
 80066a6:	4b51      	ldr	r3, [pc, #324]	; (80067ec <MX_LWIP_Init+0x240>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	0619      	lsls	r1, r3, #24
 80066ac:	4b4f      	ldr	r3, [pc, #316]	; (80067ec <MX_LWIP_Init+0x240>)
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	4319      	orrs	r1, r3
 80066b4:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <MX_LWIP_Init+0x240>)
 80066b6:	789b      	ldrb	r3, [r3, #2]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	430b      	orrs	r3, r1
 80066bc:	494b      	ldr	r1, [pc, #300]	; (80067ec <MX_LWIP_Init+0x240>)
 80066be:	78c9      	ldrb	r1, [r1, #3]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066c8:	431a      	orrs	r2, r3
 80066ca:	4b48      	ldr	r3, [pc, #288]	; (80067ec <MX_LWIP_Init+0x240>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	0619      	lsls	r1, r3, #24
 80066d0:	4b46      	ldr	r3, [pc, #280]	; (80067ec <MX_LWIP_Init+0x240>)
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	4319      	orrs	r1, r3
 80066d8:	4b44      	ldr	r3, [pc, #272]	; (80067ec <MX_LWIP_Init+0x240>)
 80066da:	789b      	ldrb	r3, [r3, #2]
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	430b      	orrs	r3, r1
 80066e0:	4942      	ldr	r1, [pc, #264]	; (80067ec <MX_LWIP_Init+0x240>)
 80066e2:	78c9      	ldrb	r1, [r1, #3]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066ec:	431a      	orrs	r2, r3
 80066ee:	4b3f      	ldr	r3, [pc, #252]	; (80067ec <MX_LWIP_Init+0x240>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	0619      	lsls	r1, r3, #24
 80066f4:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <MX_LWIP_Init+0x240>)
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	4319      	orrs	r1, r3
 80066fc:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <MX_LWIP_Init+0x240>)
 80066fe:	789b      	ldrb	r3, [r3, #2]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	430b      	orrs	r3, r1
 8006704:	4939      	ldr	r1, [pc, #228]	; (80067ec <MX_LWIP_Init+0x240>)
 8006706:	78c9      	ldrb	r1, [r1, #3]
 8006708:	430b      	orrs	r3, r1
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	4313      	orrs	r3, r2
 800670e:	4a3a      	ldr	r2, [pc, #232]	; (80067f8 <MX_LWIP_Init+0x24c>)
 8006710:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006712:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	061a      	lsls	r2, r3, #24
 8006718:	4b35      	ldr	r3, [pc, #212]	; (80067f0 <MX_LWIP_Init+0x244>)
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	431a      	orrs	r2, r3
 8006720:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	4313      	orrs	r3, r2
 8006728:	4a31      	ldr	r2, [pc, #196]	; (80067f0 <MX_LWIP_Init+0x244>)
 800672a:	78d2      	ldrb	r2, [r2, #3]
 800672c:	4313      	orrs	r3, r2
 800672e:	061a      	lsls	r2, r3, #24
 8006730:	4b2f      	ldr	r3, [pc, #188]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	0619      	lsls	r1, r3, #24
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	4319      	orrs	r1, r3
 800673e:	4b2c      	ldr	r3, [pc, #176]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006740:	789b      	ldrb	r3, [r3, #2]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	430b      	orrs	r3, r1
 8006746:	492a      	ldr	r1, [pc, #168]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006748:	78c9      	ldrb	r1, [r1, #3]
 800674a:	430b      	orrs	r3, r1
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006752:	431a      	orrs	r2, r3
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	0619      	lsls	r1, r3, #24
 800675a:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <MX_LWIP_Init+0x244>)
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	4319      	orrs	r1, r3
 8006762:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006764:	789b      	ldrb	r3, [r3, #2]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	430b      	orrs	r3, r1
 800676a:	4921      	ldr	r1, [pc, #132]	; (80067f0 <MX_LWIP_Init+0x244>)
 800676c:	78c9      	ldrb	r1, [r1, #3]
 800676e:	430b      	orrs	r3, r1
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006776:	431a      	orrs	r2, r3
 8006778:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <MX_LWIP_Init+0x244>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	0619      	lsls	r1, r3, #24
 800677e:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	4319      	orrs	r1, r3
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006788:	789b      	ldrb	r3, [r3, #2]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	430b      	orrs	r3, r1
 800678e:	4918      	ldr	r1, [pc, #96]	; (80067f0 <MX_LWIP_Init+0x244>)
 8006790:	78c9      	ldrb	r1, [r1, #3]
 8006792:	430b      	orrs	r3, r1
 8006794:	0e1b      	lsrs	r3, r3, #24
 8006796:	4313      	orrs	r3, r2
 8006798:	4a18      	ldr	r2, [pc, #96]	; (80067fc <MX_LWIP_Init+0x250>)
 800679a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800679c:	4b18      	ldr	r3, [pc, #96]	; (8006800 <MX_LWIP_Init+0x254>)
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	4b18      	ldr	r3, [pc, #96]	; (8006804 <MX_LWIP_Init+0x258>)
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	2300      	movs	r3, #0
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4b14      	ldr	r3, [pc, #80]	; (80067fc <MX_LWIP_Init+0x250>)
 80067aa:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <MX_LWIP_Init+0x24c>)
 80067ac:	4911      	ldr	r1, [pc, #68]	; (80067f4 <MX_LWIP_Init+0x248>)
 80067ae:	4816      	ldr	r0, [pc, #88]	; (8006808 <MX_LWIP_Init+0x25c>)
 80067b0:	f001 f9fa 	bl	8007ba8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80067b4:	4814      	ldr	r0, [pc, #80]	; (8006808 <MX_LWIP_Init+0x25c>)
 80067b6:	f001 fba9 	bl	8007f0c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80067ba:	4b13      	ldr	r3, [pc, #76]	; (8006808 <MX_LWIP_Init+0x25c>)
 80067bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80067cc:	480e      	ldr	r0, [pc, #56]	; (8006808 <MX_LWIP_Init+0x25c>)
 80067ce:	f001 fbad 	bl	8007f2c <netif_set_up>
 80067d2:	e002      	b.n	80067da <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80067d4:	480c      	ldr	r0, [pc, #48]	; (8006808 <MX_LWIP_Init+0x25c>)
 80067d6:	f001 fc15 	bl	8008004 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80067da:	490c      	ldr	r1, [pc, #48]	; (800680c <MX_LWIP_Init+0x260>)
 80067dc:	480a      	ldr	r0, [pc, #40]	; (8006808 <MX_LWIP_Init+0x25c>)
 80067de:	f001 fc43 	bl	8008068 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80067e2:	bf00      	nop
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20002ab8 	.word	0x20002ab8
 80067ec:	20002abc 	.word	0x20002abc
 80067f0:	20002ac0 	.word	0x20002ac0
 80067f4:	20002aac 	.word	0x20002aac
 80067f8:	20002ab0 	.word	0x20002ab0
 80067fc:	20002ab4 	.word	0x20002ab4
 8006800:	08010f6d 	.word	0x08010f6d
 8006804:	08006df5 	.word	0x08006df5
 8006808:	20002a78 	.word	0x20002a78
 800680c:	08006e61 	.word	0x08006e61

08006810 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006814:	4803      	ldr	r0, [pc, #12]	; (8006824 <MX_LWIP_Process+0x14>)
 8006816:	f000 facd 	bl	8006db4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800681a:	f007 fcc7 	bl	800e1ac <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20002a78 	.word	0x20002a78

08006828 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08e      	sub	sp, #56	; 0x38
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a56      	ldr	r2, [pc, #344]	; (80069a0 <HAL_ETH_MspInit+0x178>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f040 80a6 	bne.w	8006998 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800684c:	4b55      	ldr	r3, [pc, #340]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	4a54      	ldr	r2, [pc, #336]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 8006852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006856:	6313      	str	r3, [r2, #48]	; 0x30
 8006858:	4b52      	ldr	r3, [pc, #328]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	4b4f      	ldr	r3, [pc, #316]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	4a4e      	ldr	r2, [pc, #312]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 800686a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800686e:	6313      	str	r3, [r2, #48]	; 0x30
 8006870:	4b4c      	ldr	r3, [pc, #304]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	4a48      	ldr	r2, [pc, #288]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 8006882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006886:	6313      	str	r3, [r2, #48]	; 0x30
 8006888:	4b46      	ldr	r3, [pc, #280]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4a42      	ldr	r2, [pc, #264]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 800689a:	f043 0304 	orr.w	r3, r3, #4
 800689e:	6313      	str	r3, [r2, #48]	; 0x30
 80068a0:	4b40      	ldr	r3, [pc, #256]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ac:	4b3d      	ldr	r3, [pc, #244]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	4a3c      	ldr	r2, [pc, #240]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6313      	str	r3, [r2, #48]	; 0x30
 80068b8:	4b3a      	ldr	r3, [pc, #232]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068c4:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	4a36      	ldr	r2, [pc, #216]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	6313      	str	r3, [r2, #48]	; 0x30
 80068d0:	4b34      	ldr	r3, [pc, #208]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80068dc:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	4a30      	ldr	r2, [pc, #192]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e6:	6313      	str	r3, [r2, #48]	; 0x30
 80068e8:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <HAL_ETH_MspInit+0x17c>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80068f4:	2332      	movs	r3, #50	; 0x32
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f8:	2302      	movs	r3, #2
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006900:	2303      	movs	r3, #3
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006904:	230b      	movs	r3, #11
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690c:	4619      	mov	r1, r3
 800690e:	4826      	ldr	r0, [pc, #152]	; (80069a8 <HAL_ETH_MspInit+0x180>)
 8006910:	f7fc fbc0 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006914:	2386      	movs	r3, #134	; 0x86
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006918:	2302      	movs	r3, #2
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006920:	2303      	movs	r3, #3
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006924:	230b      	movs	r3, #11
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692c:	4619      	mov	r1, r3
 800692e:	481f      	ldr	r0, [pc, #124]	; (80069ac <HAL_ETH_MspInit+0x184>)
 8006930:	f7fc fbb0 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693a:	2302      	movs	r3, #2
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006942:	2303      	movs	r3, #3
 8006944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006946:	230b      	movs	r3, #11
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800694a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694e:	4619      	mov	r1, r3
 8006950:	4817      	ldr	r0, [pc, #92]	; (80069b0 <HAL_ETH_MspInit+0x188>)
 8006952:	f7fc fb9f 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006956:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695c:	2302      	movs	r3, #2
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006964:	2303      	movs	r3, #3
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006968:	230b      	movs	r3, #11
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800696c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006970:	4619      	mov	r1, r3
 8006972:	4810      	ldr	r0, [pc, #64]	; (80069b4 <HAL_ETH_MspInit+0x18c>)
 8006974:	f7fc fb8e 	bl	8003094 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006978:	2200      	movs	r2, #0
 800697a:	2100      	movs	r1, #0
 800697c:	203d      	movs	r0, #61	; 0x3d
 800697e:	f7fa fd42 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006982:	203d      	movs	r0, #61	; 0x3d
 8006984:	f7fa fd5b 	bl	800143e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8006988:	2200      	movs	r2, #0
 800698a:	2100      	movs	r1, #0
 800698c:	203e      	movs	r0, #62	; 0x3e
 800698e:	f7fa fd3a 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8006992:	203e      	movs	r0, #62	; 0x3e
 8006994:	f7fa fd53 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006998:	bf00      	nop
 800699a:	3738      	adds	r7, #56	; 0x38
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40028000 	.word	0x40028000
 80069a4:	40023800 	.word	0x40023800
 80069a8:	40020800 	.word	0x40020800
 80069ac:	40020000 	.word	0x40020000
 80069b0:	40020400 	.word	0x40020400
 80069b4:	40021800 	.word	0x40021800

080069b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80069c4:	4b4d      	ldr	r3, [pc, #308]	; (8006afc <low_level_init+0x144>)
 80069c6:	4a4e      	ldr	r2, [pc, #312]	; (8006b00 <low_level_init+0x148>)
 80069c8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80069ca:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <low_level_init+0x144>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80069d0:	4b4a      	ldr	r3, [pc, #296]	; (8006afc <low_level_init+0x144>)
 80069d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069d6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80069d8:	4b48      	ldr	r3, [pc, #288]	; (8006afc <low_level_init+0x144>)
 80069da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069de:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80069e0:	4b46      	ldr	r3, [pc, #280]	; (8006afc <low_level_init+0x144>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80069e6:	2300      	movs	r3, #0
 80069e8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80069ea:	2380      	movs	r3, #128	; 0x80
 80069ec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80069ee:	23e1      	movs	r3, #225	; 0xe1
 80069f0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80069f2:	2300      	movs	r3, #0
 80069f4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80069f6:	2300      	movs	r3, #0
 80069f8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80069fa:	2300      	movs	r3, #0
 80069fc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80069fe:	4a3f      	ldr	r2, [pc, #252]	; (8006afc <low_level_init+0x144>)
 8006a00:	f107 0308 	add.w	r3, r7, #8
 8006a04:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <low_level_init+0x144>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	; (8006afc <low_level_init+0x144>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006a12:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <low_level_init+0x144>)
 8006a14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a18:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006a1a:	4838      	ldr	r0, [pc, #224]	; (8006afc <low_level_init+0x144>)
 8006a1c:	f7fb f9a6 	bl	8001d6c <HAL_ETH_Init>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d108      	bne.n	8006a3c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a30:	f043 0304 	orr.w	r3, r3, #4
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	4a31      	ldr	r2, [pc, #196]	; (8006b04 <low_level_init+0x14c>)
 8006a40:	4931      	ldr	r1, [pc, #196]	; (8006b08 <low_level_init+0x150>)
 8006a42:	482e      	ldr	r0, [pc, #184]	; (8006afc <low_level_init+0x144>)
 8006a44:	f7fb fb38 	bl	80020b8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006a48:	2304      	movs	r3, #4
 8006a4a:	4a30      	ldr	r2, [pc, #192]	; (8006b0c <low_level_init+0x154>)
 8006a4c:	4930      	ldr	r1, [pc, #192]	; (8006b10 <low_level_init+0x158>)
 8006a4e:	482b      	ldr	r0, [pc, #172]	; (8006afc <low_level_init+0x144>)
 8006a50:	f7fb fb9a 	bl	8002188 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2206      	movs	r2, #6
 8006a58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006a5c:	4b27      	ldr	r3, [pc, #156]	; (8006afc <low_level_init+0x144>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006a68:	4b24      	ldr	r3, [pc, #144]	; (8006afc <low_level_init+0x144>)
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	785a      	ldrb	r2, [r3, #1]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006a74:	4b21      	ldr	r3, [pc, #132]	; (8006afc <low_level_init+0x144>)
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	789a      	ldrb	r2, [r3, #2]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006a80:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <low_level_init+0x144>)
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	78da      	ldrb	r2, [r3, #3]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <low_level_init+0x144>)
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	791a      	ldrb	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <low_level_init+0x144>)
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	795a      	ldrb	r2, [r3, #5]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006aaa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ab2:	f043 030a 	orr.w	r3, r3, #10
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006abe:	480f      	ldr	r0, [pc, #60]	; (8006afc <low_level_init+0x144>)
 8006ac0:	f7fb fe85 	bl	80027ce <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006ac4:	f107 0310 	add.w	r3, r7, #16
 8006ac8:	461a      	mov	r2, r3
 8006aca:	211d      	movs	r1, #29
 8006acc:	480b      	ldr	r0, [pc, #44]	; (8006afc <low_level_init+0x144>)
 8006ace:	f7fb fdb0 	bl	8002632 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f043 030b 	orr.w	r3, r3, #11
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	461a      	mov	r2, r3
 8006ade:	211d      	movs	r1, #29
 8006ae0:	4806      	ldr	r0, [pc, #24]	; (8006afc <low_level_init+0x144>)
 8006ae2:	f7fb fe0e 	bl	8002702 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006ae6:	f107 0310 	add.w	r3, r7, #16
 8006aea:	461a      	mov	r2, r3
 8006aec:	211d      	movs	r1, #29
 8006aee:	4803      	ldr	r0, [pc, #12]	; (8006afc <low_level_init+0x144>)
 8006af0:	f7fb fd9f 	bl	8002632 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20005b64 	.word	0x20005b64
 8006b00:	40028000 	.word	0x40028000
 8006b04:	20004394 	.word	0x20004394
 8006b08:	20002b44 	.word	0x20002b44
 8006b0c:	20002bc4 	.word	0x20002bc4
 8006b10:	20002ac4 	.word	0x20002ac4

08006b14 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006b1e:	4b4b      	ldr	r3, [pc, #300]	; (8006c4c <low_level_output+0x138>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006b36:	4b45      	ldr	r3, [pc, #276]	; (8006c4c <low_level_output+0x138>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	e05a      	b.n	8006bfc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da03      	bge.n	8006b56 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006b4e:	23f8      	movs	r3, #248	; 0xf8
 8006b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006b54:	e05c      	b.n	8006c10 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	895b      	ldrh	r3, [r3, #10]
 8006b5a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006b60:	e02f      	b.n	8006bc2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	18d0      	adds	r0, r2, r3
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	18d1      	adds	r1, r2, r3
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f00b ff07 	bl	801298c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da03      	bge.n	8006b94 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006b8c:	23f8      	movs	r3, #248	; 0xf8
 8006b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006b92:	e03d      	b.n	8006c10 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006ba4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006bb0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006bbc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d8c8      	bhi.n	8006b62 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	18d0      	adds	r0, r2, r3
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4413      	add	r3, r2
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f00b fed3 	bl	801298c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	623b      	str	r3, [r7, #32]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1a1      	bne.n	8006b46 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	4811      	ldr	r0, [pc, #68]	; (8006c4c <low_level_output+0x138>)
 8006c06:	f7fb fb2b 	bl	8002260 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <low_level_output+0x138>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00d      	beq.n	8006c3e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <low_level_output+0x138>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <low_level_output+0x138>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8006c3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3728      	adds	r7, #40	; 0x28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20005b64 	.word	0x20005b64

08006c50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08c      	sub	sp, #48	; 0x30
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8006c74:	484e      	ldr	r0, [pc, #312]	; (8006db0 <low_level_input+0x160>)
 8006c76:	f7fb fbdd 	bl	8002434 <HAL_ETH_GetReceivedFrame>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <low_level_input+0x34>

    return NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e091      	b.n	8006da8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006c84:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <low_level_input+0x160>)
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006c8a:	4b49      	ldr	r3, [pc, #292]	; (8006db0 <low_level_input+0x160>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006c90:	89fb      	ldrh	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006c96:	89fb      	ldrh	r3, [r7, #14]
 8006c98:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f001 fa7e 	bl	80081a0 <pbuf_alloc>
 8006ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d04b      	beq.n	8006d44 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006cac:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <low_level_input+0x160>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cba:	e040      	b.n	8006d3e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	895b      	ldrh	r3, [r3, #10]
 8006cc0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006cc6:	e021      	b.n	8006d0c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	18d0      	adds	r0, r2, r3
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	18d1      	adds	r1, r2, r3
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f00b fe54 	bl	801298c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006cfa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006d06:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d8d6      	bhi.n	8006cc8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	18d0      	adds	r0, r2, r3
 8006d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f00b fe2e 	bl	801298c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1bb      	bne.n	8006cbc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006d44:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <low_level_input+0x160>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e00b      	b.n	8006d68 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3301      	adds	r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <low_level_input+0x160>)
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d3ee      	bcc.n	8006d50 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006d72:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <low_level_input+0x160>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <low_level_input+0x160>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <low_level_input+0x160>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d92:	461a      	mov	r2, r3
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <low_level_input+0x160>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3730      	adds	r7, #48	; 0x30
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20005b64 	.word	0x20005b64

08006db4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff47 	bl	8006c50 <low_level_input>
 8006dc2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	4798      	blx	r3
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006dd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f001 fcc9 	bl	8008778 <pbuf_free>
    p = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e000      	b.n	8006dee <ethernetif_input+0x3a>
  if (p == NULL) return;
 8006dec:	bf00      	nop
  }
}
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <ethernetif_init+0x1c>
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <ethernetif_init+0x48>)
 8006e04:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e08:	490d      	ldr	r1, [pc, #52]	; (8006e40 <ethernetif_init+0x4c>)
 8006e0a:	480e      	ldr	r0, [pc, #56]	; (8006e44 <ethernetif_init+0x50>)
 8006e0c:	f00b fdee 	bl	80129ec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2273      	movs	r2, #115	; 0x73
 8006e14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2274      	movs	r2, #116	; 0x74
 8006e1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a09      	ldr	r2, [pc, #36]	; (8006e48 <ethernetif_init+0x54>)
 8006e24:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <ethernetif_init+0x58>)
 8006e2a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fdc3 	bl	80069b8 <low_level_init>

  return ERR_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	08014144 	.word	0x08014144
 8006e40:	08014160 	.word	0x08014160
 8006e44:	08014170 	.word	0x08014170
 8006e48:	0800f409 	.word	0x0800f409
 8006e4c:	08006b15 	.word	0x08006b15

08006e50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e54:	f7fa f9a8 	bl	80011a8 <HAL_GetTick>
 8006e58:	4603      	mov	r3, r0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d05d      	beq.n	8006f3e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006e82:	4b34      	ldr	r3, [pc, #208]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d03f      	beq.n	8006f0a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4830      	ldr	r0, [pc, #192]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006e92:	f7fb fc36 	bl	8002702 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006e96:	f7fa f987 	bl	80011a8 <HAL_GetTick>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	482b      	ldr	r0, [pc, #172]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006ea8:	f7fb fbc3 	bl	8002632 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006eac:	f7fa f97c 	bl	80011a8 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eba:	d828      	bhi.n	8006f0e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0eb      	beq.n	8006e9e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2110      	movs	r1, #16
 8006ece:	4821      	ldr	r0, [pc, #132]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006ed0:	f7fb fbaf 	bl	8002632 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006ede:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee4:	60da      	str	r2, [r3, #12]
 8006ee6:	e002      	b.n	8006eee <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006ef8:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	609a      	str	r2, [r3, #8]
 8006efe:	e016      	b.n	8006f2e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	e011      	b.n	8006f2e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <ethernetif_update_config+0xb0>
          goto error;
 8006f0e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006f10:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	08db      	lsrs	r3, r3, #3
 8006f16:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006f18:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	2100      	movs	r1, #0
 8006f28:	480a      	ldr	r0, [pc, #40]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f2a:	f7fb fbea 	bl	8002702 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4808      	ldr	r0, [pc, #32]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f32:	f7fb fcab 	bl	800288c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006f36:	4807      	ldr	r0, [pc, #28]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f38:	f7fb fc49 	bl	80027ce <HAL_ETH_Start>
 8006f3c:	e002      	b.n	8006f44 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006f3e:	4805      	ldr	r0, [pc, #20]	; (8006f54 <ethernetif_update_config+0xf4>)
 8006f40:	f7fb fc74 	bl	800282c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f807 	bl	8006f58 <ethernetif_notify_conn_changed>
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20005b64 	.word	0x20005b64

08006f58 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	b21a      	sxth	r2, r3
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b21b      	sxth	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	b29b      	uxth	r3, r3
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	061a      	lsls	r2, r3, #24
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	4313      	orrs	r3, r2
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006fd2:	f000 f985 	bl	80072e0 <mem_init>
  memp_init();
 8006fd6:	f000 fcfd 	bl	80079d4 <memp_init>
  pbuf_init();
  netif_init();
 8006fda:	f000 fddd 	bl	8007b98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006fde:	f007 f927 	bl	800e230 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006fe2:	f001 fe67 	bl	8008cb4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006fe6:	f007 f899 	bl	800e11c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <mem_overflow_check_raw>:
 * @param descr1 description of the element source shown on error
 * @param descr2 description of the element source shown on error
 */
void
mem_overflow_check_raw(void *p, size_t size, const char *descr1, const char *descr2)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b0a8      	sub	sp, #160	; 0xa0
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
#if MEM_SANITY_REGION_AFTER_ALIGNED || MEM_SANITY_REGION_BEFORE_ALIGNED
  u16_t k;
  u8_t *m;

#if MEM_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t *)p + size;
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4413      	add	r3, r2
 8007008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 800700c:	2300      	movs	r3, #0
 800700e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8007012:	e01c      	b.n	800704e <mem_overflow_check_raw+0x5a>
    if (m[k] != 0xcd) {
 8007014:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007018:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800701c:	4413      	add	r3, r2
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2bcd      	cmp	r3, #205	; 0xcd
 8007022:	d00f      	beq.n	8007044 <mem_overflow_check_raw+0x50>
      char errstr[128];
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8007024:	f107 0010 	add.w	r0, r7, #16
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <mem_overflow_check_raw+0xc0>)
 8007030:	2180      	movs	r1, #128	; 0x80
 8007032:	f00b fe6d 	bl	8012d10 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8007036:	f107 0110 	add.w	r1, r7, #16
 800703a:	4b1f      	ldr	r3, [pc, #124]	; (80070b8 <mem_overflow_check_raw+0xc4>)
 800703c:	226d      	movs	r2, #109	; 0x6d
 800703e:	481f      	ldr	r0, [pc, #124]	; (80070bc <mem_overflow_check_raw+0xc8>)
 8007040:	f00b fcd4 	bl	80129ec <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8007044:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007048:	3301      	adds	r3, #1
 800704a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800704e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007052:	2b0f      	cmp	r3, #15
 8007054:	d9de      	bls.n	8007014 <mem_overflow_check_raw+0x20>
    }
  }
#endif /* MEM_SANITY_REGION_AFTER_ALIGNED > 0 */

#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3b10      	subs	r3, #16
 800705a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 800705e:	2300      	movs	r3, #0
 8007060:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8007064:	e01c      	b.n	80070a0 <mem_overflow_check_raw+0xac>
    if (m[k] != 0xcd) {
 8007066:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800706a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800706e:	4413      	add	r3, r2
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2bcd      	cmp	r3, #205	; 0xcd
 8007074:	d00f      	beq.n	8007096 <mem_overflow_check_raw+0xa2>
      char errstr[128];
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8007076:	f107 0010 	add.w	r0, r7, #16
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <mem_overflow_check_raw+0xcc>)
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	f00b fe44 	bl	8012d10 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8007088:	f107 0110 	add.w	r1, r7, #16
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <mem_overflow_check_raw+0xc4>)
 800708e:	2278      	movs	r2, #120	; 0x78
 8007090:	480a      	ldr	r0, [pc, #40]	; (80070bc <mem_overflow_check_raw+0xc8>)
 8007092:	f00b fcab 	bl	80129ec <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8007096:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800709a:	3301      	adds	r3, #1
 800709c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80070a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80070a4:	2b0f      	cmp	r3, #15
 80070a6:	d9de      	bls.n	8007066 <mem_overflow_check_raw+0x72>
#else
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
  LWIP_UNUSED_ARG(descr);
#endif
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3798      	adds	r7, #152	; 0x98
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	08014198 	.word	0x08014198
 80070b8:	080141b8 	.word	0x080141b8
 80070bc:	080141e8 	.word	0x080141e8
 80070c0:	08014210 	.word	0x08014210

080070c4 <mem_overflow_init_raw>:
/**
 * Initialize the restricted area of a mem element.
 */
void
mem_overflow_init_raw(void *p, size_t size)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3b10      	subs	r3, #16
 80070d2:	60fb      	str	r3, [r7, #12]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80070d4:	2210      	movs	r2, #16
 80070d6:	21cd      	movs	r1, #205	; 0xcd
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f00b fc7f 	bl	80129dc <memset>
#endif
#if MEM_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t *)p + size;
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	4413      	add	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80070e6:	2210      	movs	r2, #16
 80070e8:	21cd      	movs	r1, #205	; 0xcd
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f00b fc76 	bl	80129dc <memset>
#endif
#else /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <mem_overflow_init_element>:
#endif

#if MEM_OVERFLOW_CHECK
static void
mem_overflow_init_element(struct mem *mem, mem_size_t user_size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3318      	adds	r3, #24
 8007108:	60fb      	str	r3, [r7, #12]
  mem->user_size = user_size;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	887a      	ldrh	r2, [r7, #2]
 800710e:	80da      	strh	r2, [r3, #6]
  mem_overflow_init_raw(p, user_size);
 8007110:	887b      	ldrh	r3, [r7, #2]
 8007112:	4619      	mov	r1, r3
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff ffd5 	bl	80070c4 <mem_overflow_init_raw>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <mem_overflow_check_element>:

static void
mem_overflow_check_element(struct mem *mem)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3318      	adds	r3, #24
 8007130:	60fb      	str	r3, [r7, #12]
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	4619      	mov	r1, r3
 8007138:	4b04      	ldr	r3, [pc, #16]	; (800714c <mem_overflow_check_element+0x28>)
 800713a:	4a05      	ldr	r2, [pc, #20]	; (8007150 <mem_overflow_check_element+0x2c>)
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ff59 	bl	8006ff4 <mem_overflow_check_raw>
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	08014230 	.word	0x08014230
 8007150:	08014234 	.word	0x08014234

08007154 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <ptr_to_mem+0x20>)
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	4413      	add	r3, r2
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20009a6c 	.word	0x20009a6c

08007178 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <mem_to_ptr+0x20>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	b29b      	uxth	r3, r3
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20009a6c 	.word	0x20009a6c

0800719c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80071a4:	4b45      	ldr	r3, [pc, #276]	; (80072bc <plug_holes+0x120>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d206      	bcs.n	80071bc <plug_holes+0x20>
 80071ae:	4b44      	ldr	r3, [pc, #272]	; (80072c0 <plug_holes+0x124>)
 80071b0:	f240 12df 	movw	r2, #479	; 0x1df
 80071b4:	4943      	ldr	r1, [pc, #268]	; (80072c4 <plug_holes+0x128>)
 80071b6:	4844      	ldr	r0, [pc, #272]	; (80072c8 <plug_holes+0x12c>)
 80071b8:	f00b fc18 	bl	80129ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80071bc:	4b43      	ldr	r3, [pc, #268]	; (80072cc <plug_holes+0x130>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d306      	bcc.n	80071d4 <plug_holes+0x38>
 80071c6:	4b3e      	ldr	r3, [pc, #248]	; (80072c0 <plug_holes+0x124>)
 80071c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80071cc:	4940      	ldr	r1, [pc, #256]	; (80072d0 <plug_holes+0x134>)
 80071ce:	483e      	ldr	r0, [pc, #248]	; (80072c8 <plug_holes+0x12c>)
 80071d0:	f00b fc0c 	bl	80129ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	791b      	ldrb	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <plug_holes+0x4e>
 80071dc:	4b38      	ldr	r3, [pc, #224]	; (80072c0 <plug_holes+0x124>)
 80071de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80071e2:	493c      	ldr	r1, [pc, #240]	; (80072d4 <plug_holes+0x138>)
 80071e4:	4838      	ldr	r0, [pc, #224]	; (80072c8 <plug_holes+0x12c>)
 80071e6:	f00b fc01 	bl	80129ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80071f2:	d906      	bls.n	8007202 <plug_holes+0x66>
 80071f4:	4b32      	ldr	r3, [pc, #200]	; (80072c0 <plug_holes+0x124>)
 80071f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80071fa:	4937      	ldr	r1, [pc, #220]	; (80072d8 <plug_holes+0x13c>)
 80071fc:	4832      	ldr	r0, [pc, #200]	; (80072c8 <plug_holes+0x12c>)
 80071fe:	f00b fbf5 	bl	80129ec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff ffa4 	bl	8007154 <ptr_to_mem>
 800720c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	429a      	cmp	r2, r3
 8007214:	d024      	beq.n	8007260 <plug_holes+0xc4>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d120      	bne.n	8007260 <plug_holes+0xc4>
 800721e:	4b2b      	ldr	r3, [pc, #172]	; (80072cc <plug_holes+0x130>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	429a      	cmp	r2, r3
 8007226:	d01b      	beq.n	8007260 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007228:	4b2c      	ldr	r3, [pc, #176]	; (80072dc <plug_holes+0x140>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	429a      	cmp	r2, r3
 8007230:	d102      	bne.n	8007238 <plug_holes+0x9c>
      lfree = mem;
 8007232:	4a2a      	ldr	r2, [pc, #168]	; (80072dc <plug_holes+0x140>)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	881a      	ldrh	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007248:	d00a      	beq.n	8007260 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff ff80 	bl	8007154 <ptr_to_mem>
 8007254:	4604      	mov	r4, r0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ff8e 	bl	8007178 <mem_to_ptr>
 800725c:	4603      	mov	r3, r0
 800725e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	885b      	ldrh	r3, [r3, #2]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ff75 	bl	8007154 <ptr_to_mem>
 800726a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d01f      	beq.n	80072b4 <plug_holes+0x118>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	791b      	ldrb	r3, [r3, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11b      	bne.n	80072b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800727c:	4b17      	ldr	r3, [pc, #92]	; (80072dc <plug_holes+0x140>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d102      	bne.n	800728c <plug_holes+0xf0>
      lfree = pmem;
 8007286:	4a15      	ldr	r2, [pc, #84]	; (80072dc <plug_holes+0x140>)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	881a      	ldrh	r2, [r3, #0]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800729c:	d00a      	beq.n	80072b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff ff56 	bl	8007154 <ptr_to_mem>
 80072a8:	4604      	mov	r4, r0
 80072aa:	68b8      	ldr	r0, [r7, #8]
 80072ac:	f7ff ff64 	bl	8007178 <mem_to_ptr>
 80072b0:	4603      	mov	r3, r0
 80072b2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd90      	pop	{r4, r7, pc}
 80072bc:	20009a6c 	.word	0x20009a6c
 80072c0:	080141b8 	.word	0x080141b8
 80072c4:	0801423c 	.word	0x0801423c
 80072c8:	080141e8 	.word	0x080141e8
 80072cc:	20009a70 	.word	0x20009a70
 80072d0:	08014254 	.word	0x08014254
 80072d4:	08014270 	.word	0x08014270
 80072d8:	0801428c 	.word	0x0801428c
 80072dc:	20009a74 	.word	0x20009a74

080072e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <mem_init+0x68>)
 80072e8:	3303      	adds	r3, #3
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	461a      	mov	r2, r3
 80072f0:	4b16      	ldr	r3, [pc, #88]	; (800734c <mem_init+0x6c>)
 80072f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <mem_init+0x6c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8007300:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800730e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007312:	f7ff ff1f 	bl	8007154 <ptr_to_mem>
 8007316:	4603      	mov	r3, r0
 8007318:	4a0d      	ldr	r2, [pc, #52]	; (8007350 <mem_init+0x70>)
 800731a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <mem_init+0x70>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2201      	movs	r2, #1
 8007322:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <mem_init+0x70>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800732c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800732e:	4b08      	ldr	r3, [pc, #32]	; (8007350 <mem_init+0x70>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8007336:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <mem_init+0x6c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a05      	ldr	r2, [pc, #20]	; (8007354 <mem_init+0x74>)
 800733e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20005bd8 	.word	0x20005bd8
 800734c:	20009a6c 	.word	0x20009a6c
 8007350:	20009a70 	.word	0x20009a70
 8007354:	20009a74 	.word	0x20009a74

08007358 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff09 	bl	8007178 <mem_to_ptr>
 8007366:	4603      	mov	r3, r0
 8007368:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fef0 	bl	8007154 <ptr_to_mem>
 8007374:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	885b      	ldrh	r3, [r3, #2]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff feea 	bl	8007154 <ptr_to_mem>
 8007380:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800738a:	d818      	bhi.n	80073be <mem_link_valid+0x66>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	885b      	ldrh	r3, [r3, #2]
 8007390:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007394:	d813      	bhi.n	80073be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800739a:	8afa      	ldrh	r2, [r7, #22]
 800739c:	429a      	cmp	r2, r3
 800739e:	d004      	beq.n	80073aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	8afa      	ldrh	r2, [r7, #22]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d109      	bne.n	80073be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80073aa:	4b08      	ldr	r3, [pc, #32]	; (80073cc <mem_link_valid+0x74>)
 80073ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d006      	beq.n	80073c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	885b      	ldrh	r3, [r3, #2]
 80073b8:	8afa      	ldrh	r2, [r7, #22]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d001      	beq.n	80073c2 <mem_link_valid+0x6a>
    return 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <mem_link_valid+0x6c>
  }
  return 1;
 80073c2:	2301      	movs	r3, #1
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20009a70 	.word	0x20009a70

080073d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d04f      	beq.n	800747e <mem_free+0xae>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80073e8:	4b27      	ldr	r3, [pc, #156]	; (8007488 <mem_free+0xb8>)
 80073ea:	f240 2273 	movw	r2, #627	; 0x273
 80073ee:	4927      	ldr	r1, [pc, #156]	; (800748c <mem_free+0xbc>)
 80073f0:	4827      	ldr	r0, [pc, #156]	; (8007490 <mem_free+0xc0>)
 80073f2:	f00b fafb 	bl	80129ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80073f6:	e043      	b.n	8007480 <mem_free+0xb0>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3b18      	subs	r3, #24
 80073fc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80073fe:	4b25      	ldr	r3, [pc, #148]	; (8007494 <mem_free+0xc4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d306      	bcc.n	8007416 <mem_free+0x46>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f103 020c 	add.w	r2, r3, #12
 800740e:	4b22      	ldr	r3, [pc, #136]	; (8007498 <mem_free+0xc8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d907      	bls.n	8007426 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007416:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <mem_free+0xb8>)
 8007418:	f240 227f 	movw	r2, #639	; 0x27f
 800741c:	491f      	ldr	r1, [pc, #124]	; (800749c <mem_free+0xcc>)
 800741e:	481c      	ldr	r0, [pc, #112]	; (8007490 <mem_free+0xc0>)
 8007420:	f00b fae4 	bl	80129ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007424:	e02c      	b.n	8007480 <mem_free+0xb0>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fe7c 	bl	8007124 <mem_overflow_check_element>
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	791b      	ldrb	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <mem_free+0x74>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <mem_free+0xb8>)
 8007436:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800743a:	4919      	ldr	r1, [pc, #100]	; (80074a0 <mem_free+0xd0>)
 800743c:	4814      	ldr	r0, [pc, #80]	; (8007490 <mem_free+0xc0>)
 800743e:	f00b fad5 	bl	80129ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007442:	e01d      	b.n	8007480 <mem_free+0xb0>
  }

  if (!mem_link_valid(mem)) {
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff ff87 	bl	8007358 <mem_link_valid>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d107      	bne.n	8007460 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <mem_free+0xb8>)
 8007452:	f240 2295 	movw	r2, #661	; 0x295
 8007456:	4913      	ldr	r1, [pc, #76]	; (80074a4 <mem_free+0xd4>)
 8007458:	480d      	ldr	r0, [pc, #52]	; (8007490 <mem_free+0xc0>)
 800745a:	f00b fac7 	bl	80129ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800745e:	e00f      	b.n	8007480 <mem_free+0xb0>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <mem_free+0xd8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	d202      	bcs.n	8007476 <mem_free+0xa6>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007470:	4a0d      	ldr	r2, [pc, #52]	; (80074a8 <mem_free+0xd8>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fe90 	bl	800719c <plug_holes>
 800747c:	e000      	b.n	8007480 <mem_free+0xb0>
    return;
 800747e:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	080141b8 	.word	0x080141b8
 800748c:	080142b8 	.word	0x080142b8
 8007490:	080141e8 	.word	0x080141e8
 8007494:	20009a6c 	.word	0x20009a6c
 8007498:	20009a70 	.word	0x20009a70
 800749c:	080142dc 	.word	0x080142dc
 80074a0:	080142f8 	.word	0x080142f8
 80074a4:	08014320 	.word	0x08014320
 80074a8:	20009a74 	.word	0x20009a74

080074ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80074b8:	887b      	ldrh	r3, [r7, #2]
 80074ba:	3303      	adds	r3, #3
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80074c4:	8bfb      	ldrh	r3, [r7, #30]
 80074c6:	2b0b      	cmp	r3, #11
 80074c8:	d801      	bhi.n	80074ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80074ca:	230c      	movs	r3, #12
 80074cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80074ce:	8bfb      	ldrh	r3, [r7, #30]
 80074d0:	3320      	adds	r3, #32
 80074d2:	83fb      	strh	r3, [r7, #30]
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80074d4:	8bfb      	ldrh	r3, [r7, #30]
 80074d6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80074da:	d803      	bhi.n	80074e4 <mem_trim+0x38>
 80074dc:	8bfa      	ldrh	r2, [r7, #30]
 80074de:	887b      	ldrh	r3, [r7, #2]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d201      	bcs.n	80074e8 <mem_trim+0x3c>
    return NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e0d4      	b.n	8007692 <mem_trim+0x1e6>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80074e8:	4b6c      	ldr	r3, [pc, #432]	; (800769c <mem_trim+0x1f0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d304      	bcc.n	80074fc <mem_trim+0x50>
 80074f2:	4b6b      	ldr	r3, [pc, #428]	; (80076a0 <mem_trim+0x1f4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d306      	bcc.n	800750a <mem_trim+0x5e>
 80074fc:	4b69      	ldr	r3, [pc, #420]	; (80076a4 <mem_trim+0x1f8>)
 80074fe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007502:	4969      	ldr	r1, [pc, #420]	; (80076a8 <mem_trim+0x1fc>)
 8007504:	4869      	ldr	r0, [pc, #420]	; (80076ac <mem_trim+0x200>)
 8007506:	f00b fa71 	bl	80129ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800750a:	4b64      	ldr	r3, [pc, #400]	; (800769c <mem_trim+0x1f0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d304      	bcc.n	800751e <mem_trim+0x72>
 8007514:	4b62      	ldr	r3, [pc, #392]	; (80076a0 <mem_trim+0x1f4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d301      	bcc.n	8007522 <mem_trim+0x76>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	e0b7      	b.n	8007692 <mem_trim+0x1e6>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3b18      	subs	r3, #24
 8007526:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
 8007528:	69b8      	ldr	r0, [r7, #24]
 800752a:	f7ff fdfb 	bl	8007124 <mem_overflow_check_element>
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800752e:	69b8      	ldr	r0, [r7, #24]
 8007530:	f7ff fe22 	bl	8007178 <mem_to_ptr>
 8007534:	4603      	mov	r3, r0
 8007536:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	881a      	ldrh	r2, [r3, #0]
 800753c:	8afb      	ldrh	r3, [r7, #22]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b28      	subs	r3, #40	; 0x28
 8007544:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007546:	8bfa      	ldrh	r2, [r7, #30]
 8007548:	8abb      	ldrh	r3, [r7, #20]
 800754a:	429a      	cmp	r2, r3
 800754c:	d906      	bls.n	800755c <mem_trim+0xb0>
 800754e:	4b55      	ldr	r3, [pc, #340]	; (80076a4 <mem_trim+0x1f8>)
 8007550:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007554:	4956      	ldr	r1, [pc, #344]	; (80076b0 <mem_trim+0x204>)
 8007556:	4855      	ldr	r0, [pc, #340]	; (80076ac <mem_trim+0x200>)
 8007558:	f00b fa48 	bl	80129ec <iprintf>
  if (newsize > size) {
 800755c:	8bfa      	ldrh	r2, [r7, #30]
 800755e:	8abb      	ldrh	r3, [r7, #20]
 8007560:	429a      	cmp	r2, r3
 8007562:	d901      	bls.n	8007568 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	e094      	b.n	8007692 <mem_trim+0x1e6>
  }
  if (newsize == size) {
 8007568:	8bfa      	ldrh	r2, [r7, #30]
 800756a:	8abb      	ldrh	r3, [r7, #20]
 800756c:	429a      	cmp	r2, r3
 800756e:	d101      	bne.n	8007574 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	e08e      	b.n	8007692 <mem_trim+0x1e6>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fdeb 	bl	8007154 <ptr_to_mem>
 800757e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d13f      	bne.n	8007608 <mem_trim+0x15c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007590:	d106      	bne.n	80075a0 <mem_trim+0xf4>
 8007592:	4b44      	ldr	r3, [pc, #272]	; (80076a4 <mem_trim+0x1f8>)
 8007594:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007598:	4946      	ldr	r1, [pc, #280]	; (80076b4 <mem_trim+0x208>)
 800759a:	4844      	ldr	r0, [pc, #272]	; (80076ac <mem_trim+0x200>)
 800759c:	f00b fa26 	bl	80129ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80075a6:	8afa      	ldrh	r2, [r7, #22]
 80075a8:	8bfb      	ldrh	r3, [r7, #30]
 80075aa:	4413      	add	r3, r2
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3308      	adds	r3, #8
 80075b0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80075b2:	4b41      	ldr	r3, [pc, #260]	; (80076b8 <mem_trim+0x20c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d106      	bne.n	80075ca <mem_trim+0x11e>
      lfree = ptr_to_mem(ptr2);
 80075bc:	89fb      	ldrh	r3, [r7, #14]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fdc8 	bl	8007154 <ptr_to_mem>
 80075c4:	4603      	mov	r3, r0
 80075c6:	4a3c      	ldr	r2, [pc, #240]	; (80076b8 <mem_trim+0x20c>)
 80075c8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fdc1 	bl	8007154 <ptr_to_mem>
 80075d2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2200      	movs	r2, #0
 80075d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	89ba      	ldrh	r2, [r7, #12]
 80075de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	8afa      	ldrh	r2, [r7, #22]
 80075e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	89fa      	ldrh	r2, [r7, #14]
 80075ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80075f4:	d047      	beq.n	8007686 <mem_trim+0x1da>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fdaa 	bl	8007154 <ptr_to_mem>
 8007600:	4602      	mov	r2, r0
 8007602:	89fb      	ldrh	r3, [r7, #14]
 8007604:	8053      	strh	r3, [r2, #2]
 8007606:	e03e      	b.n	8007686 <mem_trim+0x1da>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007608:	8bfb      	ldrh	r3, [r7, #30]
 800760a:	f103 0214 	add.w	r2, r3, #20
 800760e:	8abb      	ldrh	r3, [r7, #20]
 8007610:	429a      	cmp	r2, r3
 8007612:	d838      	bhi.n	8007686 <mem_trim+0x1da>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007614:	8afa      	ldrh	r2, [r7, #22]
 8007616:	8bfb      	ldrh	r3, [r7, #30]
 8007618:	4413      	add	r3, r2
 800761a:	b29b      	uxth	r3, r3
 800761c:	3308      	adds	r3, #8
 800761e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007628:	d106      	bne.n	8007638 <mem_trim+0x18c>
 800762a:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <mem_trim+0x1f8>)
 800762c:	f240 3216 	movw	r2, #790	; 0x316
 8007630:	4920      	ldr	r1, [pc, #128]	; (80076b4 <mem_trim+0x208>)
 8007632:	481e      	ldr	r0, [pc, #120]	; (80076ac <mem_trim+0x200>)
 8007634:	f00b f9da 	bl	80129ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007638:	89fb      	ldrh	r3, [r7, #14]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fd8a 	bl	8007154 <ptr_to_mem>
 8007640:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <mem_trim+0x20c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	d202      	bcs.n	8007652 <mem_trim+0x1a6>
      lfree = mem2;
 800764c:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <mem_trim+0x20c>)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2200      	movs	r2, #0
 8007656:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	8afa      	ldrh	r2, [r7, #22]
 8007664:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	89fa      	ldrh	r2, [r7, #14]
 800766a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007674:	d007      	beq.n	8007686 <mem_trim+0x1da>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fd6a 	bl	8007154 <ptr_to_mem>
 8007680:	4602      	mov	r2, r0
 8007682:	89fb      	ldrh	r3, [r7, #14]
 8007684:	8053      	strh	r3, [r2, #2]
    to create another struct mem
    -> don't do anyhting.
    -> the remaining space stays unused since it is too small
  } */
#if MEM_OVERFLOW_CHECK
  mem_overflow_init_element(mem, new_size);
 8007686:	887b      	ldrh	r3, [r7, #2]
 8007688:	4619      	mov	r1, r3
 800768a:	69b8      	ldr	r0, [r7, #24]
 800768c:	f7ff fd34 	bl	80070f8 <mem_overflow_init_element>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007690:	687b      	ldr	r3, [r7, #4]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20009a6c 	.word	0x20009a6c
 80076a0:	20009a70 	.word	0x20009a70
 80076a4:	080141b8 	.word	0x080141b8
 80076a8:	08014354 	.word	0x08014354
 80076ac:	080141e8 	.word	0x080141e8
 80076b0:	0801436c 	.word	0x0801436c
 80076b4:	0801438c 	.word	0x0801438c
 80076b8:	20009a74 	.word	0x20009a74

080076bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <mem_malloc+0x14>
    return NULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e0e1      	b.n	8007894 <mem_malloc+0x1d8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	3303      	adds	r3, #3
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80076dc:	8bbb      	ldrh	r3, [r7, #28]
 80076de:	2b0b      	cmp	r3, #11
 80076e0:	d801      	bhi.n	80076e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80076e2:	230c      	movs	r3, #12
 80076e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80076e6:	8bbb      	ldrh	r3, [r7, #28]
 80076e8:	3320      	adds	r3, #32
 80076ea:	83bb      	strh	r3, [r7, #28]
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80076ec:	8bbb      	ldrh	r3, [r7, #28]
 80076ee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80076f2:	d803      	bhi.n	80076fc <mem_malloc+0x40>
 80076f4:	8bba      	ldrh	r2, [r7, #28]
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d201      	bcs.n	8007700 <mem_malloc+0x44>
    return NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e0c9      	b.n	8007894 <mem_malloc+0x1d8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007700:	4b66      	ldr	r3, [pc, #408]	; (800789c <mem_malloc+0x1e0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fd37 	bl	8007178 <mem_to_ptr>
 800770a:	4603      	mov	r3, r0
 800770c:	83fb      	strh	r3, [r7, #30]
 800770e:	e0b9      	b.n	8007884 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007710:	8bfb      	ldrh	r3, [r7, #30]
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fd1e 	bl	8007154 <ptr_to_mem>
 8007718:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	f040 80a9 	bne.w	8007876 <mem_malloc+0x1ba>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	8bfb      	ldrh	r3, [r7, #30]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f1a3 0208 	sub.w	r2, r3, #8
 8007732:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007734:	429a      	cmp	r2, r3
 8007736:	f0c0 809e 	bcc.w	8007876 <mem_malloc+0x1ba>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	8bfb      	ldrh	r3, [r7, #30]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	f1a3 0208 	sub.w	r2, r3, #8
 8007748:	8bbb      	ldrh	r3, [r7, #28]
 800774a:	3314      	adds	r3, #20
 800774c:	429a      	cmp	r2, r3
 800774e:	d333      	bcc.n	80077b8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007750:	8bfa      	ldrh	r2, [r7, #30]
 8007752:	8bbb      	ldrh	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	b29b      	uxth	r3, r3
 8007758:	3308      	adds	r3, #8
 800775a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800775c:	8a7b      	ldrh	r3, [r7, #18]
 800775e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007762:	d106      	bne.n	8007772 <mem_malloc+0xb6>
 8007764:	4b4e      	ldr	r3, [pc, #312]	; (80078a0 <mem_malloc+0x1e4>)
 8007766:	f240 3287 	movw	r2, #903	; 0x387
 800776a:	494e      	ldr	r1, [pc, #312]	; (80078a4 <mem_malloc+0x1e8>)
 800776c:	484e      	ldr	r0, [pc, #312]	; (80078a8 <mem_malloc+0x1ec>)
 800776e:	f00b f93d 	bl	80129ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007772:	8a7b      	ldrh	r3, [r7, #18]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fced 	bl	8007154 <ptr_to_mem>
 800777a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	881a      	ldrh	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8bfa      	ldrh	r2, [r7, #30]
 800778e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	8a7a      	ldrh	r2, [r7, #18]
 8007794:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2201      	movs	r2, #1
 800779a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80077a4:	d00b      	beq.n	80077be <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff fcd2 	bl	8007154 <ptr_to_mem>
 80077b0:	4602      	mov	r2, r0
 80077b2:	8a7b      	ldrh	r3, [r7, #18]
 80077b4:	8053      	strh	r3, [r2, #2]
 80077b6:	e002      	b.n	80077be <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2201      	movs	r2, #1
 80077bc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80077be:	4b37      	ldr	r3, [pc, #220]	; (800789c <mem_malloc+0x1e0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d127      	bne.n	8007818 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80077c8:	4b34      	ldr	r3, [pc, #208]	; (800789c <mem_malloc+0x1e0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80077ce:	e005      	b.n	80077dc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fcbd 	bl	8007154 <ptr_to_mem>
 80077da:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <mem_malloc+0x132>
 80077e4:	4b31      	ldr	r3, [pc, #196]	; (80078ac <mem_malloc+0x1f0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1f0      	bne.n	80077d0 <mem_malloc+0x114>
          }
          lfree = cur;
 80077ee:	4a2b      	ldr	r2, [pc, #172]	; (800789c <mem_malloc+0x1e0>)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80077f4:	4b29      	ldr	r3, [pc, #164]	; (800789c <mem_malloc+0x1e0>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <mem_malloc+0x1f0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d00b      	beq.n	8007818 <mem_malloc+0x15c>
 8007800:	4b26      	ldr	r3, [pc, #152]	; (800789c <mem_malloc+0x1e0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	791b      	ldrb	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <mem_malloc+0x15c>
 800780a:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <mem_malloc+0x1e4>)
 800780c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007810:	4927      	ldr	r1, [pc, #156]	; (80078b0 <mem_malloc+0x1f4>)
 8007812:	4825      	ldr	r0, [pc, #148]	; (80078a8 <mem_malloc+0x1ec>)
 8007814:	f00b f8ea 	bl	80129ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007818:	8bba      	ldrh	r2, [r7, #28]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	4413      	add	r3, r2
 800781e:	3308      	adds	r3, #8
 8007820:	4a22      	ldr	r2, [pc, #136]	; (80078ac <mem_malloc+0x1f0>)
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	4293      	cmp	r3, r2
 8007826:	d906      	bls.n	8007836 <mem_malloc+0x17a>
 8007828:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <mem_malloc+0x1e4>)
 800782a:	f240 32b9 	movw	r2, #953	; 0x3b9
 800782e:	4921      	ldr	r1, [pc, #132]	; (80078b4 <mem_malloc+0x1f8>)
 8007830:	481d      	ldr	r0, [pc, #116]	; (80078a8 <mem_malloc+0x1ec>)
 8007832:	f00b f8db 	bl	80129ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <mem_malloc+0x192>
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <mem_malloc+0x1e4>)
 8007842:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007846:	491c      	ldr	r1, [pc, #112]	; (80078b8 <mem_malloc+0x1fc>)
 8007848:	4817      	ldr	r0, [pc, #92]	; (80078a8 <mem_malloc+0x1ec>)
 800784a:	f00b f8cf 	bl	80129ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <mem_malloc+0x1aa>
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <mem_malloc+0x1e4>)
 800785a:	f240 32bd 	movw	r2, #957	; 0x3bd
 800785e:	4917      	ldr	r1, [pc, #92]	; (80078bc <mem_malloc+0x200>)
 8007860:	4811      	ldr	r0, [pc, #68]	; (80078a8 <mem_malloc+0x1ec>)
 8007862:	f00b f8c3 	bl	80129ec <iprintf>
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	4619      	mov	r1, r3
 800786a:	6978      	ldr	r0, [r7, #20]
 800786c:	f7ff fc44 	bl	80070f8 <mem_overflow_init_element>
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	3318      	adds	r3, #24
 8007874:	e00e      	b.n	8007894 <mem_malloc+0x1d8>
         ptr = ptr_to_mem(ptr)->next) {
 8007876:	8bfb      	ldrh	r3, [r7, #30]
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fc6b 	bl	8007154 <ptr_to_mem>
 800787e:	4603      	mov	r3, r0
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007884:	8bfa      	ldrh	r2, [r7, #30]
 8007886:	8bbb      	ldrh	r3, [r7, #28]
 8007888:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 800788c:	429a      	cmp	r2, r3
 800788e:	f4ff af3f 	bcc.w	8007710 <mem_malloc+0x54>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3720      	adds	r7, #32
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20009a74 	.word	0x20009a74
 80078a0:	080141b8 	.word	0x080141b8
 80078a4:	0801438c 	.word	0x0801438c
 80078a8:	080141e8 	.word	0x080141e8
 80078ac:	20009a70 	.word	0x20009a70
 80078b0:	080143a0 	.word	0x080143a0
 80078b4:	080143bc 	.word	0x080143bc
 80078b8:	080143ec 	.word	0x080143ec
 80078bc:	0801441c 	.word	0x0801441c

080078c0 <memp_sanity>:
/**
 * Check that memp-lists don't form a circle, using "Floyd's cycle-finding algorithm".
 */
static int
memp_sanity(const struct memp_desc *desc)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  struct memp *t, *h;

  t = *desc->tab;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
  if (t != NULL) {
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01c      	beq.n	8007910 <memp_sanity+0x50>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	e012      	b.n	8007904 <memp_sanity+0x44>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
      if (t == h) {
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d101      	bne.n	80078ea <memp_sanity+0x2a>
        return 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e013      	b.n	8007912 <memp_sanity+0x52>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <memp_sanity+0x40>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	e000      	b.n	8007902 <memp_sanity+0x42>
 8007900:	2300      	movs	r3, #0
 8007902:	60bb      	str	r3, [r7, #8]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <memp_sanity+0x50>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <memp_sanity+0x1e>
      }
    }
  }

  return 1;
 8007910:	2301      	movs	r3, #1
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
	...

08007920 <memp_overflow_check_element>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element(struct memp *p, const struct memp_desc *desc)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f103 001c 	add.w	r0, r3, #28
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	889b      	ldrh	r3, [r3, #4]
 8007934:	4619      	mov	r1, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a03      	ldr	r2, [pc, #12]	; (8007948 <memp_overflow_check_element+0x28>)
 800793c:	f7ff fb5a 	bl	8006ff4 <mem_overflow_check_raw>
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	080144a8 	.word	0x080144a8

0800794c <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f103 021c 	add.w	r2, r3, #28
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	889b      	ldrh	r3, [r3, #4]
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7ff fbae 	bl	80070c4 <mem_overflow_init_raw>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	3303      	adds	r3, #3
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e015      	b.n	80079be <memp_init_pool+0x4e>
    memp->next = *desc->tab;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	68b8      	ldr	r0, [r7, #8]
 80079a8:	f7ff ffd0 	bl	800794c <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	889b      	ldrh	r3, [r3, #4]
#if MEMP_OVERFLOW_CHECK
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 80079b0:	332c      	adds	r3, #44	; 0x2c
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	88db      	ldrh	r3, [r3, #6]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	dbe3      	blt.n	8007992 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80079da:	2300      	movs	r3, #0
 80079dc:	80fb      	strh	r3, [r7, #6]
 80079de:	e009      	b.n	80079f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <memp_init+0x30>)
 80079e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff ffc1 	bl	8007970 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	3301      	adds	r3, #1
 80079f2:	80fb      	strh	r3, [r7, #6]
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d9f2      	bls.n	80079e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	08016ca4 	.word	0x08016ca4

08007a08 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	617b      	str	r3, [r7, #20]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d020      	beq.n	8007a64 <do_memp_malloc_pool_fn+0x5c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f7ff ff7b 	bl	8007920 <memp_overflow_check_element>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	605a      	str	r2, [r3, #4]
    memp->line = line;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	609a      	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <do_memp_malloc_pool_fn+0x56>
 8007a50:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <do_memp_malloc_pool_fn+0x68>)
 8007a52:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007a56:	4907      	ldr	r1, [pc, #28]	; (8007a74 <do_memp_malloc_pool_fn+0x6c>)
 8007a58:	4807      	ldr	r0, [pc, #28]	; (8007a78 <do_memp_malloc_pool_fn+0x70>)
 8007a5a:	f00a ffc7 	bl	80129ec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	331c      	adds	r3, #28
 8007a62:	e000      	b.n	8007a66 <do_memp_malloc_pool_fn+0x5e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	080144b0 	.word	0x080144b0
 8007a74:	080144e0 	.word	0x080144e0
 8007a78:	08014504 	.word	0x08014504

08007a7c <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	73fb      	strb	r3, [r7, #15]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d908      	bls.n	8007aa2 <memp_malloc_fn+0x26>
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <memp_malloc_fn+0x44>)
 8007a92:	f240 1257 	movw	r2, #343	; 0x157
 8007a96:	490b      	ldr	r1, [pc, #44]	; (8007ac4 <memp_malloc_fn+0x48>)
 8007a98:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <memp_malloc_fn+0x4c>)
 8007a9a:	f00a ffa7 	bl	80129ec <iprintf>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e00a      	b.n	8007ab8 <memp_malloc_fn+0x3c>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <memp_malloc_fn+0x50>)
 8007aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff ffaa 	bl	8007a08 <do_memp_malloc_pool_fn>
 8007ab4:	6178      	str	r0, [r7, #20]
#endif

  return memp;
 8007ab6:	697b      	ldr	r3, [r7, #20]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	080144b0 	.word	0x080144b0
 8007ac4:	08014540 	.word	0x08014540
 8007ac8:	08014504 	.word	0x08014504
 8007acc:	08016ca4 	.word	0x08016ca4

08007ad0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d006      	beq.n	8007af2 <do_memp_free_pool+0x22>
 8007ae4:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <do_memp_free_pool+0x64>)
 8007ae6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007aea:	4913      	ldr	r1, [pc, #76]	; (8007b38 <do_memp_free_pool+0x68>)
 8007aec:	4813      	ldr	r0, [pc, #76]	; (8007b3c <do_memp_free_pool+0x6c>)
 8007aee:	f00a ff7d 	bl	80129ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	3b1c      	subs	r3, #28
 8007af6:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff ff10 	bl	8007920 <memp_overflow_check_element>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff fed4 	bl	80078c0 <memp_sanity>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <do_memp_free_pool+0x5c>
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <do_memp_free_pool+0x64>)
 8007b20:	f240 1285 	movw	r2, #389	; 0x185
 8007b24:	4906      	ldr	r1, [pc, #24]	; (8007b40 <do_memp_free_pool+0x70>)
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <do_memp_free_pool+0x6c>)
 8007b28:	f00a ff60 	bl	80129ec <iprintf>
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	080144b0 	.word	0x080144b0
 8007b38:	08014560 	.word	0x08014560
 8007b3c:	08014504 	.word	0x08014504
 8007b40:	08014580 	.word	0x08014580

08007b44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d907      	bls.n	8007b66 <memp_free+0x22>
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <memp_free+0x44>)
 8007b58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007b5c:	490b      	ldr	r1, [pc, #44]	; (8007b8c <memp_free+0x48>)
 8007b5e:	480c      	ldr	r0, [pc, #48]	; (8007b90 <memp_free+0x4c>)
 8007b60:	f00a ff44 	bl	80129ec <iprintf>
 8007b64:	e00c      	b.n	8007b80 <memp_free+0x3c>

  if (mem == NULL) {
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <memp_free+0x50>)
 8007b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff ffaa 	bl	8007ad0 <do_memp_free_pool>
 8007b7c:	e000      	b.n	8007b80 <memp_free+0x3c>
    return;
 8007b7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	080144b0 	.word	0x080144b0
 8007b8c:	0801458c 	.word	0x0801458c
 8007b90:	08014504 	.word	0x08014504
 8007b94:	08016ca4 	.word	0x08016ca4

08007b98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007b9c:	bf00      	nop
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d108      	bne.n	8007bce <netif_add+0x26>
 8007bbc:	4b57      	ldr	r3, [pc, #348]	; (8007d1c <netif_add+0x174>)
 8007bbe:	f240 1227 	movw	r2, #295	; 0x127
 8007bc2:	4957      	ldr	r1, [pc, #348]	; (8007d20 <netif_add+0x178>)
 8007bc4:	4857      	ldr	r0, [pc, #348]	; (8007d24 <netif_add+0x17c>)
 8007bc6:	f00a ff11 	bl	80129ec <iprintf>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e0a2      	b.n	8007d14 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d108      	bne.n	8007be6 <netif_add+0x3e>
 8007bd4:	4b51      	ldr	r3, [pc, #324]	; (8007d1c <netif_add+0x174>)
 8007bd6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007bda:	4953      	ldr	r1, [pc, #332]	; (8007d28 <netif_add+0x180>)
 8007bdc:	4851      	ldr	r0, [pc, #324]	; (8007d24 <netif_add+0x17c>)
 8007bde:	f00a ff05 	bl	80129ec <iprintf>
 8007be2:	2300      	movs	r3, #0
 8007be4:	e096      	b.n	8007d14 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007bec:	4b4f      	ldr	r3, [pc, #316]	; (8007d2c <netif_add+0x184>)
 8007bee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007bf6:	4b4d      	ldr	r3, [pc, #308]	; (8007d2c <netif_add+0x184>)
 8007bf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c00:	4b4a      	ldr	r3, [pc, #296]	; (8007d2c <netif_add+0x184>)
 8007c02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4a45      	ldr	r2, [pc, #276]	; (8007d30 <netif_add+0x188>)
 8007c1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007c36:	4b3f      	ldr	r3, [pc, #252]	; (8007d34 <netif_add+0x18c>)
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c44:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f913 	bl	8007e78 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	4798      	blx	r3
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <netif_add+0xba>
    return NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e058      	b.n	8007d14 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c68:	2bff      	cmp	r3, #255	; 0xff
 8007c6a:	d103      	bne.n	8007c74 <netif_add+0xcc>
        netif->num = 0;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007c78:	4b2f      	ldr	r3, [pc, #188]	; (8007d38 <netif_add+0x190>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e02b      	b.n	8007cd8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d106      	bne.n	8007c96 <netif_add+0xee>
 8007c88:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <netif_add+0x174>)
 8007c8a:	f240 128b 	movw	r2, #395	; 0x18b
 8007c8e:	492b      	ldr	r1, [pc, #172]	; (8007d3c <netif_add+0x194>)
 8007c90:	4824      	ldr	r0, [pc, #144]	; (8007d24 <netif_add+0x17c>)
 8007c92:	f00a feab 	bl	80129ec <iprintf>
        num_netifs++;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2bff      	cmp	r3, #255	; 0xff
 8007ca0:	dd06      	ble.n	8007cb0 <netif_add+0x108>
 8007ca2:	4b1e      	ldr	r3, [pc, #120]	; (8007d1c <netif_add+0x174>)
 8007ca4:	f240 128d 	movw	r2, #397	; 0x18d
 8007ca8:	4925      	ldr	r1, [pc, #148]	; (8007d40 <netif_add+0x198>)
 8007caa:	481e      	ldr	r0, [pc, #120]	; (8007d24 <netif_add+0x17c>)
 8007cac:	f00a fe9e 	bl	80129ec <iprintf>
        if (netif2->num == netif->num) {
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d108      	bne.n	8007cd2 <netif_add+0x12a>
          netif->num++;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007cd0:	e005      	b.n	8007cde <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1d0      	bne.n	8007c80 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1be      	bne.n	8007c62 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cea:	2bfe      	cmp	r3, #254	; 0xfe
 8007cec:	d103      	bne.n	8007cf6 <netif_add+0x14e>
    netif_num = 0;
 8007cee:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <netif_add+0x18c>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	e006      	b.n	8007d04 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <netif_add+0x18c>)
 8007d02:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d04:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <netif_add+0x190>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <netif_add+0x190>)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007d12:	68fb      	ldr	r3, [r7, #12]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	080145a8 	.word	0x080145a8
 8007d20:	0801463c 	.word	0x0801463c
 8007d24:	080145f8 	.word	0x080145f8
 8007d28:	08014658 	.word	0x08014658
 8007d2c:	08016d08 	.word	0x08016d08
 8007d30:	0800808b 	.word	0x0800808b
 8007d34:	2000d88c 	.word	0x2000d88c
 8007d38:	2000d884 	.word	0x2000d884
 8007d3c:	0801467c 	.word	0x0801467c
 8007d40:	08014690 	.word	0x08014690

08007d44 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f002 fb0b 	bl	800a36c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f006 fed9 	bl	800eb10 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <netif_do_set_ipaddr+0x20>
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <netif_do_set_ipaddr+0x88>)
 8007d7c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007d80:	491c      	ldr	r1, [pc, #112]	; (8007df4 <netif_do_set_ipaddr+0x8c>)
 8007d82:	481d      	ldr	r0, [pc, #116]	; (8007df8 <netif_do_set_ipaddr+0x90>)
 8007d84:	f00a fe32 	bl	80129ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <netif_do_set_ipaddr+0x34>
 8007d8e:	4b18      	ldr	r3, [pc, #96]	; (8007df0 <netif_do_set_ipaddr+0x88>)
 8007d90:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007d94:	4917      	ldr	r1, [pc, #92]	; (8007df4 <netif_do_set_ipaddr+0x8c>)
 8007d96:	4818      	ldr	r0, [pc, #96]	; (8007df8 <netif_do_set_ipaddr+0x90>)
 8007d98:	f00a fe28 	bl	80129ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3304      	adds	r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d01c      	beq.n	8007de4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3304      	adds	r3, #4
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007dba:	f107 0314 	add.w	r3, r7, #20
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ffbf 	bl	8007d44 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <netif_do_set_ipaddr+0x6a>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	e000      	b.n	8007dd4 <netif_do_set_ipaddr+0x6c>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007dd8:	2101      	movs	r1, #1
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f8d2 	bl	8007f84 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007de0:	2301      	movs	r3, #1
 8007de2:	e000      	b.n	8007de6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	080145a8 	.word	0x080145a8
 8007df4:	080146c0 	.word	0x080146c0
 8007df8:	080145f8 	.word	0x080145f8

08007dfc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d00a      	beq.n	8007e2c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <netif_do_set_netmask+0x26>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	e000      	b.n	8007e24 <netif_do_set_netmask+0x28>
 8007e22:	2300      	movs	r3, #0
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d00a      	beq.n	8007e6a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <netif_do_set_gw+0x26>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	e000      	b.n	8007e62 <netif_do_set_gw+0x28>
 8007e60:	2300      	movs	r3, #0
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007e94:	4b1c      	ldr	r3, [pc, #112]	; (8007f08 <netif_set_addr+0x90>)
 8007e96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <netif_set_addr+0x90>)
 8007ea0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007ea8:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <netif_set_addr+0x90>)
 8007eaa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <netif_set_addr+0x42>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <netif_set_addr+0x46>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <netif_set_addr+0x48>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68b9      	ldr	r1, [r7, #8]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff49 	bl	8007d68 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff8e 	bl	8007dfc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff ffa8 	bl	8007e3a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ef0:	f107 0310 	add.w	r3, r7, #16
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff ff35 	bl	8007d68 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007efe:	bf00      	nop
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	08016d08 	.word	0x08016d08

08007f0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007f14:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <netif_set_default+0x1c>)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	2000d888 	.word	0x2000d888

08007f2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <netif_set_up+0x1e>
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <netif_set_up+0x4c>)
 8007f3c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007f40:	490e      	ldr	r1, [pc, #56]	; (8007f7c <netif_set_up+0x50>)
 8007f42:	480f      	ldr	r0, [pc, #60]	; (8007f80 <netif_set_up+0x54>)
 8007f44:	f00a fd52 	bl	80129ec <iprintf>
 8007f48:	e013      	b.n	8007f72 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10c      	bne.n	8007f72 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007f6a:	2103      	movs	r1, #3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f809 	bl	8007f84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	080145a8 	.word	0x080145a8
 8007f7c:	08014730 	.word	0x08014730
 8007f80:	080145f8 	.word	0x080145f8

08007f84 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <netif_issue_reports+0x20>
 8007f96:	4b18      	ldr	r3, [pc, #96]	; (8007ff8 <netif_issue_reports+0x74>)
 8007f98:	f240 326d 	movw	r2, #877	; 0x36d
 8007f9c:	4917      	ldr	r1, [pc, #92]	; (8007ffc <netif_issue_reports+0x78>)
 8007f9e:	4818      	ldr	r0, [pc, #96]	; (8008000 <netif_issue_reports+0x7c>)
 8007fa0:	f00a fd24 	bl	80129ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01e      	beq.n	8007ff0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fb8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d017      	beq.n	8007ff0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d013      	beq.n	8007ff2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f007 fcfb 	bl	800f9e4 <etharp_request>
 8007fee:	e000      	b.n	8007ff2 <netif_issue_reports+0x6e>
    return;
 8007ff0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	080145a8 	.word	0x080145a8
 8007ffc:	0801474c 	.word	0x0801474c
 8008000:	080145f8 	.word	0x080145f8

08008004 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <netif_set_down+0x1e>
 8008012:	4b12      	ldr	r3, [pc, #72]	; (800805c <netif_set_down+0x58>)
 8008014:	f240 329b 	movw	r2, #923	; 0x39b
 8008018:	4911      	ldr	r1, [pc, #68]	; (8008060 <netif_set_down+0x5c>)
 800801a:	4812      	ldr	r0, [pc, #72]	; (8008064 <netif_set_down+0x60>)
 800801c:	f00a fce6 	bl	80129ec <iprintf>
 8008020:	e019      	b.n	8008056 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008036:	f023 0301 	bic.w	r3, r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f007 f885 	bl	800f160 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	080145a8 	.word	0x080145a8
 8008060:	08014770 	.word	0x08014770
 8008064:	080145f8 	.word	0x080145f8

08008068 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	61da      	str	r2, [r3, #28]
  }
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008096:	f06f 030b 	mvn.w	r3, #11
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80080b8:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <netif_get_by_index+0x48>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	e00c      	b.n	80080da <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080c6:	3301      	adds	r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	79fa      	ldrb	r2, [r7, #7]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d101      	bne.n	80080d4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	e006      	b.n	80080e2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1ef      	bne.n	80080c0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	2000d884 	.word	0x2000d884

080080f4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <pbuf_free_ooseq+0x38>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <pbuf_free_ooseq+0x3c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	607b      	str	r3, [r7, #4]
 8008106:	e00a      	b.n	800811e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 f969 	bl	800a3e8 <tcp_free_ooseq>
      return;
 8008116:	e005      	b.n	8008124 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1f1      	bne.n	8008108 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	2000d88d 	.word	0x2000d88d
 8008130:	2000d89c 	.word	0x2000d89c

08008134 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008138:	4b03      	ldr	r3, [pc, #12]	; (8008148 <pbuf_pool_is_empty+0x14>)
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	2000d88d 	.word	0x2000d88d

0800814c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4611      	mov	r1, r2
 8008158:	461a      	mov	r2, r3
 800815a:	460b      	mov	r3, r1
 800815c:	80fb      	strh	r3, [r7, #6]
 800815e:	4613      	mov	r3, r2
 8008160:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	88ba      	ldrh	r2, [r7, #4]
 8008178:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800817a:	8b3b      	ldrh	r3, [r7, #24]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	7f3a      	ldrb	r2, [r7, #28]
 8008186:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	73da      	strb	r2, [r3, #15]
}
 8008194:	bf00      	nop
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08c      	sub	sp, #48	; 0x30
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	4603      	mov	r3, r0
 80081a8:	71fb      	strb	r3, [r7, #7]
 80081aa:	460b      	mov	r3, r1
 80081ac:	80bb      	strh	r3, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80081b6:	887b      	ldrh	r3, [r7, #2]
 80081b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081bc:	f000 8082 	beq.w	80082c4 <pbuf_alloc+0x124>
 80081c0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081c4:	f300 80ca 	bgt.w	800835c <pbuf_alloc+0x1bc>
 80081c8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081cc:	d010      	beq.n	80081f0 <pbuf_alloc+0x50>
 80081ce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081d2:	f300 80c3 	bgt.w	800835c <pbuf_alloc+0x1bc>
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d002      	beq.n	80081e0 <pbuf_alloc+0x40>
 80081da:	2b41      	cmp	r3, #65	; 0x41
 80081dc:	f040 80be 	bne.w	800835c <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80081e0:	887a      	ldrh	r2, [r7, #2]
 80081e2:	88bb      	ldrh	r3, [r7, #4]
 80081e4:	4619      	mov	r1, r3
 80081e6:	2000      	movs	r0, #0
 80081e8:	f000 f8d4 	bl	8008394 <pbuf_alloc_reference>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80081ee:	e0bf      	b.n	8008370 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80081f8:	88bb      	ldrh	r3, [r7, #4]
 80081fa:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081fc:	22f3      	movs	r2, #243	; 0xf3
 80081fe:	495f      	ldr	r1, [pc, #380]	; (800837c <pbuf_alloc+0x1dc>)
 8008200:	2008      	movs	r0, #8
 8008202:	f7ff fc3b 	bl	8007a7c <memp_malloc_fn>
 8008206:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <pbuf_alloc+0x82>
          PBUF_POOL_IS_EMPTY();
 800820e:	f7ff ff91 	bl	8008134 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <pbuf_alloc+0x7e>
            pbuf_free(p);
 8008218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800821a:	f000 faad 	bl	8008778 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	e0a7      	b.n	8008372 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008224:	3303      	adds	r3, #3
 8008226:	b29b      	uxth	r3, r3
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	b29b      	uxth	r3, r3
 800822e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008232:	b29b      	uxth	r3, r3
 8008234:	8b7a      	ldrh	r2, [r7, #26]
 8008236:	4293      	cmp	r3, r2
 8008238:	bf28      	it	cs
 800823a:	4613      	movcs	r3, r2
 800823c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800823e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008240:	3310      	adds	r3, #16
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4413      	add	r3, r2
 8008246:	3303      	adds	r3, #3
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	4618      	mov	r0, r3
 800824e:	89f9      	ldrh	r1, [r7, #14]
 8008250:	8b7a      	ldrh	r2, [r7, #26]
 8008252:	2300      	movs	r3, #0
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	887b      	ldrh	r3, [r7, #2]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	460b      	mov	r3, r1
 800825c:	4601      	mov	r1, r0
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f7ff ff74 	bl	800814c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <pbuf_alloc+0xde>
 8008270:	4b42      	ldr	r3, [pc, #264]	; (800837c <pbuf_alloc+0x1dc>)
 8008272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008276:	4942      	ldr	r1, [pc, #264]	; (8008380 <pbuf_alloc+0x1e0>)
 8008278:	4842      	ldr	r0, [pc, #264]	; (8008384 <pbuf_alloc+0x1e4>)
 800827a:	f00a fbb7 	bl	80129ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800827e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008280:	3303      	adds	r3, #3
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800828a:	d106      	bne.n	800829a <pbuf_alloc+0xfa>
 800828c:	4b3b      	ldr	r3, [pc, #236]	; (800837c <pbuf_alloc+0x1dc>)
 800828e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008292:	493d      	ldr	r1, [pc, #244]	; (8008388 <pbuf_alloc+0x1e8>)
 8008294:	483b      	ldr	r0, [pc, #236]	; (8008384 <pbuf_alloc+0x1e4>)
 8008296:	f00a fba9 	bl	80129ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
 80082a4:	e002      	b.n	80082ac <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80082b0:	8b7a      	ldrh	r2, [r7, #26]
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80082bc:	8b7b      	ldrh	r3, [r7, #26]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d19c      	bne.n	80081fc <pbuf_alloc+0x5c>
      break;
 80082c2:	e055      	b.n	8008370 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80082c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082c6:	3303      	adds	r3, #3
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	88bb      	ldrh	r3, [r7, #4]
 80082d2:	3303      	adds	r3, #3
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	b29b      	uxth	r3, r3
 80082dc:	4413      	add	r3, r2
 80082de:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80082e0:	8b3b      	ldrh	r3, [r7, #24]
 80082e2:	3310      	adds	r3, #16
 80082e4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082e6:	8b3a      	ldrh	r2, [r7, #24]
 80082e8:	88bb      	ldrh	r3, [r7, #4]
 80082ea:	3303      	adds	r3, #3
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d306      	bcc.n	8008302 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80082f4:	8afa      	ldrh	r2, [r7, #22]
 80082f6:	88bb      	ldrh	r3, [r7, #4]
 80082f8:	3303      	adds	r3, #3
 80082fa:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d201      	bcs.n	8008306 <pbuf_alloc+0x166>
        return NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	e035      	b.n	8008372 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008306:	8afb      	ldrh	r3, [r7, #22]
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff f9d7 	bl	80076bc <mem_malloc>
 800830e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <pbuf_alloc+0x17a>
        return NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	e02b      	b.n	8008372 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800831a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800831c:	3310      	adds	r3, #16
 800831e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008320:	4413      	add	r3, r2
 8008322:	3303      	adds	r3, #3
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	4618      	mov	r0, r3
 800832a:	88b9      	ldrh	r1, [r7, #4]
 800832c:	88ba      	ldrh	r2, [r7, #4]
 800832e:	2300      	movs	r3, #0
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	887b      	ldrh	r3, [r7, #2]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	460b      	mov	r3, r1
 8008338:	4601      	mov	r1, r0
 800833a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800833c:	f7ff ff06 	bl	800814c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <pbuf_alloc+0x1ce>
 800834c:	4b0b      	ldr	r3, [pc, #44]	; (800837c <pbuf_alloc+0x1dc>)
 800834e:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008352:	490e      	ldr	r1, [pc, #56]	; (800838c <pbuf_alloc+0x1ec>)
 8008354:	480b      	ldr	r0, [pc, #44]	; (8008384 <pbuf_alloc+0x1e4>)
 8008356:	f00a fb49 	bl	80129ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800835a:	e008      	b.n	800836e <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800835c:	4b07      	ldr	r3, [pc, #28]	; (800837c <pbuf_alloc+0x1dc>)
 800835e:	f240 1227 	movw	r2, #295	; 0x127
 8008362:	490b      	ldr	r1, [pc, #44]	; (8008390 <pbuf_alloc+0x1f0>)
 8008364:	4807      	ldr	r0, [pc, #28]	; (8008384 <pbuf_alloc+0x1e4>)
 8008366:	f00a fb41 	bl	80129ec <iprintf>
      return NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	e001      	b.n	8008372 <pbuf_alloc+0x1d2>
      break;
 800836e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008372:	4618      	mov	r0, r3
 8008374:	3728      	adds	r7, #40	; 0x28
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	080147d8 	.word	0x080147d8
 8008380:	08014808 	.word	0x08014808
 8008384:	08014838 	.word	0x08014838
 8008388:	08014860 	.word	0x08014860
 800838c:	08014894 	.word	0x08014894
 8008390:	080148c0 	.word	0x080148c0

08008394 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af02      	add	r7, sp, #8
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
 80083a0:	4613      	mov	r3, r2
 80083a2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80083a4:	883b      	ldrh	r3, [r7, #0]
 80083a6:	2b41      	cmp	r3, #65	; 0x41
 80083a8:	d009      	beq.n	80083be <pbuf_alloc_reference+0x2a>
 80083aa:	883b      	ldrh	r3, [r7, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d006      	beq.n	80083be <pbuf_alloc_reference+0x2a>
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <pbuf_alloc_reference+0x64>)
 80083b2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80083b6:	4911      	ldr	r1, [pc, #68]	; (80083fc <pbuf_alloc_reference+0x68>)
 80083b8:	4811      	ldr	r0, [pc, #68]	; (8008400 <pbuf_alloc_reference+0x6c>)
 80083ba:	f00a fb17 	bl	80129ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80083be:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80083c2:	490d      	ldr	r1, [pc, #52]	; (80083f8 <pbuf_alloc_reference+0x64>)
 80083c4:	2007      	movs	r0, #7
 80083c6:	f7ff fb59 	bl	8007a7c <memp_malloc_fn>
 80083ca:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <pbuf_alloc_reference+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e00b      	b.n	80083ee <pbuf_alloc_reference+0x5a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80083d6:	8879      	ldrh	r1, [r7, #2]
 80083d8:	887a      	ldrh	r2, [r7, #2]
 80083da:	2300      	movs	r3, #0
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	883b      	ldrh	r3, [r7, #0]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	460b      	mov	r3, r1
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff feb0 	bl	800814c <pbuf_init_alloced_pbuf>
  return p;
 80083ec:	68fb      	ldr	r3, [r7, #12]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	080147d8 	.word	0x080147d8
 80083fc:	080148dc 	.word	0x080148dc
 8008400:	08014838 	.word	0x08014838

08008404 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af02      	add	r7, sp, #8
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
 8008410:	460b      	mov	r3, r1
 8008412:	81bb      	strh	r3, [r7, #12]
 8008414:	4613      	mov	r3, r2
 8008416:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800841c:	8a7b      	ldrh	r3, [r7, #18]
 800841e:	3303      	adds	r3, #3
 8008420:	f023 0203 	bic.w	r2, r3, #3
 8008424:	89bb      	ldrh	r3, [r7, #12]
 8008426:	441a      	add	r2, r3
 8008428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800842a:	429a      	cmp	r2, r3
 800842c:	d901      	bls.n	8008432 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800842e:	2300      	movs	r3, #0
 8008430:	e018      	b.n	8008464 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008438:	8a7b      	ldrh	r3, [r7, #18]
 800843a:	3303      	adds	r3, #3
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	6a3a      	ldr	r2, [r7, #32]
 8008442:	4413      	add	r3, r2
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	e001      	b.n	800844c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	89b9      	ldrh	r1, [r7, #12]
 8008450:	89ba      	ldrh	r2, [r7, #12]
 8008452:	2302      	movs	r3, #2
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	897b      	ldrh	r3, [r7, #10]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	460b      	mov	r3, r1
 800845c:	6979      	ldr	r1, [r7, #20]
 800845e:	f7ff fe75 	bl	800814c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008462:	687b      	ldr	r3, [r7, #4]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <pbuf_realloc+0x20>
 800847e:	4b3a      	ldr	r3, [pc, #232]	; (8008568 <pbuf_realloc+0xfc>)
 8008480:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008484:	4939      	ldr	r1, [pc, #228]	; (800856c <pbuf_realloc+0x100>)
 8008486:	483a      	ldr	r0, [pc, #232]	; (8008570 <pbuf_realloc+0x104>)
 8008488:	f00a fab0 	bl	80129ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	891b      	ldrh	r3, [r3, #8]
 8008490:	887a      	ldrh	r2, [r7, #2]
 8008492:	429a      	cmp	r2, r3
 8008494:	d263      	bcs.n	800855e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	891a      	ldrh	r2, [r3, #8]
 800849a:	887b      	ldrh	r3, [r7, #2]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80084a0:	887b      	ldrh	r3, [r7, #2]
 80084a2:	817b      	strh	r3, [r7, #10]
  q = p;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80084a8:	e018      	b.n	80084dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	895b      	ldrh	r3, [r3, #10]
 80084ae:	897a      	ldrh	r2, [r7, #10]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	891a      	ldrh	r2, [r3, #8]
 80084b8:	893b      	ldrh	r3, [r7, #8]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <pbuf_realloc+0x70>
 80084ce:	4b26      	ldr	r3, [pc, #152]	; (8008568 <pbuf_realloc+0xfc>)
 80084d0:	f240 12af 	movw	r2, #431	; 0x1af
 80084d4:	4927      	ldr	r1, [pc, #156]	; (8008574 <pbuf_realloc+0x108>)
 80084d6:	4826      	ldr	r0, [pc, #152]	; (8008570 <pbuf_realloc+0x104>)
 80084d8:	f00a fa88 	bl	80129ec <iprintf>
  while (rem_len > q->len) {
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	895b      	ldrh	r3, [r3, #10]
 80084e0:	897a      	ldrh	r2, [r7, #10]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d8e1      	bhi.n	80084aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	7b1b      	ldrb	r3, [r3, #12]
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d121      	bne.n	8008536 <pbuf_realloc+0xca>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	895b      	ldrh	r3, [r3, #10]
 80084f6:	897a      	ldrh	r2, [r7, #10]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d01c      	beq.n	8008536 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7b5b      	ldrb	r3, [r3, #13]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d116      	bne.n	8008536 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	b29a      	uxth	r2, r3
 8008512:	897b      	ldrh	r3, [r7, #10]
 8008514:	4413      	add	r3, r2
 8008516:	b29b      	uxth	r3, r3
 8008518:	4619      	mov	r1, r3
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7fe ffc6 	bl	80074ac <mem_trim>
 8008520:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <pbuf_realloc+0xca>
 8008528:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <pbuf_realloc+0xfc>)
 800852a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800852e:	4912      	ldr	r1, [pc, #72]	; (8008578 <pbuf_realloc+0x10c>)
 8008530:	480f      	ldr	r0, [pc, #60]	; (8008570 <pbuf_realloc+0x104>)
 8008532:	f00a fa5b 	bl	80129ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	897a      	ldrh	r2, [r7, #10]
 800853a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	895a      	ldrh	r2, [r3, #10]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f000 f911 	bl	8008778 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e000      	b.n	8008560 <pbuf_realloc+0xf4>
    return;
 800855e:	bf00      	nop

}
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	080147d8 	.word	0x080147d8
 800856c:	080148f0 	.word	0x080148f0
 8008570:	08014838 	.word	0x08014838
 8008574:	08014908 	.word	0x08014908
 8008578:	08014920 	.word	0x08014920

0800857c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d106      	bne.n	800859e <pbuf_add_header_impl+0x22>
 8008590:	4b2b      	ldr	r3, [pc, #172]	; (8008640 <pbuf_add_header_impl+0xc4>)
 8008592:	f240 12df 	movw	r2, #479	; 0x1df
 8008596:	492b      	ldr	r1, [pc, #172]	; (8008644 <pbuf_add_header_impl+0xc8>)
 8008598:	482b      	ldr	r0, [pc, #172]	; (8008648 <pbuf_add_header_impl+0xcc>)
 800859a:	f00a fa27 	bl	80129ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <pbuf_add_header_impl+0x30>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085aa:	d301      	bcc.n	80085b0 <pbuf_add_header_impl+0x34>
    return 1;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e043      	b.n	8008638 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <pbuf_add_header_impl+0x3e>
    return 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e03e      	b.n	8008638 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	891a      	ldrh	r2, [r3, #8]
 80085c2:	8a7b      	ldrh	r3, [r7, #18]
 80085c4:	4413      	add	r3, r2
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	8a7a      	ldrh	r2, [r7, #18]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d901      	bls.n	80085d2 <pbuf_add_header_impl+0x56>
    return 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e032      	b.n	8008638 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	7b1b      	ldrb	r3, [r3, #12]
 80085d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80085d8:	8a3b      	ldrh	r3, [r7, #16]
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	425b      	negs	r3, r3
 80085ea:	4413      	add	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3310      	adds	r3, #16
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d20d      	bcs.n	8008614 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e01d      	b.n	8008638 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d006      	beq.n	8008610 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	425b      	negs	r3, r3
 800860a:	4413      	add	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	e001      	b.n	8008614 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008610:	2301      	movs	r3, #1
 8008612:	e011      	b.n	8008638 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	895a      	ldrh	r2, [r3, #10]
 800861e:	8a7b      	ldrh	r3, [r7, #18]
 8008620:	4413      	add	r3, r2
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	891a      	ldrh	r2, [r3, #8]
 800862c:	8a7b      	ldrh	r3, [r7, #18]
 800862e:	4413      	add	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	811a      	strh	r2, [r3, #8]


  return 0;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	080147d8 	.word	0x080147d8
 8008644:	0801493c 	.word	0x0801493c
 8008648:	08014838 	.word	0x08014838

0800864c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008656:	2200      	movs	r2, #0
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff ff8e 	bl	800857c <pbuf_add_header_impl>
 8008660:	4603      	mov	r3, r0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <pbuf_remove_header+0x1e>
 800867c:	4b20      	ldr	r3, [pc, #128]	; (8008700 <pbuf_remove_header+0x94>)
 800867e:	f240 224b 	movw	r2, #587	; 0x24b
 8008682:	4920      	ldr	r1, [pc, #128]	; (8008704 <pbuf_remove_header+0x98>)
 8008684:	4820      	ldr	r0, [pc, #128]	; (8008708 <pbuf_remove_header+0x9c>)
 8008686:	f00a f9b1 	bl	80129ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <pbuf_remove_header+0x2c>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008696:	d301      	bcc.n	800869c <pbuf_remove_header+0x30>
    return 1;
 8008698:	2301      	movs	r3, #1
 800869a:	e02c      	b.n	80086f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <pbuf_remove_header+0x3a>
    return 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e027      	b.n	80086f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	895b      	ldrh	r3, [r3, #10]
 80086ae:	89fa      	ldrh	r2, [r7, #14]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d908      	bls.n	80086c6 <pbuf_remove_header+0x5a>
 80086b4:	4b12      	ldr	r3, [pc, #72]	; (8008700 <pbuf_remove_header+0x94>)
 80086b6:	f240 2255 	movw	r2, #597	; 0x255
 80086ba:	4914      	ldr	r1, [pc, #80]	; (800870c <pbuf_remove_header+0xa0>)
 80086bc:	4812      	ldr	r0, [pc, #72]	; (8008708 <pbuf_remove_header+0x9c>)
 80086be:	f00a f995 	bl	80129ec <iprintf>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e017      	b.n	80086f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	441a      	add	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	895a      	ldrh	r2, [r3, #10]
 80086dc:	89fb      	ldrh	r3, [r7, #14]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	891a      	ldrh	r2, [r3, #8]
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	080147d8 	.word	0x080147d8
 8008704:	0801493c 	.word	0x0801493c
 8008708:	08014838 	.word	0x08014838
 800870c:	08014948 	.word	0x08014948

08008710 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	807b      	strh	r3, [r7, #2]
 800871c:	4613      	mov	r3, r2
 800871e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008724:	2b00      	cmp	r3, #0
 8008726:	da08      	bge.n	800873a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800872c:	425b      	negs	r3, r3
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ff9b 	bl	800866c <pbuf_remove_header>
 8008736:	4603      	mov	r3, r0
 8008738:	e007      	b.n	800874a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800873a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800873e:	787a      	ldrb	r2, [r7, #1]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff ff1a 	bl	800857c <pbuf_add_header_impl>
 8008748:	4603      	mov	r3, r0
  }
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800875e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008762:	2201      	movs	r2, #1
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff ffd2 	bl	8008710 <pbuf_header_impl>
 800876c:	4603      	mov	r3, r0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <pbuf_free+0x22>
 800878c:	4b38      	ldr	r3, [pc, #224]	; (8008870 <pbuf_free+0xf8>)
 800878e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008792:	4938      	ldr	r1, [pc, #224]	; (8008874 <pbuf_free+0xfc>)
 8008794:	4838      	ldr	r0, [pc, #224]	; (8008878 <pbuf_free+0x100>)
 8008796:	f00a f929 	bl	80129ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800879a:	2300      	movs	r3, #0
 800879c:	e063      	b.n	8008866 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80087a2:	e05c      	b.n	800885e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7b9b      	ldrb	r3, [r3, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <pbuf_free+0x42>
 80087ac:	4b30      	ldr	r3, [pc, #192]	; (8008870 <pbuf_free+0xf8>)
 80087ae:	f240 22f1 	movw	r2, #753	; 0x2f1
 80087b2:	4932      	ldr	r1, [pc, #200]	; (800887c <pbuf_free+0x104>)
 80087b4:	4830      	ldr	r0, [pc, #192]	; (8008878 <pbuf_free+0x100>)
 80087b6:	f00a f919 	bl	80129ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	7b9b      	ldrb	r3, [r3, #14]
 80087be:	3b01      	subs	r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	739a      	strb	r2, [r3, #14]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	7b9b      	ldrb	r3, [r3, #14]
 80087ca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80087cc:	7dbb      	ldrb	r3, [r7, #22]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d143      	bne.n	800885a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7b1b      	ldrb	r3, [r3, #12]
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7b5b      	ldrb	r3, [r3, #13]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d011      	beq.n	8008812 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <pbuf_free+0x90>
 80087fa:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <pbuf_free+0xf8>)
 80087fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008800:	491f      	ldr	r1, [pc, #124]	; (8008880 <pbuf_free+0x108>)
 8008802:	481d      	ldr	r0, [pc, #116]	; (8008878 <pbuf_free+0x100>)
 8008804:	f00a f8f2 	bl	80129ec <iprintf>
        pc->custom_free_function(p);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	e01d      	b.n	800884e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d104      	bne.n	8008822 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	2008      	movs	r0, #8
 800881c:	f7ff f992 	bl	8007b44 <memp_free>
 8008820:	e015      	b.n	800884e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d104      	bne.n	8008832 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	2007      	movs	r0, #7
 800882c:	f7ff f98a 	bl	8007b44 <memp_free>
 8008830:	e00d      	b.n	800884e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d103      	bne.n	8008840 <pbuf_free+0xc8>
          mem_free(p);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe fdc9 	bl	80073d0 <mem_free>
 800883e:	e006      	b.n	800884e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <pbuf_free+0xf8>)
 8008842:	f240 320f 	movw	r2, #783	; 0x30f
 8008846:	490f      	ldr	r1, [pc, #60]	; (8008884 <pbuf_free+0x10c>)
 8008848:	480b      	ldr	r0, [pc, #44]	; (8008878 <pbuf_free+0x100>)
 800884a:	f00a f8cf 	bl	80129ec <iprintf>
        }
      }
      count++;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	3301      	adds	r3, #1
 8008852:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	e001      	b.n	800885e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d19f      	bne.n	80087a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008864:	7dfb      	ldrb	r3, [r7, #23]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	080147d8 	.word	0x080147d8
 8008874:	0801493c 	.word	0x0801493c
 8008878:	08014838 	.word	0x08014838
 800887c:	08014968 	.word	0x08014968
 8008880:	08014980 	.word	0x08014980
 8008884:	080149a4 	.word	0x080149a4

08008888 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008894:	e005      	b.n	80088a2 <pbuf_clen+0x1a>
    ++len;
 8008896:	89fb      	ldrh	r3, [r7, #14]
 8008898:	3301      	adds	r3, #1
 800889a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f6      	bne.n	8008896 <pbuf_clen+0xe>
  }
  return len;
 80088a8:	89fb      	ldrh	r3, [r7, #14]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
	...

080088b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7b9b      	ldrb	r3, [r3, #14]
 80088ca:	3301      	adds	r3, #1
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7b9b      	ldrb	r3, [r3, #14]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <pbuf_ref+0x30>
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <pbuf_ref+0x38>)
 80088dc:	f240 3242 	movw	r2, #834	; 0x342
 80088e0:	4904      	ldr	r1, [pc, #16]	; (80088f4 <pbuf_ref+0x3c>)
 80088e2:	4805      	ldr	r0, [pc, #20]	; (80088f8 <pbuf_ref+0x40>)
 80088e4:	f00a f882 	bl	80129ec <iprintf>
  }
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	080147d8 	.word	0x080147d8
 80088f4:	080149b8 	.word	0x080149b8
 80088f8:	08014838 	.word	0x08014838

080088fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <pbuf_cat+0x16>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d107      	bne.n	8008922 <pbuf_cat+0x26>
 8008912:	4b20      	ldr	r3, [pc, #128]	; (8008994 <pbuf_cat+0x98>)
 8008914:	f240 3259 	movw	r2, #857	; 0x359
 8008918:	491f      	ldr	r1, [pc, #124]	; (8008998 <pbuf_cat+0x9c>)
 800891a:	4820      	ldr	r0, [pc, #128]	; (800899c <pbuf_cat+0xa0>)
 800891c:	f00a f866 	bl	80129ec <iprintf>
 8008920:	e034      	b.n	800898c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	e00a      	b.n	800893e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	891a      	ldrh	r2, [r3, #8]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	4413      	add	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f0      	bne.n	8008928 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	891a      	ldrh	r2, [r3, #8]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	895b      	ldrh	r3, [r3, #10]
 800894e:	429a      	cmp	r2, r3
 8008950:	d006      	beq.n	8008960 <pbuf_cat+0x64>
 8008952:	4b10      	ldr	r3, [pc, #64]	; (8008994 <pbuf_cat+0x98>)
 8008954:	f240 3262 	movw	r2, #866	; 0x362
 8008958:	4911      	ldr	r1, [pc, #68]	; (80089a0 <pbuf_cat+0xa4>)
 800895a:	4810      	ldr	r0, [pc, #64]	; (800899c <pbuf_cat+0xa0>)
 800895c:	f00a f846 	bl	80129ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d006      	beq.n	8008976 <pbuf_cat+0x7a>
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <pbuf_cat+0x98>)
 800896a:	f240 3263 	movw	r2, #867	; 0x363
 800896e:	490d      	ldr	r1, [pc, #52]	; (80089a4 <pbuf_cat+0xa8>)
 8008970:	480a      	ldr	r0, [pc, #40]	; (800899c <pbuf_cat+0xa0>)
 8008972:	f00a f83b 	bl	80129ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	891a      	ldrh	r2, [r3, #8]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	891b      	ldrh	r3, [r3, #8]
 800897e:	4413      	add	r3, r2
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	080147d8 	.word	0x080147d8
 8008998:	080149cc 	.word	0x080149cc
 800899c:	08014838 	.word	0x08014838
 80089a0:	08014a04 	.word	0x08014a04
 80089a4:	08014a34 	.word	0x08014a34

080089a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff ffa1 	bl	80088fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80089ba:	6838      	ldr	r0, [r7, #0]
 80089bc:	f7ff ff7c 	bl	80088b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80089d2:	2300      	movs	r3, #0
 80089d4:	617b      	str	r3, [r7, #20]
 80089d6:	2300      	movs	r3, #0
 80089d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <pbuf_copy+0x2a>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <pbuf_copy+0x2a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	891a      	ldrh	r2, [r3, #8]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	891b      	ldrh	r3, [r3, #8]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d209      	bcs.n	8008a06 <pbuf_copy+0x3e>
 80089f2:	4b57      	ldr	r3, [pc, #348]	; (8008b50 <pbuf_copy+0x188>)
 80089f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80089f8:	4956      	ldr	r1, [pc, #344]	; (8008b54 <pbuf_copy+0x18c>)
 80089fa:	4857      	ldr	r0, [pc, #348]	; (8008b58 <pbuf_copy+0x190>)
 80089fc:	f009 fff6 	bl	80129ec <iprintf>
 8008a00:	f06f 030f 	mvn.w	r3, #15
 8008a04:	e09f      	b.n	8008b46 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	895b      	ldrh	r3, [r3, #10]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	895b      	ldrh	r3, [r3, #10]
 8008a14:	4619      	mov	r1, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1acb      	subs	r3, r1, r3
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d306      	bcc.n	8008a2c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	895b      	ldrh	r3, [r3, #10]
 8008a22:	461a      	mov	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	e005      	b.n	8008a38 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	895b      	ldrh	r3, [r3, #10]
 8008a30:	461a      	mov	r2, r3
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	18d0      	adds	r0, r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	4413      	add	r3, r2
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f009 ff9e 	bl	801298c <memcpy>
    offset_to += len;
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	895b      	ldrh	r3, [r3, #10]
 8008a64:	461a      	mov	r2, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d906      	bls.n	8008a7a <pbuf_copy+0xb2>
 8008a6c:	4b38      	ldr	r3, [pc, #224]	; (8008b50 <pbuf_copy+0x188>)
 8008a6e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008a72:	493a      	ldr	r1, [pc, #232]	; (8008b5c <pbuf_copy+0x194>)
 8008a74:	4838      	ldr	r0, [pc, #224]	; (8008b58 <pbuf_copy+0x190>)
 8008a76:	f009 ffb9 	bl	80129ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	895b      	ldrh	r3, [r3, #10]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d906      	bls.n	8008a94 <pbuf_copy+0xcc>
 8008a86:	4b32      	ldr	r3, [pc, #200]	; (8008b50 <pbuf_copy+0x188>)
 8008a88:	f240 32da 	movw	r2, #986	; 0x3da
 8008a8c:	4934      	ldr	r1, [pc, #208]	; (8008b60 <pbuf_copy+0x198>)
 8008a8e:	4832      	ldr	r0, [pc, #200]	; (8008b58 <pbuf_copy+0x190>)
 8008a90:	f009 ffac 	bl	80129ec <iprintf>
    if (offset_from >= p_from->len) {
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	895b      	ldrh	r3, [r3, #10]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d304      	bcc.n	8008aaa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	895b      	ldrh	r3, [r3, #10]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d114      	bne.n	8008ae0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <pbuf_copy+0x118>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <pbuf_copy+0x118>
 8008acc:	4b20      	ldr	r3, [pc, #128]	; (8008b50 <pbuf_copy+0x188>)
 8008ace:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008ad2:	4924      	ldr	r1, [pc, #144]	; (8008b64 <pbuf_copy+0x19c>)
 8008ad4:	4820      	ldr	r0, [pc, #128]	; (8008b58 <pbuf_copy+0x190>)
 8008ad6:	f009 ff89 	bl	80129ec <iprintf>
 8008ada:	f06f 030f 	mvn.w	r3, #15
 8008ade:	e032      	b.n	8008b46 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d013      	beq.n	8008b0e <pbuf_copy+0x146>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	895a      	ldrh	r2, [r3, #10]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	891b      	ldrh	r3, [r3, #8]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d10d      	bne.n	8008b0e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <pbuf_copy+0x146>
 8008afa:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <pbuf_copy+0x188>)
 8008afc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008b00:	4919      	ldr	r1, [pc, #100]	; (8008b68 <pbuf_copy+0x1a0>)
 8008b02:	4815      	ldr	r0, [pc, #84]	; (8008b58 <pbuf_copy+0x190>)
 8008b04:	f009 ff72 	bl	80129ec <iprintf>
 8008b08:	f06f 0305 	mvn.w	r3, #5
 8008b0c:	e01b      	b.n	8008b46 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d013      	beq.n	8008b3c <pbuf_copy+0x174>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	895a      	ldrh	r2, [r3, #10]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	891b      	ldrh	r3, [r3, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d10d      	bne.n	8008b3c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <pbuf_copy+0x174>
 8008b28:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <pbuf_copy+0x188>)
 8008b2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b2e:	490e      	ldr	r1, [pc, #56]	; (8008b68 <pbuf_copy+0x1a0>)
 8008b30:	4809      	ldr	r0, [pc, #36]	; (8008b58 <pbuf_copy+0x190>)
 8008b32:	f009 ff5b 	bl	80129ec <iprintf>
 8008b36:	f06f 0305 	mvn.w	r3, #5
 8008b3a:	e004      	b.n	8008b46 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f47f af61 	bne.w	8008a06 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	080147d8 	.word	0x080147d8
 8008b54:	08014a80 	.word	0x08014a80
 8008b58:	08014838 	.word	0x08014838
 8008b5c:	08014ab0 	.word	0x08014ab0
 8008b60:	08014ac8 	.word	0x08014ac8
 8008b64:	08014ae4 	.word	0x08014ae4
 8008b68:	08014af4 	.word	0x08014af4

08008b6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4611      	mov	r1, r2
 8008b78:	461a      	mov	r2, r3
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	80fb      	strh	r3, [r7, #6]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d108      	bne.n	8008ba2 <pbuf_copy_partial+0x36>
 8008b90:	4b2b      	ldr	r3, [pc, #172]	; (8008c40 <pbuf_copy_partial+0xd4>)
 8008b92:	f240 420a 	movw	r2, #1034	; 0x40a
 8008b96:	492b      	ldr	r1, [pc, #172]	; (8008c44 <pbuf_copy_partial+0xd8>)
 8008b98:	482b      	ldr	r0, [pc, #172]	; (8008c48 <pbuf_copy_partial+0xdc>)
 8008b9a:	f009 ff27 	bl	80129ec <iprintf>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e04a      	b.n	8008c38 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d108      	bne.n	8008bba <pbuf_copy_partial+0x4e>
 8008ba8:	4b25      	ldr	r3, [pc, #148]	; (8008c40 <pbuf_copy_partial+0xd4>)
 8008baa:	f240 420b 	movw	r2, #1035	; 0x40b
 8008bae:	4927      	ldr	r1, [pc, #156]	; (8008c4c <pbuf_copy_partial+0xe0>)
 8008bb0:	4825      	ldr	r0, [pc, #148]	; (8008c48 <pbuf_copy_partial+0xdc>)
 8008bb2:	f009 ff1b 	bl	80129ec <iprintf>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e03e      	b.n	8008c38 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e034      	b.n	8008c2a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008bc0:	88bb      	ldrh	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <pbuf_copy_partial+0x70>
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	895b      	ldrh	r3, [r3, #10]
 8008bca:	88ba      	ldrh	r2, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d305      	bcc.n	8008bdc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	895b      	ldrh	r3, [r3, #10]
 8008bd4:	88ba      	ldrh	r2, [r7, #4]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	80bb      	strh	r3, [r7, #4]
 8008bda:	e023      	b.n	8008c24 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	895a      	ldrh	r2, [r3, #10]
 8008be0:	88bb      	ldrh	r3, [r7, #4]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008be6:	8b3a      	ldrh	r2, [r7, #24]
 8008be8:	88fb      	ldrh	r3, [r7, #6]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d901      	bls.n	8008bf2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008bf2:	8b7b      	ldrh	r3, [r7, #26]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	18d0      	adds	r0, r2, r3
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	88bb      	ldrh	r3, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	8b3a      	ldrh	r2, [r7, #24]
 8008c02:	4619      	mov	r1, r3
 8008c04:	f009 fec2 	bl	801298c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c08:	8afa      	ldrh	r2, [r7, #22]
 8008c0a:	8b3b      	ldrh	r3, [r7, #24]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008c10:	8b7a      	ldrh	r2, [r7, #26]
 8008c12:	8b3b      	ldrh	r3, [r7, #24]
 8008c14:	4413      	add	r3, r2
 8008c16:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008c18:	88fa      	ldrh	r2, [r7, #6]
 8008c1a:	8b3b      	ldrh	r3, [r7, #24]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <pbuf_copy_partial+0xca>
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1c4      	bne.n	8008bc0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008c36:	8afb      	ldrh	r3, [r7, #22]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3720      	adds	r7, #32
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	080147d8 	.word	0x080147d8
 8008c44:	08014b20 	.word	0x08014b20
 8008c48:	08014838 	.word	0x08014838
 8008c4c:	08014b40 	.word	0x08014b40

08008c50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	603a      	str	r2, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	8919      	ldrh	r1, [r3, #8]
 8008c64:	88ba      	ldrh	r2, [r7, #4]
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fa99 	bl	80081a0 <pbuf_alloc>
 8008c6e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <pbuf_clone+0x2a>
    return NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e011      	b.n	8008c9e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff fea3 	bl	80089c8 <pbuf_copy>
 8008c82:	4603      	mov	r3, r0
 8008c84:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008c86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d006      	beq.n	8008c9c <pbuf_clone+0x4c>
 8008c8e:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <pbuf_clone+0x58>)
 8008c90:	f240 5224 	movw	r2, #1316	; 0x524
 8008c94:	4905      	ldr	r1, [pc, #20]	; (8008cac <pbuf_clone+0x5c>)
 8008c96:	4806      	ldr	r0, [pc, #24]	; (8008cb0 <pbuf_clone+0x60>)
 8008c98:	f009 fea8 	bl	80129ec <iprintf>
  return q;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	080147d8 	.word	0x080147d8
 8008cac:	08014c4c 	.word	0x08014c4c
 8008cb0:	08014838 	.word	0x08014838

08008cb4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008cb8:	f009 ff26 	bl	8012b08 <rand>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	4b01      	ldr	r3, [pc, #4]	; (8008cd4 <tcp_init+0x20>)
 8008cce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008cd0:	bf00      	nop
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000012 	.word	0x20000012

08008cd8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7d1b      	ldrb	r3, [r3, #20]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d105      	bne.n	8008cf4 <tcp_free+0x1c>
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <tcp_free+0x2c>)
 8008cea:	22d4      	movs	r2, #212	; 0xd4
 8008cec:	4906      	ldr	r1, [pc, #24]	; (8008d08 <tcp_free+0x30>)
 8008cee:	4807      	ldr	r0, [pc, #28]	; (8008d0c <tcp_free+0x34>)
 8008cf0:	f009 fe7c 	bl	80129ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	f7fe ff24 	bl	8007b44 <memp_free>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	08014cd8 	.word	0x08014cd8
 8008d08:	08014d08 	.word	0x08014d08
 8008d0c:	08014d1c 	.word	0x08014d1c

08008d10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7d1b      	ldrb	r3, [r3, #20]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d105      	bne.n	8008d2c <tcp_free_listen+0x1c>
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <tcp_free_listen+0x2c>)
 8008d22:	22df      	movs	r2, #223	; 0xdf
 8008d24:	4906      	ldr	r1, [pc, #24]	; (8008d40 <tcp_free_listen+0x30>)
 8008d26:	4807      	ldr	r0, [pc, #28]	; (8008d44 <tcp_free_listen+0x34>)
 8008d28:	f009 fe60 	bl	80129ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	2002      	movs	r0, #2
 8008d30:	f7fe ff08 	bl	8007b44 <memp_free>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	08014cd8 	.word	0x08014cd8
 8008d40:	08014d44 	.word	0x08014d44
 8008d44:	08014d1c 	.word	0x08014d1c

08008d48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008d4c:	f000 fea2 	bl	8009a94 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <tcp_tmr+0x28>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <tcp_tmr+0x28>)
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <tcp_tmr+0x28>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008d68:	f000 fb54 	bl	8009414 <tcp_slowtmr>
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2000d8a5 	.word	0x2000d8a5

08008d74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d105      	bne.n	8008d90 <tcp_remove_listener+0x1c>
 8008d84:	4b0d      	ldr	r3, [pc, #52]	; (8008dbc <tcp_remove_listener+0x48>)
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	490d      	ldr	r1, [pc, #52]	; (8008dc0 <tcp_remove_listener+0x4c>)
 8008d8a:	480e      	ldr	r0, [pc, #56]	; (8008dc4 <tcp_remove_listener+0x50>)
 8008d8c:	f009 fe2e 	bl	80129ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e00a      	b.n	8008dac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d102      	bne.n	8008da6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f1      	bne.n	8008d96 <tcp_remove_listener+0x22>
    }
  }
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	08014cd8 	.word	0x08014cd8
 8008dc0:	08014d60 	.word	0x08014d60
 8008dc4:	08014d1c 	.word	0x08014d1c

08008dc8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <tcp_listen_closed+0x1c>
 8008dd6:	4b14      	ldr	r3, [pc, #80]	; (8008e28 <tcp_listen_closed+0x60>)
 8008dd8:	f240 1211 	movw	r2, #273	; 0x111
 8008ddc:	4913      	ldr	r1, [pc, #76]	; (8008e2c <tcp_listen_closed+0x64>)
 8008dde:	4814      	ldr	r0, [pc, #80]	; (8008e30 <tcp_listen_closed+0x68>)
 8008de0:	f009 fe04 	bl	80129ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7d1b      	ldrb	r3, [r3, #20]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d006      	beq.n	8008dfa <tcp_listen_closed+0x32>
 8008dec:	4b0e      	ldr	r3, [pc, #56]	; (8008e28 <tcp_listen_closed+0x60>)
 8008dee:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008df2:	4910      	ldr	r1, [pc, #64]	; (8008e34 <tcp_listen_closed+0x6c>)
 8008df4:	480e      	ldr	r0, [pc, #56]	; (8008e30 <tcp_listen_closed+0x68>)
 8008df6:	f009 fdf9 	bl	80129ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e00b      	b.n	8008e18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008e00:	4a0d      	ldr	r2, [pc, #52]	; (8008e38 <tcp_listen_closed+0x70>)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff ffb1 	bl	8008d74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d9f0      	bls.n	8008e00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	08014cd8 	.word	0x08014cd8
 8008e2c:	08014d88 	.word	0x08014d88
 8008e30:	08014d1c 	.word	0x08014d1c
 8008e34:	08014d94 	.word	0x08014d94
 8008e38:	08016ce0 	.word	0x08016ce0

08008e3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008e3c:	b5b0      	push	{r4, r5, r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af04      	add	r7, sp, #16
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <tcp_close_shutdown+0x20>
 8008e4e:	4b63      	ldr	r3, [pc, #396]	; (8008fdc <tcp_close_shutdown+0x1a0>)
 8008e50:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008e54:	4962      	ldr	r1, [pc, #392]	; (8008fe0 <tcp_close_shutdown+0x1a4>)
 8008e56:	4863      	ldr	r0, [pc, #396]	; (8008fe4 <tcp_close_shutdown+0x1a8>)
 8008e58:	f009 fdc8 	bl	80129ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d066      	beq.n	8008f30 <tcp_close_shutdown+0xf4>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d003      	beq.n	8008e72 <tcp_close_shutdown+0x36>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7d1b      	ldrb	r3, [r3, #20]
 8008e6e:	2b07      	cmp	r3, #7
 8008e70:	d15e      	bne.n	8008f30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <tcp_close_shutdown+0x48>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e82:	d055      	beq.n	8008f30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8b5b      	ldrh	r3, [r3, #26]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d106      	bne.n	8008e9e <tcp_close_shutdown+0x62>
 8008e90:	4b52      	ldr	r3, [pc, #328]	; (8008fdc <tcp_close_shutdown+0x1a0>)
 8008e92:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008e96:	4954      	ldr	r1, [pc, #336]	; (8008fe8 <tcp_close_shutdown+0x1ac>)
 8008e98:	4852      	ldr	r0, [pc, #328]	; (8008fe4 <tcp_close_shutdown+0x1a8>)
 8008e9a:	f009 fda7 	bl	80129ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008ea6:	687d      	ldr	r5, [r7, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	8ad2      	ldrh	r2, [r2, #22]
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	8b09      	ldrh	r1, [r1, #24]
 8008eb4:	9102      	str	r1, [sp, #8]
 8008eb6:	9201      	str	r2, [sp, #4]
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462b      	mov	r3, r5
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f004 fea7 	bl	800dc14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f8da 	bl	800a080 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008ecc:	4b47      	ldr	r3, [pc, #284]	; (8008fec <tcp_close_shutdown+0x1b0>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d105      	bne.n	8008ee2 <tcp_close_shutdown+0xa6>
 8008ed6:	4b45      	ldr	r3, [pc, #276]	; (8008fec <tcp_close_shutdown+0x1b0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4a43      	ldr	r2, [pc, #268]	; (8008fec <tcp_close_shutdown+0x1b0>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	e013      	b.n	8008f0a <tcp_close_shutdown+0xce>
 8008ee2:	4b42      	ldr	r3, [pc, #264]	; (8008fec <tcp_close_shutdown+0x1b0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	e00c      	b.n	8008f04 <tcp_close_shutdown+0xc8>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d104      	bne.n	8008efe <tcp_close_shutdown+0xc2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	60da      	str	r2, [r3, #12]
 8008efc:	e005      	b.n	8008f0a <tcp_close_shutdown+0xce>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1ef      	bne.n	8008eea <tcp_close_shutdown+0xae>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	60da      	str	r2, [r3, #12]
 8008f10:	4b37      	ldr	r3, [pc, #220]	; (8008ff0 <tcp_close_shutdown+0x1b4>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008f16:	4b37      	ldr	r3, [pc, #220]	; (8008ff4 <tcp_close_shutdown+0x1b8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d102      	bne.n	8008f26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008f20:	f003 fd72 	bl	800ca08 <tcp_trigger_input_pcb_close>
 8008f24:	e002      	b.n	8008f2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff fed6 	bl	8008cd8 <tcp_free>
      }
      return ERR_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e050      	b.n	8008fd2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d03b      	beq.n	8008fb0 <tcp_close_shutdown+0x174>
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	dc44      	bgt.n	8008fc6 <tcp_close_shutdown+0x18a>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <tcp_close_shutdown+0x10a>
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d02a      	beq.n	8008f9a <tcp_close_shutdown+0x15e>
 8008f44:	e03f      	b.n	8008fc6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	8adb      	ldrh	r3, [r3, #22]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d021      	beq.n	8008f92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008f4e:	4b2a      	ldr	r3, [pc, #168]	; (8008ff8 <tcp_close_shutdown+0x1bc>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d105      	bne.n	8008f64 <tcp_close_shutdown+0x128>
 8008f58:	4b27      	ldr	r3, [pc, #156]	; (8008ff8 <tcp_close_shutdown+0x1bc>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	4a26      	ldr	r2, [pc, #152]	; (8008ff8 <tcp_close_shutdown+0x1bc>)
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	e013      	b.n	8008f8c <tcp_close_shutdown+0x150>
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <tcp_close_shutdown+0x1bc>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60bb      	str	r3, [r7, #8]
 8008f6a:	e00c      	b.n	8008f86 <tcp_close_shutdown+0x14a>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d104      	bne.n	8008f80 <tcp_close_shutdown+0x144>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	60da      	str	r2, [r3, #12]
 8008f7e:	e005      	b.n	8008f8c <tcp_close_shutdown+0x150>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1ef      	bne.n	8008f6c <tcp_close_shutdown+0x130>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff fea0 	bl	8008cd8 <tcp_free>
      break;
 8008f98:	e01a      	b.n	8008fd0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff ff14 	bl	8008dc8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	4816      	ldr	r0, [pc, #88]	; (8008ffc <tcp_close_shutdown+0x1c0>)
 8008fa4:	f001 f8bc 	bl	800a120 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff feb1 	bl	8008d10 <tcp_free_listen>
      break;
 8008fae:	e00f      	b.n	8008fd0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	480e      	ldr	r0, [pc, #56]	; (8008fec <tcp_close_shutdown+0x1b0>)
 8008fb4:	f001 f8b4 	bl	800a120 <tcp_pcb_remove>
 8008fb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <tcp_close_shutdown+0x1b4>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fe8a 	bl	8008cd8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008fc4:	e004      	b.n	8008fd0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f81a 	bl	8009000 <tcp_close_shutdown_fin>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	e000      	b.n	8008fd2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	08014cd8 	.word	0x08014cd8
 8008fe0:	08014dac 	.word	0x08014dac
 8008fe4:	08014d1c 	.word	0x08014d1c
 8008fe8:	08014dcc 	.word	0x08014dcc
 8008fec:	2000d89c 	.word	0x2000d89c
 8008ff0:	2000d8a4 	.word	0x2000d8a4
 8008ff4:	2000d8dc 	.word	0x2000d8dc
 8008ff8:	2000d894 	.word	0x2000d894
 8008ffc:	2000d898 	.word	0x2000d898

08009000 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <tcp_close_shutdown_fin+0x1c>
 800900e:	4b2e      	ldr	r3, [pc, #184]	; (80090c8 <tcp_close_shutdown_fin+0xc8>)
 8009010:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009014:	492d      	ldr	r1, [pc, #180]	; (80090cc <tcp_close_shutdown_fin+0xcc>)
 8009016:	482e      	ldr	r0, [pc, #184]	; (80090d0 <tcp_close_shutdown_fin+0xd0>)
 8009018:	f009 fce8 	bl	80129ec <iprintf>

  switch (pcb->state) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7d1b      	ldrb	r3, [r3, #20]
 8009020:	2b07      	cmp	r3, #7
 8009022:	d020      	beq.n	8009066 <tcp_close_shutdown_fin+0x66>
 8009024:	2b07      	cmp	r3, #7
 8009026:	dc2b      	bgt.n	8009080 <tcp_close_shutdown_fin+0x80>
 8009028:	2b03      	cmp	r3, #3
 800902a:	d002      	beq.n	8009032 <tcp_close_shutdown_fin+0x32>
 800902c:	2b04      	cmp	r3, #4
 800902e:	d00d      	beq.n	800904c <tcp_close_shutdown_fin+0x4c>
 8009030:	e026      	b.n	8009080 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f003 fefc 	bl	800ce30 <tcp_send_fin>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800903c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11f      	bne.n	8009084 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2205      	movs	r2, #5
 8009048:	751a      	strb	r2, [r3, #20]
      }
      break;
 800904a:	e01b      	b.n	8009084 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f003 feef 	bl	800ce30 <tcp_send_fin>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d114      	bne.n	8009088 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2205      	movs	r2, #5
 8009062:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009064:	e010      	b.n	8009088 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f003 fee2 	bl	800ce30 <tcp_send_fin>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2209      	movs	r2, #9
 800907c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800907e:	e005      	b.n	800908c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e01c      	b.n	80090be <tcp_close_shutdown_fin+0xbe>
      break;
 8009084:	bf00      	nop
 8009086:	e002      	b.n	800908e <tcp_close_shutdown_fin+0x8e>
      break;
 8009088:	bf00      	nop
 800908a:	e000      	b.n	800908e <tcp_close_shutdown_fin+0x8e>
      break;
 800908c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800908e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d103      	bne.n	800909e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f004 f808 	bl	800d0ac <tcp_output>
 800909c:	e00d      	b.n	80090ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800909e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a6:	d108      	bne.n	80090ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	8b5b      	ldrh	r3, [r3, #26]
 80090ac:	f043 0308 	orr.w	r3, r3, #8
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e001      	b.n	80090be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80090ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	08014cd8 	.word	0x08014cd8
 80090cc:	08014d88 	.word	0x08014d88
 80090d0:	08014d1c 	.word	0x08014d1c

080090d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <tcp_close+0x22>
 80090e2:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <tcp_close+0x4c>)
 80090e4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80090e8:	490e      	ldr	r1, [pc, #56]	; (8009124 <tcp_close+0x50>)
 80090ea:	480f      	ldr	r0, [pc, #60]	; (8009128 <tcp_close+0x54>)
 80090ec:	f009 fc7e 	bl	80129ec <iprintf>
 80090f0:	f06f 030f 	mvn.w	r3, #15
 80090f4:	e00f      	b.n	8009116 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7d1b      	ldrb	r3, [r3, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d006      	beq.n	800910c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8b5b      	ldrh	r3, [r3, #26]
 8009102:	f043 0310 	orr.w	r3, r3, #16
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800910c:	2101      	movs	r1, #1
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fe94 	bl	8008e3c <tcp_close_shutdown>
 8009114:	4603      	mov	r3, r0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	08014cd8 	.word	0x08014cd8
 8009124:	08014de8 	.word	0x08014de8
 8009128:	08014d1c 	.word	0x08014d1c

0800912c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08e      	sub	sp, #56	; 0x38
 8009130:	af04      	add	r7, sp, #16
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d107      	bne.n	800914c <tcp_abandon+0x20>
 800913c:	4b52      	ldr	r3, [pc, #328]	; (8009288 <tcp_abandon+0x15c>)
 800913e:	f240 223d 	movw	r2, #573	; 0x23d
 8009142:	4952      	ldr	r1, [pc, #328]	; (800928c <tcp_abandon+0x160>)
 8009144:	4852      	ldr	r0, [pc, #328]	; (8009290 <tcp_abandon+0x164>)
 8009146:	f009 fc51 	bl	80129ec <iprintf>
 800914a:	e099      	b.n	8009280 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7d1b      	ldrb	r3, [r3, #20]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <tcp_abandon+0x36>
 8009154:	4b4c      	ldr	r3, [pc, #304]	; (8009288 <tcp_abandon+0x15c>)
 8009156:	f44f 7210 	mov.w	r2, #576	; 0x240
 800915a:	494e      	ldr	r1, [pc, #312]	; (8009294 <tcp_abandon+0x168>)
 800915c:	484c      	ldr	r0, [pc, #304]	; (8009290 <tcp_abandon+0x164>)
 800915e:	f009 fc45 	bl	80129ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7d1b      	ldrb	r3, [r3, #20]
 8009166:	2b0a      	cmp	r3, #10
 8009168:	d107      	bne.n	800917a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	484a      	ldr	r0, [pc, #296]	; (8009298 <tcp_abandon+0x16c>)
 800916e:	f000 ffd7 	bl	800a120 <tcp_pcb_remove>
    tcp_free(pcb);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff fdb0 	bl	8008cd8 <tcp_free>
 8009178:	e082      	b.n	8009280 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009186:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009194:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7d1b      	ldrb	r3, [r3, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d126      	bne.n	80091f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	8adb      	ldrh	r3, [r3, #22]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d02e      	beq.n	800920a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80091ac:	4b3b      	ldr	r3, [pc, #236]	; (800929c <tcp_abandon+0x170>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d105      	bne.n	80091c2 <tcp_abandon+0x96>
 80091b6:	4b39      	ldr	r3, [pc, #228]	; (800929c <tcp_abandon+0x170>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4a37      	ldr	r2, [pc, #220]	; (800929c <tcp_abandon+0x170>)
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	e013      	b.n	80091ea <tcp_abandon+0xbe>
 80091c2:	4b36      	ldr	r3, [pc, #216]	; (800929c <tcp_abandon+0x170>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e00c      	b.n	80091e4 <tcp_abandon+0xb8>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d104      	bne.n	80091de <tcp_abandon+0xb2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	60da      	str	r2, [r3, #12]
 80091dc:	e005      	b.n	80091ea <tcp_abandon+0xbe>
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1ef      	bne.n	80091ca <tcp_abandon+0x9e>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	60da      	str	r2, [r3, #12]
 80091f0:	e00b      	b.n	800920a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	8adb      	ldrh	r3, [r3, #22]
 80091fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4828      	ldr	r0, [pc, #160]	; (80092a0 <tcp_abandon+0x174>)
 8009200:	f000 ff8e 	bl	800a120 <tcp_pcb_remove>
 8009204:	4b27      	ldr	r3, [pc, #156]	; (80092a4 <tcp_abandon+0x178>)
 8009206:	2201      	movs	r2, #1
 8009208:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920e:	2b00      	cmp	r3, #0
 8009210:	d004      	beq.n	800921c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fd1c 	bl	8009c54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fd13 	bl	8009c54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fd0a 	bl	8009c54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00e      	beq.n	8009264 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3304      	adds	r3, #4
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	8b12      	ldrh	r2, [r2, #24]
 8009250:	9202      	str	r2, [sp, #8]
 8009252:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009254:	9201      	str	r2, [sp, #4]
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	460b      	mov	r3, r1
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f004 fcd8 	bl	800dc14 <tcp_rst>
    }
    last_state = pcb->state;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7d1b      	ldrb	r3, [r3, #20]
 8009268:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fd34 	bl	8008cd8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d004      	beq.n	8009280 <tcp_abandon+0x154>
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f06f 010c 	mvn.w	r1, #12
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	4798      	blx	r3
  }
}
 8009280:	3728      	adds	r7, #40	; 0x28
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	08014cd8 	.word	0x08014cd8
 800928c:	08014e1c 	.word	0x08014e1c
 8009290:	08014d1c 	.word	0x08014d1c
 8009294:	08014e38 	.word	0x08014e38
 8009298:	2000d8a0 	.word	0x2000d8a0
 800929c:	2000d894 	.word	0x2000d894
 80092a0:	2000d89c 	.word	0x2000d89c
 80092a4:	2000d8a4 	.word	0x2000d8a4

080092a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80092b0:	2101      	movs	r1, #1
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff ff3a 	bl	800912c <tcp_abandon>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d106      	bne.n	80092dc <tcp_update_rcv_ann_wnd+0x1c>
 80092ce:	4b25      	ldr	r3, [pc, #148]	; (8009364 <tcp_update_rcv_ann_wnd+0xa4>)
 80092d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80092d4:	4924      	ldr	r1, [pc, #144]	; (8009368 <tcp_update_rcv_ann_wnd+0xa8>)
 80092d6:	4825      	ldr	r0, [pc, #148]	; (800936c <tcp_update_rcv_ann_wnd+0xac>)
 80092d8:	f009 fb88 	bl	80129ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80092e4:	4413      	add	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80092f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80092f4:	bf28      	it	cs
 80092f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80092fa:	b292      	uxth	r2, r2
 80092fc:	4413      	add	r3, r2
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	db08      	blt.n	8009318 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	e020      	b.n	800935a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd03      	ble.n	800932e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800932c:	e014      	b.n	8009358 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009340:	d306      	bcc.n	8009350 <tcp_update_rcv_ann_wnd+0x90>
 8009342:	4b08      	ldr	r3, [pc, #32]	; (8009364 <tcp_update_rcv_ann_wnd+0xa4>)
 8009344:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009348:	4909      	ldr	r1, [pc, #36]	; (8009370 <tcp_update_rcv_ann_wnd+0xb0>)
 800934a:	4808      	ldr	r0, [pc, #32]	; (800936c <tcp_update_rcv_ann_wnd+0xac>)
 800934c:	f009 fb4e 	bl	80129ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	b29a      	uxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009358:	2300      	movs	r3, #0
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	08014cd8 	.word	0x08014cd8
 8009368:	08014f34 	.word	0x08014f34
 800936c:	08014d1c 	.word	0x08014d1c
 8009370:	08014f58 	.word	0x08014f58

08009374 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <tcp_recved+0x22>
 8009386:	4b1f      	ldr	r3, [pc, #124]	; (8009404 <tcp_recved+0x90>)
 8009388:	f240 32cf 	movw	r2, #975	; 0x3cf
 800938c:	491e      	ldr	r1, [pc, #120]	; (8009408 <tcp_recved+0x94>)
 800938e:	481f      	ldr	r0, [pc, #124]	; (800940c <tcp_recved+0x98>)
 8009390:	f009 fb2c 	bl	80129ec <iprintf>
 8009394:	e032      	b.n	80093fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	7d1b      	ldrb	r3, [r3, #20]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d106      	bne.n	80093ac <tcp_recved+0x38>
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <tcp_recved+0x90>)
 80093a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80093a4:	491a      	ldr	r1, [pc, #104]	; (8009410 <tcp_recved+0x9c>)
 80093a6:	4819      	ldr	r0, [pc, #100]	; (800940c <tcp_recved+0x98>)
 80093a8:	f009 fb20 	bl	80129ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093b0:	887b      	ldrh	r3, [r7, #2]
 80093b2:	4413      	add	r3, r2
 80093b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80093b6:	89fb      	ldrh	r3, [r7, #14]
 80093b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80093bc:	d804      	bhi.n	80093c8 <tcp_recved+0x54>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c2:	89fa      	ldrh	r2, [r7, #14]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d204      	bcs.n	80093d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80093ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80093d0:	e002      	b.n	80093d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	89fa      	ldrh	r2, [r7, #14]
 80093d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ff71 	bl	80092c0 <tcp_update_rcv_ann_wnd>
 80093de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80093e6:	d309      	bcc.n	80093fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8b5b      	ldrh	r3, [r3, #26]
 80093ec:	f043 0302 	orr.w	r3, r3, #2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f003 fe58 	bl	800d0ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	08014cd8 	.word	0x08014cd8
 8009408:	08014f74 	.word	0x08014f74
 800940c:	08014d1c 	.word	0x08014d1c
 8009410:	08014f8c 	.word	0x08014f8c

08009414 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009414:	b5b0      	push	{r4, r5, r7, lr}
 8009416:	b090      	sub	sp, #64	; 0x40
 8009418:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009420:	4b94      	ldr	r3, [pc, #592]	; (8009674 <tcp_slowtmr+0x260>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	4a93      	ldr	r2, [pc, #588]	; (8009674 <tcp_slowtmr+0x260>)
 8009428:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800942a:	4b93      	ldr	r3, [pc, #588]	; (8009678 <tcp_slowtmr+0x264>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	3301      	adds	r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b91      	ldr	r3, [pc, #580]	; (8009678 <tcp_slowtmr+0x264>)
 8009434:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800943a:	4b90      	ldr	r3, [pc, #576]	; (800967c <tcp_slowtmr+0x268>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009440:	e29d      	b.n	800997e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	7d1b      	ldrb	r3, [r3, #20]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <tcp_slowtmr+0x44>
 800944a:	4b8d      	ldr	r3, [pc, #564]	; (8009680 <tcp_slowtmr+0x26c>)
 800944c:	f240 42be 	movw	r2, #1214	; 0x4be
 8009450:	498c      	ldr	r1, [pc, #560]	; (8009684 <tcp_slowtmr+0x270>)
 8009452:	488d      	ldr	r0, [pc, #564]	; (8009688 <tcp_slowtmr+0x274>)
 8009454:	f009 faca 	bl	80129ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	7d1b      	ldrb	r3, [r3, #20]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d106      	bne.n	800946e <tcp_slowtmr+0x5a>
 8009460:	4b87      	ldr	r3, [pc, #540]	; (8009680 <tcp_slowtmr+0x26c>)
 8009462:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009466:	4989      	ldr	r1, [pc, #548]	; (800968c <tcp_slowtmr+0x278>)
 8009468:	4887      	ldr	r0, [pc, #540]	; (8009688 <tcp_slowtmr+0x274>)
 800946a:	f009 fabf 	bl	80129ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	7d1b      	ldrb	r3, [r3, #20]
 8009472:	2b0a      	cmp	r3, #10
 8009474:	d106      	bne.n	8009484 <tcp_slowtmr+0x70>
 8009476:	4b82      	ldr	r3, [pc, #520]	; (8009680 <tcp_slowtmr+0x26c>)
 8009478:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800947c:	4984      	ldr	r1, [pc, #528]	; (8009690 <tcp_slowtmr+0x27c>)
 800947e:	4882      	ldr	r0, [pc, #520]	; (8009688 <tcp_slowtmr+0x274>)
 8009480:	f009 fab4 	bl	80129ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	7f9a      	ldrb	r2, [r3, #30]
 8009488:	4b7b      	ldr	r3, [pc, #492]	; (8009678 <tcp_slowtmr+0x264>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	429a      	cmp	r2, r3
 800948e:	d105      	bne.n	800949c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800949a:	e270      	b.n	800997e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800949c:	4b76      	ldr	r3, [pc, #472]	; (8009678 <tcp_slowtmr+0x264>)
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	7d1b      	ldrb	r3, [r3, #20]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d10a      	bne.n	80094ce <tcp_slowtmr+0xba>
 80094b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d905      	bls.n	80094ce <tcp_slowtmr+0xba>
      ++pcb_remove;
 80094c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c6:	3301      	adds	r3, #1
 80094c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094cc:	e11e      	b.n	800970c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094d4:	2b0b      	cmp	r3, #11
 80094d6:	d905      	bls.n	80094e4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80094d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094dc:	3301      	adds	r3, #1
 80094de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094e2:	e113      	b.n	800970c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d075      	beq.n	80095da <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d006      	beq.n	8009504 <tcp_slowtmr+0xf0>
 80094f6:	4b62      	ldr	r3, [pc, #392]	; (8009680 <tcp_slowtmr+0x26c>)
 80094f8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80094fc:	4965      	ldr	r1, [pc, #404]	; (8009694 <tcp_slowtmr+0x280>)
 80094fe:	4862      	ldr	r0, [pc, #392]	; (8009688 <tcp_slowtmr+0x274>)
 8009500:	f009 fa74 	bl	80129ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <tcp_slowtmr+0x106>
 800950c:	4b5c      	ldr	r3, [pc, #368]	; (8009680 <tcp_slowtmr+0x26c>)
 800950e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009512:	4961      	ldr	r1, [pc, #388]	; (8009698 <tcp_slowtmr+0x284>)
 8009514:	485c      	ldr	r0, [pc, #368]	; (8009688 <tcp_slowtmr+0x274>)
 8009516:	f009 fa69 	bl	80129ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009520:	2b0b      	cmp	r3, #11
 8009522:	d905      	bls.n	8009530 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009528:	3301      	adds	r3, #1
 800952a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800952e:	e0ed      	b.n	800970c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009536:	3b01      	subs	r3, #1
 8009538:	4a58      	ldr	r2, [pc, #352]	; (800969c <tcp_slowtmr+0x288>)
 800953a:	5cd3      	ldrb	r3, [r2, r3]
 800953c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009544:	7c7a      	ldrb	r2, [r7, #17]
 8009546:	429a      	cmp	r2, r3
 8009548:	d907      	bls.n	800955a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009550:	3301      	adds	r3, #1
 8009552:	b2da      	uxtb	r2, r3
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009560:	7c7a      	ldrb	r2, [r7, #17]
 8009562:	429a      	cmp	r2, r3
 8009564:	f200 80d2 	bhi.w	800970c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009568:	2301      	movs	r3, #1
 800956a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009572:	2b00      	cmp	r3, #0
 8009574:	d108      	bne.n	8009588 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009578:	f004 fc40 	bl	800ddfc <tcp_zero_window_probe>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d014      	beq.n	80095ac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009582:	2300      	movs	r3, #0
 8009584:	623b      	str	r3, [r7, #32]
 8009586:	e011      	b.n	80095ac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800958e:	4619      	mov	r1, r3
 8009590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009592:	f003 fb05 	bl	800cba0 <tcp_split_unsent_seg>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800959c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800959e:	f003 fd85 	bl	800d0ac <tcp_output>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80ac 	beq.w	800970c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80095c2:	2b06      	cmp	r3, #6
 80095c4:	f200 80a2 	bhi.w	800970c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80095ce:	3301      	adds	r3, #1
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80095d8:	e098      	b.n	800970c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	db0f      	blt.n	8009604 <tcp_slowtmr+0x1f0>
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d008      	beq.n	8009604 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3301      	adds	r3, #1
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	b21a      	sxth	r2, r3
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009610:	429a      	cmp	r2, r3
 8009612:	db7b      	blt.n	800970c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009616:	f004 f83b 	bl	800d690 <tcp_rexmit_rto_prepare>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <tcp_slowtmr+0x21c>
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009624:	2b00      	cmp	r3, #0
 8009626:	d171      	bne.n	800970c <tcp_slowtmr+0x2f8>
 8009628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d06d      	beq.n	800970c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	7d1b      	ldrb	r3, [r3, #20]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d03a      	beq.n	80096ae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800963e:	2b0c      	cmp	r3, #12
 8009640:	bf28      	it	cs
 8009642:	230c      	movcs	r3, #12
 8009644:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009648:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800964c:	10db      	asrs	r3, r3, #3
 800964e:	b21b      	sxth	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009658:	4413      	add	r3, r2
 800965a:	7efa      	ldrb	r2, [r7, #27]
 800965c:	4910      	ldr	r1, [pc, #64]	; (80096a0 <tcp_slowtmr+0x28c>)
 800965e:	5c8a      	ldrb	r2, [r1, r2]
 8009660:	4093      	lsls	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800966a:	4293      	cmp	r3, r2
 800966c:	dc1a      	bgt.n	80096a4 <tcp_slowtmr+0x290>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	b21a      	sxth	r2, r3
 8009672:	e019      	b.n	80096a8 <tcp_slowtmr+0x294>
 8009674:	2000d890 	.word	0x2000d890
 8009678:	2000d8a6 	.word	0x2000d8a6
 800967c:	2000d89c 	.word	0x2000d89c
 8009680:	08014cd8 	.word	0x08014cd8
 8009684:	0801501c 	.word	0x0801501c
 8009688:	08014d1c 	.word	0x08014d1c
 800968c:	08015048 	.word	0x08015048
 8009690:	08015074 	.word	0x08015074
 8009694:	080150a4 	.word	0x080150a4
 8009698:	080150d8 	.word	0x080150d8
 800969c:	08016cd8 	.word	0x08016cd8
 80096a0:	08016cc8 	.word	0x08016cc8
 80096a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	2200      	movs	r2, #0
 80096b2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096c0:	4293      	cmp	r3, r2
 80096c2:	bf28      	it	cs
 80096c4:	4613      	movcs	r3, r2
 80096c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80096c8:	8a7b      	ldrh	r3, [r7, #18]
 80096ca:	085b      	lsrs	r3, r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d206      	bcs.n	80096f4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	2200      	movs	r2, #0
 8009702:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009708:	f004 f832 	bl	800d770 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	7d1b      	ldrb	r3, [r3, #20]
 8009710:	2b06      	cmp	r3, #6
 8009712:	d111      	bne.n	8009738 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	8b5b      	ldrh	r3, [r3, #26]
 8009718:	f003 0310 	and.w	r3, r3, #16
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009720:	4b9c      	ldr	r3, [pc, #624]	; (8009994 <tcp_slowtmr+0x580>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b28      	cmp	r3, #40	; 0x28
 800972c:	d904      	bls.n	8009738 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800972e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009732:	3301      	adds	r3, #1
 8009734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	7a5b      	ldrb	r3, [r3, #9]
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b00      	cmp	r3, #0
 8009742:	d04a      	beq.n	80097da <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009748:	2b04      	cmp	r3, #4
 800974a:	d003      	beq.n	8009754 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009750:	2b07      	cmp	r3, #7
 8009752:	d142      	bne.n	80097da <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009754:	4b8f      	ldr	r3, [pc, #572]	; (8009994 <tcp_slowtmr+0x580>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009764:	4b8c      	ldr	r3, [pc, #560]	; (8009998 <tcp_slowtmr+0x584>)
 8009766:	440b      	add	r3, r1
 8009768:	498c      	ldr	r1, [pc, #560]	; (800999c <tcp_slowtmr+0x588>)
 800976a:	fba1 1303 	umull	r1, r3, r1, r3
 800976e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009770:	429a      	cmp	r2, r3
 8009772:	d90a      	bls.n	800978a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009778:	3301      	adds	r3, #1
 800977a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800977e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009782:	3301      	adds	r3, #1
 8009784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009788:	e027      	b.n	80097da <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800978a:	4b82      	ldr	r3, [pc, #520]	; (8009994 <tcp_slowtmr+0x580>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80097a0:	4618      	mov	r0, r3
 80097a2:	4b7f      	ldr	r3, [pc, #508]	; (80099a0 <tcp_slowtmr+0x58c>)
 80097a4:	fb00 f303 	mul.w	r3, r0, r3
 80097a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80097aa:	497c      	ldr	r1, [pc, #496]	; (800999c <tcp_slowtmr+0x588>)
 80097ac:	fba1 1303 	umull	r1, r3, r1, r3
 80097b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d911      	bls.n	80097da <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80097b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097b8:	f004 fae0 	bl	800dd7c <tcp_keepalive>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80097c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d107      	bne.n	80097da <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80097d0:	3301      	adds	r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d011      	beq.n	8009806 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80097e2:	4b6c      	ldr	r3, [pc, #432]	; (8009994 <tcp_slowtmr+0x580>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	1ad2      	subs	r2, r2, r3
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80097f2:	4619      	mov	r1, r3
 80097f4:	460b      	mov	r3, r1
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	440b      	add	r3, r1
 80097fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d302      	bcc.n	8009806 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009802:	f000 fdf1 	bl	800a3e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	7d1b      	ldrb	r3, [r3, #20]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d10b      	bne.n	8009826 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800980e:	4b61      	ldr	r3, [pc, #388]	; (8009994 <tcp_slowtmr+0x580>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b28      	cmp	r3, #40	; 0x28
 800981a:	d904      	bls.n	8009826 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800981c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009820:	3301      	adds	r3, #1
 8009822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	7d1b      	ldrb	r3, [r3, #20]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d10b      	bne.n	8009846 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800982e:	4b59      	ldr	r3, [pc, #356]	; (8009994 <tcp_slowtmr+0x580>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	2bf0      	cmp	r3, #240	; 0xf0
 800983a:	d904      	bls.n	8009846 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800983c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009840:	3301      	adds	r3, #1
 8009842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800984a:	2b00      	cmp	r3, #0
 800984c:	d060      	beq.n	8009910 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009854:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009858:	f000 fc12 	bl	800a080 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	2b00      	cmp	r3, #0
 8009860:	d010      	beq.n	8009884 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009862:	4b50      	ldr	r3, [pc, #320]	; (80099a4 <tcp_slowtmr+0x590>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009868:	429a      	cmp	r2, r3
 800986a:	d106      	bne.n	800987a <tcp_slowtmr+0x466>
 800986c:	4b4e      	ldr	r3, [pc, #312]	; (80099a8 <tcp_slowtmr+0x594>)
 800986e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009872:	494e      	ldr	r1, [pc, #312]	; (80099ac <tcp_slowtmr+0x598>)
 8009874:	484e      	ldr	r0, [pc, #312]	; (80099b0 <tcp_slowtmr+0x59c>)
 8009876:	f009 f8b9 	bl	80129ec <iprintf>
        prev->next = pcb->next;
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	60da      	str	r2, [r3, #12]
 8009882:	e00f      	b.n	80098a4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009884:	4b47      	ldr	r3, [pc, #284]	; (80099a4 <tcp_slowtmr+0x590>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800988a:	429a      	cmp	r2, r3
 800988c:	d006      	beq.n	800989c <tcp_slowtmr+0x488>
 800988e:	4b46      	ldr	r3, [pc, #280]	; (80099a8 <tcp_slowtmr+0x594>)
 8009890:	f240 5271 	movw	r2, #1393	; 0x571
 8009894:	4947      	ldr	r1, [pc, #284]	; (80099b4 <tcp_slowtmr+0x5a0>)
 8009896:	4846      	ldr	r0, [pc, #280]	; (80099b0 <tcp_slowtmr+0x59c>)
 8009898:	f009 f8a8 	bl	80129ec <iprintf>
        tcp_active_pcbs = pcb->next;
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4a40      	ldr	r2, [pc, #256]	; (80099a4 <tcp_slowtmr+0x590>)
 80098a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80098a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d013      	beq.n	80098d4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80098b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	3304      	adds	r3, #4
 80098ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098bc:	8ad2      	ldrh	r2, [r2, #22]
 80098be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098c0:	8b09      	ldrh	r1, [r1, #24]
 80098c2:	9102      	str	r1, [sp, #8]
 80098c4:	9201      	str	r2, [sp, #4]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	462b      	mov	r3, r5
 80098ca:	4622      	mov	r2, r4
 80098cc:	4601      	mov	r1, r0
 80098ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098d0:	f004 f9a0 	bl	800dc14 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	7d1b      	ldrb	r3, [r3, #20]
 80098de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80098ea:	6838      	ldr	r0, [r7, #0]
 80098ec:	f7ff f9f4 	bl	8008cd8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80098f0:	4b31      	ldr	r3, [pc, #196]	; (80099b8 <tcp_slowtmr+0x5a4>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <tcp_slowtmr+0x4f2>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f06f 010c 	mvn.w	r1, #12
 8009902:	68b8      	ldr	r0, [r7, #8]
 8009904:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009906:	4b2c      	ldr	r3, [pc, #176]	; (80099b8 <tcp_slowtmr+0x5a4>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d037      	beq.n	800997e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800990e:	e592      	b.n	8009436 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	7f1b      	ldrb	r3, [r3, #28]
 800991e:	3301      	adds	r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	7f1a      	ldrb	r2, [r3, #28]
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	7f5b      	ldrb	r3, [r3, #29]
 800992e:	429a      	cmp	r2, r3
 8009930:	d325      	bcc.n	800997e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	2200      	movs	r2, #0
 8009936:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009938:	4b1f      	ldr	r3, [pc, #124]	; (80099b8 <tcp_slowtmr+0x5a4>)
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <tcp_slowtmr+0x54c>
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800994e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009950:	6912      	ldr	r2, [r2, #16]
 8009952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	4603      	mov	r3, r0
 800995a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800995e:	e002      	b.n	8009966 <tcp_slowtmr+0x552>
 8009960:	2300      	movs	r3, #0
 8009962:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <tcp_slowtmr+0x5a4>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d000      	beq.n	8009970 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800996e:	e562      	b.n	8009436 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009970:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997a:	f003 fb97 	bl	800d0ac <tcp_output>
  while (pcb != NULL) {
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	2b00      	cmp	r3, #0
 8009982:	f47f ad5e 	bne.w	8009442 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800998a:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <tcp_slowtmr+0x5a8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009990:	e069      	b.n	8009a66 <tcp_slowtmr+0x652>
 8009992:	bf00      	nop
 8009994:	2000d890 	.word	0x2000d890
 8009998:	000a4cb8 	.word	0x000a4cb8
 800999c:	10624dd3 	.word	0x10624dd3
 80099a0:	000124f8 	.word	0x000124f8
 80099a4:	2000d89c 	.word	0x2000d89c
 80099a8:	08014cd8 	.word	0x08014cd8
 80099ac:	08015110 	.word	0x08015110
 80099b0:	08014d1c 	.word	0x08014d1c
 80099b4:	0801513c 	.word	0x0801513c
 80099b8:	2000d8a4 	.word	0x2000d8a4
 80099bc:	2000d8a0 	.word	0x2000d8a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	7d1b      	ldrb	r3, [r3, #20]
 80099c4:	2b0a      	cmp	r3, #10
 80099c6:	d006      	beq.n	80099d6 <tcp_slowtmr+0x5c2>
 80099c8:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <tcp_slowtmr+0x664>)
 80099ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80099ce:	492b      	ldr	r1, [pc, #172]	; (8009a7c <tcp_slowtmr+0x668>)
 80099d0:	482b      	ldr	r0, [pc, #172]	; (8009a80 <tcp_slowtmr+0x66c>)
 80099d2:	f009 f80b 	bl	80129ec <iprintf>
    pcb_remove = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80099dc:	4b29      	ldr	r3, [pc, #164]	; (8009a84 <tcp_slowtmr+0x670>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2bf0      	cmp	r3, #240	; 0xf0
 80099e8:	d904      	bls.n	80099f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80099ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ee:	3301      	adds	r3, #1
 80099f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80099f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d02f      	beq.n	8009a5c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80099fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099fe:	f000 fb3f 	bl	800a080 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d010      	beq.n	8009a2a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009a08:	4b1f      	ldr	r3, [pc, #124]	; (8009a88 <tcp_slowtmr+0x674>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d106      	bne.n	8009a20 <tcp_slowtmr+0x60c>
 8009a12:	4b19      	ldr	r3, [pc, #100]	; (8009a78 <tcp_slowtmr+0x664>)
 8009a14:	f240 52af 	movw	r2, #1455	; 0x5af
 8009a18:	491c      	ldr	r1, [pc, #112]	; (8009a8c <tcp_slowtmr+0x678>)
 8009a1a:	4819      	ldr	r0, [pc, #100]	; (8009a80 <tcp_slowtmr+0x66c>)
 8009a1c:	f008 ffe6 	bl	80129ec <iprintf>
        prev->next = pcb->next;
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	60da      	str	r2, [r3, #12]
 8009a28:	e00f      	b.n	8009a4a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a2a:	4b17      	ldr	r3, [pc, #92]	; (8009a88 <tcp_slowtmr+0x674>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d006      	beq.n	8009a42 <tcp_slowtmr+0x62e>
 8009a34:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <tcp_slowtmr+0x664>)
 8009a36:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009a3a:	4915      	ldr	r1, [pc, #84]	; (8009a90 <tcp_slowtmr+0x67c>)
 8009a3c:	4810      	ldr	r0, [pc, #64]	; (8009a80 <tcp_slowtmr+0x66c>)
 8009a3e:	f008 ffd5 	bl	80129ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	4a10      	ldr	r2, [pc, #64]	; (8009a88 <tcp_slowtmr+0x674>)
 8009a48:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a54:	69f8      	ldr	r0, [r7, #28]
 8009a56:	f7ff f93f 	bl	8008cd8 <tcp_free>
 8009a5a:	e004      	b.n	8009a66 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1a9      	bne.n	80099c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	3730      	adds	r7, #48	; 0x30
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bdb0      	pop	{r4, r5, r7, pc}
 8009a76:	bf00      	nop
 8009a78:	08014cd8 	.word	0x08014cd8
 8009a7c:	08015168 	.word	0x08015168
 8009a80:	08014d1c 	.word	0x08014d1c
 8009a84:	2000d890 	.word	0x2000d890
 8009a88:	2000d8a0 	.word	0x2000d8a0
 8009a8c:	08015198 	.word	0x08015198
 8009a90:	080151c0 	.word	0x080151c0

08009a94 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009a9a:	4b2d      	ldr	r3, [pc, #180]	; (8009b50 <tcp_fasttmr+0xbc>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	4b2b      	ldr	r3, [pc, #172]	; (8009b50 <tcp_fasttmr+0xbc>)
 8009aa4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009aa6:	4b2b      	ldr	r3, [pc, #172]	; (8009b54 <tcp_fasttmr+0xc0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009aac:	e048      	b.n	8009b40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7f9a      	ldrb	r2, [r3, #30]
 8009ab2:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <tcp_fasttmr+0xbc>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d03f      	beq.n	8009b3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009aba:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <tcp_fasttmr+0xbc>)
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	8b5b      	ldrh	r3, [r3, #26]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d010      	beq.n	8009af0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	8b5b      	ldrh	r3, [r3, #26]
 8009ad2:	f043 0302 	orr.w	r3, r3, #2
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f003 fae5 	bl	800d0ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	8b5b      	ldrh	r3, [r3, #26]
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8b5b      	ldrh	r3, [r3, #26]
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d009      	beq.n	8009b10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	8b5b      	ldrh	r3, [r3, #26]
 8009b00:	f023 0308 	bic.w	r3, r3, #8
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fa78 	bl	8009000 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009b1e:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <tcp_fasttmr+0xc4>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f819 	bl	8009b5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <tcp_fasttmr+0xc4>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d000      	beq.n	8009b34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009b32:	e7b8      	b.n	8009aa6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	607b      	str	r3, [r7, #4]
 8009b38:	e002      	b.n	8009b40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1b3      	bne.n	8009aae <tcp_fasttmr+0x1a>
    }
  }
}
 8009b46:	bf00      	nop
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	2000d8a6 	.word	0x2000d8a6
 8009b54:	2000d89c 	.word	0x2000d89c
 8009b58:	2000d8a4 	.word	0x2000d8a4

08009b5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009b5c:	b590      	push	{r4, r7, lr}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <tcp_process_refused_data+0x22>
 8009b6a:	4b37      	ldr	r3, [pc, #220]	; (8009c48 <tcp_process_refused_data+0xec>)
 8009b6c:	f240 6209 	movw	r2, #1545	; 0x609
 8009b70:	4936      	ldr	r1, [pc, #216]	; (8009c4c <tcp_process_refused_data+0xf0>)
 8009b72:	4837      	ldr	r0, [pc, #220]	; (8009c50 <tcp_process_refused_data+0xf4>)
 8009b74:	f008 ff3a 	bl	80129ec <iprintf>
 8009b78:	f06f 030f 	mvn.w	r3, #15
 8009b7c:	e060      	b.n	8009c40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b82:	7b5b      	ldrb	r3, [r3, #13]
 8009b84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <tcp_process_refused_data+0x58>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6918      	ldr	r0, [r3, #16]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	47a0      	blx	r4
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
 8009bb2:	e007      	b.n	8009bc4 <tcp_process_refused_data+0x68>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	2000      	movs	r0, #0
 8009bbc:	f000 f8a8 	bl	8009d10 <tcp_recv_null>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d12a      	bne.n	8009c22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009bcc:	7bbb      	ldrb	r3, [r7, #14]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d033      	beq.n	8009c3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009bde:	d005      	beq.n	8009bec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be4:	3301      	adds	r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00b      	beq.n	8009c0e <tcp_process_refused_data+0xb2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6918      	ldr	r0, [r3, #16]
 8009c00:	2300      	movs	r3, #0
 8009c02:	2200      	movs	r2, #0
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	47a0      	blx	r4
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
 8009c0c:	e001      	b.n	8009c12 <tcp_process_refused_data+0xb6>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c16:	f113 0f0d 	cmn.w	r3, #13
 8009c1a:	d110      	bne.n	8009c3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009c1c:	f06f 030c 	mvn.w	r3, #12
 8009c20:	e00e      	b.n	8009c40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c26:	f113 0f0d 	cmn.w	r3, #13
 8009c2a:	d102      	bne.n	8009c32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009c2c:	f06f 030c 	mvn.w	r3, #12
 8009c30:	e006      	b.n	8009c40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009c38:	f06f 0304 	mvn.w	r3, #4
 8009c3c:	e000      	b.n	8009c40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd90      	pop	{r4, r7, pc}
 8009c48:	08014cd8 	.word	0x08014cd8
 8009c4c:	080151e8 	.word	0x080151e8
 8009c50:	08014d1c 	.word	0x08014d1c

08009c54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009c5c:	e007      	b.n	8009c6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f80a 	bl	8009c7e <tcp_seg_free>
    seg = next;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f4      	bne.n	8009c5e <tcp_segs_free+0xa>
  }
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00c      	beq.n	8009ca6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d004      	beq.n	8009c9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fd6d 	bl	8008778 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	2003      	movs	r0, #3
 8009ca2:	f7fd ff4f 	bl	8007b44 <memp_free>
  }
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <tcp_seg_copy+0x1c>
 8009cbe:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <tcp_seg_copy+0x54>)
 8009cc0:	f240 6282 	movw	r2, #1666	; 0x682
 8009cc4:	4910      	ldr	r1, [pc, #64]	; (8009d08 <tcp_seg_copy+0x58>)
 8009cc6:	4811      	ldr	r0, [pc, #68]	; (8009d0c <tcp_seg_copy+0x5c>)
 8009cc8:	f008 fe90 	bl	80129ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009ccc:	f240 6284 	movw	r2, #1668	; 0x684
 8009cd0:	490c      	ldr	r1, [pc, #48]	; (8009d04 <tcp_seg_copy+0x54>)
 8009cd2:	2003      	movs	r0, #3
 8009cd4:	f7fd fed2 	bl	8007a7c <memp_malloc_fn>
 8009cd8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <tcp_seg_copy+0x34>
    return NULL;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e00a      	b.n	8009cfa <tcp_seg_copy+0x4a>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f008 fe4f 	bl	801298c <memcpy>
  pbuf_ref(cseg->p);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fde0 	bl	80088b8 <pbuf_ref>
  return cseg;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08014cd8 	.word	0x08014cd8
 8009d08:	0801522c 	.word	0x0801522c
 8009d0c:	08014d1c 	.word	0x08014d1c

08009d10 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d109      	bne.n	8009d38 <tcp_recv_null+0x28>
 8009d24:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <tcp_recv_null+0x60>)
 8009d26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009d2a:	4912      	ldr	r1, [pc, #72]	; (8009d74 <tcp_recv_null+0x64>)
 8009d2c:	4812      	ldr	r0, [pc, #72]	; (8009d78 <tcp_recv_null+0x68>)
 8009d2e:	f008 fe5d 	bl	80129ec <iprintf>
 8009d32:	f06f 030f 	mvn.w	r3, #15
 8009d36:	e016      	b.n	8009d66 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	891b      	ldrh	r3, [r3, #8]
 8009d42:	4619      	mov	r1, r3
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f7ff fb15 	bl	8009374 <tcp_recved>
    pbuf_free(p);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fe fd14 	bl	8008778 <pbuf_free>
 8009d50:	e008      	b.n	8009d64 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009d5a:	68b8      	ldr	r0, [r7, #8]
 8009d5c:	f7ff f9ba 	bl	80090d4 <tcp_close>
 8009d60:	4603      	mov	r3, r0
 8009d62:	e000      	b.n	8009d66 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	08014cd8 	.word	0x08014cd8
 8009d74:	08015248 	.word	0x08015248
 8009d78:	08014d1c 	.word	0x08014d1c

08009d7c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	db01      	blt.n	8009d92 <tcp_kill_prio+0x16>
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	e000      	b.n	8009d94 <tcp_kill_prio+0x18>
 8009d92:	237f      	movs	r3, #127	; 0x7f
 8009d94:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009d96:	7afb      	ldrb	r3, [r7, #11]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d034      	beq.n	8009e06 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009daa:	4b19      	ldr	r3, [pc, #100]	; (8009e10 <tcp_kill_prio+0x94>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	e01f      	b.n	8009df2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	7d5b      	ldrb	r3, [r3, #21]
 8009db6:	7afa      	ldrb	r2, [r7, #11]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d80c      	bhi.n	8009dd6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009dc0:	7afa      	ldrb	r2, [r7, #11]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d112      	bne.n	8009dec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009dc6:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <tcp_kill_prio+0x98>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d80a      	bhi.n	8009dec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	; (8009e14 <tcp_kill_prio+0x98>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	7d5b      	ldrb	r3, [r3, #21]
 8009dea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1dc      	bne.n	8009db2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009dfe:	6938      	ldr	r0, [r7, #16]
 8009e00:	f7ff fa52 	bl	80092a8 <tcp_abort>
 8009e04:	e000      	b.n	8009e08 <tcp_kill_prio+0x8c>
    return;
 8009e06:	bf00      	nop
  }
}
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	2000d89c 	.word	0x2000d89c
 8009e14:	2000d890 	.word	0x2000d890

08009e18 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d009      	beq.n	8009e3c <tcp_kill_state+0x24>
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b09      	cmp	r3, #9
 8009e2c:	d006      	beq.n	8009e3c <tcp_kill_state+0x24>
 8009e2e:	4b1a      	ldr	r3, [pc, #104]	; (8009e98 <tcp_kill_state+0x80>)
 8009e30:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009e34:	4919      	ldr	r1, [pc, #100]	; (8009e9c <tcp_kill_state+0x84>)
 8009e36:	481a      	ldr	r0, [pc, #104]	; (8009ea0 <tcp_kill_state+0x88>)
 8009e38:	f008 fdd8 	bl	80129ec <iprintf>

  inactivity = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009e40:	2300      	movs	r3, #0
 8009e42:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e44:	4b17      	ldr	r3, [pc, #92]	; (8009ea4 <tcp_kill_state+0x8c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	e017      	b.n	8009e7c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	7d1b      	ldrb	r3, [r3, #20]
 8009e50:	79fa      	ldrb	r2, [r7, #7]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d10f      	bne.n	8009e76 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e56:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <tcp_kill_state+0x90>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d807      	bhi.n	8009e76 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <tcp_kill_state+0x90>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e4      	bne.n	8009e4c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009e88:	2100      	movs	r1, #0
 8009e8a:	6938      	ldr	r0, [r7, #16]
 8009e8c:	f7ff f94e 	bl	800912c <tcp_abandon>
  }
}
 8009e90:	bf00      	nop
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	08014cd8 	.word	0x08014cd8
 8009e9c:	08015264 	.word	0x08015264
 8009ea0:	08014d1c 	.word	0x08014d1c
 8009ea4:	2000d89c 	.word	0x2000d89c
 8009ea8:	2000d890 	.word	0x2000d890

08009eac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009eba:	4b12      	ldr	r3, [pc, #72]	; (8009f04 <tcp_kill_timewait+0x58>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e012      	b.n	8009ee8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ec2:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <tcp_kill_timewait+0x5c>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d807      	bhi.n	8009ee2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009ed2:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <tcp_kill_timewait+0x5c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e9      	bne.n	8009ec2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009ef4:	68b8      	ldr	r0, [r7, #8]
 8009ef6:	f7ff f9d7 	bl	80092a8 <tcp_abort>
  }
}
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000d8a0 	.word	0x2000d8a0
 8009f08:	2000d890 	.word	0x2000d890

08009f0c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009f12:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <tcp_handle_closepend+0x48>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009f18:	e014      	b.n	8009f44 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8b5b      	ldrh	r3, [r3, #26]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d009      	beq.n	8009f40 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	8b5b      	ldrh	r3, [r3, #26]
 8009f30:	f023 0308 	bic.w	r3, r3, #8
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff f860 	bl	8009000 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e7      	bne.n	8009f1a <tcp_handle_closepend+0xe>
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	2000d89c 	.word	0x2000d89c

08009f58 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f62:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8009f66:	4941      	ldr	r1, [pc, #260]	; (800a06c <tcp_alloc+0x114>)
 8009f68:	2001      	movs	r0, #1
 8009f6a:	f7fd fd87 	bl	8007a7c <memp_malloc_fn>
 8009f6e:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d132      	bne.n	8009fdc <tcp_alloc+0x84>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009f76:	f7ff ffc9 	bl	8009f0c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009f7a:	f7ff ff97 	bl	8009eac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f7e:	f240 7239 	movw	r2, #1849	; 0x739
 8009f82:	493a      	ldr	r1, [pc, #232]	; (800a06c <tcp_alloc+0x114>)
 8009f84:	2001      	movs	r0, #1
 8009f86:	f7fd fd79 	bl	8007a7c <memp_malloc_fn>
 8009f8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d124      	bne.n	8009fdc <tcp_alloc+0x84>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009f92:	2009      	movs	r0, #9
 8009f94:	f7ff ff40 	bl	8009e18 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f98:	f240 723f 	movw	r2, #1855	; 0x73f
 8009f9c:	4933      	ldr	r1, [pc, #204]	; (800a06c <tcp_alloc+0x114>)
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f7fd fd6c 	bl	8007a7c <memp_malloc_fn>
 8009fa4:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d117      	bne.n	8009fdc <tcp_alloc+0x84>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009fac:	2008      	movs	r0, #8
 8009fae:	f7ff ff33 	bl	8009e18 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009fb2:	f240 7245 	movw	r2, #1861	; 0x745
 8009fb6:	492d      	ldr	r1, [pc, #180]	; (800a06c <tcp_alloc+0x114>)
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f7fd fd5f 	bl	8007a7c <memp_malloc_fn>
 8009fbe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <tcp_alloc+0x84>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fed7 	bl	8009d7c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009fce:	f240 724b 	movw	r2, #1867	; 0x74b
 8009fd2:	4926      	ldr	r1, [pc, #152]	; (800a06c <tcp_alloc+0x114>)
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	f7fd fd51 	bl	8007a7c <memp_malloc_fn>
 8009fda:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d03f      	beq.n	800a062 <tcp_alloc+0x10a>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009fe2:	229c      	movs	r2, #156	; 0x9c
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f008 fcf8 	bl	80129dc <memset>
    pcb->prio = prio;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	79fa      	ldrb	r2, [r7, #7]
 8009ff0:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009ff8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a002:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	22ff      	movs	r2, #255	; 0xff
 800a010:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a018:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2206      	movs	r2, #6
 800a01e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2206      	movs	r2, #6
 800a026:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a02e:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <tcp_alloc+0x118>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a040:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <tcp_alloc+0x11c>)
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a04e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4a08      	ldr	r2, [pc, #32]	; (800a078 <tcp_alloc+0x120>)
 800a056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4a07      	ldr	r2, [pc, #28]	; (800a07c <tcp_alloc+0x124>)
 800a05e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a062:	68fb      	ldr	r3, [r7, #12]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08014cd8 	.word	0x08014cd8
 800a070:	2000d890 	.word	0x2000d890
 800a074:	2000d8a6 	.word	0x2000d8a6
 800a078:	08009d11 	.word	0x08009d11
 800a07c:	006ddd00 	.word	0x006ddd00

0800a080 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d107      	bne.n	800a09e <tcp_pcb_purge+0x1e>
 800a08e:	4b21      	ldr	r3, [pc, #132]	; (800a114 <tcp_pcb_purge+0x94>)
 800a090:	f640 0251 	movw	r2, #2129	; 0x851
 800a094:	4920      	ldr	r1, [pc, #128]	; (800a118 <tcp_pcb_purge+0x98>)
 800a096:	4821      	ldr	r0, [pc, #132]	; (800a11c <tcp_pcb_purge+0x9c>)
 800a098:	f008 fca8 	bl	80129ec <iprintf>
 800a09c:	e037      	b.n	800a10e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7d1b      	ldrb	r3, [r3, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d033      	beq.n	800a10e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a0aa:	2b0a      	cmp	r3, #10
 800a0ac:	d02f      	beq.n	800a10e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d02b      	beq.n	800a10e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fb58 	bl	8008778 <pbuf_free>
      pcb->refused_data = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f986 	bl	800a3e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff fdb3 	bl	8009c54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fdae 	bl	8009c54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	08014cd8 	.word	0x08014cd8
 800a118:	08015324 	.word	0x08015324
 800a11c:	08014d1c 	.word	0x08014d1c

0800a120 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <tcp_pcb_remove+0x1e>
 800a130:	4b3e      	ldr	r3, [pc, #248]	; (800a22c <tcp_pcb_remove+0x10c>)
 800a132:	f640 0283 	movw	r2, #2179	; 0x883
 800a136:	493e      	ldr	r1, [pc, #248]	; (800a230 <tcp_pcb_remove+0x110>)
 800a138:	483e      	ldr	r0, [pc, #248]	; (800a234 <tcp_pcb_remove+0x114>)
 800a13a:	f008 fc57 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d106      	bne.n	800a152 <tcp_pcb_remove+0x32>
 800a144:	4b39      	ldr	r3, [pc, #228]	; (800a22c <tcp_pcb_remove+0x10c>)
 800a146:	f640 0284 	movw	r2, #2180	; 0x884
 800a14a:	493b      	ldr	r1, [pc, #236]	; (800a238 <tcp_pcb_remove+0x118>)
 800a14c:	4839      	ldr	r0, [pc, #228]	; (800a234 <tcp_pcb_remove+0x114>)
 800a14e:	f008 fc4d 	bl	80129ec <iprintf>

  TCP_RMV(pcblist, pcb);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d105      	bne.n	800a168 <tcp_pcb_remove+0x48>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68da      	ldr	r2, [r3, #12]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	e013      	b.n	800a190 <tcp_pcb_remove+0x70>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	e00c      	b.n	800a18a <tcp_pcb_remove+0x6a>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d104      	bne.n	800a184 <tcp_pcb_remove+0x64>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	60da      	str	r2, [r3, #12]
 800a182:	e005      	b.n	800a190 <tcp_pcb_remove+0x70>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	60fb      	str	r3, [r7, #12]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1ef      	bne.n	800a170 <tcp_pcb_remove+0x50>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a196:	6838      	ldr	r0, [r7, #0]
 800a198:	f7ff ff72 	bl	800a080 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	2b0a      	cmp	r3, #10
 800a1a2:	d013      	beq.n	800a1cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d00f      	beq.n	800a1cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	8b5b      	ldrh	r3, [r3, #26]
 800a1b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	8b5b      	ldrh	r3, [r3, #26]
 800a1bc:	f043 0302 	orr.w	r3, r3, #2
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a1c6:	6838      	ldr	r0, [r7, #0]
 800a1c8:	f002 ff70 	bl	800d0ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	7d1b      	ldrb	r3, [r3, #20]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d020      	beq.n	800a216 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d006      	beq.n	800a1ea <tcp_pcb_remove+0xca>
 800a1dc:	4b13      	ldr	r3, [pc, #76]	; (800a22c <tcp_pcb_remove+0x10c>)
 800a1de:	f640 0293 	movw	r2, #2195	; 0x893
 800a1e2:	4916      	ldr	r1, [pc, #88]	; (800a23c <tcp_pcb_remove+0x11c>)
 800a1e4:	4813      	ldr	r0, [pc, #76]	; (800a234 <tcp_pcb_remove+0x114>)
 800a1e6:	f008 fc01 	bl	80129ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d006      	beq.n	800a200 <tcp_pcb_remove+0xe0>
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <tcp_pcb_remove+0x10c>)
 800a1f4:	f640 0294 	movw	r2, #2196	; 0x894
 800a1f8:	4911      	ldr	r1, [pc, #68]	; (800a240 <tcp_pcb_remove+0x120>)
 800a1fa:	480e      	ldr	r0, [pc, #56]	; (800a234 <tcp_pcb_remove+0x114>)
 800a1fc:	f008 fbf6 	bl	80129ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a204:	2b00      	cmp	r3, #0
 800a206:	d006      	beq.n	800a216 <tcp_pcb_remove+0xf6>
 800a208:	4b08      	ldr	r3, [pc, #32]	; (800a22c <tcp_pcb_remove+0x10c>)
 800a20a:	f640 0296 	movw	r2, #2198	; 0x896
 800a20e:	490d      	ldr	r1, [pc, #52]	; (800a244 <tcp_pcb_remove+0x124>)
 800a210:	4808      	ldr	r0, [pc, #32]	; (800a234 <tcp_pcb_remove+0x114>)
 800a212:	f008 fbeb 	bl	80129ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2200      	movs	r2, #0
 800a21a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2200      	movs	r2, #0
 800a220:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	08014cd8 	.word	0x08014cd8
 800a230:	08015340 	.word	0x08015340
 800a234:	08014d1c 	.word	0x08014d1c
 800a238:	0801535c 	.word	0x0801535c
 800a23c:	0801537c 	.word	0x0801537c
 800a240:	08015394 	.word	0x08015394
 800a244:	080153b0 	.word	0x080153b0

0800a248 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <tcp_next_iss+0x1c>
 800a256:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <tcp_next_iss+0x38>)
 800a258:	f640 02af 	movw	r2, #2223	; 0x8af
 800a25c:	4909      	ldr	r1, [pc, #36]	; (800a284 <tcp_next_iss+0x3c>)
 800a25e:	480a      	ldr	r0, [pc, #40]	; (800a288 <tcp_next_iss+0x40>)
 800a260:	f008 fbc4 	bl	80129ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a264:	4b09      	ldr	r3, [pc, #36]	; (800a28c <tcp_next_iss+0x44>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <tcp_next_iss+0x48>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4413      	add	r3, r2
 800a26e:	4a07      	ldr	r2, [pc, #28]	; (800a28c <tcp_next_iss+0x44>)
 800a270:	6013      	str	r3, [r2, #0]
  return iss;
 800a272:	4b06      	ldr	r3, [pc, #24]	; (800a28c <tcp_next_iss+0x44>)
 800a274:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	08014cd8 	.word	0x08014cd8
 800a284:	080153c8 	.word	0x080153c8
 800a288:	08014d1c 	.word	0x08014d1c
 800a28c:	20000014 	.word	0x20000014
 800a290:	2000d890 	.word	0x2000d890

0800a294 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <tcp_eff_send_mss_netif+0x22>
 800a2a8:	4b14      	ldr	r3, [pc, #80]	; (800a2fc <tcp_eff_send_mss_netif+0x68>)
 800a2aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a2ae:	4914      	ldr	r1, [pc, #80]	; (800a300 <tcp_eff_send_mss_netif+0x6c>)
 800a2b0:	4814      	ldr	r0, [pc, #80]	; (800a304 <tcp_eff_send_mss_netif+0x70>)
 800a2b2:	f008 fb9b 	bl	80129ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a2bc:	89fb      	ldrh	r3, [r7, #14]
 800a2be:	e019      	b.n	800a2f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a2c6:	8afb      	ldrh	r3, [r7, #22]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d012      	beq.n	800a2f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a2cc:	2328      	movs	r3, #40	; 0x28
 800a2ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a2d0:	8afa      	ldrh	r2, [r7, #22]
 800a2d2:	8abb      	ldrh	r3, [r7, #20]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d904      	bls.n	800a2e2 <tcp_eff_send_mss_netif+0x4e>
 800a2d8:	8afa      	ldrh	r2, [r7, #22]
 800a2da:	8abb      	ldrh	r3, [r7, #20]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	e000      	b.n	800a2e4 <tcp_eff_send_mss_netif+0x50>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a2e6:	8a7a      	ldrh	r2, [r7, #18]
 800a2e8:	89fb      	ldrh	r3, [r7, #14]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	bf28      	it	cs
 800a2ee:	4613      	movcs	r3, r2
 800a2f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a2f2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	08014cd8 	.word	0x08014cd8
 800a300:	080153e4 	.word	0x080153e4
 800a304:	08014d1c 	.word	0x08014d1c

0800a308 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d119      	bne.n	800a350 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a31c:	4b10      	ldr	r3, [pc, #64]	; (800a360 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a31e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a322:	4910      	ldr	r1, [pc, #64]	; (800a364 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a324:	4810      	ldr	r0, [pc, #64]	; (800a368 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a326:	f008 fb61 	bl	80129ec <iprintf>

  while (pcb != NULL) {
 800a32a:	e011      	b.n	800a350 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d108      	bne.n	800a34a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7fe ffb2 	bl	80092a8 <tcp_abort>
      pcb = next;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	e002      	b.n	800a350 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1ea      	bne.n	800a32c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	08014cd8 	.word	0x08014cd8
 800a364:	0801540c 	.word	0x0801540c
 800a368:	08014d1c 	.word	0x08014d1c

0800a36c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d02a      	beq.n	800a3d2 <tcp_netif_ip_addr_changed+0x66>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d026      	beq.n	800a3d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a384:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <tcp_netif_ip_addr_changed+0x70>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff ffbc 	bl	800a308 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a390:	4b13      	ldr	r3, [pc, #76]	; (800a3e0 <tcp_netif_ip_addr_changed+0x74>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff ffb6 	bl	800a308 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d017      	beq.n	800a3d2 <tcp_netif_ip_addr_changed+0x66>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d013      	beq.n	800a3d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a3aa:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <tcp_netif_ip_addr_changed+0x78>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	e00c      	b.n	800a3cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d103      	bne.n	800a3c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1ef      	bne.n	800a3b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a3d2:	bf00      	nop
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	2000d89c 	.word	0x2000d89c
 800a3e0:	2000d894 	.word	0x2000d894
 800a3e4:	2000d898 	.word	0x2000d898

0800a3e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fc29 	bl	8009c54 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a410:	b590      	push	{r4, r7, lr}
 800a412:	b08d      	sub	sp, #52	; 0x34
 800a414:	af04      	add	r7, sp, #16
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d105      	bne.n	800a42c <tcp_input+0x1c>
 800a420:	4b9b      	ldr	r3, [pc, #620]	; (800a690 <tcp_input+0x280>)
 800a422:	2283      	movs	r2, #131	; 0x83
 800a424:	499b      	ldr	r1, [pc, #620]	; (800a694 <tcp_input+0x284>)
 800a426:	489c      	ldr	r0, [pc, #624]	; (800a698 <tcp_input+0x288>)
 800a428:	f008 fae0 	bl	80129ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	4a9a      	ldr	r2, [pc, #616]	; (800a69c <tcp_input+0x28c>)
 800a432:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	895b      	ldrh	r3, [r3, #10]
 800a438:	2b13      	cmp	r3, #19
 800a43a:	f240 83d1 	bls.w	800abe0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a43e:	4b98      	ldr	r3, [pc, #608]	; (800a6a0 <tcp_input+0x290>)
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	4a97      	ldr	r2, [pc, #604]	; (800a6a0 <tcp_input+0x290>)
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f005 ff01 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	f040 83c7 	bne.w	800abe4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a456:	4b92      	ldr	r3, [pc, #584]	; (800a6a0 <tcp_input+0x290>)
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a45e:	2be0      	cmp	r3, #224	; 0xe0
 800a460:	f000 83c0 	beq.w	800abe4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a464:	4b8d      	ldr	r3, [pc, #564]	; (800a69c <tcp_input+0x28c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	899b      	ldrh	r3, [r3, #12]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fc fd7d 	bl	8006f6c <lwip_htons>
 800a472:	4603      	mov	r3, r0
 800a474:	0b1b      	lsrs	r3, r3, #12
 800a476:	b29b      	uxth	r3, r3
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a47e:	7cbb      	ldrb	r3, [r7, #18]
 800a480:	2b13      	cmp	r3, #19
 800a482:	f240 83b1 	bls.w	800abe8 <tcp_input+0x7d8>
 800a486:	7cbb      	ldrb	r3, [r7, #18]
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	891b      	ldrh	r3, [r3, #8]
 800a48e:	429a      	cmp	r2, r3
 800a490:	f200 83aa 	bhi.w	800abe8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a494:	7cbb      	ldrb	r3, [r7, #18]
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b14      	subs	r3, #20
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	4b81      	ldr	r3, [pc, #516]	; (800a6a4 <tcp_input+0x294>)
 800a49e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a4a0:	4b81      	ldr	r3, [pc, #516]	; (800a6a8 <tcp_input+0x298>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	895a      	ldrh	r2, [r3, #10]
 800a4aa:	7cbb      	ldrb	r3, [r7, #18]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d309      	bcc.n	800a4c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a4b2:	4b7c      	ldr	r3, [pc, #496]	; (800a6a4 <tcp_input+0x294>)
 800a4b4:	881a      	ldrh	r2, [r3, #0]
 800a4b6:	4b7d      	ldr	r3, [pc, #500]	; (800a6ac <tcp_input+0x29c>)
 800a4b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a4ba:	7cbb      	ldrb	r3, [r7, #18]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe f8d4 	bl	800866c <pbuf_remove_header>
 800a4c4:	e04e      	b.n	800a564 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d105      	bne.n	800a4da <tcp_input+0xca>
 800a4ce:	4b70      	ldr	r3, [pc, #448]	; (800a690 <tcp_input+0x280>)
 800a4d0:	22c2      	movs	r2, #194	; 0xc2
 800a4d2:	4977      	ldr	r1, [pc, #476]	; (800a6b0 <tcp_input+0x2a0>)
 800a4d4:	4870      	ldr	r0, [pc, #448]	; (800a698 <tcp_input+0x288>)
 800a4d6:	f008 fa89 	bl	80129ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a4da:	2114      	movs	r1, #20
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7fe f8c5 	bl	800866c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	895a      	ldrh	r2, [r3, #10]
 800a4e6:	4b71      	ldr	r3, [pc, #452]	; (800a6ac <tcp_input+0x29c>)
 800a4e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a4ea:	4b6e      	ldr	r3, [pc, #440]	; (800a6a4 <tcp_input+0x294>)
 800a4ec:	881a      	ldrh	r2, [r3, #0]
 800a4ee:	4b6f      	ldr	r3, [pc, #444]	; (800a6ac <tcp_input+0x29c>)
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a4f6:	4b6d      	ldr	r3, [pc, #436]	; (800a6ac <tcp_input+0x29c>)
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7fe f8b5 	bl	800866c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	895b      	ldrh	r3, [r3, #10]
 800a508:	8a3a      	ldrh	r2, [r7, #16]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	f200 836e 	bhi.w	800abec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	4a64      	ldr	r2, [pc, #400]	; (800a6a8 <tcp_input+0x298>)
 800a518:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	8a3a      	ldrh	r2, [r7, #16]
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe f8a2 	bl	800866c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	891a      	ldrh	r2, [r3, #8]
 800a52c:	8a3b      	ldrh	r3, [r7, #16]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	895b      	ldrh	r3, [r3, #10]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <tcp_input+0x13a>
 800a53e:	4b54      	ldr	r3, [pc, #336]	; (800a690 <tcp_input+0x280>)
 800a540:	22df      	movs	r2, #223	; 0xdf
 800a542:	495c      	ldr	r1, [pc, #368]	; (800a6b4 <tcp_input+0x2a4>)
 800a544:	4854      	ldr	r0, [pc, #336]	; (800a698 <tcp_input+0x288>)
 800a546:	f008 fa51 	bl	80129ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	891a      	ldrh	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	891b      	ldrh	r3, [r3, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	d005      	beq.n	800a564 <tcp_input+0x154>
 800a558:	4b4d      	ldr	r3, [pc, #308]	; (800a690 <tcp_input+0x280>)
 800a55a:	22e0      	movs	r2, #224	; 0xe0
 800a55c:	4956      	ldr	r1, [pc, #344]	; (800a6b8 <tcp_input+0x2a8>)
 800a55e:	484e      	ldr	r0, [pc, #312]	; (800a698 <tcp_input+0x288>)
 800a560:	f008 fa44 	bl	80129ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a564:	4b4d      	ldr	r3, [pc, #308]	; (800a69c <tcp_input+0x28c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4a4b      	ldr	r2, [pc, #300]	; (800a69c <tcp_input+0x28c>)
 800a56e:	6814      	ldr	r4, [r2, #0]
 800a570:	4618      	mov	r0, r3
 800a572:	f7fc fcfb 	bl	8006f6c <lwip_htons>
 800a576:	4603      	mov	r3, r0
 800a578:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a57a:	4b48      	ldr	r3, [pc, #288]	; (800a69c <tcp_input+0x28c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	885b      	ldrh	r3, [r3, #2]
 800a580:	b29b      	uxth	r3, r3
 800a582:	4a46      	ldr	r2, [pc, #280]	; (800a69c <tcp_input+0x28c>)
 800a584:	6814      	ldr	r4, [r2, #0]
 800a586:	4618      	mov	r0, r3
 800a588:	f7fc fcf0 	bl	8006f6c <lwip_htons>
 800a58c:	4603      	mov	r3, r0
 800a58e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a590:	4b42      	ldr	r3, [pc, #264]	; (800a69c <tcp_input+0x28c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	4a41      	ldr	r2, [pc, #260]	; (800a69c <tcp_input+0x28c>)
 800a598:	6814      	ldr	r4, [r2, #0]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fc fcfb 	bl	8006f96 <lwip_htonl>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	6063      	str	r3, [r4, #4]
 800a5a4:	6863      	ldr	r3, [r4, #4]
 800a5a6:	4a45      	ldr	r2, [pc, #276]	; (800a6bc <tcp_input+0x2ac>)
 800a5a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a5aa:	4b3c      	ldr	r3, [pc, #240]	; (800a69c <tcp_input+0x28c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	4a3a      	ldr	r2, [pc, #232]	; (800a69c <tcp_input+0x28c>)
 800a5b2:	6814      	ldr	r4, [r2, #0]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fc fcee 	bl	8006f96 <lwip_htonl>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	4a3f      	ldr	r2, [pc, #252]	; (800a6c0 <tcp_input+0x2b0>)
 800a5c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a5c4:	4b35      	ldr	r3, [pc, #212]	; (800a69c <tcp_input+0x28c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	89db      	ldrh	r3, [r3, #14]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	4a33      	ldr	r2, [pc, #204]	; (800a69c <tcp_input+0x28c>)
 800a5ce:	6814      	ldr	r4, [r2, #0]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fc fccb 	bl	8006f6c <lwip_htons>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a5da:	4b30      	ldr	r3, [pc, #192]	; (800a69c <tcp_input+0x28c>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	899b      	ldrh	r3, [r3, #12]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fc fcc2 	bl	8006f6c <lwip_htons>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	4b34      	ldr	r3, [pc, #208]	; (800a6c4 <tcp_input+0x2b4>)
 800a5f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	891a      	ldrh	r2, [r3, #8]
 800a5fa:	4b33      	ldr	r3, [pc, #204]	; (800a6c8 <tcp_input+0x2b8>)
 800a5fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a5fe:	4b31      	ldr	r3, [pc, #196]	; (800a6c4 <tcp_input+0x2b4>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00c      	beq.n	800a624 <tcp_input+0x214>
    tcplen++;
 800a60a:	4b2f      	ldr	r3, [pc, #188]	; (800a6c8 <tcp_input+0x2b8>)
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	3301      	adds	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	4b2d      	ldr	r3, [pc, #180]	; (800a6c8 <tcp_input+0x2b8>)
 800a614:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	891a      	ldrh	r2, [r3, #8]
 800a61a:	4b2b      	ldr	r3, [pc, #172]	; (800a6c8 <tcp_input+0x2b8>)
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	f200 82e6 	bhi.w	800abf0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a624:	2300      	movs	r3, #0
 800a626:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a628:	4b28      	ldr	r3, [pc, #160]	; (800a6cc <tcp_input+0x2bc>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	e09d      	b.n	800a76c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	7d1b      	ldrb	r3, [r3, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d105      	bne.n	800a644 <tcp_input+0x234>
 800a638:	4b15      	ldr	r3, [pc, #84]	; (800a690 <tcp_input+0x280>)
 800a63a:	22fb      	movs	r2, #251	; 0xfb
 800a63c:	4924      	ldr	r1, [pc, #144]	; (800a6d0 <tcp_input+0x2c0>)
 800a63e:	4816      	ldr	r0, [pc, #88]	; (800a698 <tcp_input+0x288>)
 800a640:	f008 f9d4 	bl	80129ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	7d1b      	ldrb	r3, [r3, #20]
 800a648:	2b0a      	cmp	r3, #10
 800a64a:	d105      	bne.n	800a658 <tcp_input+0x248>
 800a64c:	4b10      	ldr	r3, [pc, #64]	; (800a690 <tcp_input+0x280>)
 800a64e:	22fc      	movs	r2, #252	; 0xfc
 800a650:	4920      	ldr	r1, [pc, #128]	; (800a6d4 <tcp_input+0x2c4>)
 800a652:	4811      	ldr	r0, [pc, #68]	; (800a698 <tcp_input+0x288>)
 800a654:	f008 f9ca 	bl	80129ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	7d1b      	ldrb	r3, [r3, #20]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d105      	bne.n	800a66c <tcp_input+0x25c>
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <tcp_input+0x280>)
 800a662:	22fd      	movs	r2, #253	; 0xfd
 800a664:	491c      	ldr	r1, [pc, #112]	; (800a6d8 <tcp_input+0x2c8>)
 800a666:	480c      	ldr	r0, [pc, #48]	; (800a698 <tcp_input+0x288>)
 800a668:	f008 f9c0 	bl	80129ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	7a1b      	ldrb	r3, [r3, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d033      	beq.n	800a6dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	7a1a      	ldrb	r2, [r3, #8]
 800a678:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <tcp_input+0x290>)
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a680:	3301      	adds	r3, #1
 800a682:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a684:	429a      	cmp	r2, r3
 800a686:	d029      	beq.n	800a6dc <tcp_input+0x2cc>
      prev = pcb;
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	61bb      	str	r3, [r7, #24]
      continue;
 800a68c:	e06b      	b.n	800a766 <tcp_input+0x356>
 800a68e:	bf00      	nop
 800a690:	08015440 	.word	0x08015440
 800a694:	08015474 	.word	0x08015474
 800a698:	0801548c 	.word	0x0801548c
 800a69c:	2000d8b8 	.word	0x2000d8b8
 800a6a0:	20005bc0 	.word	0x20005bc0
 800a6a4:	2000d8bc 	.word	0x2000d8bc
 800a6a8:	2000d8c0 	.word	0x2000d8c0
 800a6ac:	2000d8be 	.word	0x2000d8be
 800a6b0:	080154b4 	.word	0x080154b4
 800a6b4:	080154c4 	.word	0x080154c4
 800a6b8:	080154d0 	.word	0x080154d0
 800a6bc:	2000d8c8 	.word	0x2000d8c8
 800a6c0:	2000d8cc 	.word	0x2000d8cc
 800a6c4:	2000d8d4 	.word	0x2000d8d4
 800a6c8:	2000d8d2 	.word	0x2000d8d2
 800a6cc:	2000d89c 	.word	0x2000d89c
 800a6d0:	080154f0 	.word	0x080154f0
 800a6d4:	08015518 	.word	0x08015518
 800a6d8:	08015544 	.word	0x08015544
    }

    if (pcb->remote_port == tcphdr->src &&
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	8b1a      	ldrh	r2, [r3, #24]
 800a6e0:	4b72      	ldr	r3, [pc, #456]	; (800a8ac <tcp_input+0x49c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d13a      	bne.n	800a762 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	8ada      	ldrh	r2, [r3, #22]
 800a6f0:	4b6e      	ldr	r3, [pc, #440]	; (800a8ac <tcp_input+0x49c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	885b      	ldrh	r3, [r3, #2]
 800a6f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d132      	bne.n	800a762 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	4b6b      	ldr	r3, [pc, #428]	; (800a8b0 <tcp_input+0x4a0>)
 800a702:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a704:	429a      	cmp	r2, r3
 800a706:	d12c      	bne.n	800a762 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b68      	ldr	r3, [pc, #416]	; (800a8b0 <tcp_input+0x4a0>)
 800a70e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a710:	429a      	cmp	r2, r3
 800a712:	d126      	bne.n	800a762 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d106      	bne.n	800a72c <tcp_input+0x31c>
 800a71e:	4b65      	ldr	r3, [pc, #404]	; (800a8b4 <tcp_input+0x4a4>)
 800a720:	f240 120d 	movw	r2, #269	; 0x10d
 800a724:	4964      	ldr	r1, [pc, #400]	; (800a8b8 <tcp_input+0x4a8>)
 800a726:	4865      	ldr	r0, [pc, #404]	; (800a8bc <tcp_input+0x4ac>)
 800a728:	f008 f960 	bl	80129ec <iprintf>
      if (prev != NULL) {
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <tcp_input+0x338>
        prev->next = pcb->next;
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a73a:	4b61      	ldr	r3, [pc, #388]	; (800a8c0 <tcp_input+0x4b0>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a742:	4a5f      	ldr	r2, [pc, #380]	; (800a8c0 <tcp_input+0x4b0>)
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d111      	bne.n	800a776 <tcp_input+0x366>
 800a752:	4b58      	ldr	r3, [pc, #352]	; (800a8b4 <tcp_input+0x4a4>)
 800a754:	f240 1215 	movw	r2, #277	; 0x115
 800a758:	495a      	ldr	r1, [pc, #360]	; (800a8c4 <tcp_input+0x4b4>)
 800a75a:	4858      	ldr	r0, [pc, #352]	; (800a8bc <tcp_input+0x4ac>)
 800a75c:	f008 f946 	bl	80129ec <iprintf>
      break;
 800a760:	e009      	b.n	800a776 <tcp_input+0x366>
    }
    prev = pcb;
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	61fb      	str	r3, [r7, #28]
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f47f af5e 	bne.w	800a630 <tcp_input+0x220>
 800a774:	e000      	b.n	800a778 <tcp_input+0x368>
      break;
 800a776:	bf00      	nop
  }

  if (pcb == NULL) {
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 80aa 	bne.w	800a8d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a780:	4b51      	ldr	r3, [pc, #324]	; (800a8c8 <tcp_input+0x4b8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	61fb      	str	r3, [r7, #28]
 800a786:	e03f      	b.n	800a808 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	7d1b      	ldrb	r3, [r3, #20]
 800a78c:	2b0a      	cmp	r3, #10
 800a78e:	d006      	beq.n	800a79e <tcp_input+0x38e>
 800a790:	4b48      	ldr	r3, [pc, #288]	; (800a8b4 <tcp_input+0x4a4>)
 800a792:	f240 121f 	movw	r2, #287	; 0x11f
 800a796:	494d      	ldr	r1, [pc, #308]	; (800a8cc <tcp_input+0x4bc>)
 800a798:	4848      	ldr	r0, [pc, #288]	; (800a8bc <tcp_input+0x4ac>)
 800a79a:	f008 f927 	bl	80129ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	7a1b      	ldrb	r3, [r3, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	7a1a      	ldrb	r2, [r3, #8]
 800a7aa:	4b41      	ldr	r3, [pc, #260]	; (800a8b0 <tcp_input+0x4a0>)
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d122      	bne.n	800a800 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	8b1a      	ldrh	r2, [r3, #24]
 800a7be:	4b3b      	ldr	r3, [pc, #236]	; (800a8ac <tcp_input+0x49c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d11b      	bne.n	800a802 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	8ada      	ldrh	r2, [r3, #22]
 800a7ce:	4b37      	ldr	r3, [pc, #220]	; (800a8ac <tcp_input+0x49c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	885b      	ldrh	r3, [r3, #2]
 800a7d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d113      	bne.n	800a802 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	4b34      	ldr	r3, [pc, #208]	; (800a8b0 <tcp_input+0x4a0>)
 800a7e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d10d      	bne.n	800a802 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4b31      	ldr	r3, [pc, #196]	; (800a8b0 <tcp_input+0x4a0>)
 800a7ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d107      	bne.n	800a802 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a7f2:	69f8      	ldr	r0, [r7, #28]
 800a7f4:	f000 fb56 	bl	800aea4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7fd ffbd 	bl	8008778 <pbuf_free>
        return;
 800a7fe:	e1fd      	b.n	800abfc <tcp_input+0x7ec>
        continue;
 800a800:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	61fb      	str	r3, [r7, #28]
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1bc      	bne.n	800a788 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a812:	4b2f      	ldr	r3, [pc, #188]	; (800a8d0 <tcp_input+0x4c0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e02a      	b.n	800a870 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	7a1b      	ldrb	r3, [r3, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00c      	beq.n	800a83c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	7a1a      	ldrb	r2, [r3, #8]
 800a826:	4b22      	ldr	r3, [pc, #136]	; (800a8b0 <tcp_input+0x4a0>)
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a82e:	3301      	adds	r3, #1
 800a830:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a832:	429a      	cmp	r2, r3
 800a834:	d002      	beq.n	800a83c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	61bb      	str	r3, [r7, #24]
        continue;
 800a83a:	e016      	b.n	800a86a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	8ada      	ldrh	r2, [r3, #22]
 800a840:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <tcp_input+0x49c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	885b      	ldrh	r3, [r3, #2]
 800a846:	b29b      	uxth	r3, r3
 800a848:	429a      	cmp	r2, r3
 800a84a:	d10c      	bne.n	800a866 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <tcp_input+0x4a0>)
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	429a      	cmp	r2, r3
 800a856:	d00f      	beq.n	800a878 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00d      	beq.n	800a87a <tcp_input+0x46a>
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1d1      	bne.n	800a81a <tcp_input+0x40a>
 800a876:	e000      	b.n	800a87a <tcp_input+0x46a>
            break;
 800a878:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d029      	beq.n	800a8d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <tcp_input+0x4c0>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a896:	4a0e      	ldr	r2, [pc, #56]	; (800a8d0 <tcp_input+0x4c0>)
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a89c:	6978      	ldr	r0, [r7, #20]
 800a89e:	f000 fa03 	bl	800aca8 <tcp_listen_input>
      }
      pbuf_free(p);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7fd ff68 	bl	8008778 <pbuf_free>
      return;
 800a8a8:	e1a8      	b.n	800abfc <tcp_input+0x7ec>
 800a8aa:	bf00      	nop
 800a8ac:	2000d8b8 	.word	0x2000d8b8
 800a8b0:	20005bc0 	.word	0x20005bc0
 800a8b4:	08015440 	.word	0x08015440
 800a8b8:	0801556c 	.word	0x0801556c
 800a8bc:	0801548c 	.word	0x0801548c
 800a8c0:	2000d89c 	.word	0x2000d89c
 800a8c4:	08015598 	.word	0x08015598
 800a8c8:	2000d8a0 	.word	0x2000d8a0
 800a8cc:	080155c4 	.word	0x080155c4
 800a8d0:	2000d898 	.word	0x2000d898
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 8158 	beq.w	800ab8c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a8dc:	4b95      	ldr	r3, [pc, #596]	; (800ab34 <tcp_input+0x724>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	891a      	ldrh	r2, [r3, #8]
 800a8e6:	4b93      	ldr	r3, [pc, #588]	; (800ab34 <tcp_input+0x724>)
 800a8e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a8ea:	4a92      	ldr	r2, [pc, #584]	; (800ab34 <tcp_input+0x724>)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a8f0:	4b91      	ldr	r3, [pc, #580]	; (800ab38 <tcp_input+0x728>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a8f      	ldr	r2, [pc, #572]	; (800ab34 <tcp_input+0x724>)
 800a8f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a8f8:	4b90      	ldr	r3, [pc, #576]	; (800ab3c <tcp_input+0x72c>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a8fe:	4b90      	ldr	r3, [pc, #576]	; (800ab40 <tcp_input+0x730>)
 800a900:	2200      	movs	r2, #0
 800a902:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a904:	4b8f      	ldr	r3, [pc, #572]	; (800ab44 <tcp_input+0x734>)
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a90a:	4b8f      	ldr	r3, [pc, #572]	; (800ab48 <tcp_input+0x738>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 0308 	and.w	r3, r3, #8
 800a912:	2b00      	cmp	r3, #0
 800a914:	d006      	beq.n	800a924 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	7b5b      	ldrb	r3, [r3, #13]
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d017      	beq.n	800a95c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a92c:	69f8      	ldr	r0, [r7, #28]
 800a92e:	f7ff f915 	bl	8009b5c <tcp_process_refused_data>
 800a932:	4603      	mov	r3, r0
 800a934:	f113 0f0d 	cmn.w	r3, #13
 800a938:	d007      	beq.n	800a94a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00c      	beq.n	800a95c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a942:	4b82      	ldr	r3, [pc, #520]	; (800ab4c <tcp_input+0x73c>)
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d008      	beq.n	800a95c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f040 80e3 	bne.w	800ab1a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a954:	69f8      	ldr	r0, [r7, #28]
 800a956:	f003 f9af 	bl	800dcb8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a95a:	e0de      	b.n	800ab1a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a95c:	4a7c      	ldr	r2, [pc, #496]	; (800ab50 <tcp_input+0x740>)
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a962:	69f8      	ldr	r0, [r7, #28]
 800a964:	f000 fb18 	bl	800af98 <tcp_process>
 800a968:	4603      	mov	r3, r0
 800a96a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a96c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a970:	f113 0f0d 	cmn.w	r3, #13
 800a974:	f000 80d3 	beq.w	800ab1e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a978:	4b71      	ldr	r3, [pc, #452]	; (800ab40 <tcp_input+0x730>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d015      	beq.n	800a9b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d008      	beq.n	800a9a0 <tcp_input+0x590>
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a994:	69fa      	ldr	r2, [r7, #28]
 800a996:	6912      	ldr	r2, [r2, #16]
 800a998:	f06f 010d 	mvn.w	r1, #13
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	486c      	ldr	r0, [pc, #432]	; (800ab54 <tcp_input+0x744>)
 800a9a4:	f7ff fbbc 	bl	800a120 <tcp_pcb_remove>
        tcp_free(pcb);
 800a9a8:	69f8      	ldr	r0, [r7, #28]
 800a9aa:	f7fe f995 	bl	8008cd8 <tcp_free>
 800a9ae:	e0da      	b.n	800ab66 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a9b4:	4b63      	ldr	r3, [pc, #396]	; (800ab44 <tcp_input+0x734>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01d      	beq.n	800a9f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a9bc:	4b61      	ldr	r3, [pc, #388]	; (800ab44 <tcp_input+0x734>)
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <tcp_input+0x5d2>
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	6910      	ldr	r0, [r2, #16]
 800a9d6:	89fa      	ldrh	r2, [r7, #14]
 800a9d8:	69f9      	ldr	r1, [r7, #28]
 800a9da:	4798      	blx	r3
 800a9dc:	4603      	mov	r3, r0
 800a9de:	74fb      	strb	r3, [r7, #19]
 800a9e0:	e001      	b.n	800a9e6 <tcp_input+0x5d6>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a9ea:	f113 0f0d 	cmn.w	r3, #13
 800a9ee:	f000 8098 	beq.w	800ab22 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a9f2:	4b54      	ldr	r3, [pc, #336]	; (800ab44 <tcp_input+0x734>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a9f8:	69f8      	ldr	r0, [r7, #28]
 800a9fa:	f000 f915 	bl	800ac28 <tcp_input_delayed_close>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f040 8090 	bne.w	800ab26 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800aa06:	4b4d      	ldr	r3, [pc, #308]	; (800ab3c <tcp_input+0x72c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d041      	beq.n	800aa92 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d006      	beq.n	800aa24 <tcp_input+0x614>
 800aa16:	4b50      	ldr	r3, [pc, #320]	; (800ab58 <tcp_input+0x748>)
 800aa18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aa1c:	494f      	ldr	r1, [pc, #316]	; (800ab5c <tcp_input+0x74c>)
 800aa1e:	4850      	ldr	r0, [pc, #320]	; (800ab60 <tcp_input+0x750>)
 800aa20:	f007 ffe4 	bl	80129ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	8b5b      	ldrh	r3, [r3, #26]
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d008      	beq.n	800aa42 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aa30:	4b42      	ldr	r3, [pc, #264]	; (800ab3c <tcp_input+0x72c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fd fe9f 	bl	8008778 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aa3a:	69f8      	ldr	r0, [r7, #28]
 800aa3c:	f7fe fc34 	bl	80092a8 <tcp_abort>
            goto aborted;
 800aa40:	e091      	b.n	800ab66 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00c      	beq.n	800aa66 <tcp_input+0x656>
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	6918      	ldr	r0, [r3, #16]
 800aa56:	4b39      	ldr	r3, [pc, #228]	; (800ab3c <tcp_input+0x72c>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	69f9      	ldr	r1, [r7, #28]
 800aa5e:	47a0      	blx	r4
 800aa60:	4603      	mov	r3, r0
 800aa62:	74fb      	strb	r3, [r7, #19]
 800aa64:	e008      	b.n	800aa78 <tcp_input+0x668>
 800aa66:	4b35      	ldr	r3, [pc, #212]	; (800ab3c <tcp_input+0x72c>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	69f9      	ldr	r1, [r7, #28]
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f7ff f94e 	bl	8009d10 <tcp_recv_null>
 800aa74:	4603      	mov	r3, r0
 800aa76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800aa78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa7c:	f113 0f0d 	cmn.w	r3, #13
 800aa80:	d053      	beq.n	800ab2a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800aa82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800aa8a:	4b2c      	ldr	r3, [pc, #176]	; (800ab3c <tcp_input+0x72c>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800aa92:	4b2b      	ldr	r3, [pc, #172]	; (800ab40 <tcp_input+0x730>)
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d030      	beq.n	800ab00 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d009      	beq.n	800aaba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaaa:	7b5a      	ldrb	r2, [r3, #13]
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aab0:	f042 0220 	orr.w	r2, r2, #32
 800aab4:	b2d2      	uxtb	r2, r2
 800aab6:	735a      	strb	r2, [r3, #13]
 800aab8:	e022      	b.n	800ab00 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aabe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aac2:	d005      	beq.n	800aad0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aac8:	3301      	adds	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <tcp_input+0x6e2>
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	6918      	ldr	r0, [r3, #16]
 800aae4:	2300      	movs	r3, #0
 800aae6:	2200      	movs	r2, #0
 800aae8:	69f9      	ldr	r1, [r7, #28]
 800aaea:	47a0      	blx	r4
 800aaec:	4603      	mov	r3, r0
 800aaee:	74fb      	strb	r3, [r7, #19]
 800aaf0:	e001      	b.n	800aaf6 <tcp_input+0x6e6>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aaf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aafa:	f113 0f0d 	cmn.w	r3, #13
 800aafe:	d016      	beq.n	800ab2e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ab00:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <tcp_input+0x740>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ab06:	69f8      	ldr	r0, [r7, #28]
 800ab08:	f000 f88e 	bl	800ac28 <tcp_input_delayed_close>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d128      	bne.n	800ab64 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ab12:	69f8      	ldr	r0, [r7, #28]
 800ab14:	f002 faca 	bl	800d0ac <tcp_output>
 800ab18:	e025      	b.n	800ab66 <tcp_input+0x756>
        goto aborted;
 800ab1a:	bf00      	nop
 800ab1c:	e023      	b.n	800ab66 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ab1e:	bf00      	nop
 800ab20:	e021      	b.n	800ab66 <tcp_input+0x756>
              goto aborted;
 800ab22:	bf00      	nop
 800ab24:	e01f      	b.n	800ab66 <tcp_input+0x756>
          goto aborted;
 800ab26:	bf00      	nop
 800ab28:	e01d      	b.n	800ab66 <tcp_input+0x756>
            goto aborted;
 800ab2a:	bf00      	nop
 800ab2c:	e01b      	b.n	800ab66 <tcp_input+0x756>
              goto aborted;
 800ab2e:	bf00      	nop
 800ab30:	e019      	b.n	800ab66 <tcp_input+0x756>
 800ab32:	bf00      	nop
 800ab34:	2000d8a8 	.word	0x2000d8a8
 800ab38:	2000d8b8 	.word	0x2000d8b8
 800ab3c:	2000d8d8 	.word	0x2000d8d8
 800ab40:	2000d8d5 	.word	0x2000d8d5
 800ab44:	2000d8d0 	.word	0x2000d8d0
 800ab48:	2000d8d4 	.word	0x2000d8d4
 800ab4c:	2000d8d2 	.word	0x2000d8d2
 800ab50:	2000d8dc 	.word	0x2000d8dc
 800ab54:	2000d89c 	.word	0x2000d89c
 800ab58:	08015440 	.word	0x08015440
 800ab5c:	080155f4 	.word	0x080155f4
 800ab60:	0801548c 	.word	0x0801548c
          goto aborted;
 800ab64:	bf00      	nop
    tcp_input_pcb = NULL;
 800ab66:	4b27      	ldr	r3, [pc, #156]	; (800ac04 <tcp_input+0x7f4>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ab6c:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <tcp_input+0x7f8>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ab72:	4b26      	ldr	r3, [pc, #152]	; (800ac0c <tcp_input+0x7fc>)
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d03f      	beq.n	800abfa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ab7a:	4b24      	ldr	r3, [pc, #144]	; (800ac0c <tcp_input+0x7fc>)
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fd fdfa 	bl	8008778 <pbuf_free>
      inseg.p = NULL;
 800ab84:	4b21      	ldr	r3, [pc, #132]	; (800ac0c <tcp_input+0x7fc>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ab8a:	e036      	b.n	800abfa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ab8c:	4b20      	ldr	r3, [pc, #128]	; (800ac10 <tcp_input+0x800>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	899b      	ldrh	r3, [r3, #12]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fc f9e9 	bl	8006f6c <lwip_htons>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d118      	bne.n	800abd8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aba6:	4b1b      	ldr	r3, [pc, #108]	; (800ac14 <tcp_input+0x804>)
 800aba8:	6819      	ldr	r1, [r3, #0]
 800abaa:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <tcp_input+0x808>)
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <tcp_input+0x80c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abb6:	4b16      	ldr	r3, [pc, #88]	; (800ac10 <tcp_input+0x800>)
 800abb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abba:	885b      	ldrh	r3, [r3, #2]
 800abbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abbe:	4a14      	ldr	r2, [pc, #80]	; (800ac10 <tcp_input+0x800>)
 800abc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abc2:	8812      	ldrh	r2, [r2, #0]
 800abc4:	b292      	uxth	r2, r2
 800abc6:	9202      	str	r2, [sp, #8]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <tcp_input+0x810>)
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <tcp_input+0x814>)
 800abd0:	4602      	mov	r2, r0
 800abd2:	2000      	movs	r0, #0
 800abd4:	f003 f81e 	bl	800dc14 <tcp_rst>
    pbuf_free(p);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7fd fdcd 	bl	8008778 <pbuf_free>
  return;
 800abde:	e00c      	b.n	800abfa <tcp_input+0x7ea>
    goto dropped;
 800abe0:	bf00      	nop
 800abe2:	e006      	b.n	800abf2 <tcp_input+0x7e2>
    goto dropped;
 800abe4:	bf00      	nop
 800abe6:	e004      	b.n	800abf2 <tcp_input+0x7e2>
    goto dropped;
 800abe8:	bf00      	nop
 800abea:	e002      	b.n	800abf2 <tcp_input+0x7e2>
      goto dropped;
 800abec:	bf00      	nop
 800abee:	e000      	b.n	800abf2 <tcp_input+0x7e2>
      goto dropped;
 800abf0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fd fdc0 	bl	8008778 <pbuf_free>
 800abf8:	e000      	b.n	800abfc <tcp_input+0x7ec>
  return;
 800abfa:	bf00      	nop
}
 800abfc:	3724      	adds	r7, #36	; 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}
 800ac02:	bf00      	nop
 800ac04:	2000d8dc 	.word	0x2000d8dc
 800ac08:	2000d8d8 	.word	0x2000d8d8
 800ac0c:	2000d8a8 	.word	0x2000d8a8
 800ac10:	2000d8b8 	.word	0x2000d8b8
 800ac14:	2000d8cc 	.word	0x2000d8cc
 800ac18:	2000d8d2 	.word	0x2000d8d2
 800ac1c:	2000d8c8 	.word	0x2000d8c8
 800ac20:	20005bd0 	.word	0x20005bd0
 800ac24:	20005bd4 	.word	0x20005bd4

0800ac28 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d106      	bne.n	800ac44 <tcp_input_delayed_close+0x1c>
 800ac36:	4b17      	ldr	r3, [pc, #92]	; (800ac94 <tcp_input_delayed_close+0x6c>)
 800ac38:	f240 225a 	movw	r2, #602	; 0x25a
 800ac3c:	4916      	ldr	r1, [pc, #88]	; (800ac98 <tcp_input_delayed_close+0x70>)
 800ac3e:	4817      	ldr	r0, [pc, #92]	; (800ac9c <tcp_input_delayed_close+0x74>)
 800ac40:	f007 fed4 	bl	80129ec <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ac44:	4b16      	ldr	r3, [pc, #88]	; (800aca0 <tcp_input_delayed_close+0x78>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01c      	beq.n	800ac8a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	8b5b      	ldrh	r3, [r3, #26]
 800ac54:	f003 0310 	and.w	r3, r3, #16
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10d      	bne.n	800ac78 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d008      	beq.n	800ac78 <tcp_input_delayed_close+0x50>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6912      	ldr	r2, [r2, #16]
 800ac70:	f06f 010e 	mvn.w	r1, #14
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	480a      	ldr	r0, [pc, #40]	; (800aca4 <tcp_input_delayed_close+0x7c>)
 800ac7c:	f7ff fa50 	bl	800a120 <tcp_pcb_remove>
    tcp_free(pcb);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7fe f829 	bl	8008cd8 <tcp_free>
    return 1;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	08015440 	.word	0x08015440
 800ac98:	08015610 	.word	0x08015610
 800ac9c:	0801548c 	.word	0x0801548c
 800aca0:	2000d8d5 	.word	0x2000d8d5
 800aca4:	2000d89c 	.word	0x2000d89c

0800aca8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aca8:	b590      	push	{r4, r7, lr}
 800acaa:	b08b      	sub	sp, #44	; 0x2c
 800acac:	af04      	add	r7, sp, #16
 800acae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800acb0:	4b6f      	ldr	r3, [pc, #444]	; (800ae70 <tcp_listen_input+0x1c8>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f040 80d2 	bne.w	800ae62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <tcp_listen_input+0x2a>
 800acc4:	4b6b      	ldr	r3, [pc, #428]	; (800ae74 <tcp_listen_input+0x1cc>)
 800acc6:	f240 2281 	movw	r2, #641	; 0x281
 800acca:	496b      	ldr	r1, [pc, #428]	; (800ae78 <tcp_listen_input+0x1d0>)
 800accc:	486b      	ldr	r0, [pc, #428]	; (800ae7c <tcp_listen_input+0x1d4>)
 800acce:	f007 fe8d 	bl	80129ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800acd2:	4b67      	ldr	r3, [pc, #412]	; (800ae70 <tcp_listen_input+0x1c8>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	f003 0310 	and.w	r3, r3, #16
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d019      	beq.n	800ad12 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acde:	4b68      	ldr	r3, [pc, #416]	; (800ae80 <tcp_listen_input+0x1d8>)
 800ace0:	6819      	ldr	r1, [r3, #0]
 800ace2:	4b68      	ldr	r3, [pc, #416]	; (800ae84 <tcp_listen_input+0x1dc>)
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	4b67      	ldr	r3, [pc, #412]	; (800ae88 <tcp_listen_input+0x1e0>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acee:	4b67      	ldr	r3, [pc, #412]	; (800ae8c <tcp_listen_input+0x1e4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acf2:	885b      	ldrh	r3, [r3, #2]
 800acf4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acf6:	4a65      	ldr	r2, [pc, #404]	; (800ae8c <tcp_listen_input+0x1e4>)
 800acf8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acfa:	8812      	ldrh	r2, [r2, #0]
 800acfc:	b292      	uxth	r2, r2
 800acfe:	9202      	str	r2, [sp, #8]
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	4b63      	ldr	r3, [pc, #396]	; (800ae90 <tcp_listen_input+0x1e8>)
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	4b63      	ldr	r3, [pc, #396]	; (800ae94 <tcp_listen_input+0x1ec>)
 800ad08:	4602      	mov	r2, r0
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f002 ff82 	bl	800dc14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ad10:	e0a9      	b.n	800ae66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ad12:	4b57      	ldr	r3, [pc, #348]	; (800ae70 <tcp_listen_input+0x1c8>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 80a3 	beq.w	800ae66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7d5b      	ldrb	r3, [r3, #21]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff f917 	bl	8009f58 <tcp_alloc>
 800ad2a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d111      	bne.n	800ad56 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <tcp_listen_input+0xa8>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	6910      	ldr	r0, [r2, #16]
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295
 800ad46:	2100      	movs	r1, #0
 800ad48:	4798      	blx	r3
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73bb      	strb	r3, [r7, #14]
      return;
 800ad4e:	e08b      	b.n	800ae68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ad50:	23f0      	movs	r3, #240	; 0xf0
 800ad52:	73bb      	strb	r3, [r7, #14]
      return;
 800ad54:	e088      	b.n	800ae68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ad56:	4b50      	ldr	r3, [pc, #320]	; (800ae98 <tcp_listen_input+0x1f0>)
 800ad58:	695a      	ldr	r2, [r3, #20]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ad5e:	4b4e      	ldr	r3, [pc, #312]	; (800ae98 <tcp_listen_input+0x1f0>)
 800ad60:	691a      	ldr	r2, [r3, #16]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	8ada      	ldrh	r2, [r3, #22]
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ad6e:	4b47      	ldr	r3, [pc, #284]	; (800ae8c <tcp_listen_input+0x1e4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ad80:	4b41      	ldr	r3, [pc, #260]	; (800ae88 <tcp_listen_input+0x1e0>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ad92:	6978      	ldr	r0, [r7, #20]
 800ad94:	f7ff fa58 	bl	800a248 <tcp_next_iss>
 800ad98:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800adb2:	4b35      	ldr	r3, [pc, #212]	; (800ae88 <tcp_listen_input+0x1e0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	1e5a      	subs	r2, r3, #1
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7a5b      	ldrb	r3, [r3, #9]
 800adce:	f003 030c 	and.w	r3, r3, #12
 800add2:	b2da      	uxtb	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7a1a      	ldrb	r2, [r3, #8]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ade0:	4b2e      	ldr	r3, [pc, #184]	; (800ae9c <tcp_listen_input+0x1f4>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	60da      	str	r2, [r3, #12]
 800ade8:	4a2c      	ldr	r2, [pc, #176]	; (800ae9c <tcp_listen_input+0x1f4>)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6013      	str	r3, [r2, #0]
 800adee:	f003 f8d3 	bl	800df98 <tcp_timer_needed>
 800adf2:	4b2b      	ldr	r3, [pc, #172]	; (800aea0 <tcp_listen_input+0x1f8>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800adf8:	6978      	ldr	r0, [r7, #20]
 800adfa:	f001 fd8f 	bl	800c91c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800adfe:	4b23      	ldr	r3, [pc, #140]	; (800ae8c <tcp_listen_input+0x1e4>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	89db      	ldrh	r3, [r3, #14]
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4618      	mov	r0, r3
 800ae22:	f004 ff7f 	bl	800fd24 <ip4_route>
 800ae26:	4601      	mov	r1, r0
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff fa30 	bl	800a294 <tcp_eff_send_mss_netif>
 800ae34:	4603      	mov	r3, r0
 800ae36:	461a      	mov	r2, r3
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ae3c:	2112      	movs	r1, #18
 800ae3e:	6978      	ldr	r0, [r7, #20]
 800ae40:	f002 f846 	bl	800ced0 <tcp_enqueue_flags>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ae48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ae50:	2100      	movs	r1, #0
 800ae52:	6978      	ldr	r0, [r7, #20]
 800ae54:	f7fe f96a 	bl	800912c <tcp_abandon>
      return;
 800ae58:	e006      	b.n	800ae68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f002 f926 	bl	800d0ac <tcp_output>
  return;
 800ae60:	e001      	b.n	800ae66 <tcp_listen_input+0x1be>
    return;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <tcp_listen_input+0x1c0>
  return;
 800ae66:	bf00      	nop
}
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd90      	pop	{r4, r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000d8d4 	.word	0x2000d8d4
 800ae74:	08015440 	.word	0x08015440
 800ae78:	08015638 	.word	0x08015638
 800ae7c:	0801548c 	.word	0x0801548c
 800ae80:	2000d8cc 	.word	0x2000d8cc
 800ae84:	2000d8d2 	.word	0x2000d8d2
 800ae88:	2000d8c8 	.word	0x2000d8c8
 800ae8c:	2000d8b8 	.word	0x2000d8b8
 800ae90:	20005bd0 	.word	0x20005bd0
 800ae94:	20005bd4 	.word	0x20005bd4
 800ae98:	20005bc0 	.word	0x20005bc0
 800ae9c:	2000d89c 	.word	0x2000d89c
 800aea0:	2000d8a4 	.word	0x2000d8a4

0800aea4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af04      	add	r7, sp, #16
 800aeaa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800aeac:	4b2f      	ldr	r3, [pc, #188]	; (800af6c <tcp_timewait_input+0xc8>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d153      	bne.n	800af60 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <tcp_timewait_input+0x28>
 800aebe:	4b2c      	ldr	r3, [pc, #176]	; (800af70 <tcp_timewait_input+0xcc>)
 800aec0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800aec4:	492b      	ldr	r1, [pc, #172]	; (800af74 <tcp_timewait_input+0xd0>)
 800aec6:	482c      	ldr	r0, [pc, #176]	; (800af78 <tcp_timewait_input+0xd4>)
 800aec8:	f007 fd90 	bl	80129ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800aecc:	4b27      	ldr	r3, [pc, #156]	; (800af6c <tcp_timewait_input+0xc8>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d02a      	beq.n	800af2e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800aed8:	4b28      	ldr	r3, [pc, #160]	; (800af7c <tcp_timewait_input+0xd8>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	db2d      	blt.n	800af42 <tcp_timewait_input+0x9e>
 800aee6:	4b25      	ldr	r3, [pc, #148]	; (800af7c <tcp_timewait_input+0xd8>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	6879      	ldr	r1, [r7, #4]
 800aef0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aef2:	440b      	add	r3, r1
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dc23      	bgt.n	800af42 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aefa:	4b21      	ldr	r3, [pc, #132]	; (800af80 <tcp_timewait_input+0xdc>)
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	4b21      	ldr	r3, [pc, #132]	; (800af84 <tcp_timewait_input+0xe0>)
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	4b1d      	ldr	r3, [pc, #116]	; (800af7c <tcp_timewait_input+0xd8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af0a:	4b1f      	ldr	r3, [pc, #124]	; (800af88 <tcp_timewait_input+0xe4>)
 800af0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af0e:	885b      	ldrh	r3, [r3, #2]
 800af10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af12:	4a1d      	ldr	r2, [pc, #116]	; (800af88 <tcp_timewait_input+0xe4>)
 800af14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af16:	8812      	ldrh	r2, [r2, #0]
 800af18:	b292      	uxth	r2, r2
 800af1a:	9202      	str	r2, [sp, #8]
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	4b1b      	ldr	r3, [pc, #108]	; (800af8c <tcp_timewait_input+0xe8>)
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	4b1b      	ldr	r3, [pc, #108]	; (800af90 <tcp_timewait_input+0xec>)
 800af24:	4602      	mov	r2, r0
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f002 fe74 	bl	800dc14 <tcp_rst>
      return;
 800af2c:	e01b      	b.n	800af66 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800af2e:	4b0f      	ldr	r3, [pc, #60]	; (800af6c <tcp_timewait_input+0xc8>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800af3a:	4b16      	ldr	r3, [pc, #88]	; (800af94 <tcp_timewait_input+0xf0>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800af42:	4b10      	ldr	r3, [pc, #64]	; (800af84 <tcp_timewait_input+0xe0>)
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00c      	beq.n	800af64 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	8b5b      	ldrh	r3, [r3, #26]
 800af4e:	f043 0302 	orr.w	r3, r3, #2
 800af52:	b29a      	uxth	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f002 f8a7 	bl	800d0ac <tcp_output>
  }
  return;
 800af5e:	e001      	b.n	800af64 <tcp_timewait_input+0xc0>
    return;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <tcp_timewait_input+0xc2>
  return;
 800af64:	bf00      	nop
}
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	2000d8d4 	.word	0x2000d8d4
 800af70:	08015440 	.word	0x08015440
 800af74:	08015658 	.word	0x08015658
 800af78:	0801548c 	.word	0x0801548c
 800af7c:	2000d8c8 	.word	0x2000d8c8
 800af80:	2000d8cc 	.word	0x2000d8cc
 800af84:	2000d8d2 	.word	0x2000d8d2
 800af88:	2000d8b8 	.word	0x2000d8b8
 800af8c:	20005bd0 	.word	0x20005bd0
 800af90:	20005bd4 	.word	0x20005bd4
 800af94:	2000d890 	.word	0x2000d890

0800af98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800af98:	b590      	push	{r4, r7, lr}
 800af9a:	b08d      	sub	sp, #52	; 0x34
 800af9c:	af04      	add	r7, sp, #16
 800af9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <tcp_process+0x24>
 800afae:	4b9d      	ldr	r3, [pc, #628]	; (800b224 <tcp_process+0x28c>)
 800afb0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800afb4:	499c      	ldr	r1, [pc, #624]	; (800b228 <tcp_process+0x290>)
 800afb6:	489d      	ldr	r0, [pc, #628]	; (800b22c <tcp_process+0x294>)
 800afb8:	f007 fd18 	bl	80129ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800afbc:	4b9c      	ldr	r3, [pc, #624]	; (800b230 <tcp_process+0x298>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d04e      	beq.n	800b066 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7d1b      	ldrb	r3, [r3, #20]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d108      	bne.n	800afe2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afd4:	4b97      	ldr	r3, [pc, #604]	; (800b234 <tcp_process+0x29c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d123      	bne.n	800b024 <tcp_process+0x8c>
        acceptable = 1;
 800afdc:	2301      	movs	r3, #1
 800afde:	76fb      	strb	r3, [r7, #27]
 800afe0:	e020      	b.n	800b024 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afe6:	4b94      	ldr	r3, [pc, #592]	; (800b238 <tcp_process+0x2a0>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d102      	bne.n	800aff4 <tcp_process+0x5c>
        acceptable = 1;
 800afee:	2301      	movs	r3, #1
 800aff0:	76fb      	strb	r3, [r7, #27]
 800aff2:	e017      	b.n	800b024 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aff4:	4b90      	ldr	r3, [pc, #576]	; (800b238 <tcp_process+0x2a0>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	db10      	blt.n	800b024 <tcp_process+0x8c>
 800b002:	4b8d      	ldr	r3, [pc, #564]	; (800b238 <tcp_process+0x2a0>)
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b00e:	440b      	add	r3, r1
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	dc06      	bgt.n	800b024 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	8b5b      	ldrh	r3, [r3, #26]
 800b01a:	f043 0302 	orr.w	r3, r3, #2
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b024:	7efb      	ldrb	r3, [r7, #27]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d01b      	beq.n	800b062 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	7d1b      	ldrb	r3, [r3, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <tcp_process+0xa8>
 800b032:	4b7c      	ldr	r3, [pc, #496]	; (800b224 <tcp_process+0x28c>)
 800b034:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b038:	4980      	ldr	r1, [pc, #512]	; (800b23c <tcp_process+0x2a4>)
 800b03a:	487c      	ldr	r0, [pc, #496]	; (800b22c <tcp_process+0x294>)
 800b03c:	f007 fcd6 	bl	80129ec <iprintf>
      recv_flags |= TF_RESET;
 800b040:	4b7f      	ldr	r3, [pc, #508]	; (800b240 <tcp_process+0x2a8>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	f043 0308 	orr.w	r3, r3, #8
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	4b7d      	ldr	r3, [pc, #500]	; (800b240 <tcp_process+0x2a8>)
 800b04c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	8b5b      	ldrh	r3, [r3, #26]
 800b052:	f023 0301 	bic.w	r3, r3, #1
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b05c:	f06f 030d 	mvn.w	r3, #13
 800b060:	e37a      	b.n	800b758 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	e378      	b.n	800b758 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b066:	4b72      	ldr	r3, [pc, #456]	; (800b230 <tcp_process+0x298>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d010      	beq.n	800b094 <tcp_process+0xfc>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	7d1b      	ldrb	r3, [r3, #20]
 800b076:	2b02      	cmp	r3, #2
 800b078:	d00c      	beq.n	800b094 <tcp_process+0xfc>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	7d1b      	ldrb	r3, [r3, #20]
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d008      	beq.n	800b094 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	8b5b      	ldrh	r3, [r3, #26]
 800b086:	f043 0302 	orr.w	r3, r3, #2
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	e361      	b.n	800b758 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	8b5b      	ldrh	r3, [r3, #26]
 800b098:	f003 0310 	and.w	r3, r3, #16
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d103      	bne.n	800b0a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b0a0:	4b68      	ldr	r3, [pc, #416]	; (800b244 <tcp_process+0x2ac>)
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fc2f 	bl	800c91c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7d1b      	ldrb	r3, [r3, #20]
 800b0c2:	3b02      	subs	r3, #2
 800b0c4:	2b07      	cmp	r3, #7
 800b0c6:	f200 8337 	bhi.w	800b738 <tcp_process+0x7a0>
 800b0ca:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <tcp_process+0x138>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b0f1 	.word	0x0800b0f1
 800b0d4:	0800b321 	.word	0x0800b321
 800b0d8:	0800b499 	.word	0x0800b499
 800b0dc:	0800b4c3 	.word	0x0800b4c3
 800b0e0:	0800b5e7 	.word	0x0800b5e7
 800b0e4:	0800b499 	.word	0x0800b499
 800b0e8:	0800b673 	.word	0x0800b673
 800b0ec:	0800b703 	.word	0x0800b703
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b0f0:	4b4f      	ldr	r3, [pc, #316]	; (800b230 <tcp_process+0x298>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 80e4 	beq.w	800b2c6 <tcp_process+0x32e>
 800b0fe:	4b4c      	ldr	r3, [pc, #304]	; (800b230 <tcp_process+0x298>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	f003 0302 	and.w	r3, r3, #2
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80dd 	beq.w	800b2c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	4b48      	ldr	r3, [pc, #288]	; (800b234 <tcp_process+0x29c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	429a      	cmp	r2, r3
 800b118:	f040 80d5 	bne.w	800b2c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b11c:	4b46      	ldr	r3, [pc, #280]	; (800b238 <tcp_process+0x2a0>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b12e:	4b41      	ldr	r3, [pc, #260]	; (800b234 <tcp_process+0x29c>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b136:	4b44      	ldr	r3, [pc, #272]	; (800b248 <tcp_process+0x2b0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	89db      	ldrh	r3, [r3, #14]
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b150:	4b39      	ldr	r3, [pc, #228]	; (800b238 <tcp_process+0x2a0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	1e5a      	subs	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2204      	movs	r2, #4
 800b15e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3304      	adds	r3, #4
 800b168:	4618      	mov	r0, r3
 800b16a:	f004 fddb 	bl	800fd24 <ip4_route>
 800b16e:	4601      	mov	r1, r0
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3304      	adds	r3, #4
 800b174:	461a      	mov	r2, r3
 800b176:	4620      	mov	r0, r4
 800b178:	f7ff f88c 	bl	800a294 <tcp_eff_send_mss_netif>
 800b17c:	4603      	mov	r3, r0
 800b17e:	461a      	mov	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b188:	009a      	lsls	r2, r3, #2
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	f241 111c 	movw	r1, #4380	; 0x111c
 800b194:	428b      	cmp	r3, r1
 800b196:	bf38      	it	cc
 800b198:	460b      	movcc	r3, r1
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d204      	bcs.n	800b1a8 <tcp_process+0x210>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	e00d      	b.n	800b1c4 <tcp_process+0x22c>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	f241 121c 	movw	r2, #4380	; 0x111c
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d904      	bls.n	800b1c0 <tcp_process+0x228>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	e001      	b.n	800b1c4 <tcp_process+0x22c>
 800b1c0:	f241 131c 	movw	r3, #4380	; 0x111c
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <tcp_process+0x24a>
 800b1d4:	4b13      	ldr	r3, [pc, #76]	; (800b224 <tcp_process+0x28c>)
 800b1d6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b1da:	491c      	ldr	r1, [pc, #112]	; (800b24c <tcp_process+0x2b4>)
 800b1dc:	4813      	ldr	r0, [pc, #76]	; (800b22c <tcp_process+0x294>)
 800b1de:	f007 fc05 	bl	80129ec <iprintf>
        --pcb->snd_queuelen;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d12a      	bne.n	800b254 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b202:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <tcp_process+0x280>
 800b20a:	4b06      	ldr	r3, [pc, #24]	; (800b224 <tcp_process+0x28c>)
 800b20c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b210:	490f      	ldr	r1, [pc, #60]	; (800b250 <tcp_process+0x2b8>)
 800b212:	4806      	ldr	r0, [pc, #24]	; (800b22c <tcp_process+0x294>)
 800b214:	f007 fbea 	bl	80129ec <iprintf>
          pcb->unsent = rseg->next;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	66da      	str	r2, [r3, #108]	; 0x6c
 800b220:	e01c      	b.n	800b25c <tcp_process+0x2c4>
 800b222:	bf00      	nop
 800b224:	08015440 	.word	0x08015440
 800b228:	08015678 	.word	0x08015678
 800b22c:	0801548c 	.word	0x0801548c
 800b230:	2000d8d4 	.word	0x2000d8d4
 800b234:	2000d8cc 	.word	0x2000d8cc
 800b238:	2000d8c8 	.word	0x2000d8c8
 800b23c:	08015694 	.word	0x08015694
 800b240:	2000d8d5 	.word	0x2000d8d5
 800b244:	2000d890 	.word	0x2000d890
 800b248:	2000d8b8 	.word	0x2000d8b8
 800b24c:	080156b4 	.word	0x080156b4
 800b250:	080156cc 	.word	0x080156cc
        } else {
          pcb->unacked = rseg->next;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b25c:	69f8      	ldr	r0, [r7, #28]
 800b25e:	f7fe fd0e 	bl	8009c7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b266:	2b00      	cmp	r3, #0
 800b268:	d104      	bne.n	800b274 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b270:	861a      	strh	r2, [r3, #48]	; 0x30
 800b272:	e006      	b.n	800b282 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00a      	beq.n	800b2a2 <tcp_process+0x30a>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	6910      	ldr	r0, [r2, #16]
 800b296:	2200      	movs	r2, #0
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	4798      	blx	r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	76bb      	strb	r3, [r7, #26]
 800b2a0:	e001      	b.n	800b2a6 <tcp_process+0x30e>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b2a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b2aa:	f113 0f0d 	cmn.w	r3, #13
 800b2ae:	d102      	bne.n	800b2b6 <tcp_process+0x31e>
          return ERR_ABRT;
 800b2b0:	f06f 030c 	mvn.w	r3, #12
 800b2b4:	e250      	b.n	800b758 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ba:	f043 0302 	orr.w	r3, r3, #2
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b2c4:	e23a      	b.n	800b73c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b2c6:	4b98      	ldr	r3, [pc, #608]	; (800b528 <tcp_process+0x590>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	f003 0310 	and.w	r3, r3, #16
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f000 8234 	beq.w	800b73c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2d4:	4b95      	ldr	r3, [pc, #596]	; (800b52c <tcp_process+0x594>)
 800b2d6:	6819      	ldr	r1, [r3, #0]
 800b2d8:	4b95      	ldr	r3, [pc, #596]	; (800b530 <tcp_process+0x598>)
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	4b95      	ldr	r3, [pc, #596]	; (800b534 <tcp_process+0x59c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2e4:	4b94      	ldr	r3, [pc, #592]	; (800b538 <tcp_process+0x5a0>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2ec:	4a92      	ldr	r2, [pc, #584]	; (800b538 <tcp_process+0x5a0>)
 800b2ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2f0:	8812      	ldrh	r2, [r2, #0]
 800b2f2:	b292      	uxth	r2, r2
 800b2f4:	9202      	str	r2, [sp, #8]
 800b2f6:	9301      	str	r3, [sp, #4]
 800b2f8:	4b90      	ldr	r3, [pc, #576]	; (800b53c <tcp_process+0x5a4>)
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	4b90      	ldr	r3, [pc, #576]	; (800b540 <tcp_process+0x5a8>)
 800b2fe:	4602      	mov	r2, r0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f002 fc87 	bl	800dc14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b30c:	2b05      	cmp	r3, #5
 800b30e:	f200 8215 	bhi.w	800b73c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f002 fa51 	bl	800d7c0 <tcp_rexmit_rto>
      break;
 800b31e:	e20d      	b.n	800b73c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b320:	4b81      	ldr	r3, [pc, #516]	; (800b528 <tcp_process+0x590>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f003 0310 	and.w	r3, r3, #16
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 80a1 	beq.w	800b470 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b32e:	4b7f      	ldr	r3, [pc, #508]	; (800b52c <tcp_process+0x594>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	3b01      	subs	r3, #1
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	db7e      	blt.n	800b43c <tcp_process+0x4a4>
 800b33e:	4b7b      	ldr	r3, [pc, #492]	; (800b52c <tcp_process+0x594>)
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dc77      	bgt.n	800b43c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2204      	movs	r2, #4
 800b350:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b35a:	23fa      	movs	r3, #250	; 0xfa
 800b35c:	76bb      	strb	r3, [r7, #26]
 800b35e:	e01d      	b.n	800b39c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <tcp_process+0x3e0>
 800b36a:	4b76      	ldr	r3, [pc, #472]	; (800b544 <tcp_process+0x5ac>)
 800b36c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b370:	4975      	ldr	r1, [pc, #468]	; (800b548 <tcp_process+0x5b0>)
 800b372:	4876      	ldr	r0, [pc, #472]	; (800b54c <tcp_process+0x5b4>)
 800b374:	f007 fb3a 	bl	80129ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <tcp_process+0x400>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6910      	ldr	r0, [r2, #16]
 800b38c:	2200      	movs	r2, #0
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4798      	blx	r3
 800b392:	4603      	mov	r3, r0
 800b394:	76bb      	strb	r3, [r7, #26]
 800b396:	e001      	b.n	800b39c <tcp_process+0x404>
 800b398:	23f0      	movs	r3, #240	; 0xf0
 800b39a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b39c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00a      	beq.n	800b3ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b3a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b3a8:	f113 0f0d 	cmn.w	r3, #13
 800b3ac:	d002      	beq.n	800b3b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7fd ff7a 	bl	80092a8 <tcp_abort>
            }
            return ERR_ABRT;
 800b3b4:	f06f 030c 	mvn.w	r3, #12
 800b3b8:	e1ce      	b.n	800b758 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fae0 	bl	800b980 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b3c0:	4b63      	ldr	r3, [pc, #396]	; (800b550 <tcp_process+0x5b8>)
 800b3c2:	881b      	ldrh	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d005      	beq.n	800b3d4 <tcp_process+0x43c>
            recv_acked--;
 800b3c8:	4b61      	ldr	r3, [pc, #388]	; (800b550 <tcp_process+0x5b8>)
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	4b5f      	ldr	r3, [pc, #380]	; (800b550 <tcp_process+0x5b8>)
 800b3d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3d8:	009a      	lsls	r2, r3, #2
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	f241 111c 	movw	r1, #4380	; 0x111c
 800b3e4:	428b      	cmp	r3, r1
 800b3e6:	bf38      	it	cc
 800b3e8:	460b      	movcc	r3, r1
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d204      	bcs.n	800b3f8 <tcp_process+0x460>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	e00d      	b.n	800b414 <tcp_process+0x47c>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	f241 121c 	movw	r2, #4380	; 0x111c
 800b402:	4293      	cmp	r3, r2
 800b404:	d904      	bls.n	800b410 <tcp_process+0x478>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	e001      	b.n	800b414 <tcp_process+0x47c>
 800b410:	f241 131c 	movw	r3, #4380	; 0x111c
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b41a:	4b4e      	ldr	r3, [pc, #312]	; (800b554 <tcp_process+0x5bc>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	f003 0320 	and.w	r3, r3, #32
 800b422:	2b00      	cmp	r3, #0
 800b424:	d037      	beq.n	800b496 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	8b5b      	ldrh	r3, [r3, #26]
 800b42a:	f043 0302 	orr.w	r3, r3, #2
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2207      	movs	r2, #7
 800b438:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b43a:	e02c      	b.n	800b496 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b43c:	4b3b      	ldr	r3, [pc, #236]	; (800b52c <tcp_process+0x594>)
 800b43e:	6819      	ldr	r1, [r3, #0]
 800b440:	4b3b      	ldr	r3, [pc, #236]	; (800b530 <tcp_process+0x598>)
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	461a      	mov	r2, r3
 800b446:	4b3b      	ldr	r3, [pc, #236]	; (800b534 <tcp_process+0x59c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b44c:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <tcp_process+0x5a0>)
 800b44e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b450:	885b      	ldrh	r3, [r3, #2]
 800b452:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b454:	4a38      	ldr	r2, [pc, #224]	; (800b538 <tcp_process+0x5a0>)
 800b456:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b458:	8812      	ldrh	r2, [r2, #0]
 800b45a:	b292      	uxth	r2, r2
 800b45c:	9202      	str	r2, [sp, #8]
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	4b36      	ldr	r3, [pc, #216]	; (800b53c <tcp_process+0x5a4>)
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	4b36      	ldr	r3, [pc, #216]	; (800b540 <tcp_process+0x5a8>)
 800b466:	4602      	mov	r2, r0
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f002 fbd3 	bl	800dc14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b46e:	e167      	b.n	800b740 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b470:	4b2d      	ldr	r3, [pc, #180]	; (800b528 <tcp_process+0x590>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 8161 	beq.w	800b740 <tcp_process+0x7a8>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	1e5a      	subs	r2, r3, #1
 800b484:	4b2b      	ldr	r3, [pc, #172]	; (800b534 <tcp_process+0x59c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	f040 8159 	bne.w	800b740 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f002 f9b8 	bl	800d804 <tcp_rexmit>
      break;
 800b494:	e154      	b.n	800b740 <tcp_process+0x7a8>
 800b496:	e153      	b.n	800b740 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fa71 	bl	800b980 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b49e:	4b2d      	ldr	r3, [pc, #180]	; (800b554 <tcp_process+0x5bc>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 814c 	beq.w	800b744 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	8b5b      	ldrh	r3, [r3, #26]
 800b4b0:	f043 0302 	orr.w	r3, r3, #2
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2207      	movs	r2, #7
 800b4be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b4c0:	e140      	b.n	800b744 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fa5c 	bl	800b980 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b4c8:	4b22      	ldr	r3, [pc, #136]	; (800b554 <tcp_process+0x5bc>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	f003 0320 	and.w	r3, r3, #32
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d071      	beq.n	800b5b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4d4:	4b14      	ldr	r3, [pc, #80]	; (800b528 <tcp_process+0x590>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d060      	beq.n	800b5a2 <tcp_process+0x60a>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4e4:	4b11      	ldr	r3, [pc, #68]	; (800b52c <tcp_process+0x594>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d15a      	bne.n	800b5a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d156      	bne.n	800b5a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8b5b      	ldrh	r3, [r3, #26]
 800b4f8:	f043 0302 	orr.w	r3, r3, #2
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7fe fdbc 	bl	800a080 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b508:	4b13      	ldr	r3, [pc, #76]	; (800b558 <tcp_process+0x5c0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d105      	bne.n	800b51e <tcp_process+0x586>
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <tcp_process+0x5c0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	4a0f      	ldr	r2, [pc, #60]	; (800b558 <tcp_process+0x5c0>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	e02e      	b.n	800b57c <tcp_process+0x5e4>
 800b51e:	4b0e      	ldr	r3, [pc, #56]	; (800b558 <tcp_process+0x5c0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	617b      	str	r3, [r7, #20]
 800b524:	e027      	b.n	800b576 <tcp_process+0x5de>
 800b526:	bf00      	nop
 800b528:	2000d8d4 	.word	0x2000d8d4
 800b52c:	2000d8cc 	.word	0x2000d8cc
 800b530:	2000d8d2 	.word	0x2000d8d2
 800b534:	2000d8c8 	.word	0x2000d8c8
 800b538:	2000d8b8 	.word	0x2000d8b8
 800b53c:	20005bd0 	.word	0x20005bd0
 800b540:	20005bd4 	.word	0x20005bd4
 800b544:	08015440 	.word	0x08015440
 800b548:	080156e0 	.word	0x080156e0
 800b54c:	0801548c 	.word	0x0801548c
 800b550:	2000d8d0 	.word	0x2000d8d0
 800b554:	2000d8d5 	.word	0x2000d8d5
 800b558:	2000d89c 	.word	0x2000d89c
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d104      	bne.n	800b570 <tcp_process+0x5d8>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	60da      	str	r2, [r3, #12]
 800b56e:	e005      	b.n	800b57c <tcp_process+0x5e4>
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1ef      	bne.n	800b55c <tcp_process+0x5c4>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	60da      	str	r2, [r3, #12]
 800b582:	4b77      	ldr	r3, [pc, #476]	; (800b760 <tcp_process+0x7c8>)
 800b584:	2201      	movs	r2, #1
 800b586:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	220a      	movs	r2, #10
 800b58c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b58e:	4b75      	ldr	r3, [pc, #468]	; (800b764 <tcp_process+0x7cc>)
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60da      	str	r2, [r3, #12]
 800b596:	4a73      	ldr	r2, [pc, #460]	; (800b764 <tcp_process+0x7cc>)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	f002 fcfc 	bl	800df98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b5a0:	e0d2      	b.n	800b748 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	8b5b      	ldrh	r3, [r3, #26]
 800b5a6:	f043 0302 	orr.w	r3, r3, #2
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2208      	movs	r2, #8
 800b5b4:	751a      	strb	r2, [r3, #20]
      break;
 800b5b6:	e0c7      	b.n	800b748 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5b8:	4b6b      	ldr	r3, [pc, #428]	; (800b768 <tcp_process+0x7d0>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80c1 	beq.w	800b748 <tcp_process+0x7b0>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5ca:	4b68      	ldr	r3, [pc, #416]	; (800b76c <tcp_process+0x7d4>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	f040 80ba 	bne.w	800b748 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 80b5 	bne.w	800b748 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2206      	movs	r2, #6
 800b5e2:	751a      	strb	r2, [r3, #20]
      break;
 800b5e4:	e0b0      	b.n	800b748 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f9ca 	bl	800b980 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5ec:	4b60      	ldr	r3, [pc, #384]	; (800b770 <tcp_process+0x7d8>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	f003 0320 	and.w	r3, r3, #32
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80a9 	beq.w	800b74c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8b5b      	ldrh	r3, [r3, #26]
 800b5fe:	f043 0302 	orr.w	r3, r3, #2
 800b602:	b29a      	uxth	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7fe fd39 	bl	800a080 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b60e:	4b59      	ldr	r3, [pc, #356]	; (800b774 <tcp_process+0x7dc>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	429a      	cmp	r2, r3
 800b616:	d105      	bne.n	800b624 <tcp_process+0x68c>
 800b618:	4b56      	ldr	r3, [pc, #344]	; (800b774 <tcp_process+0x7dc>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	4a55      	ldr	r2, [pc, #340]	; (800b774 <tcp_process+0x7dc>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	e013      	b.n	800b64c <tcp_process+0x6b4>
 800b624:	4b53      	ldr	r3, [pc, #332]	; (800b774 <tcp_process+0x7dc>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	613b      	str	r3, [r7, #16]
 800b62a:	e00c      	b.n	800b646 <tcp_process+0x6ae>
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	429a      	cmp	r2, r3
 800b634:	d104      	bne.n	800b640 <tcp_process+0x6a8>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68da      	ldr	r2, [r3, #12]
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	60da      	str	r2, [r3, #12]
 800b63e:	e005      	b.n	800b64c <tcp_process+0x6b4>
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	613b      	str	r3, [r7, #16]
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1ef      	bne.n	800b62c <tcp_process+0x694>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	60da      	str	r2, [r3, #12]
 800b652:	4b43      	ldr	r3, [pc, #268]	; (800b760 <tcp_process+0x7c8>)
 800b654:	2201      	movs	r2, #1
 800b656:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	220a      	movs	r2, #10
 800b65c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b65e:	4b41      	ldr	r3, [pc, #260]	; (800b764 <tcp_process+0x7cc>)
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	60da      	str	r2, [r3, #12]
 800b666:	4a3f      	ldr	r2, [pc, #252]	; (800b764 <tcp_process+0x7cc>)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	f002 fc94 	bl	800df98 <tcp_timer_needed>
      }
      break;
 800b670:	e06c      	b.n	800b74c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f984 	bl	800b980 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b678:	4b3b      	ldr	r3, [pc, #236]	; (800b768 <tcp_process+0x7d0>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f003 0310 	and.w	r3, r3, #16
 800b680:	2b00      	cmp	r3, #0
 800b682:	d065      	beq.n	800b750 <tcp_process+0x7b8>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b688:	4b38      	ldr	r3, [pc, #224]	; (800b76c <tcp_process+0x7d4>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d15f      	bne.n	800b750 <tcp_process+0x7b8>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d15b      	bne.n	800b750 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7fe fcf1 	bl	800a080 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b69e:	4b35      	ldr	r3, [pc, #212]	; (800b774 <tcp_process+0x7dc>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d105      	bne.n	800b6b4 <tcp_process+0x71c>
 800b6a8:	4b32      	ldr	r3, [pc, #200]	; (800b774 <tcp_process+0x7dc>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	4a31      	ldr	r2, [pc, #196]	; (800b774 <tcp_process+0x7dc>)
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	e013      	b.n	800b6dc <tcp_process+0x744>
 800b6b4:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <tcp_process+0x7dc>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e00c      	b.n	800b6d6 <tcp_process+0x73e>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d104      	bne.n	800b6d0 <tcp_process+0x738>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68da      	ldr	r2, [r3, #12]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	60da      	str	r2, [r3, #12]
 800b6ce:	e005      	b.n	800b6dc <tcp_process+0x744>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1ef      	bne.n	800b6bc <tcp_process+0x724>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	60da      	str	r2, [r3, #12]
 800b6e2:	4b1f      	ldr	r3, [pc, #124]	; (800b760 <tcp_process+0x7c8>)
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	220a      	movs	r2, #10
 800b6ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b6ee:	4b1d      	ldr	r3, [pc, #116]	; (800b764 <tcp_process+0x7cc>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60da      	str	r2, [r3, #12]
 800b6f6:	4a1b      	ldr	r2, [pc, #108]	; (800b764 <tcp_process+0x7cc>)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	f002 fc4c 	bl	800df98 <tcp_timer_needed>
      }
      break;
 800b700:	e026      	b.n	800b750 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f93c 	bl	800b980 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b708:	4b17      	ldr	r3, [pc, #92]	; (800b768 <tcp_process+0x7d0>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01f      	beq.n	800b754 <tcp_process+0x7bc>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b718:	4b14      	ldr	r3, [pc, #80]	; (800b76c <tcp_process+0x7d4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d119      	bne.n	800b754 <tcp_process+0x7bc>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b724:	2b00      	cmp	r3, #0
 800b726:	d115      	bne.n	800b754 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b728:	4b11      	ldr	r3, [pc, #68]	; (800b770 <tcp_process+0x7d8>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	f043 0310 	orr.w	r3, r3, #16
 800b730:	b2da      	uxtb	r2, r3
 800b732:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <tcp_process+0x7d8>)
 800b734:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b736:	e00d      	b.n	800b754 <tcp_process+0x7bc>
    default:
      break;
 800b738:	bf00      	nop
 800b73a:	e00c      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b73c:	bf00      	nop
 800b73e:	e00a      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b740:	bf00      	nop
 800b742:	e008      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b744:	bf00      	nop
 800b746:	e006      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b748:	bf00      	nop
 800b74a:	e004      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b74c:	bf00      	nop
 800b74e:	e002      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b750:	bf00      	nop
 800b752:	e000      	b.n	800b756 <tcp_process+0x7be>
      break;
 800b754:	bf00      	nop
  }
  return ERR_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3724      	adds	r7, #36	; 0x24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd90      	pop	{r4, r7, pc}
 800b760:	2000d8a4 	.word	0x2000d8a4
 800b764:	2000d8a0 	.word	0x2000d8a0
 800b768:	2000d8d4 	.word	0x2000d8d4
 800b76c:	2000d8cc 	.word	0x2000d8cc
 800b770:	2000d8d5 	.word	0x2000d8d5
 800b774:	2000d89c 	.word	0x2000d89c

0800b778 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b778:	b590      	push	{r4, r7, lr}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d106      	bne.n	800b796 <tcp_oos_insert_segment+0x1e>
 800b788:	4b3b      	ldr	r3, [pc, #236]	; (800b878 <tcp_oos_insert_segment+0x100>)
 800b78a:	f240 421f 	movw	r2, #1055	; 0x41f
 800b78e:	493b      	ldr	r1, [pc, #236]	; (800b87c <tcp_oos_insert_segment+0x104>)
 800b790:	483b      	ldr	r0, [pc, #236]	; (800b880 <tcp_oos_insert_segment+0x108>)
 800b792:	f007 f92b 	bl	80129ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	899b      	ldrh	r3, [r3, #12]
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fb fbe4 	bl	8006f6c <lwip_htons>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d028      	beq.n	800b802 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b7b0:	6838      	ldr	r0, [r7, #0]
 800b7b2:	f7fe fa4f 	bl	8009c54 <tcp_segs_free>
    next = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	603b      	str	r3, [r7, #0]
 800b7ba:	e056      	b.n	800b86a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	899b      	ldrh	r3, [r3, #12]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fb fbd1 	bl	8006f6c <lwip_htons>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00d      	beq.n	800b7f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	899b      	ldrh	r3, [r3, #12]
 800b7dc:	b29c      	uxth	r4, r3
 800b7de:	2001      	movs	r0, #1
 800b7e0:	f7fb fbc4 	bl	8006f6c <lwip_htons>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	4322      	orrs	r2, r4
 800b7ee:	b292      	uxth	r2, r2
 800b7f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7fe fa3e 	bl	8009c7e <tcp_seg_free>
    while (next &&
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00e      	beq.n	800b826 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	891b      	ldrh	r3, [r3, #8]
 800b80c:	461a      	mov	r2, r3
 800b80e:	4b1d      	ldr	r3, [pc, #116]	; (800b884 <tcp_oos_insert_segment+0x10c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	441a      	add	r2, r3
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	8909      	ldrh	r1, [r1, #8]
 800b81e:	440b      	add	r3, r1
 800b820:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b822:	2b00      	cmp	r3, #0
 800b824:	daca      	bge.n	800b7bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d01e      	beq.n	800b86a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	891b      	ldrh	r3, [r3, #8]
 800b830:	461a      	mov	r2, r3
 800b832:	4b14      	ldr	r3, [pc, #80]	; (800b884 <tcp_oos_insert_segment+0x10c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	441a      	add	r2, r3
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b840:	2b00      	cmp	r3, #0
 800b842:	dd12      	ble.n	800b86a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <tcp_oos_insert_segment+0x10c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	b29b      	uxth	r3, r3
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	b29a      	uxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	891b      	ldrh	r3, [r3, #8]
 800b862:	4619      	mov	r1, r3
 800b864:	4610      	mov	r0, r2
 800b866:	f7fc fe01 	bl	800846c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	601a      	str	r2, [r3, #0]
}
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	bd90      	pop	{r4, r7, pc}
 800b878:	08015440 	.word	0x08015440
 800b87c:	08015700 	.word	0x08015700
 800b880:	0801548c 	.word	0x0801548c
 800b884:	2000d8c8 	.word	0x2000d8c8

0800b888 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b888:	b5b0      	push	{r4, r5, r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b896:	e03e      	b.n	800b916 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fc ffee 	bl	8008888 <pbuf_clen>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8b6:	8a7a      	ldrh	r2, [r7, #18]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d906      	bls.n	800b8ca <tcp_free_acked_segments+0x42>
 800b8bc:	4b2a      	ldr	r3, [pc, #168]	; (800b968 <tcp_free_acked_segments+0xe0>)
 800b8be:	f240 4257 	movw	r2, #1111	; 0x457
 800b8c2:	492a      	ldr	r1, [pc, #168]	; (800b96c <tcp_free_acked_segments+0xe4>)
 800b8c4:	482a      	ldr	r0, [pc, #168]	; (800b970 <tcp_free_acked_segments+0xe8>)
 800b8c6:	f007 f891 	bl	80129ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b8d0:	8a7b      	ldrh	r3, [r7, #18]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	891a      	ldrh	r2, [r3, #8]
 800b8e0:	4b24      	ldr	r3, [pc, #144]	; (800b974 <tcp_free_acked_segments+0xec>)
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	4b22      	ldr	r3, [pc, #136]	; (800b974 <tcp_free_acked_segments+0xec>)
 800b8ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b8ec:	6978      	ldr	r0, [r7, #20]
 800b8ee:	f7fe f9c6 	bl	8009c7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00c      	beq.n	800b916 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d109      	bne.n	800b916 <tcp_free_acked_segments+0x8e>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <tcp_free_acked_segments+0x8e>
 800b908:	4b17      	ldr	r3, [pc, #92]	; (800b968 <tcp_free_acked_segments+0xe0>)
 800b90a:	f240 4261 	movw	r2, #1121	; 0x461
 800b90e:	491a      	ldr	r1, [pc, #104]	; (800b978 <tcp_free_acked_segments+0xf0>)
 800b910:	4817      	ldr	r0, [pc, #92]	; (800b970 <tcp_free_acked_segments+0xe8>)
 800b912:	f007 f86b 	bl	80129ec <iprintf>
  while (seg_list != NULL &&
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d020      	beq.n	800b95e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	4618      	mov	r0, r3
 800b924:	f7fb fb37 	bl	8006f96 <lwip_htonl>
 800b928:	4604      	mov	r4, r0
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	891b      	ldrh	r3, [r3, #8]
 800b92e:	461d      	mov	r5, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	899b      	ldrh	r3, [r3, #12]
 800b936:	b29b      	uxth	r3, r3
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fb fb17 	bl	8006f6c <lwip_htons>
 800b93e:	4603      	mov	r3, r0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <tcp_free_acked_segments+0xc6>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <tcp_free_acked_segments+0xc8>
 800b94e:	2300      	movs	r3, #0
 800b950:	442b      	add	r3, r5
 800b952:	18e2      	adds	r2, r4, r3
 800b954:	4b09      	ldr	r3, [pc, #36]	; (800b97c <tcp_free_acked_segments+0xf4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	dd9c      	ble.n	800b898 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b95e:	68bb      	ldr	r3, [r7, #8]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bdb0      	pop	{r4, r5, r7, pc}
 800b968:	08015440 	.word	0x08015440
 800b96c:	08015728 	.word	0x08015728
 800b970:	0801548c 	.word	0x0801548c
 800b974:	2000d8d0 	.word	0x2000d8d0
 800b978:	08015750 	.word	0x08015750
 800b97c:	2000d8cc 	.word	0x2000d8cc

0800b980 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b980:	b5b0      	push	{r4, r5, r7, lr}
 800b982:	b094      	sub	sp, #80	; 0x50
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <tcp_receive+0x20>
 800b992:	4b91      	ldr	r3, [pc, #580]	; (800bbd8 <tcp_receive+0x258>)
 800b994:	f240 427b 	movw	r2, #1147	; 0x47b
 800b998:	4990      	ldr	r1, [pc, #576]	; (800bbdc <tcp_receive+0x25c>)
 800b99a:	4891      	ldr	r0, [pc, #580]	; (800bbe0 <tcp_receive+0x260>)
 800b99c:	f007 f826 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	7d1b      	ldrb	r3, [r3, #20]
 800b9a4:	2b03      	cmp	r3, #3
 800b9a6:	d806      	bhi.n	800b9b6 <tcp_receive+0x36>
 800b9a8:	4b8b      	ldr	r3, [pc, #556]	; (800bbd8 <tcp_receive+0x258>)
 800b9aa:	f240 427c 	movw	r2, #1148	; 0x47c
 800b9ae:	498d      	ldr	r1, [pc, #564]	; (800bbe4 <tcp_receive+0x264>)
 800b9b0:	488b      	ldr	r0, [pc, #556]	; (800bbe0 <tcp_receive+0x260>)
 800b9b2:	f007 f81b 	bl	80129ec <iprintf>

  if (flags & TCP_ACK) {
 800b9b6:	4b8c      	ldr	r3, [pc, #560]	; (800bbe8 <tcp_receive+0x268>)
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	f003 0310 	and.w	r3, r3, #16
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 8264 	beq.w	800be8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d0:	4413      	add	r3, r2
 800b9d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9d8:	4b84      	ldr	r3, [pc, #528]	; (800bbec <tcp_receive+0x26c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	db1b      	blt.n	800ba1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9e6:	4b81      	ldr	r3, [pc, #516]	; (800bbec <tcp_receive+0x26c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d106      	bne.n	800b9fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9f2:	4b7f      	ldr	r3, [pc, #508]	; (800bbf0 <tcp_receive+0x270>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	db0e      	blt.n	800ba1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba00:	4b7b      	ldr	r3, [pc, #492]	; (800bbf0 <tcp_receive+0x270>)
 800ba02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d125      	bne.n	800ba54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ba08:	4b7a      	ldr	r3, [pc, #488]	; (800bbf4 <tcp_receive+0x274>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	89db      	ldrh	r3, [r3, #14]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d91c      	bls.n	800ba54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ba1a:	4b76      	ldr	r3, [pc, #472]	; (800bbf4 <tcp_receive+0x274>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	89db      	ldrh	r3, [r3, #14]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d205      	bcs.n	800ba44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ba44:	4b69      	ldr	r3, [pc, #420]	; (800bbec <tcp_receive+0x26c>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ba4c:	4b68      	ldr	r3, [pc, #416]	; (800bbf0 <tcp_receive+0x270>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ba54:	4b66      	ldr	r3, [pc, #408]	; (800bbf0 <tcp_receive+0x270>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dc58      	bgt.n	800bb14 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ba62:	4b65      	ldr	r3, [pc, #404]	; (800bbf8 <tcp_receive+0x278>)
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d14b      	bne.n	800bb02 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ba74:	4413      	add	r3, r2
 800ba76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d142      	bne.n	800bb02 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	db3d      	blt.n	800bb02 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba8a:	4b59      	ldr	r3, [pc, #356]	; (800bbf0 <tcp_receive+0x270>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d137      	bne.n	800bb02 <tcp_receive+0x182>
              found_dupack = 1;
 800ba92:	2301      	movs	r3, #1
 800ba94:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba9c:	2bff      	cmp	r3, #255	; 0xff
 800ba9e:	d007      	beq.n	800bab0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800baa6:	3301      	adds	r3, #1
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d91b      	bls.n	800baf2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bac4:	4413      	add	r3, r2
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bace:	429a      	cmp	r2, r3
 800bad0:	d30a      	bcc.n	800bae8 <tcp_receive+0x168>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800badc:	4413      	add	r3, r2
 800bade:	b29a      	uxth	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bae6:	e004      	b.n	800baf2 <tcp_receive+0x172>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d902      	bls.n	800bb02 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 feed 	bl	800d8dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bb02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f040 8161 	bne.w	800bdcc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb12:	e15b      	b.n	800bdcc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb14:	4b36      	ldr	r3, [pc, #216]	; (800bbf0 <tcp_receive+0x270>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f2c0 814e 	blt.w	800bdc2 <tcp_receive+0x442>
 800bb26:	4b32      	ldr	r3, [pc, #200]	; (800bbf0 <tcp_receive+0x270>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f300 8146 	bgt.w	800bdc2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	8b5b      	ldrh	r3, [r3, #26]
 800bb3a:	f003 0304 	and.w	r3, r3, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d010      	beq.n	800bb64 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8b5b      	ldrh	r3, [r3, #26]
 800bb46:	f023 0304 	bic.w	r3, r3, #4
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb72:	10db      	asrs	r3, r3, #3
 800bb74:	b21b      	sxth	r3, r3
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4413      	add	r3, r2
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	b21a      	sxth	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bb8c:	4b18      	ldr	r3, [pc, #96]	; (800bbf0 <tcp_receive+0x270>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bba4:	4b12      	ldr	r3, [pc, #72]	; (800bbf0 <tcp_receive+0x270>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	7d1b      	ldrb	r3, [r3, #20]
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	f240 8097 	bls.w	800bce4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d245      	bcs.n	800bc52 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	8b5b      	ldrh	r3, [r3, #26]
 800bbca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d014      	beq.n	800bbfc <tcp_receive+0x27c>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e013      	b.n	800bbfe <tcp_receive+0x27e>
 800bbd6:	bf00      	nop
 800bbd8:	08015440 	.word	0x08015440
 800bbdc:	08015770 	.word	0x08015770
 800bbe0:	0801548c 	.word	0x0801548c
 800bbe4:	0801578c 	.word	0x0801578c
 800bbe8:	2000d8d4 	.word	0x2000d8d4
 800bbec:	2000d8c8 	.word	0x2000d8c8
 800bbf0:	2000d8cc 	.word	0x2000d8cc
 800bbf4:	2000d8b8 	.word	0x2000d8b8
 800bbf8:	2000d8d2 	.word	0x2000d8d2
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bc02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc0c:	fb12 f303 	smulbb	r3, r2, r3
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc14:	4293      	cmp	r3, r2
 800bc16:	bf28      	it	cs
 800bc18:	4613      	movcs	r3, r2
 800bc1a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bc24:	4413      	add	r3, r2
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d309      	bcc.n	800bc46 <tcp_receive+0x2c6>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bc3a:	4413      	add	r3, r2
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc44:	e04e      	b.n	800bce4 <tcp_receive+0x364>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc50:	e048      	b.n	800bce4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc5a:	4413      	add	r3, r2
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d309      	bcc.n	800bc7c <tcp_receive+0x2fc>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc70:	4413      	add	r3, r2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc7a:	e004      	b.n	800bc86 <tcp_receive+0x306>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d326      	bcc.n	800bce4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcb6:	4413      	add	r3, r2
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d30a      	bcc.n	800bcda <tcp_receive+0x35a>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcce:	4413      	add	r3, r2
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bcd8:	e004      	b.n	800bce4 <tcp_receive+0x364>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bce0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcec:	4a98      	ldr	r2, [pc, #608]	; (800bf50 <tcp_receive+0x5d0>)
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fdca 	bl	800b888 <tcp_free_acked_segments>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd02:	4a94      	ldr	r2, [pc, #592]	; (800bf54 <tcp_receive+0x5d4>)
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff fdbf 	bl	800b888 <tcp_free_acked_segments>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d104      	bne.n	800bd22 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd1e:	861a      	strh	r2, [r3, #48]	; 0x30
 800bd20:	e002      	b.n	800bd28 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d103      	bne.n	800bd3e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bd44:	4b84      	ldr	r3, [pc, #528]	; (800bf58 <tcp_receive+0x5d8>)
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	4413      	add	r3, r2
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8b5b      	ldrh	r3, [r3, #26]
 800bd56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d035      	beq.n	800bdca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d118      	bne.n	800bd98 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00c      	beq.n	800bd88 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fb f90b 	bl	8006f96 <lwip_htonl>
 800bd80:	4603      	mov	r3, r0
 800bd82:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	dc20      	bgt.n	800bdca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	8b5b      	ldrh	r3, [r3, #26]
 800bd8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd96:	e018      	b.n	800bdca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fb f8f6 	bl	8006f96 <lwip_htonl>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	1ae3      	subs	r3, r4, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	dc0b      	bgt.n	800bdca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	8b5b      	ldrh	r3, [r3, #26]
 800bdb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bdc0:	e003      	b.n	800bdca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f001 ff78 	bl	800dcb8 <tcp_send_empty_ack>
 800bdc8:	e000      	b.n	800bdcc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bdca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d05b      	beq.n	800be8c <tcp_receive+0x50c>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdd8:	4b60      	ldr	r3, [pc, #384]	; (800bf5c <tcp_receive+0x5dc>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	da54      	bge.n	800be8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bde2:	4b5f      	ldr	r3, [pc, #380]	; (800bf60 <tcp_receive+0x5e0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bdf6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be00:	10db      	asrs	r3, r3, #3
 800be02:	b21b      	sxth	r3, r3
 800be04:	b29b      	uxth	r3, r3
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	b29b      	uxth	r3, r3
 800be0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be14:	b29a      	uxth	r2, r3
 800be16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be1a:	4413      	add	r3, r2
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	b21a      	sxth	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800be24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da05      	bge.n	800be38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800be2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be30:	425b      	negs	r3, r3
 800be32:	b29b      	uxth	r3, r3
 800be34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800be38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be42:	109b      	asrs	r3, r3, #2
 800be44:	b21b      	sxth	r3, r3
 800be46:	b29b      	uxth	r3, r3
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be56:	b29a      	uxth	r2, r3
 800be58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be5c:	4413      	add	r3, r2
 800be5e:	b29b      	uxth	r3, r3
 800be60:	b21a      	sxth	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be6c:	10db      	asrs	r3, r3, #3
 800be6e:	b21b      	sxth	r3, r3
 800be70:	b29a      	uxth	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be78:	b29b      	uxth	r3, r3
 800be7a:	4413      	add	r3, r2
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	b21a      	sxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800be8c:	4b35      	ldr	r3, [pc, #212]	; (800bf64 <tcp_receive+0x5e4>)
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 84e2 	beq.w	800c85a <tcp_receive+0xeda>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	7d1b      	ldrb	r3, [r3, #20]
 800be9a:	2b06      	cmp	r3, #6
 800be9c:	f200 84dd 	bhi.w	800c85a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bea4:	4b30      	ldr	r3, [pc, #192]	; (800bf68 <tcp_receive+0x5e8>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	3b01      	subs	r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	f2c0 808f 	blt.w	800bfd0 <tcp_receive+0x650>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beb6:	4b2b      	ldr	r3, [pc, #172]	; (800bf64 <tcp_receive+0x5e4>)
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	4619      	mov	r1, r3
 800bebc:	4b2a      	ldr	r3, [pc, #168]	; (800bf68 <tcp_receive+0x5e8>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	440b      	add	r3, r1
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	3301      	adds	r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f300 8082 	bgt.w	800bfd0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800becc:	4b27      	ldr	r3, [pc, #156]	; (800bf6c <tcp_receive+0x5ec>)
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bed6:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <tcp_receive+0x5e8>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bede:	4b23      	ldr	r3, [pc, #140]	; (800bf6c <tcp_receive+0x5ec>)
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <tcp_receive+0x574>
 800bee6:	4b22      	ldr	r3, [pc, #136]	; (800bf70 <tcp_receive+0x5f0>)
 800bee8:	f240 5294 	movw	r2, #1428	; 0x594
 800beec:	4921      	ldr	r1, [pc, #132]	; (800bf74 <tcp_receive+0x5f4>)
 800beee:	4822      	ldr	r0, [pc, #136]	; (800bf78 <tcp_receive+0x5f8>)
 800bef0:	f006 fd7c 	bl	80129ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800befa:	4293      	cmp	r3, r2
 800befc:	d906      	bls.n	800bf0c <tcp_receive+0x58c>
 800befe:	4b1c      	ldr	r3, [pc, #112]	; (800bf70 <tcp_receive+0x5f0>)
 800bf00:	f240 5295 	movw	r2, #1429	; 0x595
 800bf04:	491d      	ldr	r1, [pc, #116]	; (800bf7c <tcp_receive+0x5fc>)
 800bf06:	481c      	ldr	r0, [pc, #112]	; (800bf78 <tcp_receive+0x5f8>)
 800bf08:	f006 fd70 	bl	80129ec <iprintf>
      off = (u16_t)off32;
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bf12:	4b16      	ldr	r3, [pc, #88]	; (800bf6c <tcp_receive+0x5ec>)
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	891b      	ldrh	r3, [r3, #8]
 800bf18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d906      	bls.n	800bf2e <tcp_receive+0x5ae>
 800bf20:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <tcp_receive+0x5f0>)
 800bf22:	f240 5297 	movw	r2, #1431	; 0x597
 800bf26:	4916      	ldr	r1, [pc, #88]	; (800bf80 <tcp_receive+0x600>)
 800bf28:	4813      	ldr	r0, [pc, #76]	; (800bf78 <tcp_receive+0x5f8>)
 800bf2a:	f006 fd5f 	bl	80129ec <iprintf>
      inseg.len -= off;
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <tcp_receive+0x5ec>)
 800bf30:	891a      	ldrh	r2, [r3, #8]
 800bf32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	4b0c      	ldr	r3, [pc, #48]	; (800bf6c <tcp_receive+0x5ec>)
 800bf3c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bf3e:	4b0b      	ldr	r3, [pc, #44]	; (800bf6c <tcp_receive+0x5ec>)
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	891a      	ldrh	r2, [r3, #8]
 800bf44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bf4c:	e02a      	b.n	800bfa4 <tcp_receive+0x624>
 800bf4e:	bf00      	nop
 800bf50:	080157a8 	.word	0x080157a8
 800bf54:	080157b0 	.word	0x080157b0
 800bf58:	2000d8d0 	.word	0x2000d8d0
 800bf5c:	2000d8cc 	.word	0x2000d8cc
 800bf60:	2000d890 	.word	0x2000d890
 800bf64:	2000d8d2 	.word	0x2000d8d2
 800bf68:	2000d8c8 	.word	0x2000d8c8
 800bf6c:	2000d8a8 	.word	0x2000d8a8
 800bf70:	08015440 	.word	0x08015440
 800bf74:	080157b8 	.word	0x080157b8
 800bf78:	0801548c 	.word	0x0801548c
 800bf7c:	080157c8 	.word	0x080157c8
 800bf80:	080157d8 	.word	0x080157d8
        off -= p->len;
 800bf84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf86:	895b      	ldrh	r3, [r3, #10]
 800bf88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bf92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bf98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bf9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa6:	895b      	ldrh	r3, [r3, #10]
 800bfa8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d8e9      	bhi.n	800bf84 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bfb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bfb8:	f7fc fb58 	bl	800866c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	4a91      	ldr	r2, [pc, #580]	; (800c208 <tcp_receive+0x888>)
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	4b91      	ldr	r3, [pc, #580]	; (800c20c <tcp_receive+0x88c>)
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	4a8f      	ldr	r2, [pc, #572]	; (800c208 <tcp_receive+0x888>)
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bfce:	e00d      	b.n	800bfec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bfd0:	4b8d      	ldr	r3, [pc, #564]	; (800c208 <tcp_receive+0x888>)
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	da06      	bge.n	800bfec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	8b5b      	ldrh	r3, [r3, #26]
 800bfe2:	f043 0302 	orr.w	r3, r3, #2
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bfec:	4b86      	ldr	r3, [pc, #536]	; (800c208 <tcp_receive+0x888>)
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f2c0 842a 	blt.w	800c850 <tcp_receive+0xed0>
 800bffc:	4b82      	ldr	r3, [pc, #520]	; (800c208 <tcp_receive+0x888>)
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	6879      	ldr	r1, [r7, #4]
 800c006:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c008:	440b      	add	r3, r1
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	3301      	adds	r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f300 841e 	bgt.w	800c850 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c018:	4b7b      	ldr	r3, [pc, #492]	; (800c208 <tcp_receive+0x888>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	f040 829a 	bne.w	800c556 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c022:	4b7a      	ldr	r3, [pc, #488]	; (800c20c <tcp_receive+0x88c>)
 800c024:	891c      	ldrh	r4, [r3, #8]
 800c026:	4b79      	ldr	r3, [pc, #484]	; (800c20c <tcp_receive+0x88c>)
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	899b      	ldrh	r3, [r3, #12]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fa ff9c 	bl	8006f6c <lwip_htons>
 800c034:	4603      	mov	r3, r0
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 0303 	and.w	r3, r3, #3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d001      	beq.n	800c044 <tcp_receive+0x6c4>
 800c040:	2301      	movs	r3, #1
 800c042:	e000      	b.n	800c046 <tcp_receive+0x6c6>
 800c044:	2300      	movs	r3, #0
 800c046:	4423      	add	r3, r4
 800c048:	b29a      	uxth	r2, r3
 800c04a:	4b71      	ldr	r3, [pc, #452]	; (800c210 <tcp_receive+0x890>)
 800c04c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c052:	4b6f      	ldr	r3, [pc, #444]	; (800c210 <tcp_receive+0x890>)
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d275      	bcs.n	800c146 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c05a:	4b6c      	ldr	r3, [pc, #432]	; (800c20c <tcp_receive+0x88c>)
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	899b      	ldrh	r3, [r3, #12]
 800c060:	b29b      	uxth	r3, r3
 800c062:	4618      	mov	r0, r3
 800c064:	f7fa ff82 	bl	8006f6c <lwip_htons>
 800c068:	4603      	mov	r3, r0
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d01f      	beq.n	800c0b4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c074:	4b65      	ldr	r3, [pc, #404]	; (800c20c <tcp_receive+0x88c>)
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	899b      	ldrh	r3, [r3, #12]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	b21b      	sxth	r3, r3
 800c07e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c082:	b21c      	sxth	r4, r3
 800c084:	4b61      	ldr	r3, [pc, #388]	; (800c20c <tcp_receive+0x88c>)
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	899b      	ldrh	r3, [r3, #12]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fa ff6d 	bl	8006f6c <lwip_htons>
 800c092:	4603      	mov	r3, r0
 800c094:	b2db      	uxtb	r3, r3
 800c096:	b29b      	uxth	r3, r3
 800c098:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fa ff64 	bl	8006f6c <lwip_htons>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	b21b      	sxth	r3, r3
 800c0a8:	4323      	orrs	r3, r4
 800c0aa:	b21a      	sxth	r2, r3
 800c0ac:	4b57      	ldr	r3, [pc, #348]	; (800c20c <tcp_receive+0x88c>)
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	b292      	uxth	r2, r2
 800c0b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0b8:	4b54      	ldr	r3, [pc, #336]	; (800c20c <tcp_receive+0x88c>)
 800c0ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c0bc:	4b53      	ldr	r3, [pc, #332]	; (800c20c <tcp_receive+0x88c>)
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	899b      	ldrh	r3, [r3, #12]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fa ff51 	bl	8006f6c <lwip_htons>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	f003 0302 	and.w	r3, r3, #2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d005      	beq.n	800c0e2 <tcp_receive+0x762>
            inseg.len -= 1;
 800c0d6:	4b4d      	ldr	r3, [pc, #308]	; (800c20c <tcp_receive+0x88c>)
 800c0d8:	891b      	ldrh	r3, [r3, #8]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	4b4b      	ldr	r3, [pc, #300]	; (800c20c <tcp_receive+0x88c>)
 800c0e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c0e2:	4b4a      	ldr	r3, [pc, #296]	; (800c20c <tcp_receive+0x88c>)
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4a49      	ldr	r2, [pc, #292]	; (800c20c <tcp_receive+0x88c>)
 800c0e8:	8912      	ldrh	r2, [r2, #8]
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fc f9bd 	bl	800846c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c0f2:	4b46      	ldr	r3, [pc, #280]	; (800c20c <tcp_receive+0x88c>)
 800c0f4:	891c      	ldrh	r4, [r3, #8]
 800c0f6:	4b45      	ldr	r3, [pc, #276]	; (800c20c <tcp_receive+0x88c>)
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	899b      	ldrh	r3, [r3, #12]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fa ff34 	bl	8006f6c <lwip_htons>
 800c104:	4603      	mov	r3, r0
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f003 0303 	and.w	r3, r3, #3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <tcp_receive+0x794>
 800c110:	2301      	movs	r3, #1
 800c112:	e000      	b.n	800c116 <tcp_receive+0x796>
 800c114:	2300      	movs	r3, #0
 800c116:	4423      	add	r3, r4
 800c118:	b29a      	uxth	r2, r3
 800c11a:	4b3d      	ldr	r3, [pc, #244]	; (800c210 <tcp_receive+0x890>)
 800c11c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c11e:	4b3c      	ldr	r3, [pc, #240]	; (800c210 <tcp_receive+0x890>)
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	4b38      	ldr	r3, [pc, #224]	; (800c208 <tcp_receive+0x888>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	441a      	add	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c132:	440b      	add	r3, r1
 800c134:	429a      	cmp	r2, r3
 800c136:	d006      	beq.n	800c146 <tcp_receive+0x7c6>
 800c138:	4b36      	ldr	r3, [pc, #216]	; (800c214 <tcp_receive+0x894>)
 800c13a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c13e:	4936      	ldr	r1, [pc, #216]	; (800c218 <tcp_receive+0x898>)
 800c140:	4836      	ldr	r0, [pc, #216]	; (800c21c <tcp_receive+0x89c>)
 800c142:	f006 fc53 	bl	80129ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80e7 	beq.w	800c31e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c150:	4b2e      	ldr	r3, [pc, #184]	; (800c20c <tcp_receive+0x88c>)
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	899b      	ldrh	r3, [r3, #12]
 800c156:	b29b      	uxth	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fa ff07 	bl	8006f6c <lwip_htons>
 800c15e:	4603      	mov	r3, r0
 800c160:	b2db      	uxtb	r3, r3
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d010      	beq.n	800c18c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c16a:	e00a      	b.n	800c182 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c170:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f7fd fd7e 	bl	8009c7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1f0      	bne.n	800c16c <tcp_receive+0x7ec>
 800c18a:	e0c8      	b.n	800c31e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c192:	e052      	b.n	800c23a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	899b      	ldrh	r3, [r3, #12]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fa fee5 	bl	8006f6c <lwip_htons>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d03d      	beq.n	800c22a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c1ae:	4b17      	ldr	r3, [pc, #92]	; (800c20c <tcp_receive+0x88c>)
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	899b      	ldrh	r3, [r3, #12]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fa fed8 	bl	8006f6c <lwip_htons>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d130      	bne.n	800c22a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c1c8:	4b10      	ldr	r3, [pc, #64]	; (800c20c <tcp_receive+0x88c>)
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	899b      	ldrh	r3, [r3, #12]
 800c1ce:	b29c      	uxth	r4, r3
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	f7fa fecb 	bl	8006f6c <lwip_htons>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4b0c      	ldr	r3, [pc, #48]	; (800c20c <tcp_receive+0x88c>)
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	4322      	orrs	r2, r4
 800c1e0:	b292      	uxth	r2, r2
 800c1e2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c1e4:	4b09      	ldr	r3, [pc, #36]	; (800c20c <tcp_receive+0x88c>)
 800c1e6:	891c      	ldrh	r4, [r3, #8]
 800c1e8:	4b08      	ldr	r3, [pc, #32]	; (800c20c <tcp_receive+0x88c>)
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	899b      	ldrh	r3, [r3, #12]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fa febb 	bl	8006f6c <lwip_htons>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	f003 0303 	and.w	r3, r3, #3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00e      	beq.n	800c220 <tcp_receive+0x8a0>
 800c202:	2301      	movs	r3, #1
 800c204:	e00d      	b.n	800c222 <tcp_receive+0x8a2>
 800c206:	bf00      	nop
 800c208:	2000d8c8 	.word	0x2000d8c8
 800c20c:	2000d8a8 	.word	0x2000d8a8
 800c210:	2000d8d2 	.word	0x2000d8d2
 800c214:	08015440 	.word	0x08015440
 800c218:	080157e8 	.word	0x080157e8
 800c21c:	0801548c 	.word	0x0801548c
 800c220:	2300      	movs	r3, #0
 800c222:	4423      	add	r3, r4
 800c224:	b29a      	uxth	r2, r3
 800c226:	4b98      	ldr	r3, [pc, #608]	; (800c488 <tcp_receive+0xb08>)
 800c228:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c22c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c234:	6938      	ldr	r0, [r7, #16]
 800c236:	f7fd fd22 	bl	8009c7e <tcp_seg_free>
            while (next &&
 800c23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00e      	beq.n	800c25e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c240:	4b91      	ldr	r3, [pc, #580]	; (800c488 <tcp_receive+0xb08>)
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	461a      	mov	r2, r3
 800c246:	4b91      	ldr	r3, [pc, #580]	; (800c48c <tcp_receive+0xb0c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	441a      	add	r2, r3
 800c24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c254:	8909      	ldrh	r1, [r1, #8]
 800c256:	440b      	add	r3, r1
 800c258:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da9a      	bge.n	800c194 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c260:	2b00      	cmp	r3, #0
 800c262:	d059      	beq.n	800c318 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c264:	4b88      	ldr	r3, [pc, #544]	; (800c488 <tcp_receive+0xb08>)
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	461a      	mov	r2, r3
 800c26a:	4b88      	ldr	r3, [pc, #544]	; (800c48c <tcp_receive+0xb0c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	441a      	add	r2, r3
 800c270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c278:	2b00      	cmp	r3, #0
 800c27a:	dd4d      	ble.n	800c318 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b29a      	uxth	r2, r3
 800c284:	4b81      	ldr	r3, [pc, #516]	; (800c48c <tcp_receive+0xb0c>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	b29b      	uxth	r3, r3
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	4b80      	ldr	r3, [pc, #512]	; (800c490 <tcp_receive+0xb10>)
 800c290:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c292:	4b7f      	ldr	r3, [pc, #508]	; (800c490 <tcp_receive+0xb10>)
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	899b      	ldrh	r3, [r3, #12]
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fa fe66 	bl	8006f6c <lwip_htons>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0302 	and.w	r3, r3, #2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d005      	beq.n	800c2b8 <tcp_receive+0x938>
                inseg.len -= 1;
 800c2ac:	4b78      	ldr	r3, [pc, #480]	; (800c490 <tcp_receive+0xb10>)
 800c2ae:	891b      	ldrh	r3, [r3, #8]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	4b76      	ldr	r3, [pc, #472]	; (800c490 <tcp_receive+0xb10>)
 800c2b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c2b8:	4b75      	ldr	r3, [pc, #468]	; (800c490 <tcp_receive+0xb10>)
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	4a74      	ldr	r2, [pc, #464]	; (800c490 <tcp_receive+0xb10>)
 800c2be:	8912      	ldrh	r2, [r2, #8]
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fc f8d2 	bl	800846c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c2c8:	4b71      	ldr	r3, [pc, #452]	; (800c490 <tcp_receive+0xb10>)
 800c2ca:	891c      	ldrh	r4, [r3, #8]
 800c2cc:	4b70      	ldr	r3, [pc, #448]	; (800c490 <tcp_receive+0xb10>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	899b      	ldrh	r3, [r3, #12]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fa fe49 	bl	8006f6c <lwip_htons>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <tcp_receive+0x96a>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e000      	b.n	800c2ec <tcp_receive+0x96c>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4423      	add	r3, r4
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	4b65      	ldr	r3, [pc, #404]	; (800c488 <tcp_receive+0xb08>)
 800c2f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c2f4:	4b64      	ldr	r3, [pc, #400]	; (800c488 <tcp_receive+0xb08>)
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4b64      	ldr	r3, [pc, #400]	; (800c48c <tcp_receive+0xb0c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	441a      	add	r2, r3
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	429a      	cmp	r2, r3
 800c308:	d006      	beq.n	800c318 <tcp_receive+0x998>
 800c30a:	4b62      	ldr	r3, [pc, #392]	; (800c494 <tcp_receive+0xb14>)
 800c30c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c310:	4961      	ldr	r1, [pc, #388]	; (800c498 <tcp_receive+0xb18>)
 800c312:	4862      	ldr	r0, [pc, #392]	; (800c49c <tcp_receive+0xb1c>)
 800c314:	f006 fb6a 	bl	80129ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c31c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c31e:	4b5a      	ldr	r3, [pc, #360]	; (800c488 <tcp_receive+0xb08>)
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	4b59      	ldr	r3, [pc, #356]	; (800c48c <tcp_receive+0xb0c>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	441a      	add	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c332:	4b55      	ldr	r3, [pc, #340]	; (800c488 <tcp_receive+0xb08>)
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d206      	bcs.n	800c348 <tcp_receive+0x9c8>
 800c33a:	4b56      	ldr	r3, [pc, #344]	; (800c494 <tcp_receive+0xb14>)
 800c33c:	f240 6207 	movw	r2, #1543	; 0x607
 800c340:	4957      	ldr	r1, [pc, #348]	; (800c4a0 <tcp_receive+0xb20>)
 800c342:	4856      	ldr	r0, [pc, #344]	; (800c49c <tcp_receive+0xb1c>)
 800c344:	f006 fb52 	bl	80129ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c34c:	4b4e      	ldr	r3, [pc, #312]	; (800c488 <tcp_receive+0xb08>)
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7fc ffb1 	bl	80092c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c35e:	4b4c      	ldr	r3, [pc, #304]	; (800c490 <tcp_receive+0xb10>)
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	891b      	ldrh	r3, [r3, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c368:	4b49      	ldr	r3, [pc, #292]	; (800c490 <tcp_receive+0xb10>)
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	4a4d      	ldr	r2, [pc, #308]	; (800c4a4 <tcp_receive+0xb24>)
 800c36e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c370:	4b47      	ldr	r3, [pc, #284]	; (800c490 <tcp_receive+0xb10>)
 800c372:	2200      	movs	r2, #0
 800c374:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c376:	4b46      	ldr	r3, [pc, #280]	; (800c490 <tcp_receive+0xb10>)
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	899b      	ldrh	r3, [r3, #12]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fa fdf4 	bl	8006f6c <lwip_htons>
 800c384:	4603      	mov	r3, r0
 800c386:	b2db      	uxtb	r3, r3
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 80b8 	beq.w	800c502 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c392:	4b45      	ldr	r3, [pc, #276]	; (800c4a8 <tcp_receive+0xb28>)
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	f043 0320 	orr.w	r3, r3, #32
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	4b42      	ldr	r3, [pc, #264]	; (800c4a8 <tcp_receive+0xb28>)
 800c39e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c3a0:	e0af      	b.n	800c502 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a36      	ldr	r2, [pc, #216]	; (800c48c <tcp_receive+0xb0c>)
 800c3b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	891b      	ldrh	r3, [r3, #8]
 800c3b8:	461c      	mov	r4, r3
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	899b      	ldrh	r3, [r3, #12]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fa fdd2 	bl	8006f6c <lwip_htons>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <tcp_receive+0xa58>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e000      	b.n	800c3da <tcp_receive+0xa5a>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	191a      	adds	r2, r3, r4
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	441a      	add	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ea:	461c      	mov	r4, r3
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	891b      	ldrh	r3, [r3, #8]
 800c3f0:	461d      	mov	r5, r3
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	899b      	ldrh	r3, [r3, #12]
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fa fdb6 	bl	8006f6c <lwip_htons>
 800c400:	4603      	mov	r3, r0
 800c402:	b2db      	uxtb	r3, r3
 800c404:	f003 0303 	and.w	r3, r3, #3
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <tcp_receive+0xa90>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <tcp_receive+0xa92>
 800c410:	2300      	movs	r3, #0
 800c412:	442b      	add	r3, r5
 800c414:	429c      	cmp	r4, r3
 800c416:	d206      	bcs.n	800c426 <tcp_receive+0xaa6>
 800c418:	4b1e      	ldr	r3, [pc, #120]	; (800c494 <tcp_receive+0xb14>)
 800c41a:	f240 622b 	movw	r2, #1579	; 0x62b
 800c41e:	4923      	ldr	r1, [pc, #140]	; (800c4ac <tcp_receive+0xb2c>)
 800c420:	481e      	ldr	r0, [pc, #120]	; (800c49c <tcp_receive+0xb1c>)
 800c422:	f006 fae3 	bl	80129ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	891b      	ldrh	r3, [r3, #8]
 800c42a:	461c      	mov	r4, r3
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	899b      	ldrh	r3, [r3, #12]
 800c432:	b29b      	uxth	r3, r3
 800c434:	4618      	mov	r0, r3
 800c436:	f7fa fd99 	bl	8006f6c <lwip_htons>
 800c43a:	4603      	mov	r3, r0
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <tcp_receive+0xaca>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <tcp_receive+0xacc>
 800c44a:	2300      	movs	r3, #0
 800c44c:	1919      	adds	r1, r3, r4
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c452:	b28b      	uxth	r3, r1
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	b29a      	uxth	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7fc ff2f 	bl	80092c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	891b      	ldrh	r3, [r3, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d028      	beq.n	800c4be <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c46c:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <tcp_receive+0xb24>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d01d      	beq.n	800c4b0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c474:	4b0b      	ldr	r3, [pc, #44]	; (800c4a4 <tcp_receive+0xb24>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f7fc fa3c 	bl	80088fc <pbuf_cat>
 800c484:	e018      	b.n	800c4b8 <tcp_receive+0xb38>
 800c486:	bf00      	nop
 800c488:	2000d8d2 	.word	0x2000d8d2
 800c48c:	2000d8c8 	.word	0x2000d8c8
 800c490:	2000d8a8 	.word	0x2000d8a8
 800c494:	08015440 	.word	0x08015440
 800c498:	08015820 	.word	0x08015820
 800c49c:	0801548c 	.word	0x0801548c
 800c4a0:	0801585c 	.word	0x0801585c
 800c4a4:	2000d8d8 	.word	0x2000d8d8
 800c4a8:	2000d8d5 	.word	0x2000d8d5
 800c4ac:	0801587c 	.word	0x0801587c
            } else {
              recv_data = cseg->p;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	4a70      	ldr	r2, [pc, #448]	; (800c678 <tcp_receive+0xcf8>)
 800c4b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	899b      	ldrh	r3, [r3, #12]
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fa fd50 	bl	8006f6c <lwip_htons>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00d      	beq.n	800c4f4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c4d8:	4b68      	ldr	r3, [pc, #416]	; (800c67c <tcp_receive+0xcfc>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	f043 0320 	orr.w	r3, r3, #32
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	4b66      	ldr	r3, [pc, #408]	; (800c67c <tcp_receive+0xcfc>)
 800c4e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	7d1b      	ldrb	r3, [r3, #20]
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	d102      	bne.n	800c4f4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2207      	movs	r2, #7
 800c4f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c4fc:	68b8      	ldr	r0, [r7, #8]
 800c4fe:	f7fd fbbe 	bl	8009c7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c506:	2b00      	cmp	r3, #0
 800c508:	d008      	beq.n	800c51c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c516:	429a      	cmp	r2, r3
 800c518:	f43f af43 	beq.w	800c3a2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	8b5b      	ldrh	r3, [r3, #26]
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00e      	beq.n	800c546 <tcp_receive+0xbc6>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	8b5b      	ldrh	r3, [r3, #26]
 800c52c:	f023 0301 	bic.w	r3, r3, #1
 800c530:	b29a      	uxth	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	835a      	strh	r2, [r3, #26]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	8b5b      	ldrh	r3, [r3, #26]
 800c53a:	f043 0302 	orr.w	r3, r3, #2
 800c53e:	b29a      	uxth	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c544:	e188      	b.n	800c858 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	8b5b      	ldrh	r3, [r3, #26]
 800c54a:	f043 0301 	orr.w	r3, r3, #1
 800c54e:	b29a      	uxth	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c554:	e180      	b.n	800c858 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c55e:	4848      	ldr	r0, [pc, #288]	; (800c680 <tcp_receive+0xd00>)
 800c560:	f7fd fba6 	bl	8009cb0 <tcp_seg_copy>
 800c564:	4602      	mov	r2, r0
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	675a      	str	r2, [r3, #116]	; 0x74
 800c56a:	e16d      	b.n	800c848 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c56c:	2300      	movs	r3, #0
 800c56e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c574:	63bb      	str	r3, [r7, #56]	; 0x38
 800c576:	e157      	b.n	800c828 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	4b41      	ldr	r3, [pc, #260]	; (800c684 <tcp_receive+0xd04>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	429a      	cmp	r2, r3
 800c584:	d11d      	bne.n	800c5c2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c586:	4b3e      	ldr	r3, [pc, #248]	; (800c680 <tcp_receive+0xd00>)
 800c588:	891a      	ldrh	r2, [r3, #8]
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	891b      	ldrh	r3, [r3, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	f240 814f 	bls.w	800c832 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c594:	483a      	ldr	r0, [pc, #232]	; (800c680 <tcp_receive+0xd00>)
 800c596:	f7fd fb8b 	bl	8009cb0 <tcp_seg_copy>
 800c59a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 8149 	beq.w	800c836 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d003      	beq.n	800c5b2 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	e002      	b.n	800c5b8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c5b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5ba:	6978      	ldr	r0, [r7, #20]
 800c5bc:	f7ff f8dc 	bl	800b778 <tcp_oos_insert_segment>
                }
                break;
 800c5c0:	e139      	b.n	800c836 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d117      	bne.n	800c5f8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c5c8:	4b2e      	ldr	r3, [pc, #184]	; (800c684 <tcp_receive+0xd04>)
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	da57      	bge.n	800c688 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c5d8:	4829      	ldr	r0, [pc, #164]	; (800c680 <tcp_receive+0xd00>)
 800c5da:	f7fd fb69 	bl	8009cb0 <tcp_seg_copy>
 800c5de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 8129 	beq.w	800c83a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	69ba      	ldr	r2, [r7, #24]
 800c5ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c5ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5f0:	69b8      	ldr	r0, [r7, #24]
 800c5f2:	f7ff f8c1 	bl	800b778 <tcp_oos_insert_segment>
                  }
                  break;
 800c5f6:	e120      	b.n	800c83a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c5f8:	4b22      	ldr	r3, [pc, #136]	; (800c684 <tcp_receive+0xd04>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	3b01      	subs	r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	db3e      	blt.n	800c688 <tcp_receive+0xd08>
 800c60a:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <tcp_receive+0xd04>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	3301      	adds	r3, #1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dc35      	bgt.n	800c688 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c61c:	4818      	ldr	r0, [pc, #96]	; (800c680 <tcp_receive+0xd00>)
 800c61e:	f7fd fb47 	bl	8009cb0 <tcp_seg_copy>
 800c622:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 8109 	beq.w	800c83e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c634:	8912      	ldrh	r2, [r2, #8]
 800c636:	441a      	add	r2, r3
 800c638:	4b12      	ldr	r3, [pc, #72]	; (800c684 <tcp_receive+0xd04>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd12      	ble.n	800c668 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c642:	4b10      	ldr	r3, [pc, #64]	; (800c684 <tcp_receive+0xd04>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	b29a      	uxth	r2, r3
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	b29a      	uxth	r2, r3
 800c654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c656:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65e:	891b      	ldrh	r3, [r3, #8]
 800c660:	4619      	mov	r1, r3
 800c662:	4610      	mov	r0, r2
 800c664:	f7fb ff02 	bl	800846c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c66e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c670:	69f8      	ldr	r0, [r7, #28]
 800c672:	f7ff f881 	bl	800b778 <tcp_oos_insert_segment>
                  }
                  break;
 800c676:	e0e2      	b.n	800c83e <tcp_receive+0xebe>
 800c678:	2000d8d8 	.word	0x2000d8d8
 800c67c:	2000d8d5 	.word	0x2000d8d5
 800c680:	2000d8a8 	.word	0x2000d8a8
 800c684:	2000d8c8 	.word	0x2000d8c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f040 80c6 	bne.w	800c822 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c696:	4b80      	ldr	r3, [pc, #512]	; (800c898 <tcp_receive+0xf18>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f340 80bd 	ble.w	800c822 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	899b      	ldrh	r3, [r3, #12]
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fa fc5b 	bl	8006f6c <lwip_htons>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f040 80bf 	bne.w	800c842 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c6c4:	4875      	ldr	r0, [pc, #468]	; (800c89c <tcp_receive+0xf1c>)
 800c6c6:	f7fd faf3 	bl	8009cb0 <tcp_seg_copy>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 80b6 	beq.w	800c846 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6e2:	8912      	ldrh	r2, [r2, #8]
 800c6e4:	441a      	add	r2, r3
 800c6e6:	4b6c      	ldr	r3, [pc, #432]	; (800c898 <tcp_receive+0xf18>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd12      	ble.n	800c716 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c6f0:	4b69      	ldr	r3, [pc, #420]	; (800c898 <tcp_receive+0xf18>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	b29a      	uxth	r2, r3
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70c:	891b      	ldrh	r3, [r3, #8]
 800c70e:	4619      	mov	r1, r3
 800c710:	4610      	mov	r0, r2
 800c712:	f7fb feab 	bl	800846c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c716:	4b62      	ldr	r3, [pc, #392]	; (800c8a0 <tcp_receive+0xf20>)
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	4b5e      	ldr	r3, [pc, #376]	; (800c898 <tcp_receive+0xf18>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	441a      	add	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c72a:	440b      	add	r3, r1
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f340 8089 	ble.w	800c846 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	899b      	ldrh	r3, [r3, #12]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fa fc14 	bl	8006f6c <lwip_htons>
 800c744:	4603      	mov	r3, r0
 800c746:	b2db      	uxtb	r3, r3
 800c748:	f003 0301 	and.w	r3, r3, #1
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d022      	beq.n	800c796 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	899b      	ldrh	r3, [r3, #12]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c760:	b21c      	sxth	r4, r3
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	899b      	ldrh	r3, [r3, #12]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fa fbfd 	bl	8006f6c <lwip_htons>
 800c772:	4603      	mov	r3, r0
 800c774:	b2db      	uxtb	r3, r3
 800c776:	b29b      	uxth	r3, r3
 800c778:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fa fbf4 	bl	8006f6c <lwip_htons>
 800c784:	4603      	mov	r3, r0
 800c786:	b21b      	sxth	r3, r3
 800c788:	4323      	orrs	r3, r4
 800c78a:	b21a      	sxth	r2, r3
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	b292      	uxth	r2, r2
 800c794:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a0:	4413      	add	r3, r2
 800c7a2:	b299      	uxth	r1, r3
 800c7a4:	4b3c      	ldr	r3, [pc, #240]	; (800c898 <tcp_receive+0xf18>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	1a8a      	subs	r2, r1, r2
 800c7b0:	b292      	uxth	r2, r2
 800c7b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685a      	ldr	r2, [r3, #4]
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	891b      	ldrh	r3, [r3, #8]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	f7fb fe52 	bl	800846c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	891c      	ldrh	r4, [r3, #8]
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	899b      	ldrh	r3, [r3, #12]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fa fbc7 	bl	8006f6c <lwip_htons>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	f003 0303 	and.w	r3, r3, #3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d001      	beq.n	800c7ee <tcp_receive+0xe6e>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <tcp_receive+0xe70>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	4423      	add	r3, r4
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	4b2a      	ldr	r3, [pc, #168]	; (800c8a0 <tcp_receive+0xf20>)
 800c7f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7f8:	4b29      	ldr	r3, [pc, #164]	; (800c8a0 <tcp_receive+0xf20>)
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	4b26      	ldr	r3, [pc, #152]	; (800c898 <tcp_receive+0xf18>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	441a      	add	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c80c:	440b      	add	r3, r1
 800c80e:	429a      	cmp	r2, r3
 800c810:	d019      	beq.n	800c846 <tcp_receive+0xec6>
 800c812:	4b24      	ldr	r3, [pc, #144]	; (800c8a4 <tcp_receive+0xf24>)
 800c814:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c818:	4923      	ldr	r1, [pc, #140]	; (800c8a8 <tcp_receive+0xf28>)
 800c81a:	4824      	ldr	r0, [pc, #144]	; (800c8ac <tcp_receive+0xf2c>)
 800c81c:	f006 f8e6 	bl	80129ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c820:	e011      	b.n	800c846 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	63bb      	str	r3, [r7, #56]	; 0x38
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f47f aea4 	bne.w	800c578 <tcp_receive+0xbf8>
 800c830:	e00a      	b.n	800c848 <tcp_receive+0xec8>
                break;
 800c832:	bf00      	nop
 800c834:	e008      	b.n	800c848 <tcp_receive+0xec8>
                break;
 800c836:	bf00      	nop
 800c838:	e006      	b.n	800c848 <tcp_receive+0xec8>
                  break;
 800c83a:	bf00      	nop
 800c83c:	e004      	b.n	800c848 <tcp_receive+0xec8>
                  break;
 800c83e:	bf00      	nop
 800c840:	e002      	b.n	800c848 <tcp_receive+0xec8>
                  break;
 800c842:	bf00      	nop
 800c844:	e000      	b.n	800c848 <tcp_receive+0xec8>
                break;
 800c846:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f001 fa35 	bl	800dcb8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c84e:	e003      	b.n	800c858 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f001 fa31 	bl	800dcb8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c856:	e01a      	b.n	800c88e <tcp_receive+0xf0e>
 800c858:	e019      	b.n	800c88e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c85a:	4b0f      	ldr	r3, [pc, #60]	; (800c898 <tcp_receive+0xf18>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	db0a      	blt.n	800c87e <tcp_receive+0xefe>
 800c868:	4b0b      	ldr	r3, [pc, #44]	; (800c898 <tcp_receive+0xf18>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c874:	440b      	add	r3, r1
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	3301      	adds	r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dd07      	ble.n	800c88e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	8b5b      	ldrh	r3, [r3, #26]
 800c882:	f043 0302 	orr.w	r3, r3, #2
 800c886:	b29a      	uxth	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c88c:	e7ff      	b.n	800c88e <tcp_receive+0xf0e>
 800c88e:	bf00      	nop
 800c890:	3750      	adds	r7, #80	; 0x50
 800c892:	46bd      	mov	sp, r7
 800c894:	bdb0      	pop	{r4, r5, r7, pc}
 800c896:	bf00      	nop
 800c898:	2000d8c8 	.word	0x2000d8c8
 800c89c:	2000d8a8 	.word	0x2000d8a8
 800c8a0:	2000d8d2 	.word	0x2000d8d2
 800c8a4:	08015440 	.word	0x08015440
 800c8a8:	080157e8 	.word	0x080157e8
 800c8ac:	0801548c 	.word	0x0801548c

0800c8b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c8b6:	4b15      	ldr	r3, [pc, #84]	; (800c90c <tcp_get_next_optbyte+0x5c>)
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	b291      	uxth	r1, r2
 800c8be:	4a13      	ldr	r2, [pc, #76]	; (800c90c <tcp_get_next_optbyte+0x5c>)
 800c8c0:	8011      	strh	r1, [r2, #0]
 800c8c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8c4:	4b12      	ldr	r3, [pc, #72]	; (800c910 <tcp_get_next_optbyte+0x60>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <tcp_get_next_optbyte+0x26>
 800c8cc:	4b11      	ldr	r3, [pc, #68]	; (800c914 <tcp_get_next_optbyte+0x64>)
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	88fa      	ldrh	r2, [r7, #6]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d208      	bcs.n	800c8e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <tcp_get_next_optbyte+0x68>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3314      	adds	r3, #20
 800c8dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c8de:	88fb      	ldrh	r3, [r7, #6]
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	e00b      	b.n	800c900 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8e8:	88fb      	ldrh	r3, [r7, #6]
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	4b09      	ldr	r3, [pc, #36]	; (800c914 <tcp_get_next_optbyte+0x64>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <tcp_get_next_optbyte+0x60>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	797b      	ldrb	r3, [r7, #5]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c900:	4618      	mov	r0, r3
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	2000d8c4 	.word	0x2000d8c4
 800c910:	2000d8c0 	.word	0x2000d8c0
 800c914:	2000d8be 	.word	0x2000d8be
 800c918:	2000d8b8 	.word	0x2000d8b8

0800c91c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d106      	bne.n	800c938 <tcp_parseopt+0x1c>
 800c92a:	4b32      	ldr	r3, [pc, #200]	; (800c9f4 <tcp_parseopt+0xd8>)
 800c92c:	f240 727d 	movw	r2, #1917	; 0x77d
 800c930:	4931      	ldr	r1, [pc, #196]	; (800c9f8 <tcp_parseopt+0xdc>)
 800c932:	4832      	ldr	r0, [pc, #200]	; (800c9fc <tcp_parseopt+0xe0>)
 800c934:	f006 f85a 	bl	80129ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c938:	4b31      	ldr	r3, [pc, #196]	; (800ca00 <tcp_parseopt+0xe4>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d055      	beq.n	800c9ec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c940:	4b30      	ldr	r3, [pc, #192]	; (800ca04 <tcp_parseopt+0xe8>)
 800c942:	2200      	movs	r2, #0
 800c944:	801a      	strh	r2, [r3, #0]
 800c946:	e045      	b.n	800c9d4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c948:	f7ff ffb2 	bl	800c8b0 <tcp_get_next_optbyte>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	2b02      	cmp	r3, #2
 800c954:	d006      	beq.n	800c964 <tcp_parseopt+0x48>
 800c956:	2b02      	cmp	r3, #2
 800c958:	dc2b      	bgt.n	800c9b2 <tcp_parseopt+0x96>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d041      	beq.n	800c9e2 <tcp_parseopt+0xc6>
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d127      	bne.n	800c9b2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c962:	e037      	b.n	800c9d4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c964:	f7ff ffa4 	bl	800c8b0 <tcp_get_next_optbyte>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d13b      	bne.n	800c9e6 <tcp_parseopt+0xca>
 800c96e:	4b25      	ldr	r3, [pc, #148]	; (800ca04 <tcp_parseopt+0xe8>)
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	4a22      	ldr	r2, [pc, #136]	; (800ca00 <tcp_parseopt+0xe4>)
 800c976:	8812      	ldrh	r2, [r2, #0]
 800c978:	4293      	cmp	r3, r2
 800c97a:	da34      	bge.n	800c9e6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c97c:	f7ff ff98 	bl	800c8b0 <tcp_get_next_optbyte>
 800c980:	4603      	mov	r3, r0
 800c982:	b29b      	uxth	r3, r3
 800c984:	021b      	lsls	r3, r3, #8
 800c986:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c988:	f7ff ff92 	bl	800c8b0 <tcp_get_next_optbyte>
 800c98c:	4603      	mov	r3, r0
 800c98e:	b29a      	uxth	r2, r3
 800c990:	89bb      	ldrh	r3, [r7, #12]
 800c992:	4313      	orrs	r3, r2
 800c994:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c996:	89bb      	ldrh	r3, [r7, #12]
 800c998:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c99c:	d804      	bhi.n	800c9a8 <tcp_parseopt+0x8c>
 800c99e:	89bb      	ldrh	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <tcp_parseopt+0x8c>
 800c9a4:	89ba      	ldrh	r2, [r7, #12]
 800c9a6:	e001      	b.n	800c9ac <tcp_parseopt+0x90>
 800c9a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c9b0:	e010      	b.n	800c9d4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c9b2:	f7ff ff7d 	bl	800c8b0 <tcp_get_next_optbyte>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c9ba:	7afb      	ldrb	r3, [r7, #11]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d914      	bls.n	800c9ea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c9c0:	7afb      	ldrb	r3, [r7, #11]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ca04 <tcp_parseopt+0xe8>)
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b02      	subs	r3, #2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ca04 <tcp_parseopt+0xe8>)
 800c9d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <tcp_parseopt+0xe8>)
 800c9d6:	881a      	ldrh	r2, [r3, #0]
 800c9d8:	4b09      	ldr	r3, [pc, #36]	; (800ca00 <tcp_parseopt+0xe4>)
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d3b3      	bcc.n	800c948 <tcp_parseopt+0x2c>
 800c9e0:	e004      	b.n	800c9ec <tcp_parseopt+0xd0>
          return;
 800c9e2:	bf00      	nop
 800c9e4:	e002      	b.n	800c9ec <tcp_parseopt+0xd0>
            return;
 800c9e6:	bf00      	nop
 800c9e8:	e000      	b.n	800c9ec <tcp_parseopt+0xd0>
            return;
 800c9ea:	bf00      	nop
      }
    }
  }
}
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08015440 	.word	0x08015440
 800c9f8:	080158a4 	.word	0x080158a4
 800c9fc:	0801548c 	.word	0x0801548c
 800ca00:	2000d8bc 	.word	0x2000d8bc
 800ca04:	2000d8c4 	.word	0x2000d8c4

0800ca08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ca0c:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <tcp_trigger_input_pcb_close+0x1c>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	f043 0310 	orr.w	r3, r3, #16
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	4b03      	ldr	r3, [pc, #12]	; (800ca24 <tcp_trigger_input_pcb_close+0x1c>)
 800ca18:	701a      	strb	r2, [r3, #0]
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	2000d8d5 	.word	0x2000d8d5

0800ca28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00a      	beq.n	800ca50 <tcp_route+0x28>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	7a1b      	ldrb	r3, [r3, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d006      	beq.n	800ca50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	7a1b      	ldrb	r3, [r3, #8]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fb fb2e 	bl	80080a8 <netif_get_by_index>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	e003      	b.n	800ca58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f003 f967 	bl	800fd24 <ip4_route>
 800ca56:	4603      	mov	r3, r0
  }
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d105      	bne.n	800ca82 <tcp_create_segment+0x22>
 800ca76:	4b45      	ldr	r3, [pc, #276]	; (800cb8c <tcp_create_segment+0x12c>)
 800ca78:	22a3      	movs	r2, #163	; 0xa3
 800ca7a:	4945      	ldr	r1, [pc, #276]	; (800cb90 <tcp_create_segment+0x130>)
 800ca7c:	4845      	ldr	r0, [pc, #276]	; (800cb94 <tcp_create_segment+0x134>)
 800ca7e:	f005 ffb5 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d105      	bne.n	800ca94 <tcp_create_segment+0x34>
 800ca88:	4b40      	ldr	r3, [pc, #256]	; (800cb8c <tcp_create_segment+0x12c>)
 800ca8a:	22a4      	movs	r2, #164	; 0xa4
 800ca8c:	4942      	ldr	r1, [pc, #264]	; (800cb98 <tcp_create_segment+0x138>)
 800ca8e:	4841      	ldr	r0, [pc, #260]	; (800cb94 <tcp_create_segment+0x134>)
 800ca90:	f005 ffac 	bl	80129ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	f003 0304 	and.w	r3, r3, #4
 800caa0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800caa2:	22a8      	movs	r2, #168	; 0xa8
 800caa4:	4939      	ldr	r1, [pc, #228]	; (800cb8c <tcp_create_segment+0x12c>)
 800caa6:	2003      	movs	r0, #3
 800caa8:	f7fa ffe8 	bl	8007a7c <memp_malloc_fn>
 800caac:	6138      	str	r0, [r7, #16]
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d104      	bne.n	800cabe <tcp_create_segment+0x5e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cab4:	68b8      	ldr	r0, [r7, #8]
 800cab6:	f7fb fe5f 	bl	8008778 <pbuf_free>
    return NULL;
 800caba:	2300      	movs	r3, #0
 800cabc:	e061      	b.n	800cb82 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cac4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	891a      	ldrh	r2, [r3, #8]
 800cad6:	7dfb      	ldrb	r3, [r7, #23]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	429a      	cmp	r2, r3
 800cadc:	d205      	bcs.n	800caea <tcp_create_segment+0x8a>
 800cade:	4b2b      	ldr	r3, [pc, #172]	; (800cb8c <tcp_create_segment+0x12c>)
 800cae0:	22b0      	movs	r2, #176	; 0xb0
 800cae2:	492e      	ldr	r1, [pc, #184]	; (800cb9c <tcp_create_segment+0x13c>)
 800cae4:	482b      	ldr	r0, [pc, #172]	; (800cb94 <tcp_create_segment+0x134>)
 800cae6:	f005 ff81 	bl	80129ec <iprintf>
  seg->len = p->tot_len - optlen;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	891a      	ldrh	r2, [r3, #8]
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cafa:	2114      	movs	r1, #20
 800cafc:	68b8      	ldr	r0, [r7, #8]
 800cafe:	f7fb fda5 	bl	800864c <pbuf_add_header>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d004      	beq.n	800cb12 <tcp_create_segment+0xb2>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cb08:	6938      	ldr	r0, [r7, #16]
 800cb0a:	f7fd f8b8 	bl	8009c7e <tcp_seg_free>
    return NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e037      	b.n	800cb82 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	8ada      	ldrh	r2, [r3, #22]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	68dc      	ldr	r4, [r3, #12]
 800cb24:	4610      	mov	r0, r2
 800cb26:	f7fa fa21 	bl	8006f6c <lwip_htons>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8b1a      	ldrh	r2, [r3, #24]
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	68dc      	ldr	r4, [r3, #12]
 800cb36:	4610      	mov	r0, r2
 800cb38:	f7fa fa18 	bl	8006f6c <lwip_htons>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	68dc      	ldr	r4, [r3, #12]
 800cb44:	6838      	ldr	r0, [r7, #0]
 800cb46:	f7fa fa26 	bl	8006f96 <lwip_htonl>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
 800cb50:	089b      	lsrs	r3, r3, #2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	3305      	adds	r3, #5
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	031b      	lsls	r3, r3, #12
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	4313      	orrs	r3, r2
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	68dc      	ldr	r4, [r3, #12]
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	f7fa f9fe 	bl	8006f6c <lwip_htons>
 800cb70:	4603      	mov	r3, r0
 800cb72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	749a      	strb	r2, [r3, #18]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	74da      	strb	r2, [r3, #19]
  return seg;
 800cb80:	693b      	ldr	r3, [r7, #16]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd90      	pop	{r4, r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	080158c0 	.word	0x080158c0
 800cb90:	080158f4 	.word	0x080158f4
 800cb94:	08015914 	.word	0x08015914
 800cb98:	0801593c 	.word	0x0801593c
 800cb9c:	08015960 	.word	0x08015960

0800cba0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cba0:	b590      	push	{r4, r7, lr}
 800cba2:	b08b      	sub	sp, #44	; 0x2c
 800cba4:	af02      	add	r7, sp, #8
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	61fb      	str	r3, [r7, #28]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d106      	bne.n	800cbcc <tcp_split_unsent_seg+0x2c>
 800cbbe:	4b95      	ldr	r3, [pc, #596]	; (800ce14 <tcp_split_unsent_seg+0x274>)
 800cbc0:	f240 324b 	movw	r2, #843	; 0x34b
 800cbc4:	4994      	ldr	r1, [pc, #592]	; (800ce18 <tcp_split_unsent_seg+0x278>)
 800cbc6:	4895      	ldr	r0, [pc, #596]	; (800ce1c <tcp_split_unsent_seg+0x27c>)
 800cbc8:	f005 ff10 	bl	80129ec <iprintf>

  useg = pcb->unsent;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d102      	bne.n	800cbde <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cbd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbdc:	e116      	b.n	800ce0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cbde:	887b      	ldrh	r3, [r7, #2]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d109      	bne.n	800cbf8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cbe4:	4b8b      	ldr	r3, [pc, #556]	; (800ce14 <tcp_split_unsent_seg+0x274>)
 800cbe6:	f240 3253 	movw	r2, #851	; 0x353
 800cbea:	498d      	ldr	r1, [pc, #564]	; (800ce20 <tcp_split_unsent_seg+0x280>)
 800cbec:	488b      	ldr	r0, [pc, #556]	; (800ce1c <tcp_split_unsent_seg+0x27c>)
 800cbee:	f005 fefd 	bl	80129ec <iprintf>
    return ERR_VAL;
 800cbf2:	f06f 0305 	mvn.w	r3, #5
 800cbf6:	e109      	b.n	800ce0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	891b      	ldrh	r3, [r3, #8]
 800cbfc:	887a      	ldrh	r2, [r7, #2]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d301      	bcc.n	800cc06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	e102      	b.n	800ce0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc0a:	887a      	ldrh	r2, [r7, #2]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d906      	bls.n	800cc1e <tcp_split_unsent_seg+0x7e>
 800cc10:	4b80      	ldr	r3, [pc, #512]	; (800ce14 <tcp_split_unsent_seg+0x274>)
 800cc12:	f240 325b 	movw	r2, #859	; 0x35b
 800cc16:	4983      	ldr	r1, [pc, #524]	; (800ce24 <tcp_split_unsent_seg+0x284>)
 800cc18:	4880      	ldr	r0, [pc, #512]	; (800ce1c <tcp_split_unsent_seg+0x27c>)
 800cc1a:	f005 fee7 	bl	80129ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	891b      	ldrh	r3, [r3, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <tcp_split_unsent_seg+0x94>
 800cc26:	4b7b      	ldr	r3, [pc, #492]	; (800ce14 <tcp_split_unsent_seg+0x274>)
 800cc28:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cc2c:	497e      	ldr	r1, [pc, #504]	; (800ce28 <tcp_split_unsent_seg+0x288>)
 800cc2e:	487b      	ldr	r0, [pc, #492]	; (800ce1c <tcp_split_unsent_seg+0x27c>)
 800cc30:	f005 fedc 	bl	80129ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	7a9b      	ldrb	r3, [r3, #10]
 800cc38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	891a      	ldrh	r2, [r3, #8]
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	89bb      	ldrh	r3, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc5e:	4619      	mov	r1, r3
 800cc60:	2036      	movs	r0, #54	; 0x36
 800cc62:	f7fb fa9d 	bl	80081a0 <pbuf_alloc>
 800cc66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f000 80b7 	beq.w	800cdde <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	891a      	ldrh	r2, [r3, #8]
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	891b      	ldrh	r3, [r3, #8]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	887b      	ldrh	r3, [r7, #2]
 800cc80:	4413      	add	r3, r2
 800cc82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	6858      	ldr	r0, [r3, #4]
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	18d1      	adds	r1, r2, r3
 800cc90:	897b      	ldrh	r3, [r7, #10]
 800cc92:	89ba      	ldrh	r2, [r7, #12]
 800cc94:	f7fb ff6a 	bl	8008b6c <pbuf_copy_partial>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	89bb      	ldrh	r3, [r7, #12]
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	f040 809f 	bne.w	800cde2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	899b      	ldrh	r3, [r3, #12]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fa f95d 	bl	8006f6c <lwip_htons>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ccc0:	7efb      	ldrb	r3, [r7, #27]
 800ccc2:	f003 0308 	and.w	r3, r3, #8
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d007      	beq.n	800ccda <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ccca:	7efb      	ldrb	r3, [r7, #27]
 800cccc:	f023 0308 	bic.w	r3, r3, #8
 800ccd0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ccd2:	7ebb      	ldrb	r3, [r7, #26]
 800ccd4:	f043 0308 	orr.w	r3, r3, #8
 800ccd8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ccda:	7efb      	ldrb	r3, [r7, #27]
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d007      	beq.n	800ccf4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cce4:	7efb      	ldrb	r3, [r7, #27]
 800cce6:	f023 0301 	bic.w	r3, r3, #1
 800ccea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ccec:	7ebb      	ldrb	r3, [r7, #26]
 800ccee:	f043 0301 	orr.w	r3, r3, #1
 800ccf2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fa f94b 	bl	8006f96 <lwip_htonl>
 800cd00:	4602      	mov	r2, r0
 800cd02:	887b      	ldrh	r3, [r7, #2]
 800cd04:	18d1      	adds	r1, r2, r3
 800cd06:	7eba      	ldrb	r2, [r7, #26]
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	6939      	ldr	r1, [r7, #16]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff fea5 	bl	800ca60 <tcp_create_segment>
 800cd16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d063      	beq.n	800cde6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fb fdb0 	bl	8008888 <pbuf_clen>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd32:	1a9b      	subs	r3, r3, r2
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	6858      	ldr	r0, [r3, #4]
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	891a      	ldrh	r2, [r3, #8]
 800cd46:	89bb      	ldrh	r3, [r7, #12]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	f7fb fb8d 	bl	800846c <pbuf_realloc>
  useg->len -= remainder;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	891a      	ldrh	r2, [r3, #8]
 800cd56:	89bb      	ldrh	r3, [r7, #12]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	899b      	ldrh	r3, [r3, #12]
 800cd66:	b29c      	uxth	r4, r3
 800cd68:	7efb      	ldrb	r3, [r7, #27]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fa f8fd 	bl	8006f6c <lwip_htons>
 800cd72:	4603      	mov	r3, r0
 800cd74:	461a      	mov	r2, r3
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	4322      	orrs	r2, r4
 800cd7c:	b292      	uxth	r2, r2
 800cd7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fb fd7f 	bl	8008888 <pbuf_clen>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd94:	4413      	add	r3, r2
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fb fd70 	bl	8008888 <pbuf_clen>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	461a      	mov	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdb2:	4413      	add	r3, r2
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	69fa      	ldr	r2, [r7, #28]
 800cdc8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d103      	bne.n	800cdda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	e016      	b.n	800ce0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cdde:	bf00      	nop
 800cde0:	e002      	b.n	800cde8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cde2:	bf00      	nop
 800cde4:	e000      	b.n	800cde8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cde6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d006      	beq.n	800cdfc <tcp_split_unsent_seg+0x25c>
 800cdee:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <tcp_split_unsent_seg+0x274>)
 800cdf0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cdf4:	490d      	ldr	r1, [pc, #52]	; (800ce2c <tcp_split_unsent_seg+0x28c>)
 800cdf6:	4809      	ldr	r0, [pc, #36]	; (800ce1c <tcp_split_unsent_seg+0x27c>)
 800cdf8:	f005 fdf8 	bl	80129ec <iprintf>
  if (p != NULL) {
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d002      	beq.n	800ce08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ce02:	6938      	ldr	r0, [r7, #16]
 800ce04:	f7fb fcb8 	bl	8008778 <pbuf_free>
  }

  return ERR_MEM;
 800ce08:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3724      	adds	r7, #36	; 0x24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd90      	pop	{r4, r7, pc}
 800ce14:	080158c0 	.word	0x080158c0
 800ce18:	08015c54 	.word	0x08015c54
 800ce1c:	08015914 	.word	0x08015914
 800ce20:	08015c78 	.word	0x08015c78
 800ce24:	08015c9c 	.word	0x08015c9c
 800ce28:	08015cac 	.word	0x08015cac
 800ce2c:	08015cbc 	.word	0x08015cbc

0800ce30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ce30:	b590      	push	{r4, r7, lr}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d106      	bne.n	800ce4c <tcp_send_fin+0x1c>
 800ce3e:	4b21      	ldr	r3, [pc, #132]	; (800cec4 <tcp_send_fin+0x94>)
 800ce40:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ce44:	4920      	ldr	r1, [pc, #128]	; (800cec8 <tcp_send_fin+0x98>)
 800ce46:	4821      	ldr	r0, [pc, #132]	; (800cecc <tcp_send_fin+0x9c>)
 800ce48:	f005 fdd0 	bl	80129ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d02e      	beq.n	800ceb2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce58:	60fb      	str	r3, [r7, #12]
 800ce5a:	e002      	b.n	800ce62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1f8      	bne.n	800ce5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	899b      	ldrh	r3, [r3, #12]
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fa f87a 	bl	8006f6c <lwip_htons>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	f003 0307 	and.w	r3, r3, #7
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d116      	bne.n	800ceb2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	899b      	ldrh	r3, [r3, #12]
 800ce8a:	b29c      	uxth	r4, r3
 800ce8c:	2001      	movs	r0, #1
 800ce8e:	f7fa f86d 	bl	8006f6c <lwip_htons>
 800ce92:	4603      	mov	r3, r0
 800ce94:	461a      	mov	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	4322      	orrs	r2, r4
 800ce9c:	b292      	uxth	r2, r2
 800ce9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	8b5b      	ldrh	r3, [r3, #26]
 800cea4:	f043 0320 	orr.w	r3, r3, #32
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e004      	b.n	800cebc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ceb2:	2101      	movs	r1, #1
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f80b 	bl	800ced0 <tcp_enqueue_flags>
 800ceba:	4603      	mov	r3, r0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd90      	pop	{r4, r7, pc}
 800cec4:	080158c0 	.word	0x080158c0
 800cec8:	08015cc8 	.word	0x08015cc8
 800cecc:	08015914 	.word	0x08015914

0800ced0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08a      	sub	sp, #40	; 0x28
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	f003 0303 	and.w	r3, r3, #3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d106      	bne.n	800cefc <tcp_enqueue_flags+0x2c>
 800ceee:	4b67      	ldr	r3, [pc, #412]	; (800d08c <tcp_enqueue_flags+0x1bc>)
 800cef0:	f240 4211 	movw	r2, #1041	; 0x411
 800cef4:	4966      	ldr	r1, [pc, #408]	; (800d090 <tcp_enqueue_flags+0x1c0>)
 800cef6:	4867      	ldr	r0, [pc, #412]	; (800d094 <tcp_enqueue_flags+0x1c4>)
 800cef8:	f005 fd78 	bl	80129ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <tcp_enqueue_flags+0x40>
 800cf02:	4b62      	ldr	r3, [pc, #392]	; (800d08c <tcp_enqueue_flags+0x1bc>)
 800cf04:	f240 4213 	movw	r2, #1043	; 0x413
 800cf08:	4963      	ldr	r1, [pc, #396]	; (800d098 <tcp_enqueue_flags+0x1c8>)
 800cf0a:	4862      	ldr	r0, [pc, #392]	; (800d094 <tcp_enqueue_flags+0x1c4>)
 800cf0c:	f005 fd6e 	bl	80129ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	f003 0302 	and.w	r3, r3, #2
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf1e:	7ffb      	ldrb	r3, [r7, #31]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	f003 0304 	and.w	r3, r3, #4
 800cf28:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf32:	4619      	mov	r1, r3
 800cf34:	2036      	movs	r0, #54	; 0x36
 800cf36:	f7fb f933 	bl	80081a0 <pbuf_alloc>
 800cf3a:	6138      	str	r0, [r7, #16]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	8b5b      	ldrh	r3, [r3, #26]
 800cf46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf50:	f04f 33ff 	mov.w	r3, #4294967295
 800cf54:	e095      	b.n	800d082 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	895a      	ldrh	r2, [r3, #10]
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d206      	bcs.n	800cf70 <tcp_enqueue_flags+0xa0>
 800cf62:	4b4a      	ldr	r3, [pc, #296]	; (800d08c <tcp_enqueue_flags+0x1bc>)
 800cf64:	f240 4239 	movw	r2, #1081	; 0x439
 800cf68:	494c      	ldr	r1, [pc, #304]	; (800d09c <tcp_enqueue_flags+0x1cc>)
 800cf6a:	484a      	ldr	r0, [pc, #296]	; (800d094 <tcp_enqueue_flags+0x1c4>)
 800cf6c:	f005 fd3e 	bl	80129ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cf74:	78fa      	ldrb	r2, [r7, #3]
 800cf76:	7ffb      	ldrb	r3, [r7, #31]
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	6939      	ldr	r1, [r7, #16]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff fd6e 	bl	800ca60 <tcp_create_segment>
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d109      	bne.n	800cfa0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	8b5b      	ldrh	r3, [r3, #26]
 800cf90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9e:	e070      	b.n	800d082 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f003 0303 	and.w	r3, r3, #3
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d006      	beq.n	800cfba <tcp_enqueue_flags+0xea>
 800cfac:	4b37      	ldr	r3, [pc, #220]	; (800d08c <tcp_enqueue_flags+0x1bc>)
 800cfae:	f240 4242 	movw	r2, #1090	; 0x442
 800cfb2:	493b      	ldr	r1, [pc, #236]	; (800d0a0 <tcp_enqueue_flags+0x1d0>)
 800cfb4:	4837      	ldr	r0, [pc, #220]	; (800d094 <tcp_enqueue_flags+0x1c4>)
 800cfb6:	f005 fd19 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	891b      	ldrh	r3, [r3, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d006      	beq.n	800cfd0 <tcp_enqueue_flags+0x100>
 800cfc2:	4b32      	ldr	r3, [pc, #200]	; (800d08c <tcp_enqueue_flags+0x1bc>)
 800cfc4:	f240 4243 	movw	r2, #1091	; 0x443
 800cfc8:	4936      	ldr	r1, [pc, #216]	; (800d0a4 <tcp_enqueue_flags+0x1d4>)
 800cfca:	4832      	ldr	r0, [pc, #200]	; (800d094 <tcp_enqueue_flags+0x1c4>)
 800cfcc:	f005 fd0e 	bl	80129ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d103      	bne.n	800cfe0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	66da      	str	r2, [r3, #108]	; 0x6c
 800cfde:	e00d      	b.n	800cffc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe4:	61bb      	str	r3, [r7, #24]
 800cfe6:	e002      	b.n	800cfee <tcp_enqueue_flags+0x11e>
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	61bb      	str	r3, [r7, #24]
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1f8      	bne.n	800cfe8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	f003 0302 	and.w	r3, r3, #2
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <tcp_enqueue_flags+0x148>
 800d00e:	78fb      	ldrb	r3, [r7, #3]
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	2b00      	cmp	r3, #0
 800d016:	d004      	beq.n	800d022 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d01c:	1c5a      	adds	r2, r3, #1
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d022:	78fb      	ldrb	r3, [r7, #3]
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d006      	beq.n	800d03a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	8b5b      	ldrh	r3, [r3, #26]
 800d030:	f043 0320 	orr.w	r3, r3, #32
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fb fc22 	bl	8008888 <pbuf_clen>
 800d044:	4603      	mov	r3, r0
 800d046:	461a      	mov	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d04e:	4413      	add	r3, r2
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00e      	beq.n	800d080 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10a      	bne.n	800d080 <tcp_enqueue_flags+0x1b0>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d106      	bne.n	800d080 <tcp_enqueue_flags+0x1b0>
 800d072:	4b06      	ldr	r3, [pc, #24]	; (800d08c <tcp_enqueue_flags+0x1bc>)
 800d074:	f240 4265 	movw	r2, #1125	; 0x465
 800d078:	490b      	ldr	r1, [pc, #44]	; (800d0a8 <tcp_enqueue_flags+0x1d8>)
 800d07a:	4806      	ldr	r0, [pc, #24]	; (800d094 <tcp_enqueue_flags+0x1c4>)
 800d07c:	f005 fcb6 	bl	80129ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	080158c0 	.word	0x080158c0
 800d090:	08015ce4 	.word	0x08015ce4
 800d094:	08015914 	.word	0x08015914
 800d098:	08015d3c 	.word	0x08015d3c
 800d09c:	08015d5c 	.word	0x08015d5c
 800d0a0:	08015d98 	.word	0x08015d98
 800d0a4:	08015db0 	.word	0x08015db0
 800d0a8:	08015ddc 	.word	0x08015ddc

0800d0ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d0ac:	b5b0      	push	{r4, r5, r7, lr}
 800d0ae:	b08a      	sub	sp, #40	; 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d106      	bne.n	800d0c8 <tcp_output+0x1c>
 800d0ba:	4b8a      	ldr	r3, [pc, #552]	; (800d2e4 <tcp_output+0x238>)
 800d0bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d0c0:	4989      	ldr	r1, [pc, #548]	; (800d2e8 <tcp_output+0x23c>)
 800d0c2:	488a      	ldr	r0, [pc, #552]	; (800d2ec <tcp_output+0x240>)
 800d0c4:	f005 fc92 	bl	80129ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	7d1b      	ldrb	r3, [r3, #20]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d106      	bne.n	800d0de <tcp_output+0x32>
 800d0d0:	4b84      	ldr	r3, [pc, #528]	; (800d2e4 <tcp_output+0x238>)
 800d0d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d0d6:	4986      	ldr	r1, [pc, #536]	; (800d2f0 <tcp_output+0x244>)
 800d0d8:	4884      	ldr	r0, [pc, #528]	; (800d2ec <tcp_output+0x240>)
 800d0da:	f005 fc87 	bl	80129ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d0de:	4b85      	ldr	r3, [pc, #532]	; (800d2f4 <tcp_output+0x248>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d101      	bne.n	800d0ec <tcp_output+0x40>
    return ERR_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	e1ce      	b.n	800d48a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	bf28      	it	cs
 800d0fc:	4613      	movcs	r3, r2
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d106:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10b      	bne.n	800d126 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	8b5b      	ldrh	r3, [r3, #26]
 800d112:	f003 0302 	and.w	r3, r3, #2
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 81aa 	beq.w	800d470 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fdcb 	bl	800dcb8 <tcp_send_empty_ack>
 800d122:	4603      	mov	r3, r0
 800d124:	e1b1      	b.n	800d48a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d126:	6879      	ldr	r1, [r7, #4]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3304      	adds	r3, #4
 800d12c:	461a      	mov	r2, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7ff fc7a 	bl	800ca28 <tcp_route>
 800d134:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <tcp_output+0x96>
    return ERR_RTE;
 800d13c:	f06f 0303 	mvn.w	r3, #3
 800d140:	e1a3      	b.n	800d48a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d003      	beq.n	800d150 <tcp_output+0xa4>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d111      	bne.n	800d174 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <tcp_output+0xb0>
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	3304      	adds	r3, #4
 800d15a:	e000      	b.n	800d15e <tcp_output+0xb2>
 800d15c:	2300      	movs	r3, #0
 800d15e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <tcp_output+0xc0>
      return ERR_RTE;
 800d166:	f06f 0303 	mvn.w	r3, #3
 800d16a:	e18e      	b.n	800d48a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f9 ff0b 	bl	8006f96 <lwip_htonl>
 800d180:	4602      	mov	r2, r0
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d18a:	8912      	ldrh	r2, [r2, #8]
 800d18c:	4413      	add	r3, r2
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	429a      	cmp	r2, r3
 800d192:	d227      	bcs.n	800d1e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d19a:	461a      	mov	r2, r3
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d114      	bne.n	800d1cc <tcp_output+0x120>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d110      	bne.n	800d1cc <tcp_output+0x120>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10b      	bne.n	800d1cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	8b5b      	ldrh	r3, [r3, #26]
 800d1d0:	f003 0302 	and.w	r3, r3, #2
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 814d 	beq.w	800d474 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fd6c 	bl	800dcb8 <tcp_send_empty_ack>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	e152      	b.n	800d48a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 811c 	beq.w	800d432 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d1fa:	e002      	b.n	800d202 <tcp_output+0x156>
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	623b      	str	r3, [r7, #32]
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1f8      	bne.n	800d1fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d20a:	e112      	b.n	800d432 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	899b      	ldrh	r3, [r3, #12]
 800d212:	b29b      	uxth	r3, r3
 800d214:	4618      	mov	r0, r3
 800d216:	f7f9 fea9 	bl	8006f6c <lwip_htons>
 800d21a:	4603      	mov	r3, r0
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	f003 0304 	and.w	r3, r3, #4
 800d222:	2b00      	cmp	r3, #0
 800d224:	d006      	beq.n	800d234 <tcp_output+0x188>
 800d226:	4b2f      	ldr	r3, [pc, #188]	; (800d2e4 <tcp_output+0x238>)
 800d228:	f240 5236 	movw	r2, #1334	; 0x536
 800d22c:	4932      	ldr	r1, [pc, #200]	; (800d2f8 <tcp_output+0x24c>)
 800d22e:	482f      	ldr	r0, [pc, #188]	; (800d2ec <tcp_output+0x240>)
 800d230:	f005 fbdc 	bl	80129ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d01f      	beq.n	800d27c <tcp_output+0x1d0>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	8b5b      	ldrh	r3, [r3, #26]
 800d240:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d244:	2b00      	cmp	r3, #0
 800d246:	d119      	bne.n	800d27c <tcp_output+0x1d0>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00b      	beq.n	800d268 <tcp_output+0x1bc>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d110      	bne.n	800d27c <tcp_output+0x1d0>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d25e:	891a      	ldrh	r2, [r3, #8]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d264:	429a      	cmp	r2, r3
 800d266:	d209      	bcs.n	800d27c <tcp_output+0x1d0>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <tcp_output+0x1d0>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d278:	2b08      	cmp	r3, #8
 800d27a:	d901      	bls.n	800d280 <tcp_output+0x1d4>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e000      	b.n	800d282 <tcp_output+0x1d6>
 800d280:	2300      	movs	r3, #0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d106      	bne.n	800d294 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	8b5b      	ldrh	r3, [r3, #26]
 800d28a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 80e4 	beq.w	800d45c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7d1b      	ldrb	r3, [r3, #20]
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d00d      	beq.n	800d2b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	899b      	ldrh	r3, [r3, #12]
 800d2a2:	b29c      	uxth	r4, r3
 800d2a4:	2010      	movs	r0, #16
 800d2a6:	f7f9 fe61 	bl	8006f6c <lwip_htons>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	4322      	orrs	r2, r4
 800d2b4:	b292      	uxth	r2, r2
 800d2b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	6879      	ldr	r1, [r7, #4]
 800d2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2be:	f000 f909 	bl	800d4d4 <tcp_output_segment>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d016      	beq.n	800d2fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	8b5b      	ldrh	r3, [r3, #26]
 800d2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	835a      	strh	r2, [r3, #26]
      return err;
 800d2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e0:	e0d3      	b.n	800d48a <tcp_output+0x3de>
 800d2e2:	bf00      	nop
 800d2e4:	080158c0 	.word	0x080158c0
 800d2e8:	08015e04 	.word	0x08015e04
 800d2ec:	08015914 	.word	0x08015914
 800d2f0:	08015e1c 	.word	0x08015e1c
 800d2f4:	2000d8dc 	.word	0x2000d8dc
 800d2f8:	08015e44 	.word	0x08015e44
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7d1b      	ldrb	r3, [r3, #20]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d006      	beq.n	800d31a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	8b5b      	ldrh	r3, [r3, #26]
 800d310:	f023 0303 	bic.w	r3, r3, #3
 800d314:	b29a      	uxth	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	f7f9 fe38 	bl	8006f96 <lwip_htonl>
 800d326:	4604      	mov	r4, r0
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	891b      	ldrh	r3, [r3, #8]
 800d32c:	461d      	mov	r5, r3
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	899b      	ldrh	r3, [r3, #12]
 800d334:	b29b      	uxth	r3, r3
 800d336:	4618      	mov	r0, r3
 800d338:	f7f9 fe18 	bl	8006f6c <lwip_htons>
 800d33c:	4603      	mov	r3, r0
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	f003 0303 	and.w	r3, r3, #3
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <tcp_output+0x2a0>
 800d348:	2301      	movs	r3, #1
 800d34a:	e000      	b.n	800d34e <tcp_output+0x2a2>
 800d34c:	2300      	movs	r3, #0
 800d34e:	442b      	add	r3, r5
 800d350:	4423      	add	r3, r4
 800d352:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	da02      	bge.n	800d366 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	891b      	ldrh	r3, [r3, #8]
 800d36a:	461c      	mov	r4, r3
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	899b      	ldrh	r3, [r3, #12]
 800d372:	b29b      	uxth	r3, r3
 800d374:	4618      	mov	r0, r3
 800d376:	f7f9 fdf9 	bl	8006f6c <lwip_htons>
 800d37a:	4603      	mov	r3, r0
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <tcp_output+0x2de>
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <tcp_output+0x2e0>
 800d38a:	2300      	movs	r3, #0
 800d38c:	4423      	add	r3, r4
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d049      	beq.n	800d426 <tcp_output+0x37a>
      seg->next = NULL;
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d105      	bne.n	800d3ac <tcp_output+0x300>
        pcb->unacked = seg;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3a4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a8:	623b      	str	r3, [r7, #32]
 800d3aa:	e03f      	b.n	800d42c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7f9 fdef 	bl	8006f96 <lwip_htonl>
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f9 fde8 	bl	8006f96 <lwip_htonl>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	1ae3      	subs	r3, r4, r3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	da24      	bge.n	800d418 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3370      	adds	r3, #112	; 0x70
 800d3d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d3d4:	e002      	b.n	800d3dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d011      	beq.n	800d408 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f9 fdd2 	bl	8006f96 <lwip_htonl>
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7f9 fdcb 	bl	8006f96 <lwip_htonl>
 800d400:	4603      	mov	r3, r0
 800d402:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d404:	2b00      	cmp	r3, #0
 800d406:	dbe6      	blt.n	800d3d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e009      	b.n	800d42c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d418:	6a3b      	ldr	r3, [r7, #32]
 800d41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	623b      	str	r3, [r7, #32]
 800d424:	e002      	b.n	800d42c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d428:	f7fc fc29 	bl	8009c7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d430:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d434:	2b00      	cmp	r3, #0
 800d436:	d012      	beq.n	800d45e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7f9 fda9 	bl	8006f96 <lwip_htonl>
 800d444:	4602      	mov	r2, r0
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d44e:	8912      	ldrh	r2, [r2, #8]
 800d450:	4413      	add	r3, r2
  while (seg != NULL &&
 800d452:	69ba      	ldr	r2, [r7, #24]
 800d454:	429a      	cmp	r2, r3
 800d456:	f4bf aed9 	bcs.w	800d20c <tcp_output+0x160>
 800d45a:	e000      	b.n	800d45e <tcp_output+0x3b2>
      break;
 800d45c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d462:	2b00      	cmp	r3, #0
 800d464:	d108      	bne.n	800d478 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d46e:	e004      	b.n	800d47a <tcp_output+0x3ce>
    goto output_done;
 800d470:	bf00      	nop
 800d472:	e002      	b.n	800d47a <tcp_output+0x3ce>
    goto output_done;
 800d474:	bf00      	nop
 800d476:	e000      	b.n	800d47a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d478:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	8b5b      	ldrh	r3, [r3, #26]
 800d47e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d482:	b29a      	uxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3728      	adds	r7, #40	; 0x28
 800d48e:	46bd      	mov	sp, r7
 800d490:	bdb0      	pop	{r4, r5, r7, pc}
 800d492:	bf00      	nop

0800d494 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d106      	bne.n	800d4b0 <tcp_output_segment_busy+0x1c>
 800d4a2:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <tcp_output_segment_busy+0x34>)
 800d4a4:	f240 529a 	movw	r2, #1434	; 0x59a
 800d4a8:	4908      	ldr	r1, [pc, #32]	; (800d4cc <tcp_output_segment_busy+0x38>)
 800d4aa:	4809      	ldr	r0, [pc, #36]	; (800d4d0 <tcp_output_segment_busy+0x3c>)
 800d4ac:	f005 fa9e 	bl	80129ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	7b9b      	ldrb	r3, [r3, #14]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d001      	beq.n	800d4be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d4be:	2300      	movs	r3, #0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	080158c0 	.word	0x080158c0
 800d4cc:	08015e5c 	.word	0x08015e5c
 800d4d0:	08015914 	.word	0x08015914

0800d4d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d4d4:	b5b0      	push	{r4, r5, r7, lr}
 800d4d6:	b08c      	sub	sp, #48	; 0x30
 800d4d8:	af04      	add	r7, sp, #16
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <tcp_output_segment+0x20>
 800d4e6:	4b63      	ldr	r3, [pc, #396]	; (800d674 <tcp_output_segment+0x1a0>)
 800d4e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d4ec:	4962      	ldr	r1, [pc, #392]	; (800d678 <tcp_output_segment+0x1a4>)
 800d4ee:	4863      	ldr	r0, [pc, #396]	; (800d67c <tcp_output_segment+0x1a8>)
 800d4f0:	f005 fa7c 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d106      	bne.n	800d508 <tcp_output_segment+0x34>
 800d4fa:	4b5e      	ldr	r3, [pc, #376]	; (800d674 <tcp_output_segment+0x1a0>)
 800d4fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d500:	495f      	ldr	r1, [pc, #380]	; (800d680 <tcp_output_segment+0x1ac>)
 800d502:	485e      	ldr	r0, [pc, #376]	; (800d67c <tcp_output_segment+0x1a8>)
 800d504:	f005 fa72 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <tcp_output_segment+0x48>
 800d50e:	4b59      	ldr	r3, [pc, #356]	; (800d674 <tcp_output_segment+0x1a0>)
 800d510:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d514:	495b      	ldr	r1, [pc, #364]	; (800d684 <tcp_output_segment+0x1b0>)
 800d516:	4859      	ldr	r0, [pc, #356]	; (800d67c <tcp_output_segment+0x1a8>)
 800d518:	f005 fa68 	bl	80129ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f7ff ffb9 	bl	800d494 <tcp_output_segment_busy>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	e09f      	b.n	800d66c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	68dc      	ldr	r4, [r3, #12]
 800d534:	4610      	mov	r0, r2
 800d536:	f7f9 fd2e 	bl	8006f96 <lwip_htonl>
 800d53a:	4603      	mov	r3, r0
 800d53c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	68dc      	ldr	r4, [r3, #12]
 800d546:	4610      	mov	r0, r2
 800d548:	f7f9 fd10 	bl	8006f6c <lwip_htons>
 800d54c:	4603      	mov	r3, r0
 800d54e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d558:	441a      	add	r2, r3
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	3314      	adds	r3, #20
 800d564:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	7a9b      	ldrb	r3, [r3, #10]
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d015      	beq.n	800d59e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	3304      	adds	r3, #4
 800d576:	461a      	mov	r2, r3
 800d578:	6879      	ldr	r1, [r7, #4]
 800d57a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d57e:	f7fc fe89 	bl	800a294 <tcp_eff_send_mss_netif>
 800d582:	4603      	mov	r3, r0
 800d584:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d586:	8b7b      	ldrh	r3, [r7, #26]
 800d588:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7f9 fd02 	bl	8006f96 <lwip_htonl>
 800d592:	4602      	mov	r2, r0
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	3304      	adds	r3, #4
 800d59c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	da02      	bge.n	800d5ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10c      	bne.n	800d5d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d5b6:	4b34      	ldr	r3, [pc, #208]	; (800d688 <tcp_output_segment+0x1b4>)
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7f9 fce6 	bl	8006f96 <lwip_htonl>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68da      	ldr	r2, [r3, #12]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	8959      	ldrh	r1, [r3, #10]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	8b3a      	ldrh	r2, [r7, #24]
 800d5ea:	1a8a      	subs	r2, r1, r2
 800d5ec:	b292      	uxth	r2, r2
 800d5ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	8919      	ldrh	r1, [r3, #8]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	8b3a      	ldrh	r2, [r7, #24]
 800d5fc:	1a8a      	subs	r2, r1, r2
 800d5fe:	b292      	uxth	r2, r2
 800d600:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	68d2      	ldr	r2, [r2, #12]
 800d60a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	741a      	strb	r2, [r3, #16]
 800d614:	2200      	movs	r2, #0
 800d616:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	f103 0214 	add.w	r2, r3, #20
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	7a9b      	ldrb	r3, [r3, #10]
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	4413      	add	r3, r2
 800d62c:	69fa      	ldr	r2, [r7, #28]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d006      	beq.n	800d640 <tcp_output_segment+0x16c>
 800d632:	4b10      	ldr	r3, [pc, #64]	; (800d674 <tcp_output_segment+0x1a0>)
 800d634:	f240 621c 	movw	r2, #1564	; 0x61c
 800d638:	4914      	ldr	r1, [pc, #80]	; (800d68c <tcp_output_segment+0x1b8>)
 800d63a:	4810      	ldr	r0, [pc, #64]	; (800d67c <tcp_output_segment+0x1a8>)
 800d63c:	f005 f9d6 	bl	80129ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6858      	ldr	r0, [r3, #4]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	1d1c      	adds	r4, r3, #4
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	7add      	ldrb	r5, [r3, #11]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	7a9b      	ldrb	r3, [r3, #10]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	9202      	str	r2, [sp, #8]
 800d656:	2206      	movs	r2, #6
 800d658:	9201      	str	r2, [sp, #4]
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	462b      	mov	r3, r5
 800d65e:	4622      	mov	r2, r4
 800d660:	f002 fd1e 	bl	80100a0 <ip4_output_if>
 800d664:	4603      	mov	r3, r0
 800d666:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d668:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3720      	adds	r7, #32
 800d670:	46bd      	mov	sp, r7
 800d672:	bdb0      	pop	{r4, r5, r7, pc}
 800d674:	080158c0 	.word	0x080158c0
 800d678:	08015e84 	.word	0x08015e84
 800d67c:	08015914 	.word	0x08015914
 800d680:	08015ea4 	.word	0x08015ea4
 800d684:	08015ec4 	.word	0x08015ec4
 800d688:	2000d890 	.word	0x2000d890
 800d68c:	08015ee8 	.word	0x08015ee8

0800d690 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d690:	b5b0      	push	{r4, r5, r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <tcp_rexmit_rto_prepare+0x1c>
 800d69e:	4b31      	ldr	r3, [pc, #196]	; (800d764 <tcp_rexmit_rto_prepare+0xd4>)
 800d6a0:	f240 6263 	movw	r2, #1635	; 0x663
 800d6a4:	4930      	ldr	r1, [pc, #192]	; (800d768 <tcp_rexmit_rto_prepare+0xd8>)
 800d6a6:	4831      	ldr	r0, [pc, #196]	; (800d76c <tcp_rexmit_rto_prepare+0xdc>)
 800d6a8:	f005 f9a0 	bl	80129ec <iprintf>

  if (pcb->unacked == NULL) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d102      	bne.n	800d6ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d6b4:	f06f 0305 	mvn.w	r3, #5
 800d6b8:	e050      	b.n	800d75c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	e00b      	b.n	800d6da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f7ff fee6 	bl	800d494 <tcp_output_segment_busy>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d002      	beq.n	800d6d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d6ce:	f06f 0305 	mvn.w	r3, #5
 800d6d2:	e043      	b.n	800d75c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	60fb      	str	r3, [r7, #12]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1ef      	bne.n	800d6c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7ff fed6 	bl	800d494 <tcp_output_segment_busy>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d6ee:	f06f 0305 	mvn.w	r3, #5
 800d6f2:	e033      	b.n	800d75c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	8b5b      	ldrh	r3, [r3, #26]
 800d70e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d712:	b29a      	uxth	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	f7f9 fc39 	bl	8006f96 <lwip_htonl>
 800d724:	4604      	mov	r4, r0
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	891b      	ldrh	r3, [r3, #8]
 800d72a:	461d      	mov	r5, r3
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	899b      	ldrh	r3, [r3, #12]
 800d732:	b29b      	uxth	r3, r3
 800d734:	4618      	mov	r0, r3
 800d736:	f7f9 fc19 	bl	8006f6c <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	f003 0303 	and.w	r3, r3, #3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <tcp_rexmit_rto_prepare+0xba>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <tcp_rexmit_rto_prepare+0xbc>
 800d74a:	2300      	movs	r3, #0
 800d74c:	442b      	add	r3, r5
 800d74e:	18e2      	adds	r2, r4, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bdb0      	pop	{r4, r5, r7, pc}
 800d764:	080158c0 	.word	0x080158c0
 800d768:	08015efc 	.word	0x08015efc
 800d76c:	08015914 	.word	0x08015914

0800d770 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d106      	bne.n	800d78c <tcp_rexmit_rto_commit+0x1c>
 800d77e:	4b0d      	ldr	r3, [pc, #52]	; (800d7b4 <tcp_rexmit_rto_commit+0x44>)
 800d780:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d784:	490c      	ldr	r1, [pc, #48]	; (800d7b8 <tcp_rexmit_rto_commit+0x48>)
 800d786:	480d      	ldr	r0, [pc, #52]	; (800d7bc <tcp_rexmit_rto_commit+0x4c>)
 800d788:	f005 f930 	bl	80129ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d792:	2bff      	cmp	r3, #255	; 0xff
 800d794:	d007      	beq.n	800d7a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d79c:	3301      	adds	r3, #1
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff fc80 	bl	800d0ac <tcp_output>
}
 800d7ac:	bf00      	nop
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	080158c0 	.word	0x080158c0
 800d7b8:	08015f20 	.word	0x08015f20
 800d7bc:	08015914 	.word	0x08015914

0800d7c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <tcp_rexmit_rto+0x1c>
 800d7ce:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <tcp_rexmit_rto+0x38>)
 800d7d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d7d4:	4909      	ldr	r1, [pc, #36]	; (800d7fc <tcp_rexmit_rto+0x3c>)
 800d7d6:	480a      	ldr	r0, [pc, #40]	; (800d800 <tcp_rexmit_rto+0x40>)
 800d7d8:	f005 f908 	bl	80129ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff ff57 	bl	800d690 <tcp_rexmit_rto_prepare>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff ffc1 	bl	800d770 <tcp_rexmit_rto_commit>
  }
}
 800d7ee:	bf00      	nop
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	080158c0 	.word	0x080158c0
 800d7fc:	08015f44 	.word	0x08015f44
 800d800:	08015914 	.word	0x08015914

0800d804 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d804:	b590      	push	{r4, r7, lr}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <tcp_rexmit+0x1c>
 800d812:	4b2f      	ldr	r3, [pc, #188]	; (800d8d0 <tcp_rexmit+0xcc>)
 800d814:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d818:	492e      	ldr	r1, [pc, #184]	; (800d8d4 <tcp_rexmit+0xd0>)
 800d81a:	482f      	ldr	r0, [pc, #188]	; (800d8d8 <tcp_rexmit+0xd4>)
 800d81c:	f005 f8e6 	bl	80129ec <iprintf>

  if (pcb->unacked == NULL) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d828:	f06f 0305 	mvn.w	r3, #5
 800d82c:	e04c      	b.n	800d8c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d832:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d834:	68b8      	ldr	r0, [r7, #8]
 800d836:	f7ff fe2d 	bl	800d494 <tcp_output_segment_busy>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d840:	f06f 0305 	mvn.w	r3, #5
 800d844:	e040      	b.n	800d8c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	336c      	adds	r3, #108	; 0x6c
 800d852:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d854:	e002      	b.n	800d85c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d011      	beq.n	800d888 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7f9 fb92 	bl	8006f96 <lwip_htonl>
 800d872:	4604      	mov	r4, r0
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f9 fb8b 	bl	8006f96 <lwip_htonl>
 800d880:	4603      	mov	r3, r0
 800d882:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d884:	2b00      	cmp	r3, #0
 800d886:	dbe6      	blt.n	800d856 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d103      	bne.n	800d8a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8ac:	2bff      	cmp	r3, #255	; 0xff
 800d8ae:	d007      	beq.n	800d8c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd90      	pop	{r4, r7, pc}
 800d8d0:	080158c0 	.word	0x080158c0
 800d8d4:	08015f60 	.word	0x08015f60
 800d8d8:	08015914 	.word	0x08015914

0800d8dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d106      	bne.n	800d8f8 <tcp_rexmit_fast+0x1c>
 800d8ea:	4b2a      	ldr	r3, [pc, #168]	; (800d994 <tcp_rexmit_fast+0xb8>)
 800d8ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d8f0:	4929      	ldr	r1, [pc, #164]	; (800d998 <tcp_rexmit_fast+0xbc>)
 800d8f2:	482a      	ldr	r0, [pc, #168]	; (800d99c <tcp_rexmit_fast+0xc0>)
 800d8f4:	f005 f87a 	bl	80129ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d045      	beq.n	800d98c <tcp_rexmit_fast+0xb0>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	8b5b      	ldrh	r3, [r3, #26]
 800d904:	f003 0304 	and.w	r3, r3, #4
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d13f      	bne.n	800d98c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff ff79 	bl	800d804 <tcp_rexmit>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d139      	bne.n	800d98c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d924:	4293      	cmp	r3, r2
 800d926:	bf28      	it	cs
 800d928:	4613      	movcs	r3, r2
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da00      	bge.n	800d932 <tcp_rexmit_fast+0x56>
 800d930:	3301      	adds	r3, #1
 800d932:	105b      	asrs	r3, r3, #1
 800d934:	b29a      	uxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d942:	461a      	mov	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d206      	bcs.n	800d95c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d966:	4619      	mov	r1, r3
 800d968:	0049      	lsls	r1, r1, #1
 800d96a:	440b      	add	r3, r1
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	4413      	add	r3, r2
 800d970:	b29a      	uxth	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	8b5b      	ldrh	r3, [r3, #26]
 800d97c:	f043 0304 	orr.w	r3, r3, #4
 800d980:	b29a      	uxth	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d98c:	bf00      	nop
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	080158c0 	.word	0x080158c0
 800d998:	08015f78 	.word	0x08015f78
 800d99c:	08015914 	.word	0x08015914

0800d9a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b086      	sub	sp, #24
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	607b      	str	r3, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	817b      	strh	r3, [r7, #10]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d9b2:	897a      	ldrh	r2, [r7, #10]
 800d9b4:	893b      	ldrh	r3, [r7, #8]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	3314      	adds	r3, #20
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	2022      	movs	r0, #34	; 0x22
 800d9c6:	f7fa fbeb 	bl	80081a0 <pbuf_alloc>
 800d9ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d04d      	beq.n	800da6e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d9d2:	897b      	ldrh	r3, [r7, #10]
 800d9d4:	3313      	adds	r3, #19
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	8952      	ldrh	r2, [r2, #10]
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	db06      	blt.n	800d9ec <tcp_output_alloc_header_common+0x4c>
 800d9de:	4b26      	ldr	r3, [pc, #152]	; (800da78 <tcp_output_alloc_header_common+0xd8>)
 800d9e0:	f240 7223 	movw	r2, #1827	; 0x723
 800d9e4:	4925      	ldr	r1, [pc, #148]	; (800da7c <tcp_output_alloc_header_common+0xdc>)
 800d9e6:	4826      	ldr	r0, [pc, #152]	; (800da80 <tcp_output_alloc_header_common+0xe0>)
 800d9e8:	f005 f800 	bl	80129ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d9f2:	8c3b      	ldrh	r3, [r7, #32]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f9 fab9 	bl	8006f6c <lwip_htons>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800da02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da04:	4618      	mov	r0, r3
 800da06:	f7f9 fab1 	bl	8006f6c <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	461a      	mov	r2, r3
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7f9 fabc 	bl	8006f96 <lwip_htonl>
 800da1e:	4602      	mov	r2, r0
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800da24:	897b      	ldrh	r3, [r7, #10]
 800da26:	089b      	lsrs	r3, r3, #2
 800da28:	b29b      	uxth	r3, r3
 800da2a:	3305      	adds	r3, #5
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	031b      	lsls	r3, r3, #12
 800da30:	b29a      	uxth	r2, r3
 800da32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da36:	b29b      	uxth	r3, r3
 800da38:	4313      	orrs	r3, r2
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7f9 fa95 	bl	8006f6c <lwip_htons>
 800da42:	4603      	mov	r3, r0
 800da44:	461a      	mov	r2, r3
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800da4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7f9 fa8d 	bl	8006f6c <lwip_htons>
 800da52:	4603      	mov	r3, r0
 800da54:	461a      	mov	r2, r3
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2200      	movs	r2, #0
 800da5e:	741a      	strb	r2, [r3, #16]
 800da60:	2200      	movs	r2, #0
 800da62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2200      	movs	r2, #0
 800da68:	749a      	strb	r2, [r3, #18]
 800da6a:	2200      	movs	r2, #0
 800da6c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800da6e:	697b      	ldr	r3, [r7, #20]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	080158c0 	.word	0x080158c0
 800da7c:	08015f98 	.word	0x08015f98
 800da80:	08015914 	.word	0x08015914

0800da84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800da84:	b5b0      	push	{r4, r5, r7, lr}
 800da86:	b08a      	sub	sp, #40	; 0x28
 800da88:	af04      	add	r7, sp, #16
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	607b      	str	r3, [r7, #4]
 800da8e:	460b      	mov	r3, r1
 800da90:	817b      	strh	r3, [r7, #10]
 800da92:	4613      	mov	r3, r2
 800da94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <tcp_output_alloc_header+0x26>
 800da9c:	4b15      	ldr	r3, [pc, #84]	; (800daf4 <tcp_output_alloc_header+0x70>)
 800da9e:	f240 7242 	movw	r2, #1858	; 0x742
 800daa2:	4915      	ldr	r1, [pc, #84]	; (800daf8 <tcp_output_alloc_header+0x74>)
 800daa4:	4815      	ldr	r0, [pc, #84]	; (800dafc <tcp_output_alloc_header+0x78>)
 800daa6:	f004 ffa1 	bl	80129ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	8adb      	ldrh	r3, [r3, #22]
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	8b12      	ldrh	r2, [r2, #24]
 800dab6:	68f9      	ldr	r1, [r7, #12]
 800dab8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800daba:	893d      	ldrh	r5, [r7, #8]
 800dabc:	897c      	ldrh	r4, [r7, #10]
 800dabe:	9103      	str	r1, [sp, #12]
 800dac0:	2110      	movs	r1, #16
 800dac2:	9102      	str	r1, [sp, #8]
 800dac4:	9201      	str	r2, [sp, #4]
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	462a      	mov	r2, r5
 800dacc:	4621      	mov	r1, r4
 800dace:	f7ff ff67 	bl	800d9a0 <tcp_output_alloc_header_common>
 800dad2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d006      	beq.n	800dae8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dae2:	441a      	add	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dae8:	697b      	ldr	r3, [r7, #20]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3718      	adds	r7, #24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bdb0      	pop	{r4, r5, r7, pc}
 800daf2:	bf00      	nop
 800daf4:	080158c0 	.word	0x080158c0
 800daf8:	08015fc8 	.word	0x08015fc8
 800dafc:	08015914 	.word	0x08015914

0800db00 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b088      	sub	sp, #32
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4611      	mov	r1, r2
 800db0c:	461a      	mov	r2, r3
 800db0e:	460b      	mov	r3, r1
 800db10:	71fb      	strb	r3, [r7, #7]
 800db12:	4613      	mov	r3, r2
 800db14:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <tcp_output_fill_options+0x2e>
 800db20:	4b13      	ldr	r3, [pc, #76]	; (800db70 <tcp_output_fill_options+0x70>)
 800db22:	f240 7256 	movw	r2, #1878	; 0x756
 800db26:	4913      	ldr	r1, [pc, #76]	; (800db74 <tcp_output_fill_options+0x74>)
 800db28:	4813      	ldr	r0, [pc, #76]	; (800db78 <tcp_output_fill_options+0x78>)
 800db2a:	f004 ff5f 	bl	80129ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	3314      	adds	r3, #20
 800db38:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	f103 0214 	add.w	r2, r3, #20
 800db40:	8bfb      	ldrh	r3, [r7, #30]
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4619      	mov	r1, r3
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	f003 0304 	and.w	r3, r3, #4
 800db4e:	440b      	add	r3, r1
 800db50:	4413      	add	r3, r2
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	429a      	cmp	r2, r3
 800db56:	d006      	beq.n	800db66 <tcp_output_fill_options+0x66>
 800db58:	4b05      	ldr	r3, [pc, #20]	; (800db70 <tcp_output_fill_options+0x70>)
 800db5a:	f240 7275 	movw	r2, #1909	; 0x775
 800db5e:	4907      	ldr	r1, [pc, #28]	; (800db7c <tcp_output_fill_options+0x7c>)
 800db60:	4805      	ldr	r0, [pc, #20]	; (800db78 <tcp_output_fill_options+0x78>)
 800db62:	f004 ff43 	bl	80129ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800db66:	bf00      	nop
 800db68:	3720      	adds	r7, #32
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	080158c0 	.word	0x080158c0
 800db74:	08015ff0 	.word	0x08015ff0
 800db78:	08015914 	.word	0x08015914
 800db7c:	08015ee8 	.word	0x08015ee8

0800db80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08a      	sub	sp, #40	; 0x28
 800db84:	af04      	add	r7, sp, #16
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d106      	bne.n	800dba2 <tcp_output_control_segment+0x22>
 800db94:	4b1c      	ldr	r3, [pc, #112]	; (800dc08 <tcp_output_control_segment+0x88>)
 800db96:	f240 7287 	movw	r2, #1927	; 0x787
 800db9a:	491c      	ldr	r1, [pc, #112]	; (800dc0c <tcp_output_control_segment+0x8c>)
 800db9c:	481c      	ldr	r0, [pc, #112]	; (800dc10 <tcp_output_control_segment+0x90>)
 800db9e:	f004 ff25 	bl	80129ec <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f7fe ff3e 	bl	800ca28 <tcp_route>
 800dbac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dbb4:	23fc      	movs	r3, #252	; 0xfc
 800dbb6:	75fb      	strb	r3, [r7, #23]
 800dbb8:	e01c      	b.n	800dbf4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d006      	beq.n	800dbce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	7adb      	ldrb	r3, [r3, #11]
 800dbc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	7a9b      	ldrb	r3, [r3, #10]
 800dbca:	757b      	strb	r3, [r7, #21]
 800dbcc:	e003      	b.n	800dbd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dbce:	23ff      	movs	r3, #255	; 0xff
 800dbd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dbd6:	7dba      	ldrb	r2, [r7, #22]
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	9302      	str	r3, [sp, #8]
 800dbdc:	2306      	movs	r3, #6
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	7d7b      	ldrb	r3, [r7, #21]
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	68b8      	ldr	r0, [r7, #8]
 800dbec:	f002 fa58 	bl	80100a0 <ip4_output_if>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dbf4:	68b8      	ldr	r0, [r7, #8]
 800dbf6:	f7fa fdbf 	bl	8008778 <pbuf_free>
  return err;
 800dbfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	080158c0 	.word	0x080158c0
 800dc0c:	08016018 	.word	0x08016018
 800dc10:	08015914 	.word	0x08015914

0800dc14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dc14:	b590      	push	{r4, r7, lr}
 800dc16:	b08b      	sub	sp, #44	; 0x2c
 800dc18:	af04      	add	r7, sp, #16
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <tcp_rst+0x22>
 800dc28:	4b1f      	ldr	r3, [pc, #124]	; (800dca8 <tcp_rst+0x94>)
 800dc2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dc2e:	491f      	ldr	r1, [pc, #124]	; (800dcac <tcp_rst+0x98>)
 800dc30:	481f      	ldr	r0, [pc, #124]	; (800dcb0 <tcp_rst+0x9c>)
 800dc32:	f004 fedb 	bl	80129ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d106      	bne.n	800dc4a <tcp_rst+0x36>
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	; (800dca8 <tcp_rst+0x94>)
 800dc3e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dc42:	491c      	ldr	r1, [pc, #112]	; (800dcb4 <tcp_rst+0xa0>)
 800dc44:	481a      	ldr	r0, [pc, #104]	; (800dcb0 <tcp_rst+0x9c>)
 800dc46:	f004 fed1 	bl	80129ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dc4e:	f246 0308 	movw	r3, #24584	; 0x6008
 800dc52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dc54:	7dfb      	ldrb	r3, [r7, #23]
 800dc56:	b29c      	uxth	r4, r3
 800dc58:	68b8      	ldr	r0, [r7, #8]
 800dc5a:	f7f9 f99c 	bl	8006f96 <lwip_htonl>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	8abb      	ldrh	r3, [r7, #20]
 800dc62:	9303      	str	r3, [sp, #12]
 800dc64:	2314      	movs	r3, #20
 800dc66:	9302      	str	r3, [sp, #8]
 800dc68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	4613      	mov	r3, r2
 800dc72:	2200      	movs	r2, #0
 800dc74:	4621      	mov	r1, r4
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff fe92 	bl	800d9a0 <tcp_output_alloc_header_common>
 800dc7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00c      	beq.n	800dc9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	2200      	movs	r2, #0
 800dc88:	6939      	ldr	r1, [r7, #16]
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f7ff ff38 	bl	800db00 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	6939      	ldr	r1, [r7, #16]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7ff ff72 	bl	800db80 <tcp_output_control_segment>
 800dc9c:	e000      	b.n	800dca0 <tcp_rst+0x8c>
    return;
 800dc9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd90      	pop	{r4, r7, pc}
 800dca6:	bf00      	nop
 800dca8:	080158c0 	.word	0x080158c0
 800dcac:	08016044 	.word	0x08016044
 800dcb0:	08015914 	.word	0x08015914
 800dcb4:	08016060 	.word	0x08016060

0800dcb8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dcb8:	b590      	push	{r4, r7, lr}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d106      	bne.n	800dcdc <tcp_send_empty_ack+0x24>
 800dcce:	4b28      	ldr	r3, [pc, #160]	; (800dd70 <tcp_send_empty_ack+0xb8>)
 800dcd0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dcd4:	4927      	ldr	r1, [pc, #156]	; (800dd74 <tcp_send_empty_ack+0xbc>)
 800dcd6:	4828      	ldr	r0, [pc, #160]	; (800dd78 <tcp_send_empty_ack+0xc0>)
 800dcd8:	f004 fe88 	bl	80129ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	f003 0304 	and.w	r3, r3, #4
 800dce6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dce8:	7d7b      	ldrb	r3, [r7, #21]
 800dcea:	b29c      	uxth	r4, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7f9 f950 	bl	8006f96 <lwip_htonl>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff fec1 	bl	800da84 <tcp_output_alloc_header>
 800dd02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d109      	bne.n	800dd1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	8b5b      	ldrh	r3, [r3, #26]
 800dd0e:	f043 0303 	orr.w	r3, r3, #3
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dd18:	f06f 0301 	mvn.w	r3, #1
 800dd1c:	e023      	b.n	800dd66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dd1e:	7dbb      	ldrb	r3, [r7, #22]
 800dd20:	7dfa      	ldrb	r2, [r7, #23]
 800dd22:	6939      	ldr	r1, [r7, #16]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff feeb 	bl	800db00 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	6939      	ldr	r1, [r7, #16]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ff24 	bl	800db80 <tcp_output_control_segment>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dd3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d007      	beq.n	800dd54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	8b5b      	ldrh	r3, [r3, #26]
 800dd48:	f043 0303 	orr.w	r3, r3, #3
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	835a      	strh	r2, [r3, #26]
 800dd52:	e006      	b.n	800dd62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	8b5b      	ldrh	r3, [r3, #26]
 800dd58:	f023 0303 	bic.w	r3, r3, #3
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	371c      	adds	r7, #28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd90      	pop	{r4, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	080158c0 	.word	0x080158c0
 800dd74:	0801607c 	.word	0x0801607c
 800dd78:	08015914 	.word	0x08015914

0800dd7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dd7c:	b590      	push	{r4, r7, lr}
 800dd7e:	b087      	sub	sp, #28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd84:	2300      	movs	r3, #0
 800dd86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <tcp_keepalive+0x20>
 800dd8e:	4b18      	ldr	r3, [pc, #96]	; (800ddf0 <tcp_keepalive+0x74>)
 800dd90:	f640 0224 	movw	r2, #2084	; 0x824
 800dd94:	4917      	ldr	r1, [pc, #92]	; (800ddf4 <tcp_keepalive+0x78>)
 800dd96:	4818      	ldr	r0, [pc, #96]	; (800ddf8 <tcp_keepalive+0x7c>)
 800dd98:	f004 fe28 	bl	80129ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dd9c:	7dfb      	ldrb	r3, [r7, #23]
 800dd9e:	b29c      	uxth	r4, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda4:	3b01      	subs	r3, #1
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f9 f8f5 	bl	8006f96 <lwip_htonl>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2200      	movs	r2, #0
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fe66 	bl	800da84 <tcp_output_alloc_header>
 800ddb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d102      	bne.n	800ddc6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ddc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc4:	e010      	b.n	800dde8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ddc6:	7dfb      	ldrb	r3, [r7, #23]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	6939      	ldr	r1, [r7, #16]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff fe97 	bl	800db00 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	6939      	ldr	r1, [r7, #16]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff fed0 	bl	800db80 <tcp_output_control_segment>
 800dde0:	4603      	mov	r3, r0
 800dde2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dde4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	371c      	adds	r7, #28
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd90      	pop	{r4, r7, pc}
 800ddf0:	080158c0 	.word	0x080158c0
 800ddf4:	0801609c 	.word	0x0801609c
 800ddf8:	08015914 	.word	0x08015914

0800ddfc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ddfc:	b590      	push	{r4, r7, lr}
 800ddfe:	b08b      	sub	sp, #44	; 0x2c
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de04:	2300      	movs	r3, #0
 800de06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d106      	bne.n	800de1e <tcp_zero_window_probe+0x22>
 800de10:	4b4c      	ldr	r3, [pc, #304]	; (800df44 <tcp_zero_window_probe+0x148>)
 800de12:	f640 024f 	movw	r2, #2127	; 0x84f
 800de16:	494c      	ldr	r1, [pc, #304]	; (800df48 <tcp_zero_window_probe+0x14c>)
 800de18:	484c      	ldr	r0, [pc, #304]	; (800df4c <tcp_zero_window_probe+0x150>)
 800de1a:	f004 fde7 	bl	80129ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	e086      	b.n	800df3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de34:	2bff      	cmp	r3, #255	; 0xff
 800de36:	d007      	beq.n	800de48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de3e:	3301      	adds	r3, #1
 800de40:	b2da      	uxtb	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	899b      	ldrh	r3, [r3, #12]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	4618      	mov	r0, r3
 800de52:	f7f9 f88b 	bl	8006f6c <lwip_htons>
 800de56:	4603      	mov	r3, r0
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d005      	beq.n	800de6e <tcp_zero_window_probe+0x72>
 800de62:	6a3b      	ldr	r3, [r7, #32]
 800de64:	891b      	ldrh	r3, [r3, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <tcp_zero_window_probe+0x72>
 800de6a:	2301      	movs	r3, #1
 800de6c:	e000      	b.n	800de70 <tcp_zero_window_probe+0x74>
 800de6e:	2300      	movs	r3, #0
 800de70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800de72:	7ffb      	ldrb	r3, [r7, #31]
 800de74:	2b00      	cmp	r3, #0
 800de76:	bf0c      	ite	eq
 800de78:	2301      	moveq	r3, #1
 800de7a:	2300      	movne	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800de80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de84:	b299      	uxth	r1, r3
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	8bba      	ldrh	r2, [r7, #28]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff fdf8 	bl	800da84 <tcp_output_alloc_header>
 800de94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d102      	bne.n	800dea2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dea0:	e04c      	b.n	800df3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dea8:	7ffb      	ldrb	r3, [r7, #31]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d011      	beq.n	800ded2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	899b      	ldrh	r3, [r3, #12]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	b21b      	sxth	r3, r3
 800deb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800deba:	b21c      	sxth	r4, r3
 800debc:	2011      	movs	r0, #17
 800debe:	f7f9 f855 	bl	8006f6c <lwip_htons>
 800dec2:	4603      	mov	r3, r0
 800dec4:	b21b      	sxth	r3, r3
 800dec6:	4323      	orrs	r3, r4
 800dec8:	b21b      	sxth	r3, r3
 800deca:	b29a      	uxth	r2, r3
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	819a      	strh	r2, [r3, #12]
 800ded0:	e010      	b.n	800def4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	3314      	adds	r3, #20
 800ded8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800deda:	6a3b      	ldr	r3, [r7, #32]
 800dedc:	6858      	ldr	r0, [r3, #4]
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	891a      	ldrh	r2, [r3, #8]
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	891b      	ldrh	r3, [r3, #8]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	b29b      	uxth	r3, r3
 800deec:	2201      	movs	r2, #1
 800deee:	6939      	ldr	r1, [r7, #16]
 800def0:	f7fa fe3c 	bl	8008b6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	4618      	mov	r0, r3
 800defc:	f7f9 f84b 	bl	8006f96 <lwip_htonl>
 800df00:	4603      	mov	r3, r0
 800df02:	3301      	adds	r3, #1
 800df04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	da02      	bge.n	800df18 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800df18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df1c:	2200      	movs	r2, #0
 800df1e:	69b9      	ldr	r1, [r7, #24]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff fded 	bl	800db00 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3304      	adds	r3, #4
 800df2c:	69b9      	ldr	r1, [r7, #24]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff fe26 	bl	800db80 <tcp_output_control_segment>
 800df34:	4603      	mov	r3, r0
 800df36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800df38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	372c      	adds	r7, #44	; 0x2c
 800df40:	46bd      	mov	sp, r7
 800df42:	bd90      	pop	{r4, r7, pc}
 800df44:	080158c0 	.word	0x080158c0
 800df48:	080160b8 	.word	0x080160b8
 800df4c:	08015914 	.word	0x08015914

0800df50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800df58:	f7fa fef6 	bl	8008d48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <tcpip_tcp_timer+0x38>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d103      	bne.n	800df6c <tcpip_tcp_timer+0x1c>
 800df64:	4b09      	ldr	r3, [pc, #36]	; (800df8c <tcpip_tcp_timer+0x3c>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df6c:	2200      	movs	r2, #0
 800df6e:	4908      	ldr	r1, [pc, #32]	; (800df90 <tcpip_tcp_timer+0x40>)
 800df70:	20fa      	movs	r0, #250	; 0xfa
 800df72:	f000 f8f5 	bl	800e160 <sys_timeout>
 800df76:	e003      	b.n	800df80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800df78:	4b06      	ldr	r3, [pc, #24]	; (800df94 <tcpip_tcp_timer+0x44>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	601a      	str	r2, [r3, #0]
  }
}
 800df7e:	bf00      	nop
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	2000d89c 	.word	0x2000d89c
 800df8c:	2000d8a0 	.word	0x2000d8a0
 800df90:	0800df51 	.word	0x0800df51
 800df94:	2000d8e8 	.word	0x2000d8e8

0800df98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <tcp_timer_needed+0x30>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10f      	bne.n	800dfc4 <tcp_timer_needed+0x2c>
 800dfa4:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <tcp_timer_needed+0x34>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d103      	bne.n	800dfb4 <tcp_timer_needed+0x1c>
 800dfac:	4b08      	ldr	r3, [pc, #32]	; (800dfd0 <tcp_timer_needed+0x38>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d007      	beq.n	800dfc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dfb4:	4b04      	ldr	r3, [pc, #16]	; (800dfc8 <tcp_timer_needed+0x30>)
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4905      	ldr	r1, [pc, #20]	; (800dfd4 <tcp_timer_needed+0x3c>)
 800dfbe:	20fa      	movs	r0, #250	; 0xfa
 800dfc0:	f000 f8ce 	bl	800e160 <sys_timeout>
  }
}
 800dfc4:	bf00      	nop
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	2000d8e8 	.word	0x2000d8e8
 800dfcc:	2000d89c 	.word	0x2000d89c
 800dfd0:	2000d8a0 	.word	0x2000d8a0
 800dfd4:	0800df51 	.word	0x0800df51

0800dfd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dfe4:	22bc      	movs	r2, #188	; 0xbc
 800dfe6:	4930      	ldr	r1, [pc, #192]	; (800e0a8 <sys_timeout_abs+0xd0>)
 800dfe8:	2006      	movs	r0, #6
 800dfea:	f7f9 fd47 	bl	8007a7c <memp_malloc_fn>
 800dfee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d109      	bne.n	800e00a <sys_timeout_abs+0x32>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d151      	bne.n	800e0a0 <sys_timeout_abs+0xc8>
 800dffc:	4b2a      	ldr	r3, [pc, #168]	; (800e0a8 <sys_timeout_abs+0xd0>)
 800dffe:	22be      	movs	r2, #190	; 0xbe
 800e000:	492a      	ldr	r1, [pc, #168]	; (800e0ac <sys_timeout_abs+0xd4>)
 800e002:	482b      	ldr	r0, [pc, #172]	; (800e0b0 <sys_timeout_abs+0xd8>)
 800e004:	f004 fcf2 	bl	80129ec <iprintf>
    return;
 800e008:	e04a      	b.n	800e0a0 <sys_timeout_abs+0xc8>
  }

  timeout->next = NULL;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	2200      	movs	r2, #0
 800e00e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	68fa      	ldr	r2, [r7, #12]
 800e020:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e022:	4b24      	ldr	r3, [pc, #144]	; (800e0b4 <sys_timeout_abs+0xdc>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d103      	bne.n	800e032 <sys_timeout_abs+0x5a>
    next_timeout = timeout;
 800e02a:	4a22      	ldr	r2, [pc, #136]	; (800e0b4 <sys_timeout_abs+0xdc>)
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6013      	str	r3, [r2, #0]
    return;
 800e030:	e037      	b.n	800e0a2 <sys_timeout_abs+0xca>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	4b1f      	ldr	r3, [pc, #124]	; (800e0b4 <sys_timeout_abs+0xdc>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	0fdb      	lsrs	r3, r3, #31
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d007      	beq.n	800e05a <sys_timeout_abs+0x82>
    timeout->next = next_timeout;
 800e04a:	4b1a      	ldr	r3, [pc, #104]	; (800e0b4 <sys_timeout_abs+0xdc>)
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e052:	4a18      	ldr	r2, [pc, #96]	; (800e0b4 <sys_timeout_abs+0xdc>)
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	6013      	str	r3, [r2, #0]
 800e058:	e023      	b.n	800e0a2 <sys_timeout_abs+0xca>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e05a:	4b16      	ldr	r3, [pc, #88]	; (800e0b4 <sys_timeout_abs+0xdc>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	617b      	str	r3, [r7, #20]
 800e060:	e01a      	b.n	800e098 <sys_timeout_abs+0xc0>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00b      	beq.n	800e082 <sys_timeout_abs+0xaa>
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	685a      	ldr	r2, [r3, #4]
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	0fdb      	lsrs	r3, r3, #31
 800e078:	f003 0301 	and.w	r3, r3, #1
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d007      	beq.n	800e092 <sys_timeout_abs+0xba>
        timeout->next = t->next;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	601a      	str	r2, [r3, #0]
        break;
 800e090:	e007      	b.n	800e0a2 <sys_timeout_abs+0xca>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1e1      	bne.n	800e062 <sys_timeout_abs+0x8a>
 800e09e:	e000      	b.n	800e0a2 <sys_timeout_abs+0xca>
    return;
 800e0a0:	bf00      	nop
      }
    }
  }
}
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	080160dc 	.word	0x080160dc
 800e0ac:	08016110 	.word	0x08016110
 800e0b0:	08016150 	.word	0x08016150
 800e0b4:	2000d8e0 	.word	0x2000d8e0

0800e0b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	4798      	blx	r3

  now = sys_now();
 800e0ca:	f7f8 fec1 	bl	8006e50 <sys_now>
 800e0ce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	4b0f      	ldr	r3, [pc, #60]	; (800e114 <lwip_cyclic_timer+0x5c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4413      	add	r3, r2
 800e0da:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	0fdb      	lsrs	r3, r3, #31
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d009      	beq.n	800e102 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4907      	ldr	r1, [pc, #28]	; (800e118 <lwip_cyclic_timer+0x60>)
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff ff6c 	bl	800dfd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e100:	e004      	b.n	800e10c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	4904      	ldr	r1, [pc, #16]	; (800e118 <lwip_cyclic_timer+0x60>)
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f7ff ff66 	bl	800dfd8 <sys_timeout_abs>
}
 800e10c:	bf00      	nop
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	2000d8e4 	.word	0x2000d8e4
 800e118:	0800e0b9 	.word	0x0800e0b9

0800e11c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e122:	2301      	movs	r3, #1
 800e124:	607b      	str	r3, [r7, #4]
 800e126:	e00e      	b.n	800e146 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e128:	4a0b      	ldr	r2, [pc, #44]	; (800e158 <sys_timeouts_init+0x3c>)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	00db      	lsls	r3, r3, #3
 800e134:	4a08      	ldr	r2, [pc, #32]	; (800e158 <sys_timeouts_init+0x3c>)
 800e136:	4413      	add	r3, r2
 800e138:	461a      	mov	r2, r3
 800e13a:	4908      	ldr	r1, [pc, #32]	; (800e15c <sys_timeouts_init+0x40>)
 800e13c:	f000 f810 	bl	800e160 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3301      	adds	r3, #1
 800e144:	607b      	str	r3, [r7, #4]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d9ed      	bls.n	800e128 <sys_timeouts_init+0xc>
  }
}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	08016cf0 	.word	0x08016cf0
 800e15c:	0800e0b9 	.word	0x0800e0b9

0800e160 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e172:	d306      	bcc.n	800e182 <sys_timeout+0x22>
 800e174:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <sys_timeout+0x40>)
 800e176:	f240 1229 	movw	r2, #297	; 0x129
 800e17a:	490a      	ldr	r1, [pc, #40]	; (800e1a4 <sys_timeout+0x44>)
 800e17c:	480a      	ldr	r0, [pc, #40]	; (800e1a8 <sys_timeout+0x48>)
 800e17e:	f004 fc35 	bl	80129ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e182:	f7f8 fe65 	bl	8006e50 <sys_now>
 800e186:	4602      	mov	r2, r0
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	4413      	add	r3, r2
 800e18c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68b9      	ldr	r1, [r7, #8]
 800e192:	6978      	ldr	r0, [r7, #20]
 800e194:	f7ff ff20 	bl	800dfd8 <sys_timeout_abs>
#endif
}
 800e198:	bf00      	nop
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	080160dc 	.word	0x080160dc
 800e1a4:	08016178 	.word	0x08016178
 800e1a8:	08016150 	.word	0x08016150

0800e1ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e1b2:	f7f8 fe4d 	bl	8006e50 <sys_now>
 800e1b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e1b8:	4b1a      	ldr	r3, [pc, #104]	; (800e224 <sys_check_timeouts+0x78>)
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <sys_check_timeouts+0x1a>
 800e1c2:	f7f9 ff97 	bl	80080f4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e1c6:	4b18      	ldr	r3, [pc, #96]	; (800e228 <sys_check_timeouts+0x7c>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d022      	beq.n	800e218 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	1ad3      	subs	r3, r2, r3
 800e1da:	0fdb      	lsrs	r3, r3, #31
 800e1dc:	f003 0301 	and.w	r3, r3, #1
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d11a      	bne.n	800e21c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a0f      	ldr	r2, [pc, #60]	; (800e228 <sys_check_timeouts+0x7c>)
 800e1ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	4a0b      	ldr	r2, [pc, #44]	; (800e22c <sys_check_timeouts+0x80>)
 800e200:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e202:	68b9      	ldr	r1, [r7, #8]
 800e204:	2006      	movs	r0, #6
 800e206:	f7f9 fc9d 	bl	8007b44 <memp_free>
    if (handler != NULL) {
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d0d3      	beq.n	800e1b8 <sys_check_timeouts+0xc>
      handler(arg);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6838      	ldr	r0, [r7, #0]
 800e214:	4798      	blx	r3
  do {
 800e216:	e7cf      	b.n	800e1b8 <sys_check_timeouts+0xc>
      return;
 800e218:	bf00      	nop
 800e21a:	e000      	b.n	800e21e <sys_check_timeouts+0x72>
      return;
 800e21c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	2000d88d 	.word	0x2000d88d
 800e228:	2000d8e0 	.word	0x2000d8e0
 800e22c:	2000d8e4 	.word	0x2000d8e4

0800e230 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e234:	f004 fc68 	bl	8012b08 <rand>
 800e238:	4603      	mov	r3, r0
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e240:	b29b      	uxth	r3, r3
 800e242:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e246:	b29a      	uxth	r2, r3
 800e248:	4b01      	ldr	r3, [pc, #4]	; (800e250 <udp_init+0x20>)
 800e24a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e24c:	bf00      	nop
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	20000018 	.word	0x20000018

0800e254 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e25e:	4b17      	ldr	r3, [pc, #92]	; (800e2bc <udp_new_port+0x68>)
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	b291      	uxth	r1, r2
 800e266:	4a15      	ldr	r2, [pc, #84]	; (800e2bc <udp_new_port+0x68>)
 800e268:	8011      	strh	r1, [r2, #0]
 800e26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e26e:	4293      	cmp	r3, r2
 800e270:	d103      	bne.n	800e27a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e272:	4b12      	ldr	r3, [pc, #72]	; (800e2bc <udp_new_port+0x68>)
 800e274:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e278:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e27a:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <udp_new_port+0x6c>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	603b      	str	r3, [r7, #0]
 800e280:	e011      	b.n	800e2a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	8a5a      	ldrh	r2, [r3, #18]
 800e286:	4b0d      	ldr	r3, [pc, #52]	; (800e2bc <udp_new_port+0x68>)
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d108      	bne.n	800e2a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e28e:	88fb      	ldrh	r3, [r7, #6]
 800e290:	3301      	adds	r3, #1
 800e292:	80fb      	strh	r3, [r7, #6]
 800e294:	88fb      	ldrh	r3, [r7, #6]
 800e296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e29a:	d3e0      	bcc.n	800e25e <udp_new_port+0xa>
        return 0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	e007      	b.n	800e2b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	603b      	str	r3, [r7, #0]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1ea      	bne.n	800e282 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e2ac:	4b03      	ldr	r3, [pc, #12]	; (800e2bc <udp_new_port+0x68>)
 800e2ae:	881b      	ldrh	r3, [r3, #0]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	20000018 	.word	0x20000018
 800e2c0:	2000d8ec 	.word	0x2000d8ec

0800e2c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d105      	bne.n	800e2e4 <udp_input_local_match+0x20>
 800e2d8:	4b27      	ldr	r3, [pc, #156]	; (800e378 <udp_input_local_match+0xb4>)
 800e2da:	2287      	movs	r2, #135	; 0x87
 800e2dc:	4927      	ldr	r1, [pc, #156]	; (800e37c <udp_input_local_match+0xb8>)
 800e2de:	4828      	ldr	r0, [pc, #160]	; (800e380 <udp_input_local_match+0xbc>)
 800e2e0:	f004 fb84 	bl	80129ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d105      	bne.n	800e2f6 <udp_input_local_match+0x32>
 800e2ea:	4b23      	ldr	r3, [pc, #140]	; (800e378 <udp_input_local_match+0xb4>)
 800e2ec:	2288      	movs	r2, #136	; 0x88
 800e2ee:	4925      	ldr	r1, [pc, #148]	; (800e384 <udp_input_local_match+0xc0>)
 800e2f0:	4823      	ldr	r0, [pc, #140]	; (800e380 <udp_input_local_match+0xbc>)
 800e2f2:	f004 fb7b 	bl	80129ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	7a1b      	ldrb	r3, [r3, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00b      	beq.n	800e316 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	7a1a      	ldrb	r2, [r3, #8]
 800e302:	4b21      	ldr	r3, [pc, #132]	; (800e388 <udp_input_local_match+0xc4>)
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e30a:	3301      	adds	r3, #1
 800e30c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e30e:	429a      	cmp	r2, r3
 800e310:	d001      	beq.n	800e316 <udp_input_local_match+0x52>
    return 0;
 800e312:	2300      	movs	r3, #0
 800e314:	e02b      	b.n	800e36e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d018      	beq.n	800e34e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d013      	beq.n	800e34a <udp_input_local_match+0x86>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00f      	beq.n	800e34a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e32a:	4b17      	ldr	r3, [pc, #92]	; (800e388 <udp_input_local_match+0xc4>)
 800e32c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e332:	d00a      	beq.n	800e34a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	4b13      	ldr	r3, [pc, #76]	; (800e388 <udp_input_local_match+0xc4>)
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	405a      	eors	r2, r3
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	3308      	adds	r3, #8
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e346:	2b00      	cmp	r3, #0
 800e348:	d110      	bne.n	800e36c <udp_input_local_match+0xa8>
          return 1;
 800e34a:	2301      	movs	r3, #1
 800e34c:	e00f      	b.n	800e36e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d009      	beq.n	800e368 <udp_input_local_match+0xa4>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d005      	beq.n	800e368 <udp_input_local_match+0xa4>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	4b09      	ldr	r3, [pc, #36]	; (800e388 <udp_input_local_match+0xc4>)
 800e362:	695b      	ldr	r3, [r3, #20]
 800e364:	429a      	cmp	r2, r3
 800e366:	d101      	bne.n	800e36c <udp_input_local_match+0xa8>
        return 1;
 800e368:	2301      	movs	r3, #1
 800e36a:	e000      	b.n	800e36e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	080161c4 	.word	0x080161c4
 800e37c:	080161f4 	.word	0x080161f4
 800e380:	08016218 	.word	0x08016218
 800e384:	08016240 	.word	0x08016240
 800e388:	20005bc0 	.word	0x20005bc0

0800e38c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b08d      	sub	sp, #52	; 0x34
 800e390:	af02      	add	r7, sp, #8
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e396:	2300      	movs	r3, #0
 800e398:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d105      	bne.n	800e3ac <udp_input+0x20>
 800e3a0:	4b7c      	ldr	r3, [pc, #496]	; (800e594 <udp_input+0x208>)
 800e3a2:	22cf      	movs	r2, #207	; 0xcf
 800e3a4:	497c      	ldr	r1, [pc, #496]	; (800e598 <udp_input+0x20c>)
 800e3a6:	487d      	ldr	r0, [pc, #500]	; (800e59c <udp_input+0x210>)
 800e3a8:	f004 fb20 	bl	80129ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d105      	bne.n	800e3be <udp_input+0x32>
 800e3b2:	4b78      	ldr	r3, [pc, #480]	; (800e594 <udp_input+0x208>)
 800e3b4:	22d0      	movs	r2, #208	; 0xd0
 800e3b6:	497a      	ldr	r1, [pc, #488]	; (800e5a0 <udp_input+0x214>)
 800e3b8:	4878      	ldr	r0, [pc, #480]	; (800e59c <udp_input+0x210>)
 800e3ba:	f004 fb17 	bl	80129ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	895b      	ldrh	r3, [r3, #10]
 800e3c2:	2b07      	cmp	r3, #7
 800e3c4:	d803      	bhi.n	800e3ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7fa f9d6 	bl	8008778 <pbuf_free>
    goto end;
 800e3cc:	e0de      	b.n	800e58c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e3d4:	4b73      	ldr	r3, [pc, #460]	; (800e5a4 <udp_input+0x218>)
 800e3d6:	695b      	ldr	r3, [r3, #20]
 800e3d8:	4a72      	ldr	r2, [pc, #456]	; (800e5a4 <udp_input+0x218>)
 800e3da:	6812      	ldr	r2, [r2, #0]
 800e3dc:	4611      	mov	r1, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f001 ff36 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7f8 fdbc 	bl	8006f6c <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	885b      	ldrh	r3, [r3, #2]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f8 fdb4 	bl	8006f6c <lwip_htons>
 800e404:	4603      	mov	r3, r0
 800e406:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e408:	2300      	movs	r3, #0
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e40c:	2300      	movs	r3, #0
 800e40e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e414:	4b64      	ldr	r3, [pc, #400]	; (800e5a8 <udp_input+0x21c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	627b      	str	r3, [r7, #36]	; 0x24
 800e41a:	e054      	b.n	800e4c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	8a5b      	ldrh	r3, [r3, #18]
 800e420:	89fa      	ldrh	r2, [r7, #14]
 800e422:	429a      	cmp	r2, r3
 800e424:	d14a      	bne.n	800e4bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e426:	7cfb      	ldrb	r3, [r7, #19]
 800e428:	461a      	mov	r2, r3
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e42e:	f7ff ff49 	bl	800e2c4 <udp_input_local_match>
 800e432:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e434:	2b00      	cmp	r3, #0
 800e436:	d041      	beq.n	800e4bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	7c1b      	ldrb	r3, [r3, #16]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	d11d      	bne.n	800e480 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d102      	bne.n	800e450 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	61fb      	str	r3, [r7, #28]
 800e44e:	e017      	b.n	800e480 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e450:	7cfb      	ldrb	r3, [r7, #19]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d014      	beq.n	800e480 <udp_input+0xf4>
 800e456:	4b53      	ldr	r3, [pc, #332]	; (800e5a4 <udp_input+0x218>)
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45e:	d10f      	bne.n	800e480 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	3304      	adds	r3, #4
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d008      	beq.n	800e480 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	3304      	adds	r3, #4
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d101      	bne.n	800e480 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	8a9b      	ldrh	r3, [r3, #20]
 800e484:	8a3a      	ldrh	r2, [r7, #16]
 800e486:	429a      	cmp	r2, r3
 800e488:	d118      	bne.n	800e4bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d005      	beq.n	800e49e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	4b43      	ldr	r3, [pc, #268]	; (800e5a4 <udp_input+0x218>)
 800e498:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d10e      	bne.n	800e4bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e49e:	6a3b      	ldr	r3, [r7, #32]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d014      	beq.n	800e4ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	68da      	ldr	r2, [r3, #12]
 800e4a8:	6a3b      	ldr	r3, [r7, #32]
 800e4aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e4ac:	4b3e      	ldr	r3, [pc, #248]	; (800e5a8 <udp_input+0x21c>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e4b4:	4a3c      	ldr	r2, [pc, #240]	; (800e5a8 <udp_input+0x21c>)
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e4ba:	e008      	b.n	800e4ce <udp_input+0x142>
      }
    }

    prev = pcb;
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1a7      	bne.n	800e41c <udp_input+0x90>
 800e4cc:	e000      	b.n	800e4d0 <udp_input+0x144>
        break;
 800e4ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <udp_input+0x14e>
    pcb = uncon_pcb;
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <udp_input+0x15a>
    for_us = 1;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	76fb      	strb	r3, [r7, #27]
 800e4e4:	e00a      	b.n	800e4fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	4b2d      	ldr	r3, [pc, #180]	; (800e5a4 <udp_input+0x218>)
 800e4ee:	695b      	ldr	r3, [r3, #20]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	bf0c      	ite	eq
 800e4f4:	2301      	moveq	r3, #1
 800e4f6:	2300      	movne	r3, #0
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e4fc:	7efb      	ldrb	r3, [r7, #27]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d041      	beq.n	800e586 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e502:	2108      	movs	r1, #8
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7fa f8b1 	bl	800866c <pbuf_remove_header>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00a      	beq.n	800e526 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e510:	4b20      	ldr	r3, [pc, #128]	; (800e594 <udp_input+0x208>)
 800e512:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e516:	4925      	ldr	r1, [pc, #148]	; (800e5ac <udp_input+0x220>)
 800e518:	4820      	ldr	r0, [pc, #128]	; (800e59c <udp_input+0x210>)
 800e51a:	f004 fa67 	bl	80129ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7fa f92a 	bl	8008778 <pbuf_free>
      goto end;
 800e524:	e032      	b.n	800e58c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d012      	beq.n	800e552 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00a      	beq.n	800e54a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	699c      	ldr	r4, [r3, #24]
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	69d8      	ldr	r0, [r3, #28]
 800e53c:	8a3b      	ldrh	r3, [r7, #16]
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	4b1b      	ldr	r3, [pc, #108]	; (800e5b0 <udp_input+0x224>)
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e546:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e548:	e021      	b.n	800e58e <udp_input+0x202>
        pbuf_free(p);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7fa f914 	bl	8008778 <pbuf_free>
        goto end;
 800e550:	e01c      	b.n	800e58c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e552:	7cfb      	ldrb	r3, [r7, #19]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d112      	bne.n	800e57e <udp_input+0x1f2>
 800e558:	4b12      	ldr	r3, [pc, #72]	; (800e5a4 <udp_input+0x218>)
 800e55a:	695b      	ldr	r3, [r3, #20]
 800e55c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e560:	2be0      	cmp	r3, #224	; 0xe0
 800e562:	d00c      	beq.n	800e57e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e564:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <udp_input+0x218>)
 800e566:	899b      	ldrh	r3, [r3, #12]
 800e568:	3308      	adds	r3, #8
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	b21b      	sxth	r3, r3
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7fa f8ee 	bl	8008752 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e576:	2103      	movs	r1, #3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f001 fb49 	bl	800fc10 <icmp_dest_unreach>
      pbuf_free(p);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7fa f8fa 	bl	8008778 <pbuf_free>
  return;
 800e584:	e003      	b.n	800e58e <udp_input+0x202>
    pbuf_free(p);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7fa f8f6 	bl	8008778 <pbuf_free>
  return;
 800e58c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e58e:	372c      	adds	r7, #44	; 0x2c
 800e590:	46bd      	mov	sp, r7
 800e592:	bd90      	pop	{r4, r7, pc}
 800e594:	080161c4 	.word	0x080161c4
 800e598:	08016268 	.word	0x08016268
 800e59c:	08016218 	.word	0x08016218
 800e5a0:	08016280 	.word	0x08016280
 800e5a4:	20005bc0 	.word	0x20005bc0
 800e5a8:	2000d8ec 	.word	0x2000d8ec
 800e5ac:	0801629c 	.word	0x0801629c
 800e5b0:	20005bd0 	.word	0x20005bd0

0800e5b4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d109      	bne.n	800e5d8 <udp_send+0x24>
 800e5c4:	4b11      	ldr	r3, [pc, #68]	; (800e60c <udp_send+0x58>)
 800e5c6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e5ca:	4911      	ldr	r1, [pc, #68]	; (800e610 <udp_send+0x5c>)
 800e5cc:	4811      	ldr	r0, [pc, #68]	; (800e614 <udp_send+0x60>)
 800e5ce:	f004 fa0d 	bl	80129ec <iprintf>
 800e5d2:	f06f 030f 	mvn.w	r3, #15
 800e5d6:	e015      	b.n	800e604 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d109      	bne.n	800e5f2 <udp_send+0x3e>
 800e5de:	4b0b      	ldr	r3, [pc, #44]	; (800e60c <udp_send+0x58>)
 800e5e0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800e5e4:	490c      	ldr	r1, [pc, #48]	; (800e618 <udp_send+0x64>)
 800e5e6:	480b      	ldr	r0, [pc, #44]	; (800e614 <udp_send+0x60>)
 800e5e8:	f004 fa00 	bl	80129ec <iprintf>
 800e5ec:	f06f 030f 	mvn.w	r3, #15
 800e5f0:	e008      	b.n	800e604 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	1d1a      	adds	r2, r3, #4
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	8a9b      	ldrh	r3, [r3, #20]
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f000 f80d 	bl	800e61c <udp_sendto>
 800e602:	4603      	mov	r3, r0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	080161c4 	.word	0x080161c4
 800e610:	080162b8 	.word	0x080162b8
 800e614:	08016218 	.word	0x08016218
 800e618:	080162d0 	.word	0x080162d0

0800e61c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b088      	sub	sp, #32
 800e620:	af02      	add	r7, sp, #8
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d109      	bne.n	800e644 <udp_sendto+0x28>
 800e630:	4b23      	ldr	r3, [pc, #140]	; (800e6c0 <udp_sendto+0xa4>)
 800e632:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e636:	4923      	ldr	r1, [pc, #140]	; (800e6c4 <udp_sendto+0xa8>)
 800e638:	4823      	ldr	r0, [pc, #140]	; (800e6c8 <udp_sendto+0xac>)
 800e63a:	f004 f9d7 	bl	80129ec <iprintf>
 800e63e:	f06f 030f 	mvn.w	r3, #15
 800e642:	e038      	b.n	800e6b6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d109      	bne.n	800e65e <udp_sendto+0x42>
 800e64a:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <udp_sendto+0xa4>)
 800e64c:	f240 2219 	movw	r2, #537	; 0x219
 800e650:	491e      	ldr	r1, [pc, #120]	; (800e6cc <udp_sendto+0xb0>)
 800e652:	481d      	ldr	r0, [pc, #116]	; (800e6c8 <udp_sendto+0xac>)
 800e654:	f004 f9ca 	bl	80129ec <iprintf>
 800e658:	f06f 030f 	mvn.w	r3, #15
 800e65c:	e02b      	b.n	800e6b6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d109      	bne.n	800e678 <udp_sendto+0x5c>
 800e664:	4b16      	ldr	r3, [pc, #88]	; (800e6c0 <udp_sendto+0xa4>)
 800e666:	f240 221a 	movw	r2, #538	; 0x21a
 800e66a:	4919      	ldr	r1, [pc, #100]	; (800e6d0 <udp_sendto+0xb4>)
 800e66c:	4816      	ldr	r0, [pc, #88]	; (800e6c8 <udp_sendto+0xac>)
 800e66e:	f004 f9bd 	bl	80129ec <iprintf>
 800e672:	f06f 030f 	mvn.w	r3, #15
 800e676:	e01e      	b.n	800e6b6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	7a1b      	ldrb	r3, [r3, #8]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d006      	beq.n	800e68e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	7a1b      	ldrb	r3, [r3, #8]
 800e684:	4618      	mov	r0, r3
 800e686:	f7f9 fd0f 	bl	80080a8 <netif_get_by_index>
 800e68a:	6178      	str	r0, [r7, #20]
 800e68c:	e003      	b.n	800e696 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f001 fb48 	bl	800fd24 <ip4_route>
 800e694:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e69c:	f06f 0303 	mvn.w	r3, #3
 800e6a0:	e009      	b.n	800e6b6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e6a2:	887a      	ldrh	r2, [r7, #2]
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	68b9      	ldr	r1, [r7, #8]
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 f810 	bl	800e6d4 <udp_sendto_if>
 800e6b4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3718      	adds	r7, #24
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	080161c4 	.word	0x080161c4
 800e6c4:	080162e8 	.word	0x080162e8
 800e6c8:	08016218 	.word	0x08016218
 800e6cc:	08016300 	.word	0x08016300
 800e6d0:	0801631c 	.word	0x0801631c

0800e6d4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af02      	add	r7, sp, #8
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d109      	bne.n	800e6fc <udp_sendto_if+0x28>
 800e6e8:	4b2e      	ldr	r3, [pc, #184]	; (800e7a4 <udp_sendto_if+0xd0>)
 800e6ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6ee:	492e      	ldr	r1, [pc, #184]	; (800e7a8 <udp_sendto_if+0xd4>)
 800e6f0:	482e      	ldr	r0, [pc, #184]	; (800e7ac <udp_sendto_if+0xd8>)
 800e6f2:	f004 f97b 	bl	80129ec <iprintf>
 800e6f6:	f06f 030f 	mvn.w	r3, #15
 800e6fa:	e04f      	b.n	800e79c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d109      	bne.n	800e716 <udp_sendto_if+0x42>
 800e702:	4b28      	ldr	r3, [pc, #160]	; (800e7a4 <udp_sendto_if+0xd0>)
 800e704:	f240 2281 	movw	r2, #641	; 0x281
 800e708:	4929      	ldr	r1, [pc, #164]	; (800e7b0 <udp_sendto_if+0xdc>)
 800e70a:	4828      	ldr	r0, [pc, #160]	; (800e7ac <udp_sendto_if+0xd8>)
 800e70c:	f004 f96e 	bl	80129ec <iprintf>
 800e710:	f06f 030f 	mvn.w	r3, #15
 800e714:	e042      	b.n	800e79c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d109      	bne.n	800e730 <udp_sendto_if+0x5c>
 800e71c:	4b21      	ldr	r3, [pc, #132]	; (800e7a4 <udp_sendto_if+0xd0>)
 800e71e:	f240 2282 	movw	r2, #642	; 0x282
 800e722:	4924      	ldr	r1, [pc, #144]	; (800e7b4 <udp_sendto_if+0xe0>)
 800e724:	4821      	ldr	r0, [pc, #132]	; (800e7ac <udp_sendto_if+0xd8>)
 800e726:	f004 f961 	bl	80129ec <iprintf>
 800e72a:	f06f 030f 	mvn.w	r3, #15
 800e72e:	e035      	b.n	800e79c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d109      	bne.n	800e74a <udp_sendto_if+0x76>
 800e736:	4b1b      	ldr	r3, [pc, #108]	; (800e7a4 <udp_sendto_if+0xd0>)
 800e738:	f240 2283 	movw	r2, #643	; 0x283
 800e73c:	491e      	ldr	r1, [pc, #120]	; (800e7b8 <udp_sendto_if+0xe4>)
 800e73e:	481b      	ldr	r0, [pc, #108]	; (800e7ac <udp_sendto_if+0xd8>)
 800e740:	f004 f954 	bl	80129ec <iprintf>
 800e744:	f06f 030f 	mvn.w	r3, #15
 800e748:	e028      	b.n	800e79c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d009      	beq.n	800e764 <udp_sendto_if+0x90>
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d005      	beq.n	800e764 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e760:	2be0      	cmp	r3, #224	; 0xe0
 800e762:	d103      	bne.n	800e76c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	3304      	adds	r3, #4
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	e00b      	b.n	800e784 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	6a3b      	ldr	r3, [r7, #32]
 800e772:	3304      	adds	r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	429a      	cmp	r2, r3
 800e778:	d002      	beq.n	800e780 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e77a:	f06f 0303 	mvn.w	r3, #3
 800e77e:	e00d      	b.n	800e79c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e784:	887a      	ldrh	r2, [r7, #2]
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	4613      	mov	r3, r2
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	68b9      	ldr	r1, [r7, #8]
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f000 f811 	bl	800e7bc <udp_sendto_if_src>
 800e79a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	080161c4 	.word	0x080161c4
 800e7a8:	08016338 	.word	0x08016338
 800e7ac:	08016218 	.word	0x08016218
 800e7b0:	08016354 	.word	0x08016354
 800e7b4:	08016370 	.word	0x08016370
 800e7b8:	08016390 	.word	0x08016390

0800e7bc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08c      	sub	sp, #48	; 0x30
 800e7c0:	af04      	add	r7, sp, #16
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d109      	bne.n	800e7e4 <udp_sendto_if_src+0x28>
 800e7d0:	4b65      	ldr	r3, [pc, #404]	; (800e968 <udp_sendto_if_src+0x1ac>)
 800e7d2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e7d6:	4965      	ldr	r1, [pc, #404]	; (800e96c <udp_sendto_if_src+0x1b0>)
 800e7d8:	4865      	ldr	r0, [pc, #404]	; (800e970 <udp_sendto_if_src+0x1b4>)
 800e7da:	f004 f907 	bl	80129ec <iprintf>
 800e7de:	f06f 030f 	mvn.w	r3, #15
 800e7e2:	e0bc      	b.n	800e95e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <udp_sendto_if_src+0x42>
 800e7ea:	4b5f      	ldr	r3, [pc, #380]	; (800e968 <udp_sendto_if_src+0x1ac>)
 800e7ec:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e7f0:	4960      	ldr	r1, [pc, #384]	; (800e974 <udp_sendto_if_src+0x1b8>)
 800e7f2:	485f      	ldr	r0, [pc, #380]	; (800e970 <udp_sendto_if_src+0x1b4>)
 800e7f4:	f004 f8fa 	bl	80129ec <iprintf>
 800e7f8:	f06f 030f 	mvn.w	r3, #15
 800e7fc:	e0af      	b.n	800e95e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d109      	bne.n	800e818 <udp_sendto_if_src+0x5c>
 800e804:	4b58      	ldr	r3, [pc, #352]	; (800e968 <udp_sendto_if_src+0x1ac>)
 800e806:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e80a:	495b      	ldr	r1, [pc, #364]	; (800e978 <udp_sendto_if_src+0x1bc>)
 800e80c:	4858      	ldr	r0, [pc, #352]	; (800e970 <udp_sendto_if_src+0x1b4>)
 800e80e:	f004 f8ed 	bl	80129ec <iprintf>
 800e812:	f06f 030f 	mvn.w	r3, #15
 800e816:	e0a2      	b.n	800e95e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d109      	bne.n	800e832 <udp_sendto_if_src+0x76>
 800e81e:	4b52      	ldr	r3, [pc, #328]	; (800e968 <udp_sendto_if_src+0x1ac>)
 800e820:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e824:	4955      	ldr	r1, [pc, #340]	; (800e97c <udp_sendto_if_src+0x1c0>)
 800e826:	4852      	ldr	r0, [pc, #328]	; (800e970 <udp_sendto_if_src+0x1b4>)
 800e828:	f004 f8e0 	bl	80129ec <iprintf>
 800e82c:	f06f 030f 	mvn.w	r3, #15
 800e830:	e095      	b.n	800e95e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	2b00      	cmp	r3, #0
 800e836:	d109      	bne.n	800e84c <udp_sendto_if_src+0x90>
 800e838:	4b4b      	ldr	r3, [pc, #300]	; (800e968 <udp_sendto_if_src+0x1ac>)
 800e83a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e83e:	4950      	ldr	r1, [pc, #320]	; (800e980 <udp_sendto_if_src+0x1c4>)
 800e840:	484b      	ldr	r0, [pc, #300]	; (800e970 <udp_sendto_if_src+0x1b4>)
 800e842:	f004 f8d3 	bl	80129ec <iprintf>
 800e846:	f06f 030f 	mvn.w	r3, #15
 800e84a:	e088      	b.n	800e95e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	8a5b      	ldrh	r3, [r3, #18]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d10f      	bne.n	800e874 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e854:	68f9      	ldr	r1, [r7, #12]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	8a5b      	ldrh	r3, [r3, #18]
 800e85a:	461a      	mov	r2, r3
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f000 f893 	bl	800e988 <udp_bind>
 800e862:	4603      	mov	r3, r0
 800e864:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e866:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d002      	beq.n	800e874 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e86e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e872:	e074      	b.n	800e95e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	891b      	ldrh	r3, [r3, #8]
 800e878:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d902      	bls.n	800e886 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e880:	f04f 33ff 	mov.w	r3, #4294967295
 800e884:	e06b      	b.n	800e95e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e886:	2108      	movs	r1, #8
 800e888:	68b8      	ldr	r0, [r7, #8]
 800e88a:	f7f9 fedf 	bl	800864c <pbuf_add_header>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d015      	beq.n	800e8c0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e894:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e898:	2108      	movs	r1, #8
 800e89a:	2022      	movs	r0, #34	; 0x22
 800e89c:	f7f9 fc80 	bl	80081a0 <pbuf_alloc>
 800e8a0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d102      	bne.n	800e8ae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ac:	e057      	b.n	800e95e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	891b      	ldrh	r3, [r3, #8]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d006      	beq.n	800e8c4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e8b6:	68b9      	ldr	r1, [r7, #8]
 800e8b8:	69f8      	ldr	r0, [r7, #28]
 800e8ba:	f7fa f875 	bl	80089a8 <pbuf_chain>
 800e8be:	e001      	b.n	800e8c4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	895b      	ldrh	r3, [r3, #10]
 800e8c8:	2b07      	cmp	r3, #7
 800e8ca:	d806      	bhi.n	800e8da <udp_sendto_if_src+0x11e>
 800e8cc:	4b26      	ldr	r3, [pc, #152]	; (800e968 <udp_sendto_if_src+0x1ac>)
 800e8ce:	f240 320d 	movw	r2, #781	; 0x30d
 800e8d2:	492c      	ldr	r1, [pc, #176]	; (800e984 <udp_sendto_if_src+0x1c8>)
 800e8d4:	4826      	ldr	r0, [pc, #152]	; (800e970 <udp_sendto_if_src+0x1b4>)
 800e8d6:	f004 f889 	bl	80129ec <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	8a5b      	ldrh	r3, [r3, #18]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7f8 fb41 	bl	8006f6c <lwip_htons>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e8f2:	887b      	ldrh	r3, [r7, #2]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7f8 fb39 	bl	8006f6c <lwip_htons>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	2200      	movs	r2, #0
 800e906:	719a      	strb	r2, [r3, #6]
 800e908:	2200      	movs	r2, #0
 800e90a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	891b      	ldrh	r3, [r3, #8]
 800e910:	4618      	mov	r0, r3
 800e912:	f7f8 fb2b 	bl	8006f6c <lwip_htons>
 800e916:	4603      	mov	r3, r0
 800e918:	461a      	mov	r2, r3
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e91e:	2311      	movs	r3, #17
 800e920:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	7adb      	ldrb	r3, [r3, #11]
 800e926:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	7a9b      	ldrb	r3, [r3, #10]
 800e92c:	7cb9      	ldrb	r1, [r7, #18]
 800e92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e930:	9202      	str	r2, [sp, #8]
 800e932:	7cfa      	ldrb	r2, [r7, #19]
 800e934:	9201      	str	r2, [sp, #4]
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	460b      	mov	r3, r1
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e93e:	69f8      	ldr	r0, [r7, #28]
 800e940:	f001 fbd8 	bl	80100f4 <ip4_output_if_src>
 800e944:	4603      	mov	r3, r0
 800e946:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e948:	69fa      	ldr	r2, [r7, #28]
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d004      	beq.n	800e95a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e950:	69f8      	ldr	r0, [r7, #28]
 800e952:	f7f9 ff11 	bl	8008778 <pbuf_free>
    q = NULL;
 800e956:	2300      	movs	r3, #0
 800e958:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e95a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3720      	adds	r7, #32
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	080161c4 	.word	0x080161c4
 800e96c:	080163b0 	.word	0x080163b0
 800e970:	08016218 	.word	0x08016218
 800e974:	080163d0 	.word	0x080163d0
 800e978:	080163f0 	.word	0x080163f0
 800e97c:	08016414 	.word	0x08016414
 800e980:	08016438 	.word	0x08016438
 800e984:	0801645c 	.word	0x0801645c

0800e988 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	4613      	mov	r3, r2
 800e994:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d101      	bne.n	800e9a0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e99c:	4b39      	ldr	r3, [pc, #228]	; (800ea84 <udp_bind+0xfc>)
 800e99e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d109      	bne.n	800e9ba <udp_bind+0x32>
 800e9a6:	4b38      	ldr	r3, [pc, #224]	; (800ea88 <udp_bind+0x100>)
 800e9a8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e9ac:	4937      	ldr	r1, [pc, #220]	; (800ea8c <udp_bind+0x104>)
 800e9ae:	4838      	ldr	r0, [pc, #224]	; (800ea90 <udp_bind+0x108>)
 800e9b0:	f004 f81c 	bl	80129ec <iprintf>
 800e9b4:	f06f 030f 	mvn.w	r3, #15
 800e9b8:	e060      	b.n	800ea7c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9be:	4b35      	ldr	r3, [pc, #212]	; (800ea94 <udp_bind+0x10c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	617b      	str	r3, [r7, #20]
 800e9c4:	e009      	b.n	800e9da <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d102      	bne.n	800e9d4 <udp_bind+0x4c>
      rebind = 1;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	74fb      	strb	r3, [r7, #19]
      break;
 800e9d2:	e005      	b.n	800e9e0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	617b      	str	r3, [r7, #20]
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1f2      	bne.n	800e9c6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e9e0:	88fb      	ldrh	r3, [r7, #6]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <udp_bind+0x72>
    port = udp_new_port();
 800e9e6:	f7ff fc35 	bl	800e254 <udp_new_port>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e9ee:	88fb      	ldrh	r3, [r7, #6]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d12c      	bne.n	800ea4e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e9f4:	f06f 0307 	mvn.w	r3, #7
 800e9f8:	e040      	b.n	800ea7c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9fa:	4b26      	ldr	r3, [pc, #152]	; (800ea94 <udp_bind+0x10c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	e022      	b.n	800ea48 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d01b      	beq.n	800ea42 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	8a5b      	ldrh	r3, [r3, #18]
 800ea0e:	88fa      	ldrh	r2, [r7, #6]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d116      	bne.n	800ea42 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d00d      	beq.n	800ea3c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00a      	beq.n	800ea3c <udp_bind+0xb4>
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d006      	beq.n	800ea3c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea2e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d003      	beq.n	800ea3c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ea3c:	f06f 0307 	mvn.w	r3, #7
 800ea40:	e01c      	b.n	800ea7c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	617b      	str	r3, [r7, #20]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1d9      	bne.n	800ea02 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d002      	beq.n	800ea5a <udp_bind+0xd2>
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	e000      	b.n	800ea5c <udp_bind+0xd4>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	88fa      	ldrh	r2, [r7, #6]
 800ea64:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ea66:	7cfb      	ldrb	r3, [r7, #19]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d106      	bne.n	800ea7a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ea6c:	4b09      	ldr	r3, [pc, #36]	; (800ea94 <udp_bind+0x10c>)
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ea74:	4a07      	ldr	r2, [pc, #28]	; (800ea94 <udp_bind+0x10c>)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3718      	adds	r7, #24
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	08016d08 	.word	0x08016d08
 800ea88:	080161c4 	.word	0x080161c4
 800ea8c:	0801648c 	.word	0x0801648c
 800ea90:	08016218 	.word	0x08016218
 800ea94:	2000d8ec 	.word	0x2000d8ec

0800ea98 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d107      	bne.n	800eaba <udp_recv+0x22>
 800eaaa:	4b08      	ldr	r3, [pc, #32]	; (800eacc <udp_recv+0x34>)
 800eaac:	f240 428a 	movw	r2, #1162	; 0x48a
 800eab0:	4907      	ldr	r1, [pc, #28]	; (800ead0 <udp_recv+0x38>)
 800eab2:	4808      	ldr	r0, [pc, #32]	; (800ead4 <udp_recv+0x3c>)
 800eab4:	f003 ff9a 	bl	80129ec <iprintf>
 800eab8:	e005      	b.n	800eac6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	61da      	str	r2, [r3, #28]
}
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	080161c4 	.word	0x080161c4
 800ead0:	080164f8 	.word	0x080164f8
 800ead4:	08016218 	.word	0x08016218

0800ead8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800eade:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800eae2:	490a      	ldr	r1, [pc, #40]	; (800eb0c <udp_new+0x34>)
 800eae4:	2000      	movs	r0, #0
 800eae6:	f7f8 ffc9 	bl	8007a7c <memp_malloc_fn>
 800eaea:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d007      	beq.n	800eb02 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800eaf2:	2220      	movs	r2, #32
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f003 ff70 	bl	80129dc <memset>
    pcb->ttl = UDP_TTL;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	22ff      	movs	r2, #255	; 0xff
 800eb00:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800eb02:	687b      	ldr	r3, [r7, #4]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	080161c4 	.word	0x080161c4

0800eb10 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d01e      	beq.n	800eb5e <udp_netif_ip_addr_changed+0x4e>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d01a      	beq.n	800eb5e <udp_netif_ip_addr_changed+0x4e>
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d017      	beq.n	800eb5e <udp_netif_ip_addr_changed+0x4e>
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d013      	beq.n	800eb5e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb36:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <udp_netif_ip_addr_changed+0x5c>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	e00c      	b.n	800eb58 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d103      	bne.n	800eb52 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1ef      	bne.n	800eb3e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800eb5e:	bf00      	nop
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	2000d8ec 	.word	0x2000d8ec

0800eb70 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800eb78:	4915      	ldr	r1, [pc, #84]	; (800ebd0 <etharp_free_entry+0x60>)
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	005b      	lsls	r3, r3, #1
 800eb80:	4413      	add	r3, r2
 800eb82:	00db      	lsls	r3, r3, #3
 800eb84:	440b      	add	r3, r1
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d013      	beq.n	800ebb4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800eb8c:	4910      	ldr	r1, [pc, #64]	; (800ebd0 <etharp_free_entry+0x60>)
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	4613      	mov	r3, r2
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	4413      	add	r3, r2
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	440b      	add	r3, r1
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7f9 fdeb 	bl	8008778 <pbuf_free>
    arp_table[i].q = NULL;
 800eba2:	490b      	ldr	r1, [pc, #44]	; (800ebd0 <etharp_free_entry+0x60>)
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	4613      	mov	r3, r2
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4413      	add	r3, r2
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	440b      	add	r3, r1
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ebb4:	4906      	ldr	r1, [pc, #24]	; (800ebd0 <etharp_free_entry+0x60>)
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	4413      	add	r3, r2
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	440b      	add	r3, r1
 800ebc2:	3314      	adds	r3, #20
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ebc8:	bf00      	nop
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	2000d8f0 	.word	0x2000d8f0

0800ebd4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ebda:	2300      	movs	r3, #0
 800ebdc:	607b      	str	r3, [r7, #4]
 800ebde:	e096      	b.n	800ed0e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ebe0:	494f      	ldr	r1, [pc, #316]	; (800ed20 <etharp_tmr+0x14c>)
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	005b      	lsls	r3, r3, #1
 800ebe8:	4413      	add	r3, r2
 800ebea:	00db      	lsls	r3, r3, #3
 800ebec:	440b      	add	r3, r1
 800ebee:	3314      	adds	r3, #20
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ebf4:	78fb      	ldrb	r3, [r7, #3]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f000 8086 	beq.w	800ed08 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ebfc:	4948      	ldr	r1, [pc, #288]	; (800ed20 <etharp_tmr+0x14c>)
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	4613      	mov	r3, r2
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	4413      	add	r3, r2
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	440b      	add	r3, r1
 800ec0a:	3312      	adds	r3, #18
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	b298      	uxth	r0, r3
 800ec12:	4943      	ldr	r1, [pc, #268]	; (800ed20 <etharp_tmr+0x14c>)
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	4613      	mov	r3, r2
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	4413      	add	r3, r2
 800ec1c:	00db      	lsls	r3, r3, #3
 800ec1e:	440b      	add	r3, r1
 800ec20:	3312      	adds	r3, #18
 800ec22:	4602      	mov	r2, r0
 800ec24:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ec26:	493e      	ldr	r1, [pc, #248]	; (800ed20 <etharp_tmr+0x14c>)
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	4413      	add	r3, r2
 800ec30:	00db      	lsls	r3, r3, #3
 800ec32:	440b      	add	r3, r1
 800ec34:	3312      	adds	r3, #18
 800ec36:	881b      	ldrh	r3, [r3, #0]
 800ec38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ec3c:	d215      	bcs.n	800ec6a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ec3e:	4938      	ldr	r1, [pc, #224]	; (800ed20 <etharp_tmr+0x14c>)
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	4613      	mov	r3, r2
 800ec44:	005b      	lsls	r3, r3, #1
 800ec46:	4413      	add	r3, r2
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	440b      	add	r3, r1
 800ec4c:	3314      	adds	r3, #20
 800ec4e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d10e      	bne.n	800ec72 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ec54:	4932      	ldr	r1, [pc, #200]	; (800ed20 <etharp_tmr+0x14c>)
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	4613      	mov	r3, r2
 800ec5a:	005b      	lsls	r3, r3, #1
 800ec5c:	4413      	add	r3, r2
 800ec5e:	00db      	lsls	r3, r3, #3
 800ec60:	440b      	add	r3, r1
 800ec62:	3312      	adds	r3, #18
 800ec64:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ec66:	2b04      	cmp	r3, #4
 800ec68:	d903      	bls.n	800ec72 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7ff ff80 	bl	800eb70 <etharp_free_entry>
 800ec70:	e04a      	b.n	800ed08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ec72:	492b      	ldr	r1, [pc, #172]	; (800ed20 <etharp_tmr+0x14c>)
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	4613      	mov	r3, r2
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	4413      	add	r3, r2
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	440b      	add	r3, r1
 800ec80:	3314      	adds	r3, #20
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b03      	cmp	r3, #3
 800ec86:	d10a      	bne.n	800ec9e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ec88:	4925      	ldr	r1, [pc, #148]	; (800ed20 <etharp_tmr+0x14c>)
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	4413      	add	r3, r2
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	440b      	add	r3, r1
 800ec96:	3314      	adds	r3, #20
 800ec98:	2204      	movs	r2, #4
 800ec9a:	701a      	strb	r2, [r3, #0]
 800ec9c:	e034      	b.n	800ed08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ec9e:	4920      	ldr	r1, [pc, #128]	; (800ed20 <etharp_tmr+0x14c>)
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	4613      	mov	r3, r2
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	4413      	add	r3, r2
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	440b      	add	r3, r1
 800ecac:	3314      	adds	r3, #20
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	2b04      	cmp	r3, #4
 800ecb2:	d10a      	bne.n	800ecca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ecb4:	491a      	ldr	r1, [pc, #104]	; (800ed20 <etharp_tmr+0x14c>)
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	4613      	mov	r3, r2
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	4413      	add	r3, r2
 800ecbe:	00db      	lsls	r3, r3, #3
 800ecc0:	440b      	add	r3, r1
 800ecc2:	3314      	adds	r3, #20
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	701a      	strb	r2, [r3, #0]
 800ecc8:	e01e      	b.n	800ed08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ecca:	4915      	ldr	r1, [pc, #84]	; (800ed20 <etharp_tmr+0x14c>)
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	005b      	lsls	r3, r3, #1
 800ecd2:	4413      	add	r3, r2
 800ecd4:	00db      	lsls	r3, r3, #3
 800ecd6:	440b      	add	r3, r1
 800ecd8:	3314      	adds	r3, #20
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d113      	bne.n	800ed08 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ece0:	490f      	ldr	r1, [pc, #60]	; (800ed20 <etharp_tmr+0x14c>)
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	4613      	mov	r3, r2
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	4413      	add	r3, r2
 800ecea:	00db      	lsls	r3, r3, #3
 800ecec:	440b      	add	r3, r1
 800ecee:	3308      	adds	r3, #8
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	4a08      	ldr	r2, [pc, #32]	; (800ed20 <etharp_tmr+0x14c>)
 800ecfe:	4413      	add	r3, r2
 800ed00:	3304      	adds	r3, #4
 800ed02:	4619      	mov	r1, r3
 800ed04:	f000 fe6e 	bl	800f9e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	607b      	str	r3, [r7, #4]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b09      	cmp	r3, #9
 800ed12:	f77f af65 	ble.w	800ebe0 <etharp_tmr+0xc>
      }
    }
  }
}
 800ed16:	bf00      	nop
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	2000d8f0 	.word	0x2000d8f0

0800ed24 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08a      	sub	sp, #40	; 0x28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ed32:	230a      	movs	r3, #10
 800ed34:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed36:	230a      	movs	r3, #10
 800ed38:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ed3a:	230a      	movs	r3, #10
 800ed3c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ed42:	230a      	movs	r3, #10
 800ed44:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	83bb      	strh	r3, [r7, #28]
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	837b      	strh	r3, [r7, #26]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed52:	2300      	movs	r3, #0
 800ed54:	843b      	strh	r3, [r7, #32]
 800ed56:	e0ae      	b.n	800eeb6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ed58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed5c:	49a6      	ldr	r1, [pc, #664]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ed5e:	4613      	mov	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	4413      	add	r3, r2
 800ed64:	00db      	lsls	r3, r3, #3
 800ed66:	440b      	add	r3, r1
 800ed68:	3314      	adds	r3, #20
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ed6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed72:	2b0a      	cmp	r3, #10
 800ed74:	d105      	bne.n	800ed82 <etharp_find_entry+0x5e>
 800ed76:	7dfb      	ldrb	r3, [r7, #23]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d102      	bne.n	800ed82 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ed7c:	8c3b      	ldrh	r3, [r7, #32]
 800ed7e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ed80:	e095      	b.n	800eeae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ed82:	7dfb      	ldrb	r3, [r7, #23]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 8092 	beq.w	800eeae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d009      	beq.n	800eda4 <etharp_find_entry+0x80>
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d806      	bhi.n	800eda4 <etharp_find_entry+0x80>
 800ed96:	4b99      	ldr	r3, [pc, #612]	; (800effc <etharp_find_entry+0x2d8>)
 800ed98:	f240 1223 	movw	r2, #291	; 0x123
 800ed9c:	4998      	ldr	r1, [pc, #608]	; (800f000 <etharp_find_entry+0x2dc>)
 800ed9e:	4899      	ldr	r0, [pc, #612]	; (800f004 <etharp_find_entry+0x2e0>)
 800eda0:	f003 fe24 	bl	80129ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d020      	beq.n	800edec <etharp_find_entry+0xc8>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6819      	ldr	r1, [r3, #0]
 800edae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edb2:	4891      	ldr	r0, [pc, #580]	; (800eff8 <etharp_find_entry+0x2d4>)
 800edb4:	4613      	mov	r3, r2
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	00db      	lsls	r3, r3, #3
 800edbc:	4403      	add	r3, r0
 800edbe:	3304      	adds	r3, #4
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4299      	cmp	r1, r3
 800edc4:	d112      	bne.n	800edec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00c      	beq.n	800ede6 <etharp_find_entry+0xc2>
 800edcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edd0:	4989      	ldr	r1, [pc, #548]	; (800eff8 <etharp_find_entry+0x2d4>)
 800edd2:	4613      	mov	r3, r2
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	4413      	add	r3, r2
 800edd8:	00db      	lsls	r3, r3, #3
 800edda:	440b      	add	r3, r1
 800eddc:	3308      	adds	r3, #8
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d102      	bne.n	800edec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ede6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edea:	e100      	b.n	800efee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800edec:	7dfb      	ldrb	r3, [r7, #23]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d140      	bne.n	800ee74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800edf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edf6:	4980      	ldr	r1, [pc, #512]	; (800eff8 <etharp_find_entry+0x2d4>)
 800edf8:	4613      	mov	r3, r2
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	4413      	add	r3, r2
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	440b      	add	r3, r1
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d01a      	beq.n	800ee3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ee08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee0c:	497a      	ldr	r1, [pc, #488]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ee0e:	4613      	mov	r3, r2
 800ee10:	005b      	lsls	r3, r3, #1
 800ee12:	4413      	add	r3, r2
 800ee14:	00db      	lsls	r3, r3, #3
 800ee16:	440b      	add	r3, r1
 800ee18:	3312      	adds	r3, #18
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	8bba      	ldrh	r2, [r7, #28]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d845      	bhi.n	800eeae <etharp_find_entry+0x18a>
            old_queue = i;
 800ee22:	8c3b      	ldrh	r3, [r7, #32]
 800ee24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ee26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee2a:	4973      	ldr	r1, [pc, #460]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	440b      	add	r3, r1
 800ee36:	3312      	adds	r3, #18
 800ee38:	881b      	ldrh	r3, [r3, #0]
 800ee3a:	83bb      	strh	r3, [r7, #28]
 800ee3c:	e037      	b.n	800eeae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ee3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee42:	496d      	ldr	r1, [pc, #436]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ee44:	4613      	mov	r3, r2
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	4413      	add	r3, r2
 800ee4a:	00db      	lsls	r3, r3, #3
 800ee4c:	440b      	add	r3, r1
 800ee4e:	3312      	adds	r3, #18
 800ee50:	881b      	ldrh	r3, [r3, #0]
 800ee52:	8b7a      	ldrh	r2, [r7, #26]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d82a      	bhi.n	800eeae <etharp_find_entry+0x18a>
            old_pending = i;
 800ee58:	8c3b      	ldrh	r3, [r7, #32]
 800ee5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ee5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee60:	4965      	ldr	r1, [pc, #404]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ee62:	4613      	mov	r3, r2
 800ee64:	005b      	lsls	r3, r3, #1
 800ee66:	4413      	add	r3, r2
 800ee68:	00db      	lsls	r3, r3, #3
 800ee6a:	440b      	add	r3, r1
 800ee6c:	3312      	adds	r3, #18
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	837b      	strh	r3, [r7, #26]
 800ee72:	e01c      	b.n	800eeae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ee74:	7dfb      	ldrb	r3, [r7, #23]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d919      	bls.n	800eeae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ee7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee7e:	495e      	ldr	r1, [pc, #376]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	440b      	add	r3, r1
 800ee8a:	3312      	adds	r3, #18
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	8b3a      	ldrh	r2, [r7, #24]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d80c      	bhi.n	800eeae <etharp_find_entry+0x18a>
            old_stable = i;
 800ee94:	8c3b      	ldrh	r3, [r7, #32]
 800ee96:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ee98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee9c:	4956      	ldr	r1, [pc, #344]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ee9e:	4613      	mov	r3, r2
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	4413      	add	r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	440b      	add	r3, r1
 800eea8:	3312      	adds	r3, #18
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eeae:	8c3b      	ldrh	r3, [r7, #32]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	843b      	strh	r3, [r7, #32]
 800eeb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eeba:	2b09      	cmp	r3, #9
 800eebc:	f77f af4c 	ble.w	800ed58 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800eec0:	7afb      	ldrb	r3, [r7, #11]
 800eec2:	f003 0302 	and.w	r3, r3, #2
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d108      	bne.n	800eedc <etharp_find_entry+0x1b8>
 800eeca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eece:	2b0a      	cmp	r3, #10
 800eed0:	d107      	bne.n	800eee2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800eed2:	7afb      	ldrb	r3, [r7, #11]
 800eed4:	f003 0301 	and.w	r3, r3, #1
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800eedc:	f04f 33ff 	mov.w	r3, #4294967295
 800eee0:	e085      	b.n	800efee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800eee2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eee6:	2b09      	cmp	r3, #9
 800eee8:	dc02      	bgt.n	800eef0 <etharp_find_entry+0x1cc>
    i = empty;
 800eeea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeec:	843b      	strh	r3, [r7, #32]
 800eeee:	e039      	b.n	800ef64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800eef0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eef4:	2b09      	cmp	r3, #9
 800eef6:	dc14      	bgt.n	800ef22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800eef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eefa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800eefc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef00:	493d      	ldr	r1, [pc, #244]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ef02:	4613      	mov	r3, r2
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	4413      	add	r3, r2
 800ef08:	00db      	lsls	r3, r3, #3
 800ef0a:	440b      	add	r3, r1
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d018      	beq.n	800ef44 <etharp_find_entry+0x220>
 800ef12:	4b3a      	ldr	r3, [pc, #232]	; (800effc <etharp_find_entry+0x2d8>)
 800ef14:	f240 126d 	movw	r2, #365	; 0x16d
 800ef18:	493b      	ldr	r1, [pc, #236]	; (800f008 <etharp_find_entry+0x2e4>)
 800ef1a:	483a      	ldr	r0, [pc, #232]	; (800f004 <etharp_find_entry+0x2e0>)
 800ef1c:	f003 fd66 	bl	80129ec <iprintf>
 800ef20:	e010      	b.n	800ef44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ef22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ef26:	2b09      	cmp	r3, #9
 800ef28:	dc02      	bgt.n	800ef30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ef2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ef2c:	843b      	strh	r3, [r7, #32]
 800ef2e:	e009      	b.n	800ef44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ef30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ef34:	2b09      	cmp	r3, #9
 800ef36:	dc02      	bgt.n	800ef3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ef38:	8bfb      	ldrh	r3, [r7, #30]
 800ef3a:	843b      	strh	r3, [r7, #32]
 800ef3c:	e002      	b.n	800ef44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ef3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef42:	e054      	b.n	800efee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ef44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef48:	2b09      	cmp	r3, #9
 800ef4a:	dd06      	ble.n	800ef5a <etharp_find_entry+0x236>
 800ef4c:	4b2b      	ldr	r3, [pc, #172]	; (800effc <etharp_find_entry+0x2d8>)
 800ef4e:	f240 127f 	movw	r2, #383	; 0x17f
 800ef52:	492e      	ldr	r1, [pc, #184]	; (800f00c <etharp_find_entry+0x2e8>)
 800ef54:	482b      	ldr	r0, [pc, #172]	; (800f004 <etharp_find_entry+0x2e0>)
 800ef56:	f003 fd49 	bl	80129ec <iprintf>
    etharp_free_entry(i);
 800ef5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7ff fe06 	bl	800eb70 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ef64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef68:	2b09      	cmp	r3, #9
 800ef6a:	dd06      	ble.n	800ef7a <etharp_find_entry+0x256>
 800ef6c:	4b23      	ldr	r3, [pc, #140]	; (800effc <etharp_find_entry+0x2d8>)
 800ef6e:	f240 1283 	movw	r2, #387	; 0x183
 800ef72:	4926      	ldr	r1, [pc, #152]	; (800f00c <etharp_find_entry+0x2e8>)
 800ef74:	4823      	ldr	r0, [pc, #140]	; (800f004 <etharp_find_entry+0x2e0>)
 800ef76:	f003 fd39 	bl	80129ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ef7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef7e:	491e      	ldr	r1, [pc, #120]	; (800eff8 <etharp_find_entry+0x2d4>)
 800ef80:	4613      	mov	r3, r2
 800ef82:	005b      	lsls	r3, r3, #1
 800ef84:	4413      	add	r3, r2
 800ef86:	00db      	lsls	r3, r3, #3
 800ef88:	440b      	add	r3, r1
 800ef8a:	3314      	adds	r3, #20
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d006      	beq.n	800efa0 <etharp_find_entry+0x27c>
 800ef92:	4b1a      	ldr	r3, [pc, #104]	; (800effc <etharp_find_entry+0x2d8>)
 800ef94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ef98:	491d      	ldr	r1, [pc, #116]	; (800f010 <etharp_find_entry+0x2ec>)
 800ef9a:	481a      	ldr	r0, [pc, #104]	; (800f004 <etharp_find_entry+0x2e0>)
 800ef9c:	f003 fd26 	bl	80129ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00b      	beq.n	800efbe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800efa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6819      	ldr	r1, [r3, #0]
 800efae:	4812      	ldr	r0, [pc, #72]	; (800eff8 <etharp_find_entry+0x2d4>)
 800efb0:	4613      	mov	r3, r2
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	4413      	add	r3, r2
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	4403      	add	r3, r0
 800efba:	3304      	adds	r3, #4
 800efbc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800efbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efc2:	490d      	ldr	r1, [pc, #52]	; (800eff8 <etharp_find_entry+0x2d4>)
 800efc4:	4613      	mov	r3, r2
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	4413      	add	r3, r2
 800efca:	00db      	lsls	r3, r3, #3
 800efcc:	440b      	add	r3, r1
 800efce:	3312      	adds	r3, #18
 800efd0:	2200      	movs	r2, #0
 800efd2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800efd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efd8:	4907      	ldr	r1, [pc, #28]	; (800eff8 <etharp_find_entry+0x2d4>)
 800efda:	4613      	mov	r3, r2
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	4413      	add	r3, r2
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	440b      	add	r3, r1
 800efe4:	3308      	adds	r3, #8
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800efea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3728      	adds	r7, #40	; 0x28
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	2000d8f0 	.word	0x2000d8f0
 800effc:	08016528 	.word	0x08016528
 800f000:	08016560 	.word	0x08016560
 800f004:	080165a0 	.word	0x080165a0
 800f008:	080165c8 	.word	0x080165c8
 800f00c:	080165e0 	.word	0x080165e0
 800f010:	080165f4 	.word	0x080165f4

0800f014 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af02      	add	r7, sp, #8
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
 800f020:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f028:	2b06      	cmp	r3, #6
 800f02a:	d006      	beq.n	800f03a <etharp_update_arp_entry+0x26>
 800f02c:	4b48      	ldr	r3, [pc, #288]	; (800f150 <etharp_update_arp_entry+0x13c>)
 800f02e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f032:	4948      	ldr	r1, [pc, #288]	; (800f154 <etharp_update_arp_entry+0x140>)
 800f034:	4848      	ldr	r0, [pc, #288]	; (800f158 <etharp_update_arp_entry+0x144>)
 800f036:	f003 fcd9 	bl	80129ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d012      	beq.n	800f066 <etharp_update_arp_entry+0x52>
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00e      	beq.n	800f066 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68f9      	ldr	r1, [r7, #12]
 800f04e:	4618      	mov	r0, r3
 800f050:	f001 f8fe 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800f054:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f056:	2b00      	cmp	r3, #0
 800f058:	d105      	bne.n	800f066 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f062:	2be0      	cmp	r3, #224	; 0xe0
 800f064:	d102      	bne.n	800f06c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f066:	f06f 030f 	mvn.w	r3, #15
 800f06a:	e06c      	b.n	800f146 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f06c:	78fb      	ldrb	r3, [r7, #3]
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	4619      	mov	r1, r3
 800f072:	68b8      	ldr	r0, [r7, #8]
 800f074:	f7ff fe56 	bl	800ed24 <etharp_find_entry>
 800f078:	4603      	mov	r3, r0
 800f07a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f07c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f080:	2b00      	cmp	r3, #0
 800f082:	da02      	bge.n	800f08a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f084:	8afb      	ldrh	r3, [r7, #22]
 800f086:	b25b      	sxtb	r3, r3
 800f088:	e05d      	b.n	800f146 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f08a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f08e:	4933      	ldr	r1, [pc, #204]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f090:	4613      	mov	r3, r2
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	4413      	add	r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	440b      	add	r3, r1
 800f09a:	3314      	adds	r3, #20
 800f09c:	2202      	movs	r2, #2
 800f09e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f0a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0a4:	492d      	ldr	r1, [pc, #180]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	4413      	add	r3, r2
 800f0ac:	00db      	lsls	r3, r3, #3
 800f0ae:	440b      	add	r3, r1
 800f0b0:	3308      	adds	r3, #8
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f0b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	4413      	add	r3, r2
 800f0c0:	00db      	lsls	r3, r3, #3
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	4a25      	ldr	r2, [pc, #148]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f0c6:	4413      	add	r3, r2
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	2206      	movs	r2, #6
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f003 fc5c 	bl	801298c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f0d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0d8:	4920      	ldr	r1, [pc, #128]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f0da:	4613      	mov	r3, r2
 800f0dc:	005b      	lsls	r3, r3, #1
 800f0de:	4413      	add	r3, r2
 800f0e0:	00db      	lsls	r3, r3, #3
 800f0e2:	440b      	add	r3, r1
 800f0e4:	3312      	adds	r3, #18
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f0ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0ee:	491b      	ldr	r1, [pc, #108]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	4413      	add	r3, r2
 800f0f6:	00db      	lsls	r3, r3, #3
 800f0f8:	440b      	add	r3, r1
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d021      	beq.n	800f144 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f100:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f104:	4915      	ldr	r1, [pc, #84]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f106:	4613      	mov	r3, r2
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4413      	add	r3, r2
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	440b      	add	r3, r1
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f114:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f118:	4910      	ldr	r1, [pc, #64]	; (800f15c <etharp_update_arp_entry+0x148>)
 800f11a:	4613      	mov	r3, r2
 800f11c:	005b      	lsls	r3, r3, #1
 800f11e:	4413      	add	r3, r2
 800f120:	00db      	lsls	r3, r3, #3
 800f122:	440b      	add	r3, r1
 800f124:	2200      	movs	r2, #0
 800f126:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f12e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6939      	ldr	r1, [r7, #16]
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f001 ffa5 	bl	8011088 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f13e:	6938      	ldr	r0, [r7, #16]
 800f140:	f7f9 fb1a 	bl	8008778 <pbuf_free>
  }
  return ERR_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	08016528 	.word	0x08016528
 800f154:	08016620 	.word	0x08016620
 800f158:	080165a0 	.word	0x080165a0
 800f15c:	2000d8f0 	.word	0x2000d8f0

0800f160 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f168:	2300      	movs	r3, #0
 800f16a:	60fb      	str	r3, [r7, #12]
 800f16c:	e01e      	b.n	800f1ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f16e:	4913      	ldr	r1, [pc, #76]	; (800f1bc <etharp_cleanup_netif+0x5c>)
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4613      	mov	r3, r2
 800f174:	005b      	lsls	r3, r3, #1
 800f176:	4413      	add	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	440b      	add	r3, r1
 800f17c:	3314      	adds	r3, #20
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f182:	7afb      	ldrb	r3, [r7, #11]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00e      	beq.n	800f1a6 <etharp_cleanup_netif+0x46>
 800f188:	490c      	ldr	r1, [pc, #48]	; (800f1bc <etharp_cleanup_netif+0x5c>)
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	4613      	mov	r3, r2
 800f18e:	005b      	lsls	r3, r3, #1
 800f190:	4413      	add	r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	440b      	add	r3, r1
 800f196:	3308      	adds	r3, #8
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d102      	bne.n	800f1a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f7ff fce5 	bl	800eb70 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b09      	cmp	r3, #9
 800f1b0:	dddd      	ble.n	800f16e <etharp_cleanup_netif+0xe>
    }
  }
}
 800f1b2:	bf00      	nop
 800f1b4:	bf00      	nop
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	2000d8f0 	.word	0x2000d8f0

0800f1c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f1c0:	b5b0      	push	{r4, r5, r7, lr}
 800f1c2:	b08a      	sub	sp, #40	; 0x28
 800f1c4:	af04      	add	r7, sp, #16
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d107      	bne.n	800f1e0 <etharp_input+0x20>
 800f1d0:	4b3d      	ldr	r3, [pc, #244]	; (800f2c8 <etharp_input+0x108>)
 800f1d2:	f240 228a 	movw	r2, #650	; 0x28a
 800f1d6:	493d      	ldr	r1, [pc, #244]	; (800f2cc <etharp_input+0x10c>)
 800f1d8:	483d      	ldr	r0, [pc, #244]	; (800f2d0 <etharp_input+0x110>)
 800f1da:	f003 fc07 	bl	80129ec <iprintf>
 800f1de:	e06f      	b.n	800f2c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1f0:	d10c      	bne.n	800f20c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f1f6:	2b06      	cmp	r3, #6
 800f1f8:	d108      	bne.n	800f20c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d104      	bne.n	800f20c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	885b      	ldrh	r3, [r3, #2]
 800f206:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f208:	2b08      	cmp	r3, #8
 800f20a:	d003      	beq.n	800f214 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7f9 fab3 	bl	8008778 <pbuf_free>
    return;
 800f212:	e055      	b.n	800f2c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	330e      	adds	r3, #14
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	3318      	adds	r3, #24
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	3304      	adds	r3, #4
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d102      	bne.n	800f234 <etharp_input+0x74>
    for_us = 0;
 800f22e:	2300      	movs	r3, #0
 800f230:	75fb      	strb	r3, [r7, #23]
 800f232:	e009      	b.n	800f248 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	3304      	adds	r3, #4
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	bf0c      	ite	eq
 800f240:	2301      	moveq	r3, #1
 800f242:	2300      	movne	r3, #0
 800f244:	b2db      	uxtb	r3, r3
 800f246:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	f103 0208 	add.w	r2, r3, #8
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d001      	beq.n	800f258 <etharp_input+0x98>
 800f254:	2301      	movs	r3, #1
 800f256:	e000      	b.n	800f25a <etharp_input+0x9a>
 800f258:	2302      	movs	r3, #2
 800f25a:	f107 010c 	add.w	r1, r7, #12
 800f25e:	6838      	ldr	r0, [r7, #0]
 800f260:	f7ff fed8 	bl	800f014 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	88db      	ldrh	r3, [r3, #6]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f26e:	d003      	beq.n	800f278 <etharp_input+0xb8>
 800f270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f274:	d01e      	beq.n	800f2b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f276:	e020      	b.n	800f2ba <etharp_input+0xfa>
      if (for_us) {
 800f278:	7dfb      	ldrb	r3, [r7, #23]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d01c      	beq.n	800f2b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f294:	693a      	ldr	r2, [r7, #16]
 800f296:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f298:	2102      	movs	r1, #2
 800f29a:	9103      	str	r1, [sp, #12]
 800f29c:	f107 010c 	add.w	r1, r7, #12
 800f2a0:	9102      	str	r1, [sp, #8]
 800f2a2:	9201      	str	r2, [sp, #4]
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	462b      	mov	r3, r5
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	4601      	mov	r1, r0
 800f2ac:	6838      	ldr	r0, [r7, #0]
 800f2ae:	f000 faeb 	bl	800f888 <etharp_raw>
      break;
 800f2b2:	e001      	b.n	800f2b8 <etharp_input+0xf8>
      break;
 800f2b4:	bf00      	nop
 800f2b6:	e000      	b.n	800f2ba <etharp_input+0xfa>
      break;
 800f2b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7f9 fa5c 	bl	8008778 <pbuf_free>
}
 800f2c0:	3718      	adds	r7, #24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	08016528 	.word	0x08016528
 800f2cc:	08016678 	.word	0x08016678
 800f2d0:	080165a0 	.word	0x080165a0

0800f2d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b086      	sub	sp, #24
 800f2d8:	af02      	add	r7, sp, #8
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f2e2:	79fa      	ldrb	r2, [r7, #7]
 800f2e4:	4944      	ldr	r1, [pc, #272]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	440b      	add	r3, r1
 800f2f0:	3314      	adds	r3, #20
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d806      	bhi.n	800f306 <etharp_output_to_arp_index+0x32>
 800f2f8:	4b40      	ldr	r3, [pc, #256]	; (800f3fc <etharp_output_to_arp_index+0x128>)
 800f2fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f2fe:	4940      	ldr	r1, [pc, #256]	; (800f400 <etharp_output_to_arp_index+0x12c>)
 800f300:	4840      	ldr	r0, [pc, #256]	; (800f404 <etharp_output_to_arp_index+0x130>)
 800f302:	f003 fb73 	bl	80129ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f306:	79fa      	ldrb	r2, [r7, #7]
 800f308:	493b      	ldr	r1, [pc, #236]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f30a:	4613      	mov	r3, r2
 800f30c:	005b      	lsls	r3, r3, #1
 800f30e:	4413      	add	r3, r2
 800f310:	00db      	lsls	r3, r3, #3
 800f312:	440b      	add	r3, r1
 800f314:	3314      	adds	r3, #20
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d153      	bne.n	800f3c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f31c:	79fa      	ldrb	r2, [r7, #7]
 800f31e:	4936      	ldr	r1, [pc, #216]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f320:	4613      	mov	r3, r2
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	4413      	add	r3, r2
 800f326:	00db      	lsls	r3, r3, #3
 800f328:	440b      	add	r3, r1
 800f32a:	3312      	adds	r3, #18
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f332:	d919      	bls.n	800f368 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f334:	79fa      	ldrb	r2, [r7, #7]
 800f336:	4613      	mov	r3, r2
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	4413      	add	r3, r2
 800f33c:	00db      	lsls	r3, r3, #3
 800f33e:	4a2e      	ldr	r2, [pc, #184]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f340:	4413      	add	r3, r2
 800f342:	3304      	adds	r3, #4
 800f344:	4619      	mov	r1, r3
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f000 fb4c 	bl	800f9e4 <etharp_request>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d138      	bne.n	800f3c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f352:	79fa      	ldrb	r2, [r7, #7]
 800f354:	4928      	ldr	r1, [pc, #160]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f356:	4613      	mov	r3, r2
 800f358:	005b      	lsls	r3, r3, #1
 800f35a:	4413      	add	r3, r2
 800f35c:	00db      	lsls	r3, r3, #3
 800f35e:	440b      	add	r3, r1
 800f360:	3314      	adds	r3, #20
 800f362:	2203      	movs	r2, #3
 800f364:	701a      	strb	r2, [r3, #0]
 800f366:	e02d      	b.n	800f3c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f368:	79fa      	ldrb	r2, [r7, #7]
 800f36a:	4923      	ldr	r1, [pc, #140]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f36c:	4613      	mov	r3, r2
 800f36e:	005b      	lsls	r3, r3, #1
 800f370:	4413      	add	r3, r2
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	440b      	add	r3, r1
 800f376:	3312      	adds	r3, #18
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f37e:	d321      	bcc.n	800f3c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f380:	79fa      	ldrb	r2, [r7, #7]
 800f382:	4613      	mov	r3, r2
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	4413      	add	r3, r2
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	4a1b      	ldr	r2, [pc, #108]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f38c:	4413      	add	r3, r2
 800f38e:	1d19      	adds	r1, r3, #4
 800f390:	79fa      	ldrb	r2, [r7, #7]
 800f392:	4613      	mov	r3, r2
 800f394:	005b      	lsls	r3, r3, #1
 800f396:	4413      	add	r3, r2
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	3308      	adds	r3, #8
 800f39c:	4a16      	ldr	r2, [pc, #88]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f39e:	4413      	add	r3, r2
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f000 fafb 	bl	800f9a0 <etharp_request_dst>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d109      	bne.n	800f3c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f3b0:	79fa      	ldrb	r2, [r7, #7]
 800f3b2:	4911      	ldr	r1, [pc, #68]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	005b      	lsls	r3, r3, #1
 800f3b8:	4413      	add	r3, r2
 800f3ba:	00db      	lsls	r3, r3, #3
 800f3bc:	440b      	add	r3, r1
 800f3be:	3314      	adds	r3, #20
 800f3c0:	2203      	movs	r2, #3
 800f3c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f3ca:	79fa      	ldrb	r2, [r7, #7]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	4413      	add	r3, r2
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	4a08      	ldr	r2, [pc, #32]	; (800f3f8 <etharp_output_to_arp_index+0x124>)
 800f3d8:	4413      	add	r3, r2
 800f3da:	3304      	adds	r3, #4
 800f3dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f3e0:	9200      	str	r2, [sp, #0]
 800f3e2:	460a      	mov	r2, r1
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f001 fe4e 	bl	8011088 <ethernet_output>
 800f3ec:	4603      	mov	r3, r0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	2000d8f0 	.word	0x2000d8f0
 800f3fc:	08016528 	.word	0x08016528
 800f400:	08016698 	.word	0x08016698
 800f404:	080165a0 	.word	0x080165a0

0800f408 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08a      	sub	sp, #40	; 0x28
 800f40c:	af02      	add	r7, sp, #8
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d106      	bne.n	800f42c <etharp_output+0x24>
 800f41e:	4b73      	ldr	r3, [pc, #460]	; (800f5ec <etharp_output+0x1e4>)
 800f420:	f240 321e 	movw	r2, #798	; 0x31e
 800f424:	4972      	ldr	r1, [pc, #456]	; (800f5f0 <etharp_output+0x1e8>)
 800f426:	4873      	ldr	r0, [pc, #460]	; (800f5f4 <etharp_output+0x1ec>)
 800f428:	f003 fae0 	bl	80129ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d106      	bne.n	800f440 <etharp_output+0x38>
 800f432:	4b6e      	ldr	r3, [pc, #440]	; (800f5ec <etharp_output+0x1e4>)
 800f434:	f240 321f 	movw	r2, #799	; 0x31f
 800f438:	496f      	ldr	r1, [pc, #444]	; (800f5f8 <etharp_output+0x1f0>)
 800f43a:	486e      	ldr	r0, [pc, #440]	; (800f5f4 <etharp_output+0x1ec>)
 800f43c:	f003 fad6 	bl	80129ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d106      	bne.n	800f454 <etharp_output+0x4c>
 800f446:	4b69      	ldr	r3, [pc, #420]	; (800f5ec <etharp_output+0x1e4>)
 800f448:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f44c:	496b      	ldr	r1, [pc, #428]	; (800f5fc <etharp_output+0x1f4>)
 800f44e:	4869      	ldr	r0, [pc, #420]	; (800f5f4 <etharp_output+0x1ec>)
 800f450:	f003 facc 	bl	80129ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68f9      	ldr	r1, [r7, #12]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 fef8 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d002      	beq.n	800f46c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f466:	4b66      	ldr	r3, [pc, #408]	; (800f600 <etharp_output+0x1f8>)
 800f468:	61fb      	str	r3, [r7, #28]
 800f46a:	e0af      	b.n	800f5cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f474:	2be0      	cmp	r3, #224	; 0xe0
 800f476:	d118      	bne.n	800f4aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f478:	2301      	movs	r3, #1
 800f47a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f47c:	2300      	movs	r3, #0
 800f47e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f480:	235e      	movs	r3, #94	; 0x5e
 800f482:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	3301      	adds	r3, #1
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	3302      	adds	r3, #2
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	3303      	adds	r3, #3
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f4a2:	f107 0310 	add.w	r3, r7, #16
 800f4a6:	61fb      	str	r3, [r7, #28]
 800f4a8:	e090      	b.n	800f5cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	405a      	eors	r2, r3
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	3308      	adds	r3, #8
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4013      	ands	r3, r2
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d012      	beq.n	800f4e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f4c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d00b      	beq.n	800f4e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	330c      	adds	r3, #12
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d003      	beq.n	800f4e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	330c      	adds	r3, #12
 800f4de:	61bb      	str	r3, [r7, #24]
 800f4e0:	e002      	b.n	800f4e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f4e2:	f06f 0303 	mvn.w	r3, #3
 800f4e6:	e07d      	b.n	800f5e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f4e8:	4b46      	ldr	r3, [pc, #280]	; (800f604 <etharp_output+0x1fc>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	4a46      	ldr	r2, [pc, #280]	; (800f608 <etharp_output+0x200>)
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	440b      	add	r3, r1
 800f4f6:	00db      	lsls	r3, r3, #3
 800f4f8:	4413      	add	r3, r2
 800f4fa:	3314      	adds	r3, #20
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d925      	bls.n	800f54e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f502:	4b40      	ldr	r3, [pc, #256]	; (800f604 <etharp_output+0x1fc>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	4619      	mov	r1, r3
 800f508:	4a3f      	ldr	r2, [pc, #252]	; (800f608 <etharp_output+0x200>)
 800f50a:	460b      	mov	r3, r1
 800f50c:	005b      	lsls	r3, r3, #1
 800f50e:	440b      	add	r3, r1
 800f510:	00db      	lsls	r3, r3, #3
 800f512:	4413      	add	r3, r2
 800f514:	3308      	adds	r3, #8
 800f516:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d117      	bne.n	800f54e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	4b38      	ldr	r3, [pc, #224]	; (800f604 <etharp_output+0x1fc>)
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	4618      	mov	r0, r3
 800f528:	4937      	ldr	r1, [pc, #220]	; (800f608 <etharp_output+0x200>)
 800f52a:	4603      	mov	r3, r0
 800f52c:	005b      	lsls	r3, r3, #1
 800f52e:	4403      	add	r3, r0
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	440b      	add	r3, r1
 800f534:	3304      	adds	r3, #4
 800f536:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f538:	429a      	cmp	r2, r3
 800f53a:	d108      	bne.n	800f54e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f53c:	4b31      	ldr	r3, [pc, #196]	; (800f604 <etharp_output+0x1fc>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	461a      	mov	r2, r3
 800f542:	68b9      	ldr	r1, [r7, #8]
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f7ff fec5 	bl	800f2d4 <etharp_output_to_arp_index>
 800f54a:	4603      	mov	r3, r0
 800f54c:	e04a      	b.n	800f5e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f54e:	2300      	movs	r3, #0
 800f550:	75fb      	strb	r3, [r7, #23]
 800f552:	e031      	b.n	800f5b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f554:	7dfa      	ldrb	r2, [r7, #23]
 800f556:	492c      	ldr	r1, [pc, #176]	; (800f608 <etharp_output+0x200>)
 800f558:	4613      	mov	r3, r2
 800f55a:	005b      	lsls	r3, r3, #1
 800f55c:	4413      	add	r3, r2
 800f55e:	00db      	lsls	r3, r3, #3
 800f560:	440b      	add	r3, r1
 800f562:	3314      	adds	r3, #20
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d923      	bls.n	800f5b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f56a:	7dfa      	ldrb	r2, [r7, #23]
 800f56c:	4926      	ldr	r1, [pc, #152]	; (800f608 <etharp_output+0x200>)
 800f56e:	4613      	mov	r3, r2
 800f570:	005b      	lsls	r3, r3, #1
 800f572:	4413      	add	r3, r2
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	440b      	add	r3, r1
 800f578:	3308      	adds	r3, #8
 800f57a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d117      	bne.n	800f5b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	6819      	ldr	r1, [r3, #0]
 800f586:	7dfa      	ldrb	r2, [r7, #23]
 800f588:	481f      	ldr	r0, [pc, #124]	; (800f608 <etharp_output+0x200>)
 800f58a:	4613      	mov	r3, r2
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	4413      	add	r3, r2
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	4403      	add	r3, r0
 800f594:	3304      	adds	r3, #4
 800f596:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f598:	4299      	cmp	r1, r3
 800f59a:	d10a      	bne.n	800f5b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f59c:	4a19      	ldr	r2, [pc, #100]	; (800f604 <etharp_output+0x1fc>)
 800f59e:	7dfb      	ldrb	r3, [r7, #23]
 800f5a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f5a2:	7dfb      	ldrb	r3, [r7, #23]
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	68b9      	ldr	r1, [r7, #8]
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f7ff fe93 	bl	800f2d4 <etharp_output_to_arp_index>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	e018      	b.n	800f5e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	75fb      	strb	r3, [r7, #23]
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ba:	2b09      	cmp	r3, #9
 800f5bc:	d9ca      	bls.n	800f554 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	69b9      	ldr	r1, [r7, #24]
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f000 f822 	bl	800f60c <etharp_query>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	e00b      	b.n	800f5e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f5d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	68b9      	ldr	r1, [r7, #8]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f001 fd53 	bl	8011088 <ethernet_output>
 800f5e2:	4603      	mov	r3, r0
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3720      	adds	r7, #32
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	08016528 	.word	0x08016528
 800f5f0:	08016678 	.word	0x08016678
 800f5f4:	080165a0 	.word	0x080165a0
 800f5f8:	080166c8 	.word	0x080166c8
 800f5fc:	08016668 	.word	0x08016668
 800f600:	08016d0c 	.word	0x08016d0c
 800f604:	2000d9e0 	.word	0x2000d9e0
 800f608:	2000d8f0 	.word	0x2000d8f0

0800f60c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b08c      	sub	sp, #48	; 0x30
 800f610:	af02      	add	r7, sp, #8
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	3326      	adds	r3, #38	; 0x26
 800f61c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f61e:	23ff      	movs	r3, #255	; 0xff
 800f620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f624:	2300      	movs	r3, #0
 800f626:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68f9      	ldr	r1, [r7, #12]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fe0e 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d10c      	bne.n	800f654 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f642:	2be0      	cmp	r3, #224	; 0xe0
 800f644:	d006      	beq.n	800f654 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d102      	bne.n	800f65a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f654:	f06f 030f 	mvn.w	r3, #15
 800f658:	e101      	b.n	800f85e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	2101      	movs	r1, #1
 800f65e:	68b8      	ldr	r0, [r7, #8]
 800f660:	f7ff fb60 	bl	800ed24 <etharp_find_entry>
 800f664:	4603      	mov	r3, r0
 800f666:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f668:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	da02      	bge.n	800f676 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f670:	8a7b      	ldrh	r3, [r7, #18]
 800f672:	b25b      	sxtb	r3, r3
 800f674:	e0f3      	b.n	800f85e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f676:	8a7b      	ldrh	r3, [r7, #18]
 800f678:	2b7e      	cmp	r3, #126	; 0x7e
 800f67a:	d906      	bls.n	800f68a <etharp_query+0x7e>
 800f67c:	4b7a      	ldr	r3, [pc, #488]	; (800f868 <etharp_query+0x25c>)
 800f67e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f682:	497a      	ldr	r1, [pc, #488]	; (800f86c <etharp_query+0x260>)
 800f684:	487a      	ldr	r0, [pc, #488]	; (800f870 <etharp_query+0x264>)
 800f686:	f003 f9b1 	bl	80129ec <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f68a:	8a7b      	ldrh	r3, [r7, #18]
 800f68c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f68e:	7c7a      	ldrb	r2, [r7, #17]
 800f690:	4978      	ldr	r1, [pc, #480]	; (800f874 <etharp_query+0x268>)
 800f692:	4613      	mov	r3, r2
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	4413      	add	r3, r2
 800f698:	00db      	lsls	r3, r3, #3
 800f69a:	440b      	add	r3, r1
 800f69c:	3314      	adds	r3, #20
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d115      	bne.n	800f6d0 <etharp_query+0xc4>
    is_new_entry = 1;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f6a8:	7c7a      	ldrb	r2, [r7, #17]
 800f6aa:	4972      	ldr	r1, [pc, #456]	; (800f874 <etharp_query+0x268>)
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	005b      	lsls	r3, r3, #1
 800f6b0:	4413      	add	r3, r2
 800f6b2:	00db      	lsls	r3, r3, #3
 800f6b4:	440b      	add	r3, r1
 800f6b6:	3314      	adds	r3, #20
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f6bc:	7c7a      	ldrb	r2, [r7, #17]
 800f6be:	496d      	ldr	r1, [pc, #436]	; (800f874 <etharp_query+0x268>)
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	4413      	add	r3, r2
 800f6c6:	00db      	lsls	r3, r3, #3
 800f6c8:	440b      	add	r3, r1
 800f6ca:	3308      	adds	r3, #8
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f6d0:	7c7a      	ldrb	r2, [r7, #17]
 800f6d2:	4968      	ldr	r1, [pc, #416]	; (800f874 <etharp_query+0x268>)
 800f6d4:	4613      	mov	r3, r2
 800f6d6:	005b      	lsls	r3, r3, #1
 800f6d8:	4413      	add	r3, r2
 800f6da:	00db      	lsls	r3, r3, #3
 800f6dc:	440b      	add	r3, r1
 800f6de:	3314      	adds	r3, #20
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d011      	beq.n	800f70a <etharp_query+0xfe>
 800f6e6:	7c7a      	ldrb	r2, [r7, #17]
 800f6e8:	4962      	ldr	r1, [pc, #392]	; (800f874 <etharp_query+0x268>)
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	005b      	lsls	r3, r3, #1
 800f6ee:	4413      	add	r3, r2
 800f6f0:	00db      	lsls	r3, r3, #3
 800f6f2:	440b      	add	r3, r1
 800f6f4:	3314      	adds	r3, #20
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d806      	bhi.n	800f70a <etharp_query+0xfe>
 800f6fc:	4b5a      	ldr	r3, [pc, #360]	; (800f868 <etharp_query+0x25c>)
 800f6fe:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f702:	495d      	ldr	r1, [pc, #372]	; (800f878 <etharp_query+0x26c>)
 800f704:	485a      	ldr	r0, [pc, #360]	; (800f870 <etharp_query+0x264>)
 800f706:	f003 f971 	bl	80129ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d102      	bne.n	800f716 <etharp_query+0x10a>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10c      	bne.n	800f730 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f716:	68b9      	ldr	r1, [r7, #8]
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f000 f963 	bl	800f9e4 <etharp_request>
 800f71e:	4603      	mov	r3, r0
 800f720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d102      	bne.n	800f730 <etharp_query+0x124>
      return result;
 800f72a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f72e:	e096      	b.n	800f85e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <etharp_query+0x138>
 800f736:	4b4c      	ldr	r3, [pc, #304]	; (800f868 <etharp_query+0x25c>)
 800f738:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f73c:	494f      	ldr	r1, [pc, #316]	; (800f87c <etharp_query+0x270>)
 800f73e:	484c      	ldr	r0, [pc, #304]	; (800f870 <etharp_query+0x264>)
 800f740:	f003 f954 	bl	80129ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f744:	7c7a      	ldrb	r2, [r7, #17]
 800f746:	494b      	ldr	r1, [pc, #300]	; (800f874 <etharp_query+0x268>)
 800f748:	4613      	mov	r3, r2
 800f74a:	005b      	lsls	r3, r3, #1
 800f74c:	4413      	add	r3, r2
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	440b      	add	r3, r1
 800f752:	3314      	adds	r3, #20
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d917      	bls.n	800f78a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f75a:	4a49      	ldr	r2, [pc, #292]	; (800f880 <etharp_query+0x274>)
 800f75c:	7c7b      	ldrb	r3, [r7, #17]
 800f75e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f760:	7c7a      	ldrb	r2, [r7, #17]
 800f762:	4613      	mov	r3, r2
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	4413      	add	r3, r2
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	3308      	adds	r3, #8
 800f76c:	4a41      	ldr	r2, [pc, #260]	; (800f874 <etharp_query+0x268>)
 800f76e:	4413      	add	r3, r2
 800f770:	3304      	adds	r3, #4
 800f772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f776:	9200      	str	r2, [sp, #0]
 800f778:	697a      	ldr	r2, [r7, #20]
 800f77a:	6879      	ldr	r1, [r7, #4]
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f001 fc83 	bl	8011088 <ethernet_output>
 800f782:	4603      	mov	r3, r0
 800f784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f788:	e067      	b.n	800f85a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f78a:	7c7a      	ldrb	r2, [r7, #17]
 800f78c:	4939      	ldr	r1, [pc, #228]	; (800f874 <etharp_query+0x268>)
 800f78e:	4613      	mov	r3, r2
 800f790:	005b      	lsls	r3, r3, #1
 800f792:	4413      	add	r3, r2
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	440b      	add	r3, r1
 800f798:	3314      	adds	r3, #20
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d15c      	bne.n	800f85a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f7a8:	e01c      	b.n	800f7e4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	895a      	ldrh	r2, [r3, #10]
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	891b      	ldrh	r3, [r3, #8]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d10a      	bne.n	800f7cc <etharp_query+0x1c0>
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d006      	beq.n	800f7cc <etharp_query+0x1c0>
 800f7be:	4b2a      	ldr	r3, [pc, #168]	; (800f868 <etharp_query+0x25c>)
 800f7c0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f7c4:	492f      	ldr	r1, [pc, #188]	; (800f884 <etharp_query+0x278>)
 800f7c6:	482a      	ldr	r0, [pc, #168]	; (800f870 <etharp_query+0x264>)
 800f7c8:	f003 f910 	bl	80129ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	7b1b      	ldrb	r3, [r3, #12]
 800f7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d002      	beq.n	800f7de <etharp_query+0x1d2>
        copy_needed = 1;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	61bb      	str	r3, [r7, #24]
        break;
 800f7dc:	e005      	b.n	800f7ea <etharp_query+0x1de>
      }
      p = p->next;
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1df      	bne.n	800f7aa <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d007      	beq.n	800f800 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f7f6:	200e      	movs	r0, #14
 800f7f8:	f7f9 fa2a 	bl	8008c50 <pbuf_clone>
 800f7fc:	61f8      	str	r0, [r7, #28]
 800f7fe:	e004      	b.n	800f80a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f804:	69f8      	ldr	r0, [r7, #28]
 800f806:	f7f9 f857 	bl	80088b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d021      	beq.n	800f854 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f810:	7c7a      	ldrb	r2, [r7, #17]
 800f812:	4918      	ldr	r1, [pc, #96]	; (800f874 <etharp_query+0x268>)
 800f814:	4613      	mov	r3, r2
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	4413      	add	r3, r2
 800f81a:	00db      	lsls	r3, r3, #3
 800f81c:	440b      	add	r3, r1
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00a      	beq.n	800f83a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f824:	7c7a      	ldrb	r2, [r7, #17]
 800f826:	4913      	ldr	r1, [pc, #76]	; (800f874 <etharp_query+0x268>)
 800f828:	4613      	mov	r3, r2
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	4413      	add	r3, r2
 800f82e:	00db      	lsls	r3, r3, #3
 800f830:	440b      	add	r3, r1
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4618      	mov	r0, r3
 800f836:	f7f8 ff9f 	bl	8008778 <pbuf_free>
      }
      arp_table[i].q = p;
 800f83a:	7c7a      	ldrb	r2, [r7, #17]
 800f83c:	490d      	ldr	r1, [pc, #52]	; (800f874 <etharp_query+0x268>)
 800f83e:	4613      	mov	r3, r2
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	4413      	add	r3, r2
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	440b      	add	r3, r1
 800f848:	69fa      	ldr	r2, [r7, #28]
 800f84a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f84c:	2300      	movs	r3, #0
 800f84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f852:	e002      	b.n	800f85a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f854:	23ff      	movs	r3, #255	; 0xff
 800f856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f85a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3728      	adds	r7, #40	; 0x28
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	08016528 	.word	0x08016528
 800f86c:	080166d4 	.word	0x080166d4
 800f870:	080165a0 	.word	0x080165a0
 800f874:	2000d8f0 	.word	0x2000d8f0
 800f878:	080166e4 	.word	0x080166e4
 800f87c:	080166c8 	.word	0x080166c8
 800f880:	2000d9e0 	.word	0x2000d9e0
 800f884:	0801670c 	.word	0x0801670c

0800f888 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08a      	sub	sp, #40	; 0x28
 800f88c:	af02      	add	r7, sp, #8
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d106      	bne.n	800f8ae <etharp_raw+0x26>
 800f8a0:	4b3a      	ldr	r3, [pc, #232]	; (800f98c <etharp_raw+0x104>)
 800f8a2:	f240 4257 	movw	r2, #1111	; 0x457
 800f8a6:	493a      	ldr	r1, [pc, #232]	; (800f990 <etharp_raw+0x108>)
 800f8a8:	483a      	ldr	r0, [pc, #232]	; (800f994 <etharp_raw+0x10c>)
 800f8aa:	f003 f89f 	bl	80129ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f8ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8b2:	211c      	movs	r1, #28
 800f8b4:	200e      	movs	r0, #14
 800f8b6:	f7f8 fc73 	bl	80081a0 <pbuf_alloc>
 800f8ba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d102      	bne.n	800f8c8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c6:	e05d      	b.n	800f984 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	895b      	ldrh	r3, [r3, #10]
 800f8cc:	2b1b      	cmp	r3, #27
 800f8ce:	d806      	bhi.n	800f8de <etharp_raw+0x56>
 800f8d0:	4b2e      	ldr	r3, [pc, #184]	; (800f98c <etharp_raw+0x104>)
 800f8d2:	f240 4262 	movw	r2, #1122	; 0x462
 800f8d6:	4930      	ldr	r1, [pc, #192]	; (800f998 <etharp_raw+0x110>)
 800f8d8:	482e      	ldr	r0, [pc, #184]	; (800f994 <etharp_raw+0x10c>)
 800f8da:	f003 f887 	bl	80129ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f8e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f7 fb40 	bl	8006f6c <lwip_htons>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8fa:	2b06      	cmp	r3, #6
 800f8fc:	d006      	beq.n	800f90c <etharp_raw+0x84>
 800f8fe:	4b23      	ldr	r3, [pc, #140]	; (800f98c <etharp_raw+0x104>)
 800f900:	f240 4269 	movw	r2, #1129	; 0x469
 800f904:	4925      	ldr	r1, [pc, #148]	; (800f99c <etharp_raw+0x114>)
 800f906:	4823      	ldr	r0, [pc, #140]	; (800f994 <etharp_raw+0x10c>)
 800f908:	f003 f870 	bl	80129ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	3308      	adds	r3, #8
 800f910:	2206      	movs	r2, #6
 800f912:	6839      	ldr	r1, [r7, #0]
 800f914:	4618      	mov	r0, r3
 800f916:	f003 f839 	bl	801298c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	3312      	adds	r3, #18
 800f91e:	2206      	movs	r2, #6
 800f920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f922:	4618      	mov	r0, r3
 800f924:	f003 f832 	bl	801298c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	330e      	adds	r3, #14
 800f92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f92e:	6812      	ldr	r2, [r2, #0]
 800f930:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	3318      	adds	r3, #24
 800f936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f938:	6812      	ldr	r2, [r2, #0]
 800f93a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	2200      	movs	r2, #0
 800f940:	701a      	strb	r2, [r3, #0]
 800f942:	2200      	movs	r2, #0
 800f944:	f042 0201 	orr.w	r2, r2, #1
 800f948:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f042 0208 	orr.w	r2, r2, #8
 800f952:	709a      	strb	r2, [r3, #2]
 800f954:	2200      	movs	r2, #0
 800f956:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	2206      	movs	r2, #6
 800f95c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	2204      	movs	r2, #4
 800f962:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f964:	f640 0306 	movw	r3, #2054	; 0x806
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	69b9      	ldr	r1, [r7, #24]
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f001 fb89 	bl	8011088 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f976:	69b8      	ldr	r0, [r7, #24]
 800f978:	f7f8 fefe 	bl	8008778 <pbuf_free>
  p = NULL;
 800f97c:	2300      	movs	r3, #0
 800f97e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f980:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3720      	adds	r7, #32
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	08016528 	.word	0x08016528
 800f990:	08016678 	.word	0x08016678
 800f994:	080165a0 	.word	0x080165a0
 800f998:	08016728 	.word	0x08016728
 800f99c:	0801675c 	.word	0x0801675c

0800f9a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af04      	add	r7, sp, #16
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9bc:	2201      	movs	r2, #1
 800f9be:	9203      	str	r2, [sp, #12]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	9202      	str	r2, [sp, #8]
 800f9c4:	4a06      	ldr	r2, [pc, #24]	; (800f9e0 <etharp_request_dst+0x40>)
 800f9c6:	9201      	str	r2, [sp, #4]
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff ff5a 	bl	800f888 <etharp_raw>
 800f9d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	08016d14 	.word	0x08016d14

0800f9e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f9ee:	4a05      	ldr	r2, [pc, #20]	; (800fa04 <etharp_request+0x20>)
 800f9f0:	6839      	ldr	r1, [r7, #0]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7ff ffd4 	bl	800f9a0 <etharp_request_dst>
 800f9f8:	4603      	mov	r3, r0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	08016d0c 	.word	0x08016d0c

0800fa08 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08e      	sub	sp, #56	; 0x38
 800fa0c:	af04      	add	r7, sp, #16
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fa12:	4b79      	ldr	r3, [pc, #484]	; (800fbf8 <icmp_input+0x1f0>)
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	f003 030f 	and.w	r3, r3, #15
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fa28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa2a:	2b13      	cmp	r3, #19
 800fa2c:	f240 80cd 	bls.w	800fbca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	895b      	ldrh	r3, [r3, #10]
 800fa34:	2b03      	cmp	r3, #3
 800fa36:	f240 80ca 	bls.w	800fbce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fa44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80b7 	beq.w	800fbbc <icmp_input+0x1b4>
 800fa4e:	2b08      	cmp	r3, #8
 800fa50:	f040 80b7 	bne.w	800fbc2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fa54:	4b69      	ldr	r3, [pc, #420]	; (800fbfc <icmp_input+0x1f4>)
 800fa56:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa58:	4b67      	ldr	r3, [pc, #412]	; (800fbf8 <icmp_input+0x1f0>)
 800fa5a:	695b      	ldr	r3, [r3, #20]
 800fa5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa60:	2be0      	cmp	r3, #224	; 0xe0
 800fa62:	f000 80bb 	beq.w	800fbdc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fa66:	4b64      	ldr	r3, [pc, #400]	; (800fbf8 <icmp_input+0x1f0>)
 800fa68:	695b      	ldr	r3, [r3, #20]
 800fa6a:	4a63      	ldr	r2, [pc, #396]	; (800fbf8 <icmp_input+0x1f0>)
 800fa6c:	6812      	ldr	r2, [r2, #0]
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f000 fbed 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f040 80b1 	bne.w	800fbe0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	891b      	ldrh	r3, [r3, #8]
 800fa82:	2b07      	cmp	r3, #7
 800fa84:	f240 80a5 	bls.w	800fbd2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fa88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa8a:	330e      	adds	r3, #14
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7f8 fddc 	bl	800864c <pbuf_add_header>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d04b      	beq.n	800fb32 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	891a      	ldrh	r2, [r3, #8]
 800fa9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800faa0:	4413      	add	r3, r2
 800faa2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	891b      	ldrh	r3, [r3, #8]
 800faa8:	8b7a      	ldrh	r2, [r7, #26]
 800faaa:	429a      	cmp	r2, r3
 800faac:	f0c0 809a 	bcc.w	800fbe4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fab0:	8b7b      	ldrh	r3, [r7, #26]
 800fab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fab6:	4619      	mov	r1, r3
 800fab8:	200e      	movs	r0, #14
 800faba:	f7f8 fb71 	bl	80081a0 <pbuf_alloc>
 800fabe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f000 8090 	beq.w	800fbe8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	895b      	ldrh	r3, [r3, #10]
 800facc:	461a      	mov	r2, r3
 800face:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fad0:	3308      	adds	r3, #8
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d203      	bcs.n	800fade <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fad6:	6978      	ldr	r0, [r7, #20]
 800fad8:	f7f8 fe4e 	bl	8008778 <pbuf_free>
          goto icmperr;
 800fadc:	e085      	b.n	800fbea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fae6:	4618      	mov	r0, r3
 800fae8:	f002 ff50 	bl	801298c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800faec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800faee:	4619      	mov	r1, r3
 800faf0:	6978      	ldr	r0, [r7, #20]
 800faf2:	f7f8 fdbb 	bl	800866c <pbuf_remove_header>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d009      	beq.n	800fb10 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fafc:	4b40      	ldr	r3, [pc, #256]	; (800fc00 <icmp_input+0x1f8>)
 800fafe:	22b6      	movs	r2, #182	; 0xb6
 800fb00:	4940      	ldr	r1, [pc, #256]	; (800fc04 <icmp_input+0x1fc>)
 800fb02:	4841      	ldr	r0, [pc, #260]	; (800fc08 <icmp_input+0x200>)
 800fb04:	f002 ff72 	bl	80129ec <iprintf>
          pbuf_free(r);
 800fb08:	6978      	ldr	r0, [r7, #20]
 800fb0a:	f7f8 fe35 	bl	8008778 <pbuf_free>
          goto icmperr;
 800fb0e:	e06c      	b.n	800fbea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fb10:	6879      	ldr	r1, [r7, #4]
 800fb12:	6978      	ldr	r0, [r7, #20]
 800fb14:	f7f8 ff58 	bl	80089c8 <pbuf_copy>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d003      	beq.n	800fb26 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fb1e:	6978      	ldr	r0, [r7, #20]
 800fb20:	f7f8 fe2a 	bl	8008778 <pbuf_free>
          goto icmperr;
 800fb24:	e061      	b.n	800fbea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7f8 fe26 	bl	8008778 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	607b      	str	r3, [r7, #4]
 800fb30:	e00f      	b.n	800fb52 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb34:	330e      	adds	r3, #14
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7f8 fd97 	bl	800866c <pbuf_remove_header>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d006      	beq.n	800fb52 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fb44:	4b2e      	ldr	r3, [pc, #184]	; (800fc00 <icmp_input+0x1f8>)
 800fb46:	22c7      	movs	r2, #199	; 0xc7
 800fb48:	4930      	ldr	r1, [pc, #192]	; (800fc0c <icmp_input+0x204>)
 800fb4a:	482f      	ldr	r0, [pc, #188]	; (800fc08 <icmp_input+0x200>)
 800fb4c:	f002 ff4e 	bl	80129ec <iprintf>
          goto icmperr;
 800fb50:	e04b      	b.n	800fbea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fb58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7f8 fd75 	bl	800864c <pbuf_add_header>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d12b      	bne.n	800fbc0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fb76:	4b20      	ldr	r3, [pc, #128]	; (800fbf8 <icmp_input+0x1f0>)
 800fb78:	691a      	ldr	r2, [r3, #16]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	2200      	movs	r2, #0
 800fb82:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	2200      	movs	r2, #0
 800fb88:	709a      	strb	r2, [r3, #2]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	22ff      	movs	r2, #255	; 0xff
 800fb92:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2200      	movs	r2, #0
 800fb98:	729a      	strb	r2, [r3, #10]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	9302      	str	r3, [sp, #8]
 800fba2:	2301      	movs	r3, #1
 800fba4:	9301      	str	r3, [sp, #4]
 800fba6:	2300      	movs	r3, #0
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	23ff      	movs	r3, #255	; 0xff
 800fbac:	2200      	movs	r2, #0
 800fbae:	69f9      	ldr	r1, [r7, #28]
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 fa75 	bl	80100a0 <ip4_output_if>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fbba:	e001      	b.n	800fbc0 <icmp_input+0x1b8>
      break;
 800fbbc:	bf00      	nop
 800fbbe:	e000      	b.n	800fbc2 <icmp_input+0x1ba>
      break;
 800fbc0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7f8 fdd8 	bl	8008778 <pbuf_free>
  return;
 800fbc8:	e013      	b.n	800fbf2 <icmp_input+0x1ea>
    goto lenerr;
 800fbca:	bf00      	nop
 800fbcc:	e002      	b.n	800fbd4 <icmp_input+0x1cc>
    goto lenerr;
 800fbce:	bf00      	nop
 800fbd0:	e000      	b.n	800fbd4 <icmp_input+0x1cc>
        goto lenerr;
 800fbd2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7f8 fdcf 	bl	8008778 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fbda:	e00a      	b.n	800fbf2 <icmp_input+0x1ea>
        goto icmperr;
 800fbdc:	bf00      	nop
 800fbde:	e004      	b.n	800fbea <icmp_input+0x1e2>
        goto icmperr;
 800fbe0:	bf00      	nop
 800fbe2:	e002      	b.n	800fbea <icmp_input+0x1e2>
          goto icmperr;
 800fbe4:	bf00      	nop
 800fbe6:	e000      	b.n	800fbea <icmp_input+0x1e2>
          goto icmperr;
 800fbe8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7f8 fdc4 	bl	8008778 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fbf0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fbf2:	3728      	adds	r7, #40	; 0x28
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	20005bc0 	.word	0x20005bc0
 800fbfc:	20005bd4 	.word	0x20005bd4
 800fc00:	080167a0 	.word	0x080167a0
 800fc04:	080167d8 	.word	0x080167d8
 800fc08:	08016810 	.word	0x08016810
 800fc0c:	08016838 	.word	0x08016838

0800fc10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fc1c:	78fb      	ldrb	r3, [r7, #3]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	2103      	movs	r1, #3
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 f814 	bl	800fc50 <icmp_send_response>
}
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fc3c:	78fb      	ldrb	r3, [r7, #3]
 800fc3e:	461a      	mov	r2, r3
 800fc40:	210b      	movs	r1, #11
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f000 f804 	bl	800fc50 <icmp_send_response>
}
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b08c      	sub	sp, #48	; 0x30
 800fc54:	af04      	add	r7, sp, #16
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	70fb      	strb	r3, [r7, #3]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fc60:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc64:	2124      	movs	r1, #36	; 0x24
 800fc66:	2022      	movs	r0, #34	; 0x22
 800fc68:	f7f8 fa9a 	bl	80081a0 <pbuf_alloc>
 800fc6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d04c      	beq.n	800fd0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	895b      	ldrh	r3, [r3, #10]
 800fc78:	2b23      	cmp	r3, #35	; 0x23
 800fc7a:	d806      	bhi.n	800fc8a <icmp_send_response+0x3a>
 800fc7c:	4b26      	ldr	r3, [pc, #152]	; (800fd18 <icmp_send_response+0xc8>)
 800fc7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fc82:	4926      	ldr	r1, [pc, #152]	; (800fd1c <icmp_send_response+0xcc>)
 800fc84:	4826      	ldr	r0, [pc, #152]	; (800fd20 <icmp_send_response+0xd0>)
 800fc86:	f002 feb1 	bl	80129ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	78fa      	ldrb	r2, [r7, #3]
 800fc9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	78ba      	ldrb	r2, [r7, #2]
 800fca0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2200      	movs	r2, #0
 800fca6:	711a      	strb	r2, [r3, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	719a      	strb	r2, [r3, #6]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	f103 0008 	add.w	r0, r3, #8
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	221c      	movs	r2, #28
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	f002 fe61 	bl	801298c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fcd0:	f107 030c 	add.w	r3, r7, #12
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 f825 	bl	800fd24 <ip4_route>
 800fcda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d011      	beq.n	800fd06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2200      	movs	r2, #0
 800fce6:	709a      	strb	r2, [r3, #2]
 800fce8:	2200      	movs	r2, #0
 800fcea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fcec:	f107 020c 	add.w	r2, r7, #12
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	9302      	str	r3, [sp, #8]
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	9301      	str	r3, [sp, #4]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	23ff      	movs	r3, #255	; 0xff
 800fcfe:	2100      	movs	r1, #0
 800fd00:	69f8      	ldr	r0, [r7, #28]
 800fd02:	f000 f9cd 	bl	80100a0 <ip4_output_if>
  }
  pbuf_free(q);
 800fd06:	69f8      	ldr	r0, [r7, #28]
 800fd08:	f7f8 fd36 	bl	8008778 <pbuf_free>
 800fd0c:	e000      	b.n	800fd10 <icmp_send_response+0xc0>
    return;
 800fd0e:	bf00      	nop
}
 800fd10:	3720      	adds	r7, #32
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	080167a0 	.word	0x080167a0
 800fd1c:	0801686c 	.word	0x0801686c
 800fd20:	08016810 	.word	0x08016810

0800fd24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fd2c:	4b33      	ldr	r3, [pc, #204]	; (800fdfc <ip4_route+0xd8>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	60fb      	str	r3, [r7, #12]
 800fd32:	e036      	b.n	800fda2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d02b      	beq.n	800fd9c <ip4_route+0x78>
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd4a:	089b      	lsrs	r3, r3, #2
 800fd4c:	f003 0301 	and.w	r3, r3, #1
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d022      	beq.n	800fd9c <ip4_route+0x78>
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	3304      	adds	r3, #4
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d01d      	beq.n	800fd9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	3304      	adds	r3, #4
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	405a      	eors	r2, r3
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4013      	ands	r3, r2
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	e038      	b.n	800fdee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd82:	f003 0302 	and.w	r3, r3, #2
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d108      	bne.n	800fd9c <ip4_route+0x78>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	330c      	adds	r3, #12
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d101      	bne.n	800fd9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	e028      	b.n	800fdee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	60fb      	str	r3, [r7, #12]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1c5      	bne.n	800fd34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fda8:	4b15      	ldr	r3, [pc, #84]	; (800fe00 <ip4_route+0xdc>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d01a      	beq.n	800fde6 <ip4_route+0xc2>
 800fdb0:	4b13      	ldr	r3, [pc, #76]	; (800fe00 <ip4_route+0xdc>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdb8:	f003 0301 	and.w	r3, r3, #1
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d012      	beq.n	800fde6 <ip4_route+0xc2>
 800fdc0:	4b0f      	ldr	r3, [pc, #60]	; (800fe00 <ip4_route+0xdc>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdc8:	f003 0304 	and.w	r3, r3, #4
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d00a      	beq.n	800fde6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fdd0:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <ip4_route+0xdc>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d004      	beq.n	800fde6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b7f      	cmp	r3, #127	; 0x7f
 800fde4:	d101      	bne.n	800fdea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	e001      	b.n	800fdee <ip4_route+0xca>
  }

  return netif_default;
 800fdea:	4b05      	ldr	r3, [pc, #20]	; (800fe00 <ip4_route+0xdc>)
 800fdec:	681b      	ldr	r3, [r3, #0]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3714      	adds	r7, #20
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	2000d884 	.word	0x2000d884
 800fe00:	2000d888 	.word	0x2000d888

0800fe04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe12:	f003 0301 	and.w	r3, r3, #1
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d016      	beq.n	800fe4a <ip4_input_accept+0x46>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d011      	beq.n	800fe4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fe26:	4b0b      	ldr	r3, [pc, #44]	; (800fe54 <ip4_input_accept+0x50>)
 800fe28:	695a      	ldr	r2, [r3, #20]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	3304      	adds	r3, #4
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d008      	beq.n	800fe46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fe34:	4b07      	ldr	r3, [pc, #28]	; (800fe54 <ip4_input_accept+0x50>)
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	6879      	ldr	r1, [r7, #4]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f000 fa08 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800fe40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d001      	beq.n	800fe4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fe46:	2301      	movs	r3, #1
 800fe48:	e000      	b.n	800fe4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fe4a:	2300      	movs	r3, #0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	20005bc0 	.word	0x20005bc0

0800fe58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b086      	sub	sp, #24
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	091b      	lsrs	r3, r3, #4
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	2b04      	cmp	r3, #4
 800fe72:	d004      	beq.n	800fe7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7f8 fc7f 	bl	8008778 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	e107      	b.n	801008e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	f003 030f 	and.w	r3, r3, #15
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	885b      	ldrh	r3, [r3, #2]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7f7 f869 	bl	8006f6c <lwip_htons>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	891b      	ldrh	r3, [r3, #8]
 800fea2:	89ba      	ldrh	r2, [r7, #12]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d204      	bcs.n	800feb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fea8:	89bb      	ldrh	r3, [r7, #12]
 800feaa:	4619      	mov	r1, r3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7f8 fadd 	bl	800846c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	895b      	ldrh	r3, [r3, #10]
 800feb6:	89fa      	ldrh	r2, [r7, #14]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d807      	bhi.n	800fecc <ip4_input+0x74>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	891b      	ldrh	r3, [r3, #8]
 800fec0:	89ba      	ldrh	r2, [r7, #12]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d802      	bhi.n	800fecc <ip4_input+0x74>
 800fec6:	89fb      	ldrh	r3, [r7, #14]
 800fec8:	2b13      	cmp	r3, #19
 800feca:	d804      	bhi.n	800fed6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7f8 fc53 	bl	8008778 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	e0db      	b.n	801008e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	691b      	ldr	r3, [r3, #16]
 800feda:	4a6f      	ldr	r2, [pc, #444]	; (8010098 <ip4_input+0x240>)
 800fedc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	4a6d      	ldr	r2, [pc, #436]	; (8010098 <ip4_input+0x240>)
 800fee4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fee6:	4b6c      	ldr	r3, [pc, #432]	; (8010098 <ip4_input+0x240>)
 800fee8:	695b      	ldr	r3, [r3, #20]
 800feea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800feee:	2be0      	cmp	r3, #224	; 0xe0
 800fef0:	d112      	bne.n	800ff18 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fef8:	f003 0301 	and.w	r3, r3, #1
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d007      	beq.n	800ff12 <ip4_input+0xba>
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	3304      	adds	r3, #4
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d002      	beq.n	800ff12 <ip4_input+0xba>
      netif = inp;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	613b      	str	r3, [r7, #16]
 800ff10:	e02a      	b.n	800ff68 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ff12:	2300      	movs	r3, #0
 800ff14:	613b      	str	r3, [r7, #16]
 800ff16:	e027      	b.n	800ff68 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ff18:	6838      	ldr	r0, [r7, #0]
 800ff1a:	f7ff ff73 	bl	800fe04 <ip4_input_accept>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d002      	beq.n	800ff2a <ip4_input+0xd2>
      netif = inp;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	613b      	str	r3, [r7, #16]
 800ff28:	e01e      	b.n	800ff68 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ff2e:	4b5a      	ldr	r3, [pc, #360]	; (8010098 <ip4_input+0x240>)
 800ff30:	695b      	ldr	r3, [r3, #20]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b7f      	cmp	r3, #127	; 0x7f
 800ff36:	d017      	beq.n	800ff68 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ff38:	4b58      	ldr	r3, [pc, #352]	; (801009c <ip4_input+0x244>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	613b      	str	r3, [r7, #16]
 800ff3e:	e00e      	b.n	800ff5e <ip4_input+0x106>
          if (netif == inp) {
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d006      	beq.n	800ff56 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ff48:	6938      	ldr	r0, [r7, #16]
 800ff4a:	f7ff ff5b 	bl	800fe04 <ip4_input_accept>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d108      	bne.n	800ff66 <ip4_input+0x10e>
 800ff54:	e000      	b.n	800ff58 <ip4_input+0x100>
            continue;
 800ff56:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	613b      	str	r3, [r7, #16]
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d1ed      	bne.n	800ff40 <ip4_input+0xe8>
 800ff64:	e000      	b.n	800ff68 <ip4_input+0x110>
            break;
 800ff66:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ff68:	4b4b      	ldr	r3, [pc, #300]	; (8010098 <ip4_input+0x240>)
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	6839      	ldr	r1, [r7, #0]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f000 f96e 	bl	8010250 <ip4_addr_isbroadcast_u32>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d105      	bne.n	800ff86 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ff7a:	4b47      	ldr	r3, [pc, #284]	; (8010098 <ip4_input+0x240>)
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ff82:	2be0      	cmp	r3, #224	; 0xe0
 800ff84:	d104      	bne.n	800ff90 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7f8 fbf6 	bl	8008778 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	e07e      	b.n	801008e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d104      	bne.n	800ffa0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7f8 fbee 	bl	8008778 <pbuf_free>
    return ERR_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	e076      	b.n	801008e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	88db      	ldrh	r3, [r3, #6]
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ffac:	4013      	ands	r3, r2
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00b      	beq.n	800ffca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fc9a 	bl	80108ec <ip4_reass>
 800ffb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d101      	bne.n	800ffc4 <ip4_input+0x16c>
      return ERR_OK;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	e064      	b.n	801008e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ffca:	4a33      	ldr	r2, [pc, #204]	; (8010098 <ip4_input+0x240>)
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ffd0:	4a31      	ldr	r2, [pc, #196]	; (8010098 <ip4_input+0x240>)
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ffd6:	4a30      	ldr	r2, [pc, #192]	; (8010098 <ip4_input+0x240>)
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 030f 	and.w	r3, r3, #15
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	4b2a      	ldr	r3, [pc, #168]	; (8010098 <ip4_input+0x240>)
 800ffee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fff0:	89fb      	ldrh	r3, [r7, #14]
 800fff2:	4619      	mov	r1, r3
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7f8 fb39 	bl	800866c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	7a5b      	ldrb	r3, [r3, #9]
 800fffe:	2b11      	cmp	r3, #17
 8010000:	d006      	beq.n	8010010 <ip4_input+0x1b8>
 8010002:	2b11      	cmp	r3, #17
 8010004:	dc13      	bgt.n	801002e <ip4_input+0x1d6>
 8010006:	2b01      	cmp	r3, #1
 8010008:	d00c      	beq.n	8010024 <ip4_input+0x1cc>
 801000a:	2b06      	cmp	r3, #6
 801000c:	d005      	beq.n	801001a <ip4_input+0x1c2>
 801000e:	e00e      	b.n	801002e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7fe f9ba 	bl	800e38c <udp_input>
        break;
 8010018:	e026      	b.n	8010068 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f7fa f9f7 	bl	800a410 <tcp_input>
        break;
 8010022:	e021      	b.n	8010068 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7ff fcee 	bl	800fa08 <icmp_input>
        break;
 801002c:	e01c      	b.n	8010068 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801002e:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <ip4_input+0x240>)
 8010030:	695b      	ldr	r3, [r3, #20]
 8010032:	6939      	ldr	r1, [r7, #16]
 8010034:	4618      	mov	r0, r3
 8010036:	f000 f90b 	bl	8010250 <ip4_addr_isbroadcast_u32>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10f      	bne.n	8010060 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010040:	4b15      	ldr	r3, [pc, #84]	; (8010098 <ip4_input+0x240>)
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010048:	2be0      	cmp	r3, #224	; 0xe0
 801004a:	d009      	beq.n	8010060 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801004c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f7f8 fb7d 	bl	8008752 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010058:	2102      	movs	r1, #2
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff fdd8 	bl	800fc10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7f8 fb89 	bl	8008778 <pbuf_free>
        break;
 8010066:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <ip4_input+0x240>)
 801006a:	2200      	movs	r2, #0
 801006c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801006e:	4b0a      	ldr	r3, [pc, #40]	; (8010098 <ip4_input+0x240>)
 8010070:	2200      	movs	r2, #0
 8010072:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010074:	4b08      	ldr	r3, [pc, #32]	; (8010098 <ip4_input+0x240>)
 8010076:	2200      	movs	r2, #0
 8010078:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801007a:	4b07      	ldr	r3, [pc, #28]	; (8010098 <ip4_input+0x240>)
 801007c:	2200      	movs	r2, #0
 801007e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010080:	4b05      	ldr	r3, [pc, #20]	; (8010098 <ip4_input+0x240>)
 8010082:	2200      	movs	r2, #0
 8010084:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010086:	4b04      	ldr	r3, [pc, #16]	; (8010098 <ip4_input+0x240>)
 8010088:	2200      	movs	r2, #0
 801008a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	20005bc0 	.word	0x20005bc0
 801009c:	2000d884 	.word	0x2000d884

080100a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b08a      	sub	sp, #40	; 0x28
 80100a4:	af04      	add	r7, sp, #16
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	607a      	str	r2, [r7, #4]
 80100ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d009      	beq.n	80100cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <ip4_output_if+0x26>
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d102      	bne.n	80100cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80100c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c8:	3304      	adds	r3, #4
 80100ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80100cc:	78fa      	ldrb	r2, [r7, #3]
 80100ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d0:	9302      	str	r3, [sp, #8]
 80100d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100d6:	9301      	str	r3, [sp, #4]
 80100d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	4613      	mov	r3, r2
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	6979      	ldr	r1, [r7, #20]
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f000 f805 	bl	80100f4 <ip4_output_if_src>
 80100ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3718      	adds	r7, #24
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b088      	sub	sp, #32
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
 8010100:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	7b9b      	ldrb	r3, [r3, #14]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d006      	beq.n	8010118 <ip4_output_if_src+0x24>
 801010a:	4b4b      	ldr	r3, [pc, #300]	; (8010238 <ip4_output_if_src+0x144>)
 801010c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010110:	494a      	ldr	r1, [pc, #296]	; (801023c <ip4_output_if_src+0x148>)
 8010112:	484b      	ldr	r0, [pc, #300]	; (8010240 <ip4_output_if_src+0x14c>)
 8010114:	f002 fc6a 	bl	80129ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d060      	beq.n	80101e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801011e:	2314      	movs	r3, #20
 8010120:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010122:	2114      	movs	r1, #20
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7f8 fa91 	bl	800864c <pbuf_add_header>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d002      	beq.n	8010136 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010130:	f06f 0301 	mvn.w	r3, #1
 8010134:	e07c      	b.n	8010230 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	895b      	ldrh	r3, [r3, #10]
 8010140:	2b13      	cmp	r3, #19
 8010142:	d806      	bhi.n	8010152 <ip4_output_if_src+0x5e>
 8010144:	4b3c      	ldr	r3, [pc, #240]	; (8010238 <ip4_output_if_src+0x144>)
 8010146:	f44f 7262 	mov.w	r2, #904	; 0x388
 801014a:	493e      	ldr	r1, [pc, #248]	; (8010244 <ip4_output_if_src+0x150>)
 801014c:	483c      	ldr	r0, [pc, #240]	; (8010240 <ip4_output_if_src+0x14c>)
 801014e:	f002 fc4d 	bl	80129ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	78fa      	ldrb	r2, [r7, #3]
 8010156:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801015e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010168:	8b7b      	ldrh	r3, [r7, #26]
 801016a:	089b      	lsrs	r3, r3, #2
 801016c:	b29b      	uxth	r3, r3
 801016e:	b2db      	uxtb	r3, r3
 8010170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010174:	b2da      	uxtb	r2, r3
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010180:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	891b      	ldrh	r3, [r3, #8]
 8010186:	4618      	mov	r0, r3
 8010188:	f7f6 fef0 	bl	8006f6c <lwip_htons>
 801018c:	4603      	mov	r3, r0
 801018e:	461a      	mov	r2, r3
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	2200      	movs	r2, #0
 8010198:	719a      	strb	r2, [r3, #6]
 801019a:	2200      	movs	r2, #0
 801019c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801019e:	4b2a      	ldr	r3, [pc, #168]	; (8010248 <ip4_output_if_src+0x154>)
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7f6 fee2 	bl	8006f6c <lwip_htons>
 80101a8:	4603      	mov	r3, r0
 80101aa:	461a      	mov	r2, r3
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80101b0:	4b25      	ldr	r3, [pc, #148]	; (8010248 <ip4_output_if_src+0x154>)
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	4b23      	ldr	r3, [pc, #140]	; (8010248 <ip4_output_if_src+0x154>)
 80101ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d104      	bne.n	80101cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80101c2:	4b22      	ldr	r3, [pc, #136]	; (801024c <ip4_output_if_src+0x158>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	60da      	str	r2, [r3, #12]
 80101ca:	e003      	b.n	80101d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	2200      	movs	r2, #0
 80101d8:	729a      	strb	r2, [r3, #10]
 80101da:	2200      	movs	r2, #0
 80101dc:	72da      	strb	r2, [r3, #11]
 80101de:	e00f      	b.n	8010200 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	895b      	ldrh	r3, [r3, #10]
 80101e4:	2b13      	cmp	r3, #19
 80101e6:	d802      	bhi.n	80101ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80101e8:	f06f 0301 	mvn.w	r3, #1
 80101ec:	e020      	b.n	8010230 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80101fa:	f107 0314 	add.w	r3, r7, #20
 80101fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00c      	beq.n	8010222 <ip4_output_if_src+0x12e>
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	891a      	ldrh	r2, [r3, #8]
 801020c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010210:	429a      	cmp	r2, r3
 8010212:	d906      	bls.n	8010222 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f000 fd61 	bl	8010ce0 <ip4_frag>
 801021e:	4603      	mov	r3, r0
 8010220:	e006      	b.n	8010230 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010224:	695b      	ldr	r3, [r3, #20]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	68f9      	ldr	r1, [r7, #12]
 801022a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801022c:	4798      	blx	r3
 801022e:	4603      	mov	r3, r0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3720      	adds	r7, #32
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	08016898 	.word	0x08016898
 801023c:	080168cc 	.word	0x080168cc
 8010240:	080168d8 	.word	0x080168d8
 8010244:	08016900 	.word	0x08016900
 8010248:	2000d9e2 	.word	0x2000d9e2
 801024c:	08016d08 	.word	0x08016d08

08010250 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010250:	b480      	push	{r7}
 8010252:	b085      	sub	sp, #20
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010264:	d002      	beq.n	801026c <ip4_addr_isbroadcast_u32+0x1c>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d101      	bne.n	8010270 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801026c:	2301      	movs	r3, #1
 801026e:	e02a      	b.n	80102c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010276:	f003 0302 	and.w	r3, r3, #2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d101      	bne.n	8010282 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801027e:	2300      	movs	r3, #0
 8010280:	e021      	b.n	80102c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	3304      	adds	r3, #4
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	429a      	cmp	r2, r3
 801028c:	d101      	bne.n	8010292 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801028e:	2300      	movs	r3, #0
 8010290:	e019      	b.n	80102c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	3304      	adds	r3, #4
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	405a      	eors	r2, r3
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	3308      	adds	r3, #8
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4013      	ands	r3, r2
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10d      	bne.n	80102c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	3308      	adds	r3, #8
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	43da      	mvns	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	3308      	adds	r3, #8
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80102bc:	429a      	cmp	r2, r3
 80102be:	d101      	bne.n	80102c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80102c0:	2301      	movs	r3, #1
 80102c2:	e000      	b.n	80102c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80102c4:	2300      	movs	r3, #0
  }
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3714      	adds	r7, #20
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
	...

080102d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80102da:	2300      	movs	r3, #0
 80102dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80102de:	4b12      	ldr	r3, [pc, #72]	; (8010328 <ip_reass_tmr+0x54>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80102e4:	e018      	b.n	8010318 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	7fdb      	ldrb	r3, [r3, #31]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d00b      	beq.n	8010306 <ip_reass_tmr+0x32>
      r->timer--;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	7fdb      	ldrb	r3, [r3, #31]
 80102f2:	3b01      	subs	r3, #1
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	60fb      	str	r3, [r7, #12]
 8010304:	e008      	b.n	8010318 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010310:	68b9      	ldr	r1, [r7, #8]
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 f80a 	bl	801032c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1e3      	bne.n	80102e6 <ip_reass_tmr+0x12>
    }
  }
}
 801031e:	bf00      	nop
 8010320:	bf00      	nop
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	2000d9e4 	.word	0x2000d9e4

0801032c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010336:	2300      	movs	r3, #0
 8010338:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	429a      	cmp	r2, r3
 8010340:	d105      	bne.n	801034e <ip_reass_free_complete_datagram+0x22>
 8010342:	4b45      	ldr	r3, [pc, #276]	; (8010458 <ip_reass_free_complete_datagram+0x12c>)
 8010344:	22ab      	movs	r2, #171	; 0xab
 8010346:	4945      	ldr	r1, [pc, #276]	; (801045c <ip_reass_free_complete_datagram+0x130>)
 8010348:	4845      	ldr	r0, [pc, #276]	; (8010460 <ip_reass_free_complete_datagram+0x134>)
 801034a:	f002 fb4f 	bl	80129ec <iprintf>
  if (prev != NULL) {
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d00a      	beq.n	801036a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	d005      	beq.n	801036a <ip_reass_free_complete_datagram+0x3e>
 801035e:	4b3e      	ldr	r3, [pc, #248]	; (8010458 <ip_reass_free_complete_datagram+0x12c>)
 8010360:	22ad      	movs	r2, #173	; 0xad
 8010362:	4940      	ldr	r1, [pc, #256]	; (8010464 <ip_reass_free_complete_datagram+0x138>)
 8010364:	483e      	ldr	r0, [pc, #248]	; (8010460 <ip_reass_free_complete_datagram+0x134>)
 8010366:	f002 fb41 	bl	80129ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	889b      	ldrh	r3, [r3, #4]
 8010376:	b29b      	uxth	r3, r3
 8010378:	2b00      	cmp	r3, #0
 801037a:	d12a      	bne.n	80103d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	6858      	ldr	r0, [r3, #4]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3308      	adds	r3, #8
 8010392:	2214      	movs	r2, #20
 8010394:	4619      	mov	r1, r3
 8010396:	f002 faf9 	bl	801298c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801039a:	2101      	movs	r1, #1
 801039c:	69b8      	ldr	r0, [r7, #24]
 801039e:	f7ff fc47 	bl	800fc30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80103a2:	69b8      	ldr	r0, [r7, #24]
 80103a4:	f7f8 fa70 	bl	8008888 <pbuf_clen>
 80103a8:	4603      	mov	r3, r0
 80103aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80103ac:	8bfa      	ldrh	r2, [r7, #30]
 80103ae:	8a7b      	ldrh	r3, [r7, #18]
 80103b0:	4413      	add	r3, r2
 80103b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103b6:	db05      	blt.n	80103c4 <ip_reass_free_complete_datagram+0x98>
 80103b8:	4b27      	ldr	r3, [pc, #156]	; (8010458 <ip_reass_free_complete_datagram+0x12c>)
 80103ba:	22bc      	movs	r2, #188	; 0xbc
 80103bc:	492a      	ldr	r1, [pc, #168]	; (8010468 <ip_reass_free_complete_datagram+0x13c>)
 80103be:	4828      	ldr	r0, [pc, #160]	; (8010460 <ip_reass_free_complete_datagram+0x134>)
 80103c0:	f002 fb14 	bl	80129ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80103c4:	8bfa      	ldrh	r2, [r7, #30]
 80103c6:	8a7b      	ldrh	r3, [r7, #18]
 80103c8:	4413      	add	r3, r2
 80103ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80103cc:	69b8      	ldr	r0, [r7, #24]
 80103ce:	f7f8 f9d3 	bl	8008778 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80103d8:	e01f      	b.n	801041a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f7f8 fa4c 	bl	8008888 <pbuf_clen>
 80103f0:	4603      	mov	r3, r0
 80103f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80103f4:	8bfa      	ldrh	r2, [r7, #30]
 80103f6:	8a7b      	ldrh	r3, [r7, #18]
 80103f8:	4413      	add	r3, r2
 80103fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103fe:	db05      	blt.n	801040c <ip_reass_free_complete_datagram+0xe0>
 8010400:	4b15      	ldr	r3, [pc, #84]	; (8010458 <ip_reass_free_complete_datagram+0x12c>)
 8010402:	22cc      	movs	r2, #204	; 0xcc
 8010404:	4918      	ldr	r1, [pc, #96]	; (8010468 <ip_reass_free_complete_datagram+0x13c>)
 8010406:	4816      	ldr	r0, [pc, #88]	; (8010460 <ip_reass_free_complete_datagram+0x134>)
 8010408:	f002 faf0 	bl	80129ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801040c:	8bfa      	ldrh	r2, [r7, #30]
 801040e:	8a7b      	ldrh	r3, [r7, #18]
 8010410:	4413      	add	r3, r2
 8010412:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f7f8 f9af 	bl	8008778 <pbuf_free>
  while (p != NULL) {
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1dc      	bne.n	80103da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010420:	6839      	ldr	r1, [r7, #0]
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 f8ca 	bl	80105bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010428:	4b10      	ldr	r3, [pc, #64]	; (801046c <ip_reass_free_complete_datagram+0x140>)
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	8bfa      	ldrh	r2, [r7, #30]
 801042e:	429a      	cmp	r2, r3
 8010430:	d905      	bls.n	801043e <ip_reass_free_complete_datagram+0x112>
 8010432:	4b09      	ldr	r3, [pc, #36]	; (8010458 <ip_reass_free_complete_datagram+0x12c>)
 8010434:	22d2      	movs	r2, #210	; 0xd2
 8010436:	490e      	ldr	r1, [pc, #56]	; (8010470 <ip_reass_free_complete_datagram+0x144>)
 8010438:	4809      	ldr	r0, [pc, #36]	; (8010460 <ip_reass_free_complete_datagram+0x134>)
 801043a:	f002 fad7 	bl	80129ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801043e:	4b0b      	ldr	r3, [pc, #44]	; (801046c <ip_reass_free_complete_datagram+0x140>)
 8010440:	881a      	ldrh	r2, [r3, #0]
 8010442:	8bfb      	ldrh	r3, [r7, #30]
 8010444:	1ad3      	subs	r3, r2, r3
 8010446:	b29a      	uxth	r2, r3
 8010448:	4b08      	ldr	r3, [pc, #32]	; (801046c <ip_reass_free_complete_datagram+0x140>)
 801044a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801044c:	8bfb      	ldrh	r3, [r7, #30]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3720      	adds	r7, #32
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	08016930 	.word	0x08016930
 801045c:	0801696c 	.word	0x0801696c
 8010460:	08016978 	.word	0x08016978
 8010464:	080169a0 	.word	0x080169a0
 8010468:	080169b4 	.word	0x080169b4
 801046c:	2000d9e8 	.word	0x2000d9e8
 8010470:	080169d4 	.word	0x080169d4

08010474 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b08a      	sub	sp, #40	; 0x28
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801047e:	2300      	movs	r3, #0
 8010480:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010482:	2300      	movs	r3, #0
 8010484:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010486:	2300      	movs	r3, #0
 8010488:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801048e:	2300      	movs	r3, #0
 8010490:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010492:	4b28      	ldr	r3, [pc, #160]	; (8010534 <ip_reass_remove_oldest_datagram+0xc0>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010498:	e030      	b.n	80104fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049c:	695a      	ldr	r2, [r3, #20]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d10c      	bne.n	80104c0 <ip_reass_remove_oldest_datagram+0x4c>
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	699a      	ldr	r2, [r3, #24]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d106      	bne.n	80104c0 <ip_reass_remove_oldest_datagram+0x4c>
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b4:	899a      	ldrh	r2, [r3, #12]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	889b      	ldrh	r3, [r3, #4]
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	429a      	cmp	r2, r3
 80104be:	d014      	beq.n	80104ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	3301      	adds	r3, #1
 80104c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d104      	bne.n	80104d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80104cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	61bb      	str	r3, [r7, #24]
 80104d4:	e009      	b.n	80104ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80104d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d8:	7fda      	ldrb	r2, [r3, #31]
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	7fdb      	ldrb	r3, [r3, #31]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d803      	bhi.n	80104ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80104e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80104ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80104f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d1cb      	bne.n	801049a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d008      	beq.n	801051a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010508:	69b9      	ldr	r1, [r7, #24]
 801050a:	6a38      	ldr	r0, [r7, #32]
 801050c:	f7ff ff0e 	bl	801032c <ip_reass_free_complete_datagram>
 8010510:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010512:	697a      	ldr	r2, [r7, #20]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	4413      	add	r3, r2
 8010518:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	429a      	cmp	r2, r3
 8010520:	da02      	bge.n	8010528 <ip_reass_remove_oldest_datagram+0xb4>
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	2b01      	cmp	r3, #1
 8010526:	dcac      	bgt.n	8010482 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010528:	697b      	ldr	r3, [r7, #20]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3728      	adds	r7, #40	; 0x28
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	2000d9e4 	.word	0x2000d9e4

08010538 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010542:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8010546:	491b      	ldr	r1, [pc, #108]	; (80105b4 <ip_reass_enqueue_new_datagram+0x7c>)
 8010548:	2004      	movs	r0, #4
 801054a:	f7f7 fa97 	bl	8007a7c <memp_malloc_fn>
 801054e:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d113      	bne.n	801057e <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010556:	6839      	ldr	r1, [r7, #0]
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ff ff8b 	bl	8010474 <ip_reass_remove_oldest_datagram>
 801055e:	4602      	mov	r2, r0
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	4293      	cmp	r3, r2
 8010564:	dc06      	bgt.n	8010574 <ip_reass_enqueue_new_datagram+0x3c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010566:	f44f 7291 	mov.w	r2, #290	; 0x122
 801056a:	4912      	ldr	r1, [pc, #72]	; (80105b4 <ip_reass_enqueue_new_datagram+0x7c>)
 801056c:	2004      	movs	r0, #4
 801056e:	f7f7 fa85 	bl	8007a7c <memp_malloc_fn>
 8010572:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	e016      	b.n	80105ac <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801057e:	2220      	movs	r2, #32
 8010580:	2100      	movs	r1, #0
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	f002 fa2a 	bl	80129dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	220f      	movs	r2, #15
 801058c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801058e:	4b0a      	ldr	r3, [pc, #40]	; (80105b8 <ip_reass_enqueue_new_datagram+0x80>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010596:	4a08      	ldr	r2, [pc, #32]	; (80105b8 <ip_reass_enqueue_new_datagram+0x80>)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	3308      	adds	r3, #8
 80105a0:	2214      	movs	r2, #20
 80105a2:	6879      	ldr	r1, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f002 f9f1 	bl	801298c <memcpy>
  return ipr;
 80105aa:	68fb      	ldr	r3, [r7, #12]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	08016930 	.word	0x08016930
 80105b8:	2000d9e4 	.word	0x2000d9e4

080105bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80105c6:	4b10      	ldr	r3, [pc, #64]	; (8010608 <ip_reass_dequeue_datagram+0x4c>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d104      	bne.n	80105da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a0c      	ldr	r2, [pc, #48]	; (8010608 <ip_reass_dequeue_datagram+0x4c>)
 80105d6:	6013      	str	r3, [r2, #0]
 80105d8:	e00d      	b.n	80105f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d106      	bne.n	80105ee <ip_reass_dequeue_datagram+0x32>
 80105e0:	4b0a      	ldr	r3, [pc, #40]	; (801060c <ip_reass_dequeue_datagram+0x50>)
 80105e2:	f240 1245 	movw	r2, #325	; 0x145
 80105e6:	490a      	ldr	r1, [pc, #40]	; (8010610 <ip_reass_dequeue_datagram+0x54>)
 80105e8:	480a      	ldr	r0, [pc, #40]	; (8010614 <ip_reass_dequeue_datagram+0x58>)
 80105ea:	f002 f9ff 	bl	80129ec <iprintf>
    prev->next = ipr->next;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80105f6:	6879      	ldr	r1, [r7, #4]
 80105f8:	2004      	movs	r0, #4
 80105fa:	f7f7 faa3 	bl	8007b44 <memp_free>
}
 80105fe:	bf00      	nop
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	2000d9e4 	.word	0x2000d9e4
 801060c:	08016930 	.word	0x08016930
 8010610:	080169f8 	.word	0x080169f8
 8010614:	08016978 	.word	0x08016978

08010618 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b08c      	sub	sp, #48	; 0x30
 801061c:	af00      	add	r7, sp, #0
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010624:	2300      	movs	r3, #0
 8010626:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010628:	2301      	movs	r3, #1
 801062a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	885b      	ldrh	r3, [r3, #2]
 8010636:	b29b      	uxth	r3, r3
 8010638:	4618      	mov	r0, r3
 801063a:	f7f6 fc97 	bl	8006f6c <lwip_htons>
 801063e:	4603      	mov	r3, r0
 8010640:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	f003 030f 	and.w	r3, r3, #15
 801064a:	b2db      	uxtb	r3, r3
 801064c:	009b      	lsls	r3, r3, #2
 801064e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010650:	7e7b      	ldrb	r3, [r7, #25]
 8010652:	b29b      	uxth	r3, r3
 8010654:	8b7a      	ldrh	r2, [r7, #26]
 8010656:	429a      	cmp	r2, r3
 8010658:	d202      	bcs.n	8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801065a:	f04f 33ff 	mov.w	r3, #4294967295
 801065e:	e135      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010660:	7e7b      	ldrb	r3, [r7, #25]
 8010662:	b29b      	uxth	r3, r3
 8010664:	8b7a      	ldrh	r2, [r7, #26]
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801066a:	69fb      	ldr	r3, [r7, #28]
 801066c:	88db      	ldrh	r3, [r3, #6]
 801066e:	b29b      	uxth	r3, r3
 8010670:	4618      	mov	r0, r3
 8010672:	f7f6 fc7b 	bl	8006f6c <lwip_htons>
 8010676:	4603      	mov	r3, r0
 8010678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801067c:	b29b      	uxth	r3, r3
 801067e:	00db      	lsls	r3, r3, #3
 8010680:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	2200      	movs	r2, #0
 801068c:	701a      	strb	r2, [r3, #0]
 801068e:	2200      	movs	r2, #0
 8010690:	705a      	strb	r2, [r3, #1]
 8010692:	2200      	movs	r2, #0
 8010694:	709a      	strb	r2, [r3, #2]
 8010696:	2200      	movs	r2, #0
 8010698:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	8afa      	ldrh	r2, [r7, #22]
 801069e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80106a0:	8afa      	ldrh	r2, [r7, #22]
 80106a2:	8b7b      	ldrh	r3, [r7, #26]
 80106a4:	4413      	add	r3, r2
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	88db      	ldrh	r3, [r3, #6]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	8afa      	ldrh	r2, [r7, #22]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d902      	bls.n	80106be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80106b8:	f04f 33ff 	mov.w	r3, #4294967295
 80106bc:	e106      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24
 80106c4:	e068      	b.n	8010798 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80106c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80106cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ce:	889b      	ldrh	r3, [r3, #4]
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	889b      	ldrh	r3, [r3, #4]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	429a      	cmp	r2, r3
 80106da:	d235      	bcs.n	8010748 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80106dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d020      	beq.n	801072a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80106e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ea:	889b      	ldrh	r3, [r3, #4]
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	88db      	ldrh	r3, [r3, #6]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d307      	bcc.n	8010708 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	88db      	ldrh	r3, [r3, #6]
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	889b      	ldrh	r3, [r3, #4]
 8010702:	b29b      	uxth	r3, r3
 8010704:	429a      	cmp	r2, r3
 8010706:	d902      	bls.n	801070e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010708:	f04f 33ff 	mov.w	r3, #4294967295
 801070c:	e0de      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801070e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010710:	68ba      	ldr	r2, [r7, #8]
 8010712:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010716:	88db      	ldrh	r3, [r3, #6]
 8010718:	b29a      	uxth	r2, r3
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	889b      	ldrh	r3, [r3, #4]
 801071e:	b29b      	uxth	r3, r3
 8010720:	429a      	cmp	r2, r3
 8010722:	d03d      	beq.n	80107a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010724:	2300      	movs	r3, #0
 8010726:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010728:	e03a      	b.n	80107a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	88db      	ldrh	r3, [r3, #6]
 801072e:	b29a      	uxth	r2, r3
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	889b      	ldrh	r3, [r3, #4]
 8010734:	b29b      	uxth	r3, r3
 8010736:	429a      	cmp	r2, r3
 8010738:	d902      	bls.n	8010740 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801073a:	f04f 33ff 	mov.w	r3, #4294967295
 801073e:	e0c5      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	605a      	str	r2, [r3, #4]
      break;
 8010746:	e02b      	b.n	80107a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074a:	889b      	ldrh	r3, [r3, #4]
 801074c:	b29a      	uxth	r2, r3
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	889b      	ldrh	r3, [r3, #4]
 8010752:	b29b      	uxth	r3, r3
 8010754:	429a      	cmp	r2, r3
 8010756:	d102      	bne.n	801075e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010758:	f04f 33ff 	mov.w	r3, #4294967295
 801075c:	e0b6      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010760:	889b      	ldrh	r3, [r3, #4]
 8010762:	b29a      	uxth	r2, r3
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	88db      	ldrh	r3, [r3, #6]
 8010768:	b29b      	uxth	r3, r3
 801076a:	429a      	cmp	r2, r3
 801076c:	d202      	bcs.n	8010774 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801076e:	f04f 33ff 	mov.w	r3, #4294967295
 8010772:	e0ab      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010776:	2b00      	cmp	r3, #0
 8010778:	d009      	beq.n	801078e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077c:	88db      	ldrh	r3, [r3, #6]
 801077e:	b29a      	uxth	r2, r3
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	889b      	ldrh	r3, [r3, #4]
 8010784:	b29b      	uxth	r3, r3
 8010786:	429a      	cmp	r2, r3
 8010788:	d001      	beq.n	801078e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801078a:	2300      	movs	r3, #0
 801078c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	2b00      	cmp	r3, #0
 801079c:	d193      	bne.n	80106c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801079e:	e000      	b.n	80107a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80107a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80107a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d12d      	bne.n	8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80107a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d01c      	beq.n	80107e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80107ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b0:	88db      	ldrh	r3, [r3, #6]
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b6:	889b      	ldrh	r3, [r3, #4]
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d906      	bls.n	80107cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80107be:	4b45      	ldr	r3, [pc, #276]	; (80108d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80107c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80107c4:	4944      	ldr	r1, [pc, #272]	; (80108d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80107c6:	4845      	ldr	r0, [pc, #276]	; (80108dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80107c8:	f002 f910 	bl	80129ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	88db      	ldrh	r3, [r3, #6]
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107da:	889b      	ldrh	r3, [r3, #4]
 80107dc:	b29b      	uxth	r3, r3
 80107de:	429a      	cmp	r2, r3
 80107e0:	d010      	beq.n	8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	623b      	str	r3, [r7, #32]
 80107e6:	e00d      	b.n	8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d006      	beq.n	80107fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80107f0:	4b38      	ldr	r3, [pc, #224]	; (80108d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80107f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80107f6:	493a      	ldr	r1, [pc, #232]	; (80108e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80107f8:	4838      	ldr	r0, [pc, #224]	; (80108dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80107fa:	f002 f8f7 	bl	80129ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d105      	bne.n	8010816 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	7f9b      	ldrb	r3, [r3, #30]
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	2b00      	cmp	r3, #0
 8010814:	d059      	beq.n	80108ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d04f      	beq.n	80108bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d006      	beq.n	8010832 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	889b      	ldrh	r3, [r3, #4]
 801082c:	b29b      	uxth	r3, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	623b      	str	r3, [r7, #32]
 8010836:	e041      	b.n	80108bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801083c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010842:	e012      	b.n	801086a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	88db      	ldrh	r3, [r3, #6]
 801084e:	b29a      	uxth	r2, r3
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	889b      	ldrh	r3, [r3, #4]
 8010854:	b29b      	uxth	r3, r3
 8010856:	429a      	cmp	r2, r3
 8010858:	d002      	beq.n	8010860 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	623b      	str	r3, [r7, #32]
            break;
 801085e:	e007      	b.n	8010870 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010862:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1e9      	bne.n	8010844 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d022      	beq.n	80108bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d106      	bne.n	801088c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801087e:	4b15      	ldr	r3, [pc, #84]	; (80108d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010880:	f240 12df 	movw	r2, #479	; 0x1df
 8010884:	4917      	ldr	r1, [pc, #92]	; (80108e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010886:	4815      	ldr	r0, [pc, #84]	; (80108dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010888:	f002 f8b0 	bl	80129ec <iprintf>
          LWIP_ASSERT("sanity check",
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010894:	429a      	cmp	r2, r3
 8010896:	d106      	bne.n	80108a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010898:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801089a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801089e:	4911      	ldr	r1, [pc, #68]	; (80108e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80108a0:	480e      	ldr	r0, [pc, #56]	; (80108dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80108a2:	f002 f8a3 	bl	80129ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80108a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d006      	beq.n	80108bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80108ae:	4b09      	ldr	r3, [pc, #36]	; (80108d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80108b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80108b4:	490c      	ldr	r1, [pc, #48]	; (80108e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80108b6:	4809      	ldr	r0, [pc, #36]	; (80108dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80108b8:	f002 f898 	bl	80129ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	bf14      	ite	ne
 80108c2:	2301      	movne	r3, #1
 80108c4:	2300      	moveq	r3, #0
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	e000      	b.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3730      	adds	r7, #48	; 0x30
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	08016930 	.word	0x08016930
 80108d8:	08016a14 	.word	0x08016a14
 80108dc:	08016978 	.word	0x08016978
 80108e0:	08016a34 	.word	0x08016a34
 80108e4:	08016a6c 	.word	0x08016a6c
 80108e8:	08016a7c 	.word	0x08016a7c

080108ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08e      	sub	sp, #56	; 0x38
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	f003 030f 	and.w	r3, r3, #15
 8010902:	b2db      	uxtb	r3, r3
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b14      	cmp	r3, #20
 801090a:	f040 8171 	bne.w	8010bf0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	88db      	ldrh	r3, [r3, #6]
 8010912:	b29b      	uxth	r3, r3
 8010914:	4618      	mov	r0, r3
 8010916:	f7f6 fb29 	bl	8006f6c <lwip_htons>
 801091a:	4603      	mov	r3, r0
 801091c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010920:	b29b      	uxth	r3, r3
 8010922:	00db      	lsls	r3, r3, #3
 8010924:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010928:	885b      	ldrh	r3, [r3, #2]
 801092a:	b29b      	uxth	r3, r3
 801092c:	4618      	mov	r0, r3
 801092e:	f7f6 fb1d 	bl	8006f6c <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	f003 030f 	and.w	r3, r3, #15
 801093e:	b2db      	uxtb	r3, r3
 8010940:	009b      	lsls	r3, r3, #2
 8010942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801094a:	b29b      	uxth	r3, r3
 801094c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801094e:	429a      	cmp	r2, r3
 8010950:	f0c0 8150 	bcc.w	8010bf4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010958:	b29b      	uxth	r3, r3
 801095a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7f7 ff91 	bl	8008888 <pbuf_clen>
 8010966:	4603      	mov	r3, r0
 8010968:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801096a:	4b8c      	ldr	r3, [pc, #560]	; (8010b9c <ip4_reass+0x2b0>)
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	461a      	mov	r2, r3
 8010970:	8c3b      	ldrh	r3, [r7, #32]
 8010972:	4413      	add	r3, r2
 8010974:	2b0a      	cmp	r3, #10
 8010976:	dd10      	ble.n	801099a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010978:	8c3b      	ldrh	r3, [r7, #32]
 801097a:	4619      	mov	r1, r3
 801097c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801097e:	f7ff fd79 	bl	8010474 <ip_reass_remove_oldest_datagram>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 8137 	beq.w	8010bf8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801098a:	4b84      	ldr	r3, [pc, #528]	; (8010b9c <ip4_reass+0x2b0>)
 801098c:	881b      	ldrh	r3, [r3, #0]
 801098e:	461a      	mov	r2, r3
 8010990:	8c3b      	ldrh	r3, [r7, #32]
 8010992:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010994:	2b0a      	cmp	r3, #10
 8010996:	f300 812f 	bgt.w	8010bf8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801099a:	4b81      	ldr	r3, [pc, #516]	; (8010ba0 <ip4_reass+0x2b4>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	633b      	str	r3, [r7, #48]	; 0x30
 80109a0:	e015      	b.n	80109ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	695a      	ldr	r2, [r3, #20]
 80109a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d10c      	bne.n	80109c8 <ip4_reass+0xdc>
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	699a      	ldr	r2, [r3, #24]
 80109b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b4:	691b      	ldr	r3, [r3, #16]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d106      	bne.n	80109c8 <ip4_reass+0xdc>
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	899a      	ldrh	r2, [r3, #12]
 80109be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c0:	889b      	ldrh	r3, [r3, #4]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d006      	beq.n	80109d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80109c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	633b      	str	r3, [r7, #48]	; 0x30
 80109ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d1e6      	bne.n	80109a2 <ip4_reass+0xb6>
 80109d4:	e000      	b.n	80109d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80109d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80109d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d109      	bne.n	80109f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80109de:	8c3b      	ldrh	r3, [r7, #32]
 80109e0:	4619      	mov	r1, r3
 80109e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109e4:	f7ff fda8 	bl	8010538 <ip_reass_enqueue_new_datagram>
 80109e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d11c      	bne.n	8010a2a <ip4_reass+0x13e>
      goto nullreturn;
 80109f0:	e105      	b.n	8010bfe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	88db      	ldrh	r3, [r3, #6]
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f6 fab7 	bl	8006f6c <lwip_htons>
 80109fe:	4603      	mov	r3, r0
 8010a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d110      	bne.n	8010a2a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	89db      	ldrh	r3, [r3, #14]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7f6 faad 	bl	8006f6c <lwip_htons>
 8010a12:	4603      	mov	r3, r0
 8010a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d006      	beq.n	8010a2a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	3308      	adds	r3, #8
 8010a20:	2214      	movs	r2, #20
 8010a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a24:	4618      	mov	r0, r3
 8010a26:	f001 ffb1 	bl	801298c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2c:	88db      	ldrh	r3, [r3, #6]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	f003 0320 	and.w	r3, r3, #32
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	bf0c      	ite	eq
 8010a38:	2301      	moveq	r3, #1
 8010a3a:	2300      	movne	r3, #0
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00e      	beq.n	8010a64 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010a46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a4a:	4413      	add	r3, r2
 8010a4c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010a4e:	8b7a      	ldrh	r2, [r7, #26]
 8010a50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a52:	429a      	cmp	r2, r3
 8010a54:	f0c0 80a0 	bcc.w	8010b98 <ip4_reass+0x2ac>
 8010a58:	8b7b      	ldrh	r3, [r7, #26]
 8010a5a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	f200 809a 	bhi.w	8010b98 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010a64:	69fa      	ldr	r2, [r7, #28]
 8010a66:	6879      	ldr	r1, [r7, #4]
 8010a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a6a:	f7ff fdd5 	bl	8010618 <ip_reass_chain_frag_into_datagram_and_validate>
 8010a6e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a76:	f000 809b 	beq.w	8010bb0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010a7a:	4b48      	ldr	r3, [pc, #288]	; (8010b9c <ip4_reass+0x2b0>)
 8010a7c:	881a      	ldrh	r2, [r3, #0]
 8010a7e:	8c3b      	ldrh	r3, [r7, #32]
 8010a80:	4413      	add	r3, r2
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	4b45      	ldr	r3, [pc, #276]	; (8010b9c <ip4_reass+0x2b0>)
 8010a86:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00d      	beq.n	8010aaa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010a8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a92:	4413      	add	r3, r2
 8010a94:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a98:	8a7a      	ldrh	r2, [r7, #18]
 8010a9a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9e:	7f9b      	ldrb	r3, [r3, #30]
 8010aa0:	f043 0301 	orr.w	r3, r3, #1
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d171      	bne.n	8010b94 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab2:	8b9b      	ldrh	r3, [r3, #28]
 8010ab4:	3314      	adds	r3, #20
 8010ab6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	3308      	adds	r3, #8
 8010ace:	2214      	movs	r2, #20
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ad4:	f001 ff5a 	bl	801298c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010ad8:	8a3b      	ldrh	r3, [r7, #16]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7f6 fa46 	bl	8006f6c <lwip_htons>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aea:	2200      	movs	r2, #0
 8010aec:	719a      	strb	r2, [r3, #6]
 8010aee:	2200      	movs	r2, #0
 8010af0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af4:	2200      	movs	r2, #0
 8010af6:	729a      	strb	r2, [r3, #10]
 8010af8:	2200      	movs	r2, #0
 8010afa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010b02:	e00d      	b.n	8010b20 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010b0a:	2114      	movs	r1, #20
 8010b0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010b0e:	f7f7 fdad 	bl	800866c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010b12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7f7 fef1 	bl	80088fc <pbuf_cat>
      r = iprh->next_pbuf;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1ee      	bne.n	8010b04 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010b26:	4b1e      	ldr	r3, [pc, #120]	; (8010ba0 <ip4_reass+0x2b4>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d102      	bne.n	8010b36 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010b30:	2300      	movs	r3, #0
 8010b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b34:	e010      	b.n	8010b58 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010b36:	4b1a      	ldr	r3, [pc, #104]	; (8010ba0 <ip4_reass+0x2b4>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b3c:	e007      	b.n	8010b4e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d006      	beq.n	8010b56 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1f4      	bne.n	8010b3e <ip4_reass+0x252>
 8010b54:	e000      	b.n	8010b58 <ip4_reass+0x26c>
          break;
 8010b56:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b5c:	f7ff fd2e 	bl	80105bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7f7 fe91 	bl	8008888 <pbuf_clen>
 8010b66:	4603      	mov	r3, r0
 8010b68:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010b6a:	4b0c      	ldr	r3, [pc, #48]	; (8010b9c <ip4_reass+0x2b0>)
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	8c3a      	ldrh	r2, [r7, #32]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d906      	bls.n	8010b82 <ip4_reass+0x296>
 8010b74:	4b0b      	ldr	r3, [pc, #44]	; (8010ba4 <ip4_reass+0x2b8>)
 8010b76:	f240 229b 	movw	r2, #667	; 0x29b
 8010b7a:	490b      	ldr	r1, [pc, #44]	; (8010ba8 <ip4_reass+0x2bc>)
 8010b7c:	480b      	ldr	r0, [pc, #44]	; (8010bac <ip4_reass+0x2c0>)
 8010b7e:	f001 ff35 	bl	80129ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010b82:	4b06      	ldr	r3, [pc, #24]	; (8010b9c <ip4_reass+0x2b0>)
 8010b84:	881a      	ldrh	r2, [r3, #0]
 8010b86:	8c3b      	ldrh	r3, [r7, #32]
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	4b03      	ldr	r3, [pc, #12]	; (8010b9c <ip4_reass+0x2b0>)
 8010b8e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	e038      	b.n	8010c06 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010b94:	2300      	movs	r3, #0
 8010b96:	e036      	b.n	8010c06 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010b98:	bf00      	nop
 8010b9a:	e00a      	b.n	8010bb2 <ip4_reass+0x2c6>
 8010b9c:	2000d9e8 	.word	0x2000d9e8
 8010ba0:	2000d9e4 	.word	0x2000d9e4
 8010ba4:	08016930 	.word	0x08016930
 8010ba8:	08016aa0 	.word	0x08016aa0
 8010bac:	08016978 	.word	0x08016978
    goto nullreturn_ipr;
 8010bb0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d106      	bne.n	8010bc6 <ip4_reass+0x2da>
 8010bb8:	4b15      	ldr	r3, [pc, #84]	; (8010c10 <ip4_reass+0x324>)
 8010bba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010bbe:	4915      	ldr	r1, [pc, #84]	; (8010c14 <ip4_reass+0x328>)
 8010bc0:	4815      	ldr	r0, [pc, #84]	; (8010c18 <ip4_reass+0x32c>)
 8010bc2:	f001 ff13 	bl	80129ec <iprintf>
  if (ipr->p == NULL) {
 8010bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d116      	bne.n	8010bfc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010bce:	4b13      	ldr	r3, [pc, #76]	; (8010c1c <ip4_reass+0x330>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d006      	beq.n	8010be6 <ip4_reass+0x2fa>
 8010bd8:	4b0d      	ldr	r3, [pc, #52]	; (8010c10 <ip4_reass+0x324>)
 8010bda:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010bde:	4910      	ldr	r1, [pc, #64]	; (8010c20 <ip4_reass+0x334>)
 8010be0:	480d      	ldr	r0, [pc, #52]	; (8010c18 <ip4_reass+0x32c>)
 8010be2:	f001 ff03 	bl	80129ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010be6:	2100      	movs	r1, #0
 8010be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bea:	f7ff fce7 	bl	80105bc <ip_reass_dequeue_datagram>
 8010bee:	e006      	b.n	8010bfe <ip4_reass+0x312>
    goto nullreturn;
 8010bf0:	bf00      	nop
 8010bf2:	e004      	b.n	8010bfe <ip4_reass+0x312>
    goto nullreturn;
 8010bf4:	bf00      	nop
 8010bf6:	e002      	b.n	8010bfe <ip4_reass+0x312>
      goto nullreturn;
 8010bf8:	bf00      	nop
 8010bfa:	e000      	b.n	8010bfe <ip4_reass+0x312>
  }

nullreturn:
 8010bfc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7f7 fdba 	bl	8008778 <pbuf_free>
  return NULL;
 8010c04:	2300      	movs	r3, #0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3738      	adds	r7, #56	; 0x38
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	08016930 	.word	0x08016930
 8010c14:	08016abc 	.word	0x08016abc
 8010c18:	08016978 	.word	0x08016978
 8010c1c:	2000d9e4 	.word	0x2000d9e4
 8010c20:	08016ac8 	.word	0x08016ac8

08010c24 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010c28:	f240 22bd 	movw	r2, #701	; 0x2bd
 8010c2c:	4903      	ldr	r1, [pc, #12]	; (8010c3c <ip_frag_alloc_pbuf_custom_ref+0x18>)
 8010c2e:	2005      	movs	r0, #5
 8010c30:	f7f6 ff24 	bl	8007a7c <memp_malloc_fn>
 8010c34:	4603      	mov	r3, r0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	08016930 	.word	0x08016930

08010c40 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d106      	bne.n	8010c5c <ip_frag_free_pbuf_custom_ref+0x1c>
 8010c4e:	4b07      	ldr	r3, [pc, #28]	; (8010c6c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010c50:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010c54:	4906      	ldr	r1, [pc, #24]	; (8010c70 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010c56:	4807      	ldr	r0, [pc, #28]	; (8010c74 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010c58:	f001 fec8 	bl	80129ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010c5c:	6879      	ldr	r1, [r7, #4]
 8010c5e:	2005      	movs	r0, #5
 8010c60:	f7f6 ff70 	bl	8007b44 <memp_free>
}
 8010c64:	bf00      	nop
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	08016930 	.word	0x08016930
 8010c70:	08016ae8 	.word	0x08016ae8
 8010c74:	08016978 	.word	0x08016978

08010c78 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <ipfrag_free_pbuf_custom+0x20>
 8010c8a:	4b11      	ldr	r3, [pc, #68]	; (8010cd0 <ipfrag_free_pbuf_custom+0x58>)
 8010c8c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010c90:	4910      	ldr	r1, [pc, #64]	; (8010cd4 <ipfrag_free_pbuf_custom+0x5c>)
 8010c92:	4811      	ldr	r0, [pc, #68]	; (8010cd8 <ipfrag_free_pbuf_custom+0x60>)
 8010c94:	f001 feaa 	bl	80129ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d006      	beq.n	8010cae <ipfrag_free_pbuf_custom+0x36>
 8010ca0:	4b0b      	ldr	r3, [pc, #44]	; (8010cd0 <ipfrag_free_pbuf_custom+0x58>)
 8010ca2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010ca6:	490d      	ldr	r1, [pc, #52]	; (8010cdc <ipfrag_free_pbuf_custom+0x64>)
 8010ca8:	480b      	ldr	r0, [pc, #44]	; (8010cd8 <ipfrag_free_pbuf_custom+0x60>)
 8010caa:	f001 fe9f 	bl	80129ec <iprintf>
  if (pcr->original != NULL) {
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	695b      	ldr	r3, [r3, #20]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d004      	beq.n	8010cc0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f7 fd5c 	bl	8008778 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f7ff ffbd 	bl	8010c40 <ip_frag_free_pbuf_custom_ref>
}
 8010cc6:	bf00      	nop
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	08016930 	.word	0x08016930
 8010cd4:	08016af4 	.word	0x08016af4
 8010cd8:	08016978 	.word	0x08016978
 8010cdc:	08016b00 	.word	0x08016b00

08010ce0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b094      	sub	sp, #80	; 0x50
 8010ce4:	af02      	add	r7, sp, #8
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010cec:	2300      	movs	r3, #0
 8010cee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010cf6:	3b14      	subs	r3, #20
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	da00      	bge.n	8010cfe <ip4_frag+0x1e>
 8010cfc:	3307      	adds	r3, #7
 8010cfe:	10db      	asrs	r3, r3, #3
 8010d00:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010d02:	2314      	movs	r3, #20
 8010d04:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f003 030f 	and.w	r3, r3, #15
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	009b      	lsls	r3, r3, #2
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b14      	cmp	r3, #20
 8010d20:	d002      	beq.n	8010d28 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010d22:	f06f 0305 	mvn.w	r3, #5
 8010d26:	e110      	b.n	8010f4a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	895b      	ldrh	r3, [r3, #10]
 8010d2c:	2b13      	cmp	r3, #19
 8010d2e:	d809      	bhi.n	8010d44 <ip4_frag+0x64>
 8010d30:	4b88      	ldr	r3, [pc, #544]	; (8010f54 <ip4_frag+0x274>)
 8010d32:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010d36:	4988      	ldr	r1, [pc, #544]	; (8010f58 <ip4_frag+0x278>)
 8010d38:	4888      	ldr	r0, [pc, #544]	; (8010f5c <ip4_frag+0x27c>)
 8010d3a:	f001 fe57 	bl	80129ec <iprintf>
 8010d3e:	f06f 0305 	mvn.w	r3, #5
 8010d42:	e102      	b.n	8010f4a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d46:	88db      	ldrh	r3, [r3, #6]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7f6 f90e 	bl	8006f6c <lwip_htons>
 8010d50:	4603      	mov	r3, r0
 8010d52:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010d54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010d5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d64:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	891b      	ldrh	r3, [r3, #8]
 8010d6a:	3b14      	subs	r3, #20
 8010d6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010d70:	e0e1      	b.n	8010f36 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010d72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	bf28      	it	cs
 8010d80:	4613      	movcs	r3, r2
 8010d82:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010d84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d88:	2114      	movs	r1, #20
 8010d8a:	200e      	movs	r0, #14
 8010d8c:	f7f7 fa08 	bl	80081a0 <pbuf_alloc>
 8010d90:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f000 80d5 	beq.w	8010f44 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	895b      	ldrh	r3, [r3, #10]
 8010d9e:	2b13      	cmp	r3, #19
 8010da0:	d806      	bhi.n	8010db0 <ip4_frag+0xd0>
 8010da2:	4b6c      	ldr	r3, [pc, #432]	; (8010f54 <ip4_frag+0x274>)
 8010da4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010da8:	496d      	ldr	r1, [pc, #436]	; (8010f60 <ip4_frag+0x280>)
 8010daa:	486c      	ldr	r0, [pc, #432]	; (8010f5c <ip4_frag+0x27c>)
 8010dac:	f001 fe1e 	bl	80129ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	2214      	movs	r2, #20
 8010db6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010db8:	4618      	mov	r0, r3
 8010dba:	f001 fde7 	bl	801298c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010dc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010dca:	e064      	b.n	8010e96 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	895a      	ldrh	r2, [r3, #10]
 8010dd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	895b      	ldrh	r3, [r3, #10]
 8010dda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d906      	bls.n	8010dee <ip4_frag+0x10e>
 8010de0:	4b5c      	ldr	r3, [pc, #368]	; (8010f54 <ip4_frag+0x274>)
 8010de2:	f240 322d 	movw	r2, #813	; 0x32d
 8010de6:	495f      	ldr	r1, [pc, #380]	; (8010f64 <ip4_frag+0x284>)
 8010de8:	485c      	ldr	r0, [pc, #368]	; (8010f5c <ip4_frag+0x27c>)
 8010dea:	f001 fdff 	bl	80129ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010dee:	8bfa      	ldrh	r2, [r7, #30]
 8010df0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010df4:	4293      	cmp	r3, r2
 8010df6:	bf28      	it	cs
 8010df8:	4613      	movcs	r3, r2
 8010dfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010dfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d105      	bne.n	8010e12 <ip4_frag+0x132>
        poff = 0;
 8010e06:	2300      	movs	r3, #0
 8010e08:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	60fb      	str	r3, [r7, #12]
        continue;
 8010e10:	e041      	b.n	8010e96 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010e12:	f7ff ff07 	bl	8010c24 <ip_frag_alloc_pbuf_custom_ref>
 8010e16:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d103      	bne.n	8010e26 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e20:	f7f7 fcaa 	bl	8008778 <pbuf_free>
        goto memerr;
 8010e24:	e08f      	b.n	8010f46 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010e26:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010e2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e2e:	4413      	add	r3, r2
 8010e30:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010e34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010e38:	9201      	str	r2, [sp, #4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2241      	movs	r2, #65	; 0x41
 8010e40:	2000      	movs	r0, #0
 8010e42:	f7f7 fadf 	bl	8008404 <pbuf_alloced_custom>
 8010e46:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d106      	bne.n	8010e5c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010e4e:	69b8      	ldr	r0, [r7, #24]
 8010e50:	f7ff fef6 	bl	8010c40 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e56:	f7f7 fc8f 	bl	8008778 <pbuf_free>
        goto memerr;
 8010e5a:	e074      	b.n	8010f46 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f7f7 fd2b 	bl	80088b8 <pbuf_ref>
      pcr->original = p;
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	4a3f      	ldr	r2, [pc, #252]	; (8010f68 <ip4_frag+0x288>)
 8010e6c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010e6e:	6979      	ldr	r1, [r7, #20]
 8010e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e72:	f7f7 fd43 	bl	80088fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010e76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010e7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010e84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d004      	beq.n	8010e96 <ip4_frag+0x1b6>
        poff = 0;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010e96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d196      	bne.n	8010dcc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010e9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010ea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010ea4:	4413      	add	r3, r2
 8010ea6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010eac:	f1a3 0213 	sub.w	r2, r3, #19
 8010eb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	bfcc      	ite	gt
 8010eb8:	2301      	movgt	r3, #1
 8010eba:	2300      	movle	r3, #0
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ec8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <ip4_frag+0x1f6>
 8010ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010edc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010ede:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7f6 f843 	bl	8006f6c <lwip_htons>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	461a      	mov	r2, r3
 8010eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010eee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ef0:	3314      	adds	r3, #20
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f6 f839 	bl	8006f6c <lwip_htons>
 8010efa:	4603      	mov	r3, r0
 8010efc:	461a      	mov	r2, r3
 8010efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f04:	2200      	movs	r2, #0
 8010f06:	729a      	strb	r2, [r3, #10]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	695b      	ldr	r3, [r3, #20]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f14:	68b8      	ldr	r0, [r7, #8]
 8010f16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f1a:	f7f7 fc2d 	bl	8008778 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010f1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010f2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010f2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f30:	4413      	add	r3, r2
 8010f32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010f36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f47f af19 	bne.w	8010d72 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010f40:	2300      	movs	r3, #0
 8010f42:	e002      	b.n	8010f4a <ip4_frag+0x26a>
      goto memerr;
 8010f44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3748      	adds	r7, #72	; 0x48
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	08016930 	.word	0x08016930
 8010f58:	08016b0c 	.word	0x08016b0c
 8010f5c:	08016978 	.word	0x08016978
 8010f60:	08016b28 	.word	0x08016b28
 8010f64:	08016b48 	.word	0x08016b48
 8010f68:	08010c79 	.word	0x08010c79

08010f6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b086      	sub	sp, #24
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010f76:	230e      	movs	r3, #14
 8010f78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	895b      	ldrh	r3, [r3, #10]
 8010f7e:	2b0e      	cmp	r3, #14
 8010f80:	d96e      	bls.n	8011060 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	7bdb      	ldrb	r3, [r3, #15]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d106      	bne.n	8010f98 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f90:	3301      	adds	r3, #1
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	7b1a      	ldrb	r2, [r3, #12]
 8010fa2:	7b5b      	ldrb	r3, [r3, #13]
 8010fa4:	021b      	lsls	r3, r3, #8
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d023      	beq.n	8010ffe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d10f      	bne.n	8010fde <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	785b      	ldrb	r3, [r3, #1]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d11b      	bne.n	8010ffe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010fca:	2b5e      	cmp	r3, #94	; 0x5e
 8010fcc:	d117      	bne.n	8010ffe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	7b5b      	ldrb	r3, [r3, #13]
 8010fd2:	f043 0310 	orr.w	r3, r3, #16
 8010fd6:	b2da      	uxtb	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	735a      	strb	r2, [r3, #13]
 8010fdc:	e00f      	b.n	8010ffe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	2206      	movs	r2, #6
 8010fe2:	4928      	ldr	r1, [pc, #160]	; (8011084 <ethernet_input+0x118>)
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f001 fcc1 	bl	801296c <memcmp>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d106      	bne.n	8010ffe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	7b5b      	ldrb	r3, [r3, #13]
 8010ff4:	f043 0308 	orr.w	r3, r3, #8
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010ffe:	89fb      	ldrh	r3, [r7, #14]
 8011000:	2b08      	cmp	r3, #8
 8011002:	d003      	beq.n	801100c <ethernet_input+0xa0>
 8011004:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011008:	d014      	beq.n	8011034 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801100a:	e032      	b.n	8011072 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011012:	f003 0308 	and.w	r3, r3, #8
 8011016:	2b00      	cmp	r3, #0
 8011018:	d024      	beq.n	8011064 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801101a:	8afb      	ldrh	r3, [r7, #22]
 801101c:	4619      	mov	r1, r3
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7f7 fb24 	bl	800866c <pbuf_remove_header>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d11e      	bne.n	8011068 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7fe ff13 	bl	800fe58 <ip4_input>
      break;
 8011032:	e013      	b.n	801105c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801103a:	f003 0308 	and.w	r3, r3, #8
 801103e:	2b00      	cmp	r3, #0
 8011040:	d014      	beq.n	801106c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011042:	8afb      	ldrh	r3, [r7, #22]
 8011044:	4619      	mov	r1, r3
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7f7 fb10 	bl	800866c <pbuf_remove_header>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d10e      	bne.n	8011070 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7fe f8b3 	bl	800f1c0 <etharp_input>
      break;
 801105a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801105c:	2300      	movs	r3, #0
 801105e:	e00c      	b.n	801107a <ethernet_input+0x10e>
    goto free_and_return;
 8011060:	bf00      	nop
 8011062:	e006      	b.n	8011072 <ethernet_input+0x106>
        goto free_and_return;
 8011064:	bf00      	nop
 8011066:	e004      	b.n	8011072 <ethernet_input+0x106>
        goto free_and_return;
 8011068:	bf00      	nop
 801106a:	e002      	b.n	8011072 <ethernet_input+0x106>
        goto free_and_return;
 801106c:	bf00      	nop
 801106e:	e000      	b.n	8011072 <ethernet_input+0x106>
        goto free_and_return;
 8011070:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7f7 fb80 	bl	8008778 <pbuf_free>
  return ERR_OK;
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	3718      	adds	r7, #24
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	08016d0c 	.word	0x08016d0c

08011088 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011088:	b580      	push	{r7, lr}
 801108a:	b086      	sub	sp, #24
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
 8011094:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011096:	8c3b      	ldrh	r3, [r7, #32]
 8011098:	4618      	mov	r0, r3
 801109a:	f7f5 ff67 	bl	8006f6c <lwip_htons>
 801109e:	4603      	mov	r3, r0
 80110a0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80110a2:	210e      	movs	r1, #14
 80110a4:	68b8      	ldr	r0, [r7, #8]
 80110a6:	f7f7 fad1 	bl	800864c <pbuf_add_header>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d125      	bne.n	80110fc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	8afa      	ldrh	r2, [r7, #22]
 80110ba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	2206      	movs	r2, #6
 80110c0:	6839      	ldr	r1, [r7, #0]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f001 fc62 	bl	801298c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	3306      	adds	r3, #6
 80110cc:	2206      	movs	r2, #6
 80110ce:	6879      	ldr	r1, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f001 fc5b 	bl	801298c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80110dc:	2b06      	cmp	r3, #6
 80110de:	d006      	beq.n	80110ee <ethernet_output+0x66>
 80110e0:	4b0a      	ldr	r3, [pc, #40]	; (801110c <ethernet_output+0x84>)
 80110e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80110e6:	490a      	ldr	r1, [pc, #40]	; (8011110 <ethernet_output+0x88>)
 80110e8:	480a      	ldr	r0, [pc, #40]	; (8011114 <ethernet_output+0x8c>)
 80110ea:	f001 fc7f 	bl	80129ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	699b      	ldr	r3, [r3, #24]
 80110f2:	68b9      	ldr	r1, [r7, #8]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	4798      	blx	r3
 80110f8:	4603      	mov	r3, r0
 80110fa:	e002      	b.n	8011102 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80110fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80110fe:	f06f 0301 	mvn.w	r3, #1
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	08016b58 	.word	0x08016b58
 8011110:	08016b90 	.word	0x08016b90
 8011114:	08016bc4 	.word	0x08016bc4

08011118 <QHsm_trig_>:
};

/*! helper function to trigger reserved event in an HSM */
static inline QState QHsm_trig_(QHsm * const me,
                                QStateHandler const state, QSignal sig)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	4613      	mov	r3, r2
 8011124:	80fb      	strh	r3, [r7, #6]
    return (*state)(me, &QEP_reservedEvt_[sig]);
 8011126:	88fb      	ldrh	r3, [r7, #6]
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	4a05      	ldr	r2, [pc, #20]	; (8011140 <QHsm_trig_+0x28>)
 801112c:	441a      	add	r2, r3
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	4611      	mov	r1, r2
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	4798      	blx	r3
 8011136:	4603      	mov	r3, r0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	08016d24 	.word	0x08016d24

08011144 <QHsm_ctor>:
* "constructor" of a derived state machine:
* @include qep_qhsm_ctor.c
*
* @tr{RQP103}
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->vptr      = &vtable;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4a06      	ldr	r2, [pc, #24]	; (801116c <QHsm_ctor+0x28>)
 8011152:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4a06      	ldr	r2, [pc, #24]	; (8011170 <QHsm_ctor+0x2c>)
 8011158:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	683a      	ldr	r2, [r7, #0]
 801115e:	609a      	str	r2, [r3, #8]
}
 8011160:	bf00      	nop
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	08016d34 	.word	0x08016d34
 8011170:	08011271 	.word	0x08011271

08011174 <QHsm_init_>:
void QHsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QHsm_init_(QHsm * const me, void const * const e)
#endif
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b08c      	sub	sp, #48	; 0x30
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d007      	beq.n	801119c <QHsm_init_+0x28>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d003      	beq.n	801119c <QHsm_init_+0x28>
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	4a33      	ldr	r2, [pc, #204]	; (8011264 <QHsm_init_+0xf0>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d003      	beq.n	80111a4 <QHsm_init_+0x30>
 801119c:	21c8      	movs	r1, #200	; 0xc8
 801119e:	4832      	ldr	r0, [pc, #200]	; (8011268 <QHsm_init_+0xf4>)
 80111a0:	f7ef fc6c 	bl	8000a7c <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	4798      	blx	r3
 80111ae:	6278      	str	r0, [r7, #36]	; 0x24

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	2b08      	cmp	r3, #8
 80111b4:	d003      	beq.n	80111be <QHsm_init_+0x4a>
 80111b6:	21d2      	movs	r1, #210	; 0xd2
 80111b8:	482b      	ldr	r0, [pc, #172]	; (8011268 <QHsm_init_+0xf4>)
 80111ba:	f7ef fc5f 	bl	8000a7c <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 80111be:	2300      	movs	r3, #0
 80111c0:	62bb      	str	r3, [r7, #40]	; 0x28

        path[0] = me->temp.fun;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	60fb      	str	r3, [r7, #12]
        (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	689b      	ldr	r3, [r3, #8]
 80111cc:	2200      	movs	r2, #0
 80111ce:	4619      	mov	r1, r3
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7ff ffa1 	bl	8011118 <QHsm_trig_>
        while (me->temp.fun != t) {
 80111d6:	e018      	b.n	801120a <QHsm_init_+0x96>
            ++ip;
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111da:	3301      	adds	r3, #1
 80111dc:	62bb      	str	r3, [r7, #40]	; 0x28
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 80111de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e0:	2b05      	cmp	r3, #5
 80111e2:	dd03      	ble.n	80111ec <QHsm_init_+0x78>
 80111e4:	21dc      	movs	r1, #220	; 0xdc
 80111e6:	4820      	ldr	r0, [pc, #128]	; (8011268 <QHsm_init_+0xf4>)
 80111e8:	f7ef fc48 	bl	8000a7c <Q_onAssert>
            path[ip] = me->temp.fun;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	689a      	ldr	r2, [r3, #8]
 80111f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f2:	009b      	lsls	r3, r3, #2
 80111f4:	3330      	adds	r3, #48	; 0x30
 80111f6:	443b      	add	r3, r7
 80111f8:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	2200      	movs	r2, #0
 8011202:	4619      	mov	r1, r3
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff ff87 	bl	8011118 <QHsm_trig_>
        while (me->temp.fun != t) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011210:	429a      	cmp	r2, r3
 8011212:	d1e1      	bne.n	80111d8 <QHsm_init_+0x64>
        }
        me->temp.fun = path[0];
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 801121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121c:	009b      	lsls	r3, r3, #2
 801121e:	3330      	adds	r3, #48	; 0x30
 8011220:	443b      	add	r3, r7
 8011222:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8011226:	4911      	ldr	r1, [pc, #68]	; (801126c <QHsm_init_+0xf8>)
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	4798      	blx	r3
            --ip;
 801122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122e:	3b01      	subs	r3, #1
 8011230:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (ip >= 0);
 8011232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011234:	2b00      	cmp	r3, #0
 8011236:	daf0      	bge.n	801121a <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = QHsm_trig_(me, t, Q_INIT_SIG); /* execute initial transition */
 801123c:	2203      	movs	r2, #3
 801123e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ff69 	bl	8011118 <QHsm_trig_>
 8011246:	6278      	str	r0, [r7, #36]	; 0x24
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
#endif /* Q_SPY */

    } while (r == (QState)Q_RET_TRAN);
 8011248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124a:	2b08      	cmp	r3, #8
 801124c:	d0b7      	beq.n	80111be <QHsm_init_+0x4a>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011252:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011258:	609a      	str	r2, [r3, #8]
}
 801125a:	bf00      	nop
 801125c:	3730      	adds	r7, #48	; 0x30
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	08011271 	.word	0x08011271
 8011268:	08016d1c 	.word	0x08016d1c
 801126c:	08016d28 	.word	0x08016d28

08011270 <QHsm_top>:
* @note The parameters to this state handler are not used. They are provided
* for conformance with the state-handler function signature ::QStateHandler.
*
* @tr{RQP103} @tr{RQP120T}
*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
    (void)me; /* suppress the "unused parameter" compiler warning */
    (void)e;  /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
 801127a:	2304      	movs	r3, #4
}
 801127c:	4618      	mov	r0, r3
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QHsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b08c      	sub	sp, #48	; 0x30
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	62fb      	str	r3, [r7, #44]	; 0x2c
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129a:	2b00      	cmp	r3, #0
 801129c:	d004      	beq.n	80112a8 <QHsm_dispatch_+0x20>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d004      	beq.n	80112b2 <QHsm_dispatch_+0x2a>
 80112a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80112ac:	4852      	ldr	r0, [pc, #328]	; (80113f8 <QHsm_dispatch_+0x170>)
 80112ae:	f7ef fbe5 	bl	8000a7c <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	623b      	str	r3, [r7, #32]
        r = (*s)(me, e); /* invoke state handler s */
 80112b8:	6a3b      	ldr	r3, [r7, #32]
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	4798      	blx	r3
 80112c0:	62b8      	str	r0, [r7, #40]	; 0x28

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 80112c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c4:	2b02      	cmp	r3, #2
 80112c6:	d105      	bne.n	80112d4 <QHsm_dispatch_+0x4c>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QHsm_trig_(me, s, QEP_EMPTY_SIG_); /* find superstate of s */
 80112c8:	2200      	movs	r2, #0
 80112ca:	6a39      	ldr	r1, [r7, #32]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff ff23 	bl	8011118 <QHsm_trig_>
 80112d2:	62b8      	str	r0, [r7, #40]	; 0x28
        }
    } while (r == (QState)Q_RET_SUPER);
 80112d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0eb      	beq.n	80112b2 <QHsm_dispatch_+0x2a>

    /* regular transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 80112da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112dc:	2b07      	cmp	r3, #7
 80112de:	f240 8081 	bls.w	80113e4 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	60bb      	str	r3, [r7, #8]
        path[1] = t;
 80112e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ea:	60fb      	str	r3, [r7, #12]
        path[2] = s;
 80112ec:	6a3b      	ldr	r3, [r7, #32]
 80112ee:	613b      	str	r3, [r7, #16]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 80112f0:	e00f      	b.n	8011312 <QHsm_dispatch_+0x8a>
            if (QHsm_trig_(me, t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 80112f2:	2202      	movs	r2, #2
 80112f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f7ff ff0e 	bl	8011118 <QHsm_trig_>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d104      	bne.n	801130c <QHsm_dispatch_+0x84>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QHsm_trig_(me, t, QEP_EMPTY_SIG_);
 8011302:	2200      	movs	r2, #0
 8011304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7ff ff06 	bl	8011118 <QHsm_trig_>
        for (; t != s; t = me->temp.fun) {
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011314:	6a3b      	ldr	r3, [r7, #32]
 8011316:	429a      	cmp	r2, r3
 8011318:	d1eb      	bne.n	80112f2 <QHsm_dispatch_+0x6a>
                QS_FUN_PRE_(t);       /* the source of the transition */
                QS_FUN_PRE_(path[0]); /* the target of the tran. to history */
            QS_END_PRE_()
        }
#else
        ip = QHsm_tran_(me, path);
 801131a:	f107 0308 	add.w	r3, r7, #8
 801131e:	4619      	mov	r1, r3
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 f86d 	bl	8011400 <QHsm_tran_>
 8011326:	6278      	str	r0, [r7, #36]	; 0x24
#endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 8011328:	e00b      	b.n	8011342 <QHsm_dispatch_+0xba>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	3330      	adds	r3, #48	; 0x30
 8011330:	443b      	add	r3, r7
 8011332:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8011336:	4931      	ldr	r1, [pc, #196]	; (80113fc <QHsm_dispatch_+0x174>)
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 801133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133e:	3b01      	subs	r3, #1
 8011340:	627b      	str	r3, [r7, #36]	; 0x24
 8011342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011344:	2b00      	cmp	r3, #0
 8011346:	daf0      	bge.n	801132a <QHsm_dispatch_+0xa2>
        }

        t = path[0];      /* stick the target into register */
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	62fb      	str	r3, [r7, #44]	; 0x2c
        me->temp.fun = t; /* update the next state */
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011350:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QHsm_trig_(me, t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8011352:	e03f      	b.n	80113d4 <QHsm_dispatch_+0x14c>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8011354:	2300      	movs	r3, #0
 8011356:	627b      	str	r3, [r7, #36]	; 0x24
            path[0] = me->temp.fun;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	60bb      	str	r3, [r7, #8]

            /* find superstate */
            (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	2200      	movs	r2, #0
 8011364:	4619      	mov	r1, r3
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7ff fed6 	bl	8011118 <QHsm_trig_>

            while (me->temp.fun != t) {
 801136c:	e011      	b.n	8011392 <QHsm_dispatch_+0x10a>
                ++ip;
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	3301      	adds	r3, #1
 8011372:	627b      	str	r3, [r7, #36]	; 0x24
                path[ip] = me->temp.fun;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	689a      	ldr	r2, [r3, #8]
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	3330      	adds	r3, #48	; 0x30
 801137e:	443b      	add	r3, r7
 8011380:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	2200      	movs	r2, #0
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff fec3 	bl	8011118 <QHsm_trig_>
            while (me->temp.fun != t) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011398:	429a      	cmp	r2, r3
 801139a:	d1e8      	bne.n	801136e <QHsm_dispatch_+0xe6>
            }
            me->temp.fun = path[0];
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a4:	2b05      	cmp	r3, #5
 80113a6:	dd04      	ble.n	80113b2 <QHsm_dispatch_+0x12a>
 80113a8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80113ac:	4812      	ldr	r0, [pc, #72]	; (80113f8 <QHsm_dispatch_+0x170>)
 80113ae:	f7ef fb65 	bl	8000a7c <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80113b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	3330      	adds	r3, #48	; 0x30
 80113b8:	443b      	add	r3, r7
 80113ba:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80113be:	490f      	ldr	r1, [pc, #60]	; (80113fc <QHsm_dispatch_+0x174>)
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	4798      	blx	r3
                --ip;
 80113c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c6:	3b01      	subs	r3, #1
 80113c8:	627b      	str	r3, [r7, #36]	; 0x24
            } while (ip >= 0);
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	daf0      	bge.n	80113b2 <QHsm_dispatch_+0x12a>

            t = path[0]; /* current state becomes the new source */
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (QHsm_trig_(me, t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 80113d4:	2203      	movs	r2, #3
 80113d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ff fe9d 	bl	8011118 <QHsm_trig_>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b08      	cmp	r3, #8
 80113e2:	d0b7      	beq.n	8011354 <QHsm_dispatch_+0xcc>
        QS_END_PRE_()

    }
#endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113e8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ee:	609a      	str	r2, [r3, #8]
}
 80113f0:	bf00      	nop
 80113f2:	3730      	adds	r7, #48	; 0x30
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	08016d1c 	.word	0x08016d1c
 80113fc:	08016d28 	.word	0x08016d28

08011400 <QHsm_tran_>:
                              uint_fast8_t const qs_id)
#else
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
#endif
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b088      	sub	sp, #32
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
    int_fast8_t ip = -1; /* transition entry path index */
 801140a:	f04f 33ff 	mov.w	r3, #4294967295
 801140e:	61fb      	str	r3, [r7, #28]
    QStateHandler t = path[0];
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	61bb      	str	r3, [r7, #24]
    QStateHandler const s = path[2];
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	60fb      	str	r3, [r7, #12]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 801141c:	68fa      	ldr	r2, [r7, #12]
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	429a      	cmp	r2, r3
 8011422:	d106      	bne.n	8011432 <QHsm_tran_+0x32>
        QEP_EXIT_(s, qs_id); /* exit the source */
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	4968      	ldr	r1, [pc, #416]	; (80115c8 <QHsm_tran_+0x1c8>)
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	4798      	blx	r3
        ip = 0; /* enter the target */
 801142c:	2300      	movs	r3, #0
 801142e:	61fb      	str	r3, [r7, #28]
 8011430:	e0c4      	b.n	80115bc <QHsm_tran_+0x1bc>
    }
    else {
        /* find superstate of target */
        (void)QHsm_trig_(me, t, QEP_EMPTY_SIG_);
 8011432:	2200      	movs	r2, #0
 8011434:	69b9      	ldr	r1, [r7, #24]
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7ff fe6e 	bl	8011118 <QHsm_trig_>

        t = me->temp.fun;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	61bb      	str	r3, [r7, #24]

        /* (b) check source==target->super... */
        if (s == t) {
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	429a      	cmp	r2, r3
 8011448:	d102      	bne.n	8011450 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 801144a:	2300      	movs	r3, #0
 801144c:	61fb      	str	r3, [r7, #28]
 801144e:	e0b5      	b.n	80115bc <QHsm_tran_+0x1bc>
        }
        else {
            /* find superstate of src */
            (void)QHsm_trig_(me, s, QEP_EMPTY_SIG_);
 8011450:	2200      	movs	r2, #0
 8011452:	68f9      	ldr	r1, [r7, #12]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fe5f 	bl	8011118 <QHsm_trig_>

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	69ba      	ldr	r2, [r7, #24]
 8011460:	429a      	cmp	r2, r3
 8011462:	d106      	bne.n	8011472 <QHsm_tran_+0x72>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	4958      	ldr	r1, [pc, #352]	; (80115c8 <QHsm_tran_+0x1c8>)
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	4798      	blx	r3
                ip = 0; /* enter the target */
 801146c:	2300      	movs	r3, #0
 801146e:	61fb      	str	r3, [r7, #28]
 8011470:	e0a4      	b.n	80115bc <QHsm_tran_+0x1bc>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	689a      	ldr	r2, [r3, #8]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	429a      	cmp	r2, r3
 801147c:	d104      	bne.n	8011488 <QHsm_tran_+0x88>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	4951      	ldr	r1, [pc, #324]	; (80115c8 <QHsm_tran_+0x1c8>)
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	4798      	blx	r3
 8011486:	e099      	b.n	80115bc <QHsm_tran_+0x1bc>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8011488:	2300      	movs	r3, #0
 801148a:	617b      	str	r3, [r7, #20]
                    ip = 1; /* enter target and its superstate */
 801148c:	2301      	movs	r3, #1
 801148e:	61fb      	str	r3, [r7, #28]
                    path[1] = t;      /* save the superstate of target */
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	3304      	adds	r3, #4
 8011494:	69ba      	ldr	r2, [r7, #24]
 8011496:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	61bb      	str	r3, [r7, #24]

                    /* find target->super->super... */
                    QState r = QHsm_trig_(me, path[1], QEP_EMPTY_SIG_);
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	3304      	adds	r3, #4
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2200      	movs	r2, #0
 80114a6:	4619      	mov	r1, r3
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7ff fe35 	bl	8011118 <QHsm_trig_>
 80114ae:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 80114b0:	e026      	b.n	8011500 <QHsm_tran_+0x100>
                        ++ip;
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	3301      	adds	r3, #1
 80114b6:	61fb      	str	r3, [r7, #28]
                        path[ip] = me->temp.fun; /* store the entry path */
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	683a      	ldr	r2, [r7, #0]
 80114be:	4413      	add	r3, r2
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	6892      	ldr	r2, [r2, #8]
 80114c4:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	68fa      	ldr	r2, [r7, #12]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d10f      	bne.n	80114f0 <QHsm_tran_+0xf0>
                            iq = 1; /* indicate that LCA found */
 80114d0:	2301      	movs	r3, #1
 80114d2:	617b      	str	r3, [r7, #20]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	2b05      	cmp	r3, #5
 80114d8:	dd04      	ble.n	80114e4 <QHsm_tran_+0xe4>
 80114da:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80114de:	483b      	ldr	r0, [pc, #236]	; (80115cc <QHsm_tran_+0x1cc>)
 80114e0:	f7ef facc 	bl	8000a7c <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	3b01      	subs	r3, #1
 80114e8:	61fb      	str	r3, [r7, #28]
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
 80114ea:	2303      	movs	r3, #3
 80114ec:	613b      	str	r3, [r7, #16]
 80114ee:	e007      	b.n	8011500 <QHsm_tran_+0x100>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	689b      	ldr	r3, [r3, #8]
 80114f4:	2200      	movs	r2, #0
 80114f6:	4619      	mov	r1, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7ff fe0d 	bl	8011118 <QHsm_trig_>
 80114fe:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d0d5      	beq.n	80114b2 <QHsm_tran_+0xb2>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d157      	bne.n	80115bc <QHsm_tran_+0x1bc>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	2b05      	cmp	r3, #5
 8011510:	dd04      	ble.n	801151c <QHsm_tran_+0x11c>
 8011512:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011516:	482d      	ldr	r0, [pc, #180]	; (80115cc <QHsm_tran_+0x1cc>)
 8011518:	f7ef fab0 	bl	8000a7c <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	492a      	ldr	r1, [pc, #168]	; (80115c8 <QHsm_tran_+0x1c8>)
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	617b      	str	r3, [r7, #20]
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
 8011528:	2304      	movs	r3, #4
 801152a:	613b      	str	r3, [r7, #16]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	683a      	ldr	r2, [r7, #0]
 8011532:	4413      	add	r3, r2
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	69ba      	ldr	r2, [r7, #24]
 8011538:	429a      	cmp	r2, r3
 801153a:	d108      	bne.n	801154e <QHsm_tran_+0x14e>
                                r = (QState)Q_RET_HANDLED; /* LCA found */
 801153c:	2303      	movs	r3, #3
 801153e:	613b      	str	r3, [r7, #16]
                                ip = iq - 1; /* do not enter LCA */
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	3b01      	subs	r3, #1
 8011544:	61fb      	str	r3, [r7, #28]
                                iq = -1; /* cause termintion of the loop */
 8011546:	f04f 33ff 	mov.w	r3, #4294967295
 801154a:	617b      	str	r3, [r7, #20]
 801154c:	e002      	b.n	8011554 <QHsm_tran_+0x154>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	3b01      	subs	r3, #1
 8011552:	617b      	str	r3, [r7, #20]
                            }
                        } while (iq >= 0);
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	2b00      	cmp	r3, #0
 8011558:	dae8      	bge.n	801152c <QHsm_tran_+0x12c>

                        /* LCA not found? */
                        if (r != (QState)Q_RET_HANDLED) {
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	2b03      	cmp	r3, #3
 801155e:	d02d      	beq.n	80115bc <QHsm_tran_+0x1bc>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
 8011560:	2304      	movs	r3, #4
 8011562:	613b      	str	r3, [r7, #16]
                            do {
                                /* exit t unhandled? */
                                if (QHsm_trig_(me, t, Q_EXIT_SIG)
 8011564:	2202      	movs	r2, #2
 8011566:	69b9      	ldr	r1, [r7, #24]
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7ff fdd5 	bl	8011118 <QHsm_trig_>
 801156e:	4603      	mov	r3, r0
 8011570:	2b03      	cmp	r3, #3
 8011572:	d104      	bne.n	801157e <QHsm_tran_+0x17e>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QHsm_trig_(me, t, QEP_EMPTY_SIG_);
 8011574:	2200      	movs	r2, #0
 8011576:	69b9      	ldr	r1, [r7, #24]
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff fdcd 	bl	8011118 <QHsm_trig_>
                                }
                                t = me->temp.fun; /* set to super of t */
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	61bb      	str	r3, [r7, #24]
                                iq = ip;
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	617b      	str	r3, [r7, #20]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	683a      	ldr	r2, [r7, #0]
 801158e:	4413      	add	r3, r2
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	69ba      	ldr	r2, [r7, #24]
 8011594:	429a      	cmp	r2, r3
 8011596:	d108      	bne.n	80115aa <QHsm_tran_+0x1aa>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	3b01      	subs	r3, #1
 801159c:	61fb      	str	r3, [r7, #28]
                                        iq = -1; /* break out of inner loop */
 801159e:	f04f 33ff 	mov.w	r3, #4294967295
 80115a2:	617b      	str	r3, [r7, #20]
                                        /* break out of outer loop */
                                        r = (QState)Q_RET_HANDLED;
 80115a4:	2303      	movs	r3, #3
 80115a6:	613b      	str	r3, [r7, #16]
 80115a8:	e002      	b.n	80115b0 <QHsm_tran_+0x1b0>
                                    }
                                    else {
                                        --iq;
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	3b01      	subs	r3, #1
 80115ae:	617b      	str	r3, [r7, #20]
                                    }
                                } while (iq >= 0);
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	dae8      	bge.n	8011588 <QHsm_tran_+0x188>
                            } while (r != (QState)Q_RET_HANDLED);
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	2b03      	cmp	r3, #3
 80115ba:	d1d3      	bne.n	8011564 <QHsm_tran_+0x164>
                    }
                }
            }
        }
    }
    return ip;
 80115bc:	69fb      	ldr	r3, [r7, #28]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3720      	adds	r7, #32
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	08016d2c 	.word	0x08016d2c
 80115cc:	08016d1c 	.word	0x08016d1c

080115d0 <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
    uint_fast8_t const p = (uint_fast8_t)a->prio;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	7f1b      	ldrb	r3, [r3, #28]
 80115dc:	60fb      	str	r3, [r7, #12]
    /*! @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d008      	beq.n	80115f6 <QF_add_+0x26>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2b20      	cmp	r3, #32
 80115e8:	d805      	bhi.n	80115f6 <QF_add_+0x26>
 80115ea:	4a0d      	ldr	r2, [pc, #52]	; (8011620 <QF_add_+0x50>)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d003      	beq.n	80115fe <QF_add_+0x2e>
 80115f6:	2164      	movs	r1, #100	; 0x64
 80115f8:	480a      	ldr	r0, [pc, #40]	; (8011624 <QF_add_+0x54>)
 80115fa:	f7ef fa3f 	bl	8000a7c <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));
    QF_CRIT_STAT_
    QF_CRIT_E_();
 80115fe:	233f      	movs	r3, #63	; 0x3f
 8011600:	b672      	cpsid	i
 8011602:	f383 8811 	msr	BASEPRI, r3
 8011606:	b662      	cpsie	i
    QF_active_[p] = a; /* register the active object at this priority */
 8011608:	4905      	ldr	r1, [pc, #20]	; (8011620 <QF_add_+0x50>)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 8011612:	2300      	movs	r3, #0
 8011614:	f383 8811 	msr	BASEPRI, r3
}
 8011618:	bf00      	nop
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	2000d9ec 	.word	0x2000d9ec
 8011624:	08016d3c 	.word	0x08016d3c

08011628 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	60bb      	str	r3, [r7, #8]
 801163a:	e008      	b.n	801164e <QF_bzero+0x26>
        *ptr = 0U;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2200      	movs	r2, #0
 8011640:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	3301      	adds	r3, #1
 8011646:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	3b01      	subs	r3, #1
 801164c:	60bb      	str	r3, [r7, #8]
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d1f3      	bne.n	801163c <QF_bzero+0x14>
    }
}
 8011654:	bf00      	nop
 8011656:	bf00      	nop
 8011658:	3714      	adds	r7, #20
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <QPSet_insert>:
static inline bool QPSet_hasElement(QPSet * const me, uint_fast8_t const n) {
    return (me->bits & ((QPSetBits)1 << (n - 1U))) != 0U;
}

/*! Insert element @p n_ into the set @p me, n = 1U..32U */
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 8011662:	b480      	push	{r7}
 8011664:	b083      	sub	sp, #12
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	3b01      	subs	r3, #1
 8011674:	2101      	movs	r1, #1
 8011676:	fa01 f303 	lsl.w	r3, r1, r3
 801167a:	431a      	orrs	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	601a      	str	r2, [r3, #0]
}
 8011680:	bf00      	nop
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d103      	bne.n	80116a6 <QActive_post_+0x1a>
 801169e:	2164      	movs	r1, #100	; 0x64
 80116a0:	483d      	ldr	r0, [pc, #244]	; (8011798 <QActive_post_+0x10c>)
 80116a2:	f7ef f9eb 	bl	8000a7c <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80116a6:	233f      	movs	r3, #63	; 0x3f
 80116a8:	b672      	cpsid	i
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	7ddb      	ldrb	r3, [r3, #23]
 80116b4:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116bc:	4293      	cmp	r3, r2
 80116be:	d10e      	bne.n	80116de <QActive_post_+0x52>
        if (nFree > 0U) {
 80116c0:	7dbb      	ldrb	r3, [r7, #22]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d002      	beq.n	80116cc <QActive_post_+0x40>
            status = true; /* can post */
 80116c6:	2301      	movs	r3, #1
 80116c8:	75fb      	strb	r3, [r7, #23]
 80116ca:	e012      	b.n	80116f2 <QActive_post_+0x66>
        }
        else {
            status = false; /* cannot post */
 80116cc:	2300      	movs	r3, #0
 80116ce:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 80116d0:	2300      	movs	r3, #0
 80116d2:	f383 8811 	msr	BASEPRI, r3
 80116d6:	216e      	movs	r1, #110	; 0x6e
 80116d8:	482f      	ldr	r0, [pc, #188]	; (8011798 <QActive_post_+0x10c>)
 80116da:	f7ef f9cf 	bl	8000a7c <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	7dba      	ldrb	r2, [r7, #22]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d902      	bls.n	80116ee <QActive_post_+0x62>
        status = true; /* can post */
 80116e8:	2301      	movs	r3, #1
 80116ea:	75fb      	strb	r3, [r7, #23]
 80116ec:	e001      	b.n	80116f2 <QActive_post_+0x66>
    }
    else {
        status = false; /* cannot post, but don't assert */
 80116ee:	2300      	movs	r3, #0
 80116f0:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	789b      	ldrb	r3, [r3, #2]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d006      	beq.n	8011708 <QActive_post_+0x7c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	78db      	ldrb	r3, [r3, #3]
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	3301      	adds	r3, #1
 8011702:	b2da      	uxtb	r2, r3
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8011708:	7dfb      	ldrb	r3, [r7, #23]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d038      	beq.n	8011780 <QActive_post_+0xf4>

        --nFree; /* one free entry just used up */
 801170e:	7dbb      	ldrb	r3, [r7, #22]
 8011710:	3b01      	subs	r3, #1
 8011712:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	7dba      	ldrb	r2, [r7, #22]
 8011718:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	7e1b      	ldrb	r3, [r3, #24]
 801171e:	7dba      	ldrb	r2, [r7, #22]
 8011720:	429a      	cmp	r2, r3
 8011722:	d202      	bcs.n	801172a <QActive_post_+0x9e>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	7dba      	ldrb	r2, [r7, #22]
 8011728:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d109      	bne.n	8011746 <QActive_post_+0xba>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	68ba      	ldr	r2, [r7, #8]
 8011736:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	7f1b      	ldrb	r3, [r3, #28]
 801173c:	4619      	mov	r1, r3
 801173e:	4817      	ldr	r0, [pc, #92]	; (801179c <QActive_post_+0x110>)
 8011740:	f7ff ff8f 	bl	8011662 <QPSet_insert>
 8011744:	e018      	b.n	8011778 <QActive_post_+0xec>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	691a      	ldr	r2, [r3, #16]
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	7d5b      	ldrb	r3, [r3, #21]
 801174e:	b2db      	uxtb	r3, r3
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4413      	add	r3, r2
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	7d5b      	ldrb	r3, [r3, #21]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d103      	bne.n	801176a <QActive_post_+0xde>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	7d1a      	ldrb	r2, [r3, #20]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	7d5b      	ldrb	r3, [r3, #21]
 801176e:	b2db      	uxtb	r3, r3
 8011770:	3b01      	subs	r3, #1
 8011772:	b2da      	uxtb	r2, r3
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8011778:	2300      	movs	r3, #0
 801177a:	f383 8811 	msr	BASEPRI, r3
 801177e:	e005      	b.n	801178c <QActive_post_+0x100>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 8011780:	2300      	movs	r3, #0
 8011782:	f383 8811 	msr	BASEPRI, r3

        QF_gc(e); /* recycle the event to avoid a leak */
 8011786:	68b8      	ldr	r0, [r7, #8]
 8011788:	f000 f96e 	bl	8011a68 <QF_gc>
    }

    return status;
 801178c:	7dfb      	ldrb	r3, [r7, #23]
}
 801178e:	4618      	mov	r0, r3
 8011790:	3718      	adds	r7, #24
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	08016d44 	.word	0x08016d44
 801179c:	2000dad8 	.word	0x2000dad8

080117a0 <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80117aa:	233f      	movs	r3, #63	; 0x3f
 80117ac:	b672      	cpsid	i
 80117ae:	f383 8811 	msr	BASEPRI, r3
 80117b2:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	7ddb      	ldrb	r3, [r3, #23]
 80117b8:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d106      	bne.n	80117ce <QActive_postLIFO_+0x2e>
 80117c0:	2300      	movs	r3, #0
 80117c2:	f383 8811 	msr	BASEPRI, r3
 80117c6:	21d2      	movs	r1, #210	; 0xd2
 80117c8:	4826      	ldr	r0, [pc, #152]	; (8011864 <QActive_postLIFO_+0xc4>)
 80117ca:	f7ef f957 	bl	8000a7c <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	789b      	ldrb	r3, [r3, #2]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d006      	beq.n	80117e4 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	78db      	ldrb	r3, [r3, #3]
 80117da:	b2db      	uxtb	r3, r3
 80117dc:	3301      	adds	r3, #1
 80117de:	b2da      	uxtb	r2, r3
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 80117e4:	7bfb      	ldrb	r3, [r7, #15]
 80117e6:	3b01      	subs	r3, #1
 80117e8:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	7bfa      	ldrb	r2, [r7, #15]
 80117ee:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	7e1b      	ldrb	r3, [r3, #24]
 80117f4:	7bfa      	ldrb	r2, [r7, #15]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d202      	bcs.n	8011800 <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	7bfa      	ldrb	r2, [r7, #15]
 80117fe:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	683a      	ldr	r2, [r7, #0]
 801180a:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d106      	bne.n	8011820 <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	7f1b      	ldrb	r3, [r3, #28]
 8011816:	4619      	mov	r1, r3
 8011818:	4813      	ldr	r0, [pc, #76]	; (8011868 <QActive_postLIFO_+0xc8>)
 801181a:	f7ff ff22 	bl	8011662 <QPSet_insert>
 801181e:	e019      	b.n	8011854 <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	7d9b      	ldrb	r3, [r3, #22]
 8011824:	b2db      	uxtb	r3, r3
 8011826:	3301      	adds	r3, #1
 8011828:	b2da      	uxtb	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	7d9b      	ldrb	r3, [r3, #22]
 8011832:	b2da      	uxtb	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	7d1b      	ldrb	r3, [r3, #20]
 8011838:	429a      	cmp	r2, r3
 801183a:	d102      	bne.n	8011842 <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2200      	movs	r2, #0
 8011840:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	691a      	ldr	r2, [r3, #16]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	7d9b      	ldrb	r3, [r3, #22]
 801184a:	b2db      	uxtb	r3, r3
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4413      	add	r3, r2
 8011850:	68ba      	ldr	r2, [r7, #8]
 8011852:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8011854:	2300      	movs	r3, #0
 8011856:	f383 8811 	msr	BASEPRI, r3
}
 801185a:	bf00      	nop
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	08016d44 	.word	0x08016d44
 8011868:	2000dad8 	.word	0x2000dad8

0801186c <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8011874:	233f      	movs	r3, #63	; 0x3f
 8011876:	b672      	cpsid	i
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d103      	bne.n	801188e <QActive_get_+0x22>
 8011886:	2100      	movs	r1, #0
 8011888:	4823      	ldr	r0, [pc, #140]	; (8011918 <QActive_get_+0xac>)
 801188a:	f7ef f8f7 	bl	8000a7c <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	7ddb      	ldrb	r3, [r3, #23]
 8011898:	b2db      	uxtb	r3, r3
 801189a:	3301      	adds	r3, #1
 801189c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	7afa      	ldrb	r2, [r7, #11]
 80118a2:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	7d1b      	ldrb	r3, [r3, #20]
 80118a8:	7afa      	ldrb	r2, [r7, #11]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d81a      	bhi.n	80118e4 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	691a      	ldr	r2, [r3, #16]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7d9b      	ldrb	r3, [r3, #22]
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	4413      	add	r3, r2
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	7d9b      	ldrb	r3, [r3, #22]
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d103      	bne.n	80118d4 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	7d1a      	ldrb	r2, [r3, #20]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	7d9b      	ldrb	r3, [r3, #22]
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	3b01      	subs	r3, #1
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	759a      	strb	r2, [r3, #22]
 80118e2:	e010      	b.n	8011906 <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 80118ea:	7afa      	ldrb	r2, [r7, #11]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	7d1b      	ldrb	r3, [r3, #20]
 80118f0:	3301      	adds	r3, #1
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d007      	beq.n	8011906 <QActive_get_+0x9a>
 80118f6:	2300      	movs	r3, #0
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f44f 719b 	mov.w	r1, #310	; 0x136
 8011900:	4805      	ldr	r0, [pc, #20]	; (8011918 <QActive_get_+0xac>)
 8011902:	f7ef f8bb 	bl	8000a7c <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8011906:	2300      	movs	r3, #0
 8011908:	f383 8811 	msr	BASEPRI, r3
    return e;
 801190c:	68fb      	ldr	r3, [r7, #12]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop
 8011918:	08016d44 	.word	0x08016d44

0801191c <QF_poolInit>:
*
* @sa QF initialization example for QF_init()
*/
void QF_poolInit(void * const poolSto, uint_fast32_t const poolSize,
                 uint_fast16_t const evtSize)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 8011928:	4b1a      	ldr	r3, [pc, #104]	; (8011994 <QF_poolInit+0x78>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b02      	cmp	r3, #2
 801192e:	d903      	bls.n	8011938 <QF_poolInit+0x1c>
 8011930:	21c8      	movs	r1, #200	; 0xc8
 8011932:	4819      	ldr	r0, [pc, #100]	; (8011998 <QF_poolInit+0x7c>)
 8011934:	f7ef f8a2 	bl	8000a7c <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8011938:	4b16      	ldr	r3, [pc, #88]	; (8011994 <QF_poolInit+0x78>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d012      	beq.n	8011966 <QF_poolInit+0x4a>
 8011940:	4b14      	ldr	r3, [pc, #80]	; (8011994 <QF_poolInit+0x78>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	1e5a      	subs	r2, r3, #1
 8011946:	4915      	ldr	r1, [pc, #84]	; (801199c <QF_poolInit+0x80>)
 8011948:	4613      	mov	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	440b      	add	r3, r1
 8011952:	330c      	adds	r3, #12
 8011954:	881b      	ldrh	r3, [r3, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	4293      	cmp	r3, r2
 801195c:	d803      	bhi.n	8011966 <QF_poolInit+0x4a>
 801195e:	21c9      	movs	r1, #201	; 0xc9
 8011960:	480d      	ldr	r0, [pc, #52]	; (8011998 <QF_poolInit+0x7c>)
 8011962:	f7ef f88b 	bl	8000a7c <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_pool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_pool_[QF_maxPool_], poolSto, poolSize, evtSize);
 8011966:	4b0b      	ldr	r3, [pc, #44]	; (8011994 <QF_poolInit+0x78>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	4613      	mov	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4a0a      	ldr	r2, [pc, #40]	; (801199c <QF_poolInit+0x80>)
 8011974:	1898      	adds	r0, r3, r2
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	68ba      	ldr	r2, [r7, #8]
 801197a:	68f9      	ldr	r1, [r7, #12]
 801197c:	f000 f8b8 	bl	8011af0 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8011980:	4b04      	ldr	r3, [pc, #16]	; (8011994 <QF_poolInit+0x78>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	3301      	adds	r3, #1
 8011986:	4a03      	ldr	r2, [pc, #12]	; (8011994 <QF_poolInit+0x78>)
 8011988:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_pool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
#endif /* Q_SPY*/
}
 801198a:	bf00      	nop
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	2000daac 	.word	0x2000daac
 8011998:	08016d4c 	.word	0x08016d4c
 801199c:	2000da70 	.word	0x2000da70

080119a0 <QF_newX_>:
* The application code should not call this function directly.
* The only allowed use is thorough the macros Q_NEW() or Q_NEW_X().
*/
QEvt *QF_newX_(uint_fast16_t const evtSize,
               uint_fast16_t const margin, enum_t const sig)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	607a      	str	r2, [r7, #4]
    uint_fast8_t idx;

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80119ac:	2300      	movs	r3, #0
 80119ae:	617b      	str	r3, [r7, #20]
 80119b0:	e00f      	b.n	80119d2 <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_pool_[idx])) {
 80119b2:	492a      	ldr	r1, [pc, #168]	; (8011a5c <QF_newX_+0xbc>)
 80119b4:	697a      	ldr	r2, [r7, #20]
 80119b6:	4613      	mov	r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	440b      	add	r3, r1
 80119c0:	330c      	adds	r3, #12
 80119c2:	881b      	ldrh	r3, [r3, #0]
 80119c4:	461a      	mov	r2, r3
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d908      	bls.n	80119de <QF_newX_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	3301      	adds	r3, #1
 80119d0:	617b      	str	r3, [r7, #20]
 80119d2:	4b23      	ldr	r3, [pc, #140]	; (8011a60 <QF_newX_+0xc0>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	697a      	ldr	r2, [r7, #20]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d3ea      	bcc.n	80119b2 <QF_newX_+0x12>
 80119dc:	e000      	b.n	80119e0 <QF_newX_+0x40>
            break;
 80119de:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(310, idx < QF_maxPool_);
 80119e0:	4b1f      	ldr	r3, [pc, #124]	; (8011a60 <QF_newX_+0xc0>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	697a      	ldr	r2, [r7, #20]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d304      	bcc.n	80119f4 <QF_newX_+0x54>
 80119ea:	f44f 719b 	mov.w	r1, #310	; 0x136
 80119ee:	481d      	ldr	r0, [pc, #116]	; (8011a64 <QF_newX_+0xc4>)
 80119f0:	f7ef f844 	bl	8000a7c <Q_onAssert>
#ifdef Q_SPY
    QF_EPOOL_GET_(QF_pool_[idx], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
#else
    QF_EPOOL_GET_(QF_pool_[idx], e,
 80119f4:	697a      	ldr	r2, [r7, #20]
 80119f6:	4613      	mov	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	4413      	add	r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	4a17      	ldr	r2, [pc, #92]	; (8011a5c <QF_newX_+0xbc>)
 8011a00:	1898      	adds	r0, r3, r2
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d001      	beq.n	8011a10 <QF_newX_+0x70>
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	e000      	b.n	8011a12 <QF_newX_+0x72>
 8011a10:	2300      	movs	r3, #0
 8011a12:	2200      	movs	r2, #0
 8011a14:	4619      	mov	r1, r3
 8011a16:	f000 f915 	bl	8011c44 <QMPool_get>
 8011a1a:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    /* was e allocated correctly? */
    QS_CRIT_STAT_
    if (e != (QEvt *)0) {
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00d      	beq.n	8011a3e <QF_newX_+0x9e>
        e->sig = (QSignal)sig;     /* set signal for this event */
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	3301      	adds	r3, #1
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	70da      	strb	r2, [r3, #3]
 8011a3c:	e009      	b.n	8011a52 <QF_newX_+0xb2>
    else {
        /* This assertion means that the event allocation failed,
         * and this failure cannot be tolerated. The most frequent
         * reason is an event leak in the application.
         */
        Q_ASSERT_ID(320, margin != QF_NO_MARGIN);
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d104      	bne.n	8011a52 <QF_newX_+0xb2>
 8011a48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011a4c:	4805      	ldr	r0, [pc, #20]	; (8011a64 <QF_newX_+0xc4>)
 8011a4e:	f7ef f815 	bl	8000a7c <Q_onAssert>
            QS_TIME_PRE_();        /* timestamp */
            QS_EVS_PRE_(evtSize);  /* the size of the event */
            QS_SIG_PRE_(sig);      /* the signal of the event */
        QS_END_PRE_()
    }
    return e; /* can't be NULL if we can't tolerate failed allocation */
 8011a52:	693b      	ldr	r3, [r7, #16]
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3718      	adds	r7, #24
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	2000da70 	.word	0x2000da70
 8011a60:	2000daac 	.word	0x2000daac
 8011a64:	08016d4c 	.word	0x08016d4c

08011a68 <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	789b      	ldrb	r3, [r3, #2]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d031      	beq.n	8011adc <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8011a78:	233f      	movs	r3, #63	; 0x3f
 8011a7a:	b672      	cpsid	i
 8011a7c:	f383 8811 	msr	BASEPRI, r3
 8011a80:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	78db      	ldrb	r3, [r3, #3]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d90a      	bls.n	8011aa2 <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	78db      	ldrb	r3, [r3, #3]
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	3b01      	subs	r3, #1
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	f383 8811 	msr	BASEPRI, r3
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 8011aa0:	e01c      	b.n	8011adc <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	789b      	ldrb	r3, [r3, #2]
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 8011aaa:	2300      	movs	r3, #0
 8011aac:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 8011ab0:	4b0c      	ldr	r3, [pc, #48]	; (8011ae4 <QF_gc+0x7c>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d304      	bcc.n	8011ac4 <QF_gc+0x5c>
 8011aba:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8011abe:	480a      	ldr	r0, [pc, #40]	; (8011ae8 <QF_gc+0x80>)
 8011ac0:	f7ee ffdc 	bl	8000a7c <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	4413      	add	r3, r2
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	4a07      	ldr	r2, [pc, #28]	; (8011aec <QF_gc+0x84>)
 8011ad0:	4413      	add	r3, r2
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	6879      	ldr	r1, [r7, #4]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 f87c 	bl	8011bd4 <QMPool_put>
}
 8011adc:	bf00      	nop
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	2000daac 	.word	0x2000daac
 8011ae8:	08016d4c 	.word	0x08016d4c
 8011aec:	2000da70 	.word	0x2000da70

08011af0 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
 8011afc:	603b      	str	r3, [r7, #0]
    /*! @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d006      	beq.n	8011b12 <QMPool_init+0x22>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b03      	cmp	r3, #3
 8011b08:	d903      	bls.n	8011b12 <QMPool_init+0x22>
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	f113 0f05 	cmn.w	r3, #5
 8011b10:	d903      	bls.n	8011b1a <QMPool_init+0x2a>
 8011b12:	2164      	movs	r1, #100	; 0x64
 8011b14:	482e      	ldr	r0, [pc, #184]	; (8011bd0 <QMPool_init+0xe0>)
 8011b16:	f7ee ffb1 	bl	8000a7c <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	601a      	str	r2, [r3, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2204      	movs	r2, #4
 8011b24:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 8011b26:	2301      	movs	r3, #1
 8011b28:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8011b2a:	e008      	b.n	8011b3e <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	899b      	ldrh	r3, [r3, #12]
 8011b30:	3304      	adds	r3, #4
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	899a      	ldrh	r2, [r3, #12]
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d3f0      	bcc.n	8011b2c <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	899b      	ldrh	r3, [r3, #12]
 8011b4e:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d203      	bcs.n	8011b60 <QMPool_init+0x70>
 8011b58:	216e      	movs	r1, #110	; 0x6e
 8011b5a:	481d      	ldr	r0, [pc, #116]	; (8011bd0 <QMPool_init+0xe0>)
 8011b5c:	f7ee ff8e 	bl	8000a7c <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	1ad3      	subs	r3, r2, r3
 8011b66:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 8011b74:	e012      	b.n	8011b9c <QMPool_init+0xac>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	693a      	ldr	r2, [r7, #16]
 8011b7c:	441a      	add	r2, r3
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	89db      	ldrh	r3, [r3, #14]
 8011b94:	3301      	adds	r3, #1
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d2e8      	bcs.n	8011b76 <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	89da      	ldrh	r2, [r3, #14]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	89da      	ldrh	r2, [r3, #14]
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	605a      	str	r2, [r3, #4]
    me->end   = fb;              /* the last block in this pool */
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	693a      	ldr	r2, [r7, #16]
 8011bc4:	609a      	str	r2, [r3, #8]
}
 8011bc6:	bf00      	nop
 8011bc8:	3718      	adds	r7, #24
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	08016d54 	.word	0x08016d54

08011bd4 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b084      	sub	sp, #16
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	8a1b      	ldrh	r3, [r3, #16]
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	89db      	ldrh	r3, [r3, #14]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d209      	bcs.n	8011c02 <QMPool_put+0x2e>
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d304      	bcc.n	8011c02 <QMPool_put+0x2e>
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	68ba      	ldr	r2, [r7, #8]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d903      	bls.n	8011c0a <QMPool_put+0x36>
 8011c02:	21c8      	movs	r1, #200	; 0xc8
 8011c04:	480e      	ldr	r0, [pc, #56]	; (8011c40 <QMPool_put+0x6c>)
 8011c06:	f7ee ff39 	bl	8000a7c <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8011c0a:	233f      	movs	r3, #63	; 0x3f
 8011c0c:	b672      	cpsid	i
 8011c0e:	f383 8811 	msr	BASEPRI, r3
 8011c12:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	8a1b      	ldrh	r3, [r3, #16]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	3301      	adds	r3, #1
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8011c30:	2300      	movs	r3, #0
 8011c32:	f383 8811 	msr	BASEPRI, r3
}
 8011c36:	bf00      	nop
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	08016d54 	.word	0x08016d54

08011c44 <QMPool_get>:
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get(QMPool * const me, uint_fast16_t const margin,
                 uint_fast8_t const qs_id)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b086      	sub	sp, #24
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter, if Q_SPY not defined */

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8011c50:	233f      	movs	r3, #63	; 0x3f
 8011c52:	b672      	cpsid	i
 8011c54:	f383 8811 	msr	BASEPRI, r3
 8011c58:	b662      	cpsie	i

    /* have more free blocks than the requested margin? */
    QFreeBlock *fb;
    if (me->nFree > (QMPoolCtr)margin) {
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	8a1b      	ldrh	r3, [r3, #16]
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d94d      	bls.n	8011d04 <QMPool_get+0xc0>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	617b      	str	r3, [r7, #20]

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_CRIT_(310, fb != (QFreeBlock *)0);
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d107      	bne.n	8011c84 <QMPool_get+0x40>
 8011c74:	2300      	movs	r3, #0
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8011c7e:	4826      	ldr	r0, [pc, #152]	; (8011d18 <QMPool_get+0xd4>)
 8011c80:	f7ee fefc 	bl	8000a7c <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	613b      	str	r3, [r7, #16]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	8a1b      	ldrh	r3, [r3, #16]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	3b01      	subs	r3, #1
 8011c92:	b29a      	uxth	r2, r3
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) {
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	8a1b      	ldrh	r3, [r3, #16]
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d10e      	bne.n	8011cc0 <QMPool_get+0x7c>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_CRIT_(320, fb_next == (QFreeBlock *)0);
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d007      	beq.n	8011cb8 <QMPool_get+0x74>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	f383 8811 	msr	BASEPRI, r3
 8011cae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011cb2:	4819      	ldr	r0, [pc, #100]	; (8011d18 <QMPool_get+0xd4>)
 8011cb4:	f7ee fee2 	bl	8000a7c <Q_onAssert>

            me->nMin = 0U; /* remember that the pool got empty */
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	825a      	strh	r2, [r3, #18]
 8011cbe:	e01d      	b.n	8011cfc <QMPool_get+0xb8>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_CRIT_(330, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	693a      	ldr	r2, [r7, #16]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d304      	bcc.n	8011cd4 <QMPool_get+0x90>
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	693a      	ldr	r2, [r7, #16]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d907      	bls.n	8011ce4 <QMPool_get+0xa0>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	f383 8811 	msr	BASEPRI, r3
 8011cda:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011cde:	480e      	ldr	r0, [pc, #56]	; (8011d18 <QMPool_get+0xd4>)
 8011ce0:	f7ee fecc 	bl	8000a7c <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	8a5a      	ldrh	r2, [r3, #18]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	8a1b      	ldrh	r3, [r3, #16]
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d904      	bls.n	8011cfc <QMPool_get+0xb8>
                me->nMin = me->nFree; /* remember the new minimum */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	8a1b      	ldrh	r3, [r3, #16]
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	693a      	ldr	r2, [r7, #16]
 8011d00:	601a      	str	r2, [r3, #0]
 8011d02:	e001      	b.n	8011d08 <QMPool_get+0xc4>
            QS_MPC_PRE_(me->nMin);  /* min # free blocks ever in the pool */
        QS_END_NOCRIT_PRE_()
    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 8011d04:	2300      	movs	r3, #0
 8011d06:	617b      	str	r3, [r7, #20]
            QS_OBJ_PRE_(me);        /* this memory pool */
            QS_MPC_PRE_(me->nFree); /* # of free blocks in the pool */
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8011d08:	2300      	movs	r3, #0
 8011d0a:	f383 8811 	msr	BASEPRI, r3

    return fb;  /* return the block or NULL pointer to the caller */
 8011d0e:	697b      	ldr	r3, [r7, #20]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3718      	adds	r7, #24
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	08016d54 	.word	0x08016d54

08011d1c <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet * const me) {
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
    return me->bits != 0U;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bf14      	ite	ne
 8011d2c:	2301      	movne	r3, #1
 8011d2e:	2300      	moveq	r3, #0
 8011d30:	b2db      	uxtb	r3, r3
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <QPSet_insert>:
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 8011d3e:	b480      	push	{r7}
 8011d40:	b083      	sub	sp, #12
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	3b01      	subs	r3, #1
 8011d50:	2101      	movs	r1, #1
 8011d52:	fa01 f303 	lsl.w	r3, r1, r3
 8011d56:	431a      	orrs	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	601a      	str	r2, [r3, #0]
}
 8011d5c:	bf00      	nop
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <QPSet_remove>:

/*! Remove element n_ from the set @p me, n = 1U..32U */
static inline void QPSet_remove(QPSet * const me, uint_fast8_t const n) {
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]
    me->bits &= (QPSetBits)(~((QPSetBits)1 << (n - 1U)));
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8011d80:	43db      	mvns	r3, r3
 8011d82:	401a      	ands	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	601a      	str	r2, [r3, #0]
}
 8011d88:	bf00      	nop
 8011d8a:	370c      	adds	r7, #12
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <QPSet_findMax>:

/*! Find the maximum element in the set @p me
* @note if the set @p me is empty, the function returns zero.
*/
static inline uint_fast8_t QPSet_findMax(QPSet * const me) {
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	fab3 f383 	clz	r3, r3
 8011da4:	f1c3 0320 	rsb	r3, r3, #32
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <QF_psInit>:
*
* @usage
* The following example shows the typical initialization sequence of QF:
* @include qf_main.c
*/
void QF_psInit(QSubscrList * const subscrSto, enum_t const maxSignal) {
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
    QF_subscrList_   = subscrSto;
 8011dbe:	4a08      	ldr	r2, [pc, #32]	; (8011de0 <QF_psInit+0x2c>)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6013      	str	r3, [r2, #0]
    QF_maxPubSignal_ = maxSignal;
 8011dc4:	4a07      	ldr	r2, [pc, #28]	; (8011de4 <QF_psInit+0x30>)
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	4619      	mov	r1, r3
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f7ff fc29 	bl	8011628 <QF_bzero>
}
 8011dd6:	bf00      	nop
 8011dd8:	3708      	adds	r7, #8
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	2000dab0 	.word	0x2000dab0
 8011de4:	2000dab4 	.word	0x2000dab4

08011de8 <QF_publish_>:
void QF_publish_(QEvt const * const e)
#else
void QF_publish_(QEvt const * const e,
                 void const * const sender, uint_fast8_t const qs_id)
#endif
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
    /*! @pre the published signal must be within the configured range */
    Q_REQUIRE_ID(200, e->sig < (QSignal)QF_maxPubSignal_);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	881a      	ldrh	r2, [r3, #0]
 8011df4:	4b35      	ldr	r3, [pc, #212]	; (8011ecc <QF_publish_+0xe4>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d303      	bcc.n	8011e06 <QF_publish_+0x1e>
 8011dfe:	21c8      	movs	r1, #200	; 0xc8
 8011e00:	4833      	ldr	r0, [pc, #204]	; (8011ed0 <QF_publish_+0xe8>)
 8011e02:	f7ee fe3b 	bl	8000a7c <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8011e06:	233f      	movs	r3, #63	; 0x3f
 8011e08:	b672      	cpsid	i
 8011e0a:	f383 8811 	msr	BASEPRI, r3
 8011e0e:	b662      	cpsie	i
        QS_SIG_PRE_(e->sig);     /* the signal of the event */
        QS_2U8_PRE_(e->poolId_, e->refCtr_);/* pool Id & ref Count */
    QS_END_NOCRIT_PRE_()

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	789b      	ldrb	r3, [r3, #2]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d006      	beq.n	8011e26 <QF_publish_+0x3e>
        * is still in progress. At the end of the function, the garbage
        * collector step (QF_gc()) decrements the reference counter and
        * recycles the event if the counter drops to zero. This covers the
        * case when the event was published without any subscribers.
        */
        QF_EVT_REF_CTR_INC_(e);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	78db      	ldrb	r3, [r3, #3]
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	3301      	adds	r3, #1
 8011e20:	b2da      	uxtb	r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	70da      	strb	r2, [r3, #3]
    }

    /* make a local, modifiable copy of the subscriber list */
    QPSet subscrList = QF_PTR_AT_(QF_subscrList_, e->sig);
 8011e26:	4b2b      	ldr	r3, [pc, #172]	; (8011ed4 <QF_publish_+0xec>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4413      	add	r3, r2
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	60bb      	str	r3, [r7, #8]
    QF_CRIT_X_();
 8011e36:	2300      	movs	r3, #0
 8011e38:	f383 8811 	msr	BASEPRI, r3

    if (QPSet_notEmpty(&subscrList)) { /* any subscribers? */
 8011e3c:	f107 0308 	add.w	r3, r7, #8
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7ff ff6b 	bl	8011d1c <QPSet_notEmpty>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d037      	beq.n	8011ebc <QF_publish_+0xd4>
        /* the highest-prio subscriber */;
        uint_fast8_t p = QPSet_findMax(&subscrList);
 8011e4c:	f107 0308 	add.w	r3, r7, #8
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7ff ff9f 	bl	8011d94 <QPSet_findMax>
 8011e56:	60f8      	str	r0, [r7, #12]
        QF_SCHED_STAT_

        QF_SCHED_LOCK_(p); /* lock the scheduler up to prio 'p' */
        do { /* loop over all subscribers */
            /* the prio of the AO must be registered with the framework */
            Q_ASSERT_ID(210, QF_active_[p] != (QActive *)0);
 8011e58:	4a1f      	ldr	r2, [pc, #124]	; (8011ed8 <QF_publish_+0xf0>)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d103      	bne.n	8011e6c <QF_publish_+0x84>
 8011e64:	21d2      	movs	r1, #210	; 0xd2
 8011e66:	481a      	ldr	r0, [pc, #104]	; (8011ed0 <QF_publish_+0xe8>)
 8011e68:	f7ee fe08 	bl	8000a7c <Q_onAssert>

            /* QACTIVE_POST() asserts internally if the queue overflows */
            QACTIVE_POST(QF_active_[p], e, sender);
 8011e6c:	4a1a      	ldr	r2, [pc, #104]	; (8011ed8 <QF_publish_+0xf0>)
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	4917      	ldr	r1, [pc, #92]	; (8011ed8 <QF_publish_+0xf0>)
 8011e7a:	68fa      	ldr	r2, [r7, #12]
 8011e7c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8011e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e84:	6879      	ldr	r1, [r7, #4]
 8011e86:	4798      	blx	r3

            QPSet_remove(&subscrList, p); /* remove the handled subscriber */
 8011e88:	f107 0308 	add.w	r3, r7, #8
 8011e8c:	68f9      	ldr	r1, [r7, #12]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7ff ff6a 	bl	8011d68 <QPSet_remove>
            if (QPSet_notEmpty(&subscrList)) { /* still more subscribers? */
 8011e94:	f107 0308 	add.w	r3, r7, #8
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff ff3f 	bl	8011d1c <QPSet_notEmpty>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d006      	beq.n	8011eb2 <QF_publish_+0xca>
                /* highest-prio subscriber */
                p = QPSet_findMax(&subscrList);
 8011ea4:	f107 0308 	add.w	r3, r7, #8
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7ff ff73 	bl	8011d94 <QPSet_findMax>
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	e001      	b.n	8011eb6 <QF_publish_+0xce>
            }
            else {
                p = 0U; /* no more subscribers */
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	60fb      	str	r3, [r7, #12]
            }
        } while (p != 0U);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d1cd      	bne.n	8011e58 <QF_publish_+0x70>

    /* The following garbage collection step decrements the reference counter
    * and recycles the event if the counter drops to zero. This covers both
    * cases when the event was published with or without any subscribers.
    */
    QF_gc(e);
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f7ff fdd3 	bl	8011a68 <QF_gc>
}
 8011ec2:	bf00      	nop
 8011ec4:	3710      	adds	r7, #16
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	2000dab4 	.word	0x2000dab4
 8011ed0:	08016d5c 	.word	0x08016d5c
 8011ed4:	2000dab0 	.word	0x2000dab0
 8011ed8:	2000d9ec 	.word	0x2000d9ec

08011edc <QActive_subscribe>:
* @include qf_subscribe.c
*
* @sa
* QF_publish_(), QActive_unsubscribe(), and QActive_unsubscribeAll()
*/
void QActive_subscribe(QActive const * const me, enum_t const sig) {
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
    uint_fast8_t const p = (uint_fast8_t)me->prio;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	7f1b      	ldrb	r3, [r3, #28]
 8011eea:	60fb      	str	r3, [r7, #12]

    Q_REQUIRE_ID(300, ((enum_t)Q_USER_SIG <= sig)
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	2b03      	cmp	r3, #3
 8011ef0:	dd11      	ble.n	8011f16 <QActive_subscribe+0x3a>
 8011ef2:	4b16      	ldr	r3, [pc, #88]	; (8011f4c <QActive_subscribe+0x70>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	683a      	ldr	r2, [r7, #0]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	da0c      	bge.n	8011f16 <QActive_subscribe+0x3a>
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d009      	beq.n	8011f16 <QActive_subscribe+0x3a>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2b20      	cmp	r3, #32
 8011f06:	d806      	bhi.n	8011f16 <QActive_subscribe+0x3a>
 8011f08:	4a11      	ldr	r2, [pc, #68]	; (8011f50 <QActive_subscribe+0x74>)
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d004      	beq.n	8011f20 <QActive_subscribe+0x44>
 8011f16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8011f1a:	480e      	ldr	r0, [pc, #56]	; (8011f54 <QActive_subscribe+0x78>)
 8011f1c:	f7ee fdae 	bl	8000a7c <Q_onAssert>
              && (sig < QF_maxPubSignal_)
              && (0U < p) && (p <= QF_MAX_ACTIVE)
              && (QF_active_[p] == me));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8011f20:	233f      	movs	r3, #63	; 0x3f
 8011f22:	b672      	cpsid	i
 8011f24:	f383 8811 	msr	BASEPRI, r3
 8011f28:	b662      	cpsie	i
        QS_SIG_PRE_(sig);  /* the signal of this event */
        QS_OBJ_PRE_(me);   /* this active object */
    QS_END_NOCRIT_PRE_()

    /* set the priority bit */
    QPSet_insert(&QF_PTR_AT_(QF_subscrList_, sig), p);
 8011f2a:	4b0b      	ldr	r3, [pc, #44]	; (8011f58 <QActive_subscribe+0x7c>)
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	4413      	add	r3, r2
 8011f34:	68f9      	ldr	r1, [r7, #12]
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7ff ff01 	bl	8011d3e <QPSet_insert>

    QF_CRIT_X_();
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	f383 8811 	msr	BASEPRI, r3
}
 8011f42:	bf00      	nop
 8011f44:	3710      	adds	r7, #16
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	2000dab4 	.word	0x2000dab4
 8011f50:	2000d9ec 	.word	0x2000d9ec
 8011f54:	08016d5c 	.word	0x08016d5c
 8011f58:	2000dab0 	.word	0x2000dab0

08011f5c <QActive_ctor>:
* @param[in]     initial  pointer to the event to be dispatched to the MSM
*
* @note  Must be called only __once__ before QMSM_INIT().
* @sa QMsm_ctor() and QHsm_ctor()
*/
void QActive_ctor(QActive * const me, QStateHandler initial) {
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8011f66:	2120      	movs	r1, #32
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff fb5d 	bl	8011628 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6839      	ldr	r1, [r7, #0]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7ff f8e6 	bl	8011144 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	4a03      	ldr	r2, [pc, #12]	; (8011f88 <QActive_ctor+0x2c>)
 8011f7c:	601a      	str	r2, [r3, #0]
}
 8011f7e:	bf00      	nop
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	08016d64 	.word	0x08016d64

08011f8c <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	b2da      	uxtb	r2, r3
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d005      	beq.n	8011fbe <QEQueue_init+0x32>
        me->head = 0U;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	b2da      	uxtb	r2, r3
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	7adb      	ldrb	r3, [r3, #11]
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	731a      	strb	r2, [r3, #12]
}
 8011fd4:	bf00      	nop
 8011fd6:	3714      	adds	r7, #20
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <QF_tickX_>:
*/
void QF_tickX_(uint_fast8_t const tickRate, void const * const sender)
#else
void QF_tickX_(uint_fast8_t const tickRate)
#endif
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	011b      	lsls	r3, r3, #4
 8011fec:	4a47      	ldr	r2, [pc, #284]	; (801210c <QF_tickX_+0x12c>)
 8011fee:	4413      	add	r3, r2
 8011ff0:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8011ff2:	233f      	movs	r3, #63	; 0x3f
 8011ff4:	b672      	cpsid	i
 8011ff6:	f383 8811 	msr	BASEPRI, r3
 8011ffa:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d123      	bne.n	8012050 <QF_tickX_+0x70>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 8012008:	4a40      	ldr	r2, [pc, #256]	; (801210c <QF_tickX_+0x12c>)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	011b      	lsls	r3, r3, #4
 801200e:	4413      	add	r3, r2
 8012010:	3308      	adds	r3, #8
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d071      	beq.n	80120fc <QF_tickX_+0x11c>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d106      	bne.n	801202c <QF_tickX_+0x4c>
 801201e:	2300      	movs	r3, #0
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	216e      	movs	r1, #110	; 0x6e
 8012026:	483a      	ldr	r0, [pc, #232]	; (8012110 <QF_tickX_+0x130>)
 8012028:	f7ee fd28 	bl	8000a7c <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 801202c:	4a37      	ldr	r2, [pc, #220]	; (801210c <QF_tickX_+0x12c>)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	011b      	lsls	r3, r3, #4
 8012032:	4413      	add	r3, r2
 8012034:	3308      	adds	r3, #8
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 801203c:	4a33      	ldr	r2, [pc, #204]	; (801210c <QF_tickX_+0x12c>)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	011b      	lsls	r3, r3, #4
 8012042:	4413      	add	r3, r2
 8012044:	3308      	adds	r3, #8
 8012046:	2200      	movs	r2, #0
 8012048:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	899b      	ldrh	r3, [r3, #12]
 8012054:	b29b      	uxth	r3, r3
 8012056:	2b00      	cmp	r3, #0
 8012058:	d111      	bne.n	801207e <QF_tickX_+0x9e>
            prev->next = t->next;
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	685a      	ldr	r2, [r3, #4]
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	78db      	ldrb	r3, [r3, #3]
 8012066:	b2db      	uxtb	r3, r3
 8012068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801206c:	b2da      	uxtb	r2, r3
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8012072:	2300      	movs	r3, #0
 8012074:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	e038      	b.n	80120f0 <QF_tickX_+0x110>
        }
        else {
            --t->ctr;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	899b      	ldrh	r3, [r3, #12]
 8012082:	b29b      	uxth	r3, r3
 8012084:	3b01      	subs	r3, #1
 8012086:	b29a      	uxth	r2, r3
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	899b      	ldrh	r3, [r3, #12]
 8012090:	b29b      	uxth	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d125      	bne.n	80120e2 <QF_tickX_+0x102>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	89db      	ldrh	r3, [r3, #14]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d006      	beq.n	80120b2 <QF_tickX_+0xd2>
                    t->ctr = t->interval; /* rearm the time event */
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	89da      	ldrh	r2, [r3, #14]
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	617b      	str	r3, [r7, #20]
 80120b0:	e00b      	b.n	80120ca <QF_tickX_+0xea>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	685a      	ldr	r2, [r3, #4]
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	78db      	ldrb	r3, [r3, #3]
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120c4:	b2da      	uxtb	r2, r3
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 80120ca:	2300      	movs	r3, #0
 80120cc:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	6939      	ldr	r1, [r7, #16]
 80120d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	4798      	blx	r3
 80120e0:	e006      	b.n	80120f0 <QF_tickX_+0x110>
            }
            else {
                prev = t;         /* advance to this time event */
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 80120e6:	2300      	movs	r3, #0
 80120e8:	f383 8811 	msr	BASEPRI, r3

                /* prevent merging critical sections, see NOTE1 below  */
                QF_CRIT_EXIT_NOP();
 80120ec:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 80120f0:	233f      	movs	r3, #63	; 0x3f
 80120f2:	b672      	cpsid	i
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	b662      	cpsie	i
    for (;;) {
 80120fa:	e77f      	b.n	8011ffc <QF_tickX_+0x1c>
                break; /* all currently armed time evts. processed */
 80120fc:	bf00      	nop
    }
    QF_CRIT_X_();
 80120fe:	2300      	movs	r3, #0
 8012100:	f383 8811 	msr	BASEPRI, r3
}
 8012104:	bf00      	nop
 8012106:	3718      	adds	r7, #24
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	2000dab8 	.word	0x2000dab8
 8012110:	08016d78 	.word	0x08016d78

08012114 <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
 8012120:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b03      	cmp	r3, #3
 8012126:	dd02      	ble.n	801212e <QTimeEvt_ctorX+0x1a>
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	2b01      	cmp	r3, #1
 801212c:	d904      	bls.n	8012138 <QTimeEvt_ctorX+0x24>
 801212e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8012132:	480f      	ldr	r0, [pc, #60]	; (8012170 <QTimeEvt_ctorX+0x5c>)
 8012134:	f7ee fca2 	bl	8000a7c <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2200      	movs	r2, #0
 801213c:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2200      	movs	r2, #0
 8012142:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2200      	movs	r2, #0
 8012148:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	b29a      	uxth	r2, r3
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2200      	movs	r2, #0
 801215c:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	b2da      	uxtb	r2, r3
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	70da      	strb	r2, [r3, #3]
}
 8012166:	bf00      	nop
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	08016d78 	.word	0x08016d78

08012174 <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	460b      	mov	r3, r1
 801217e:	807b      	strh	r3, [r7, #2]
 8012180:	4613      	mov	r3, r2
 8012182:	803b      	strh	r3, [r7, #0]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	78db      	ldrb	r3, [r3, #3]
 8012188:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 801218a:	f003 030f 	and.w	r3, r3, #15
 801218e:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr const ctr = me->ctr;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	899b      	ldrh	r3, [r3, #12]
 8012194:	817b      	strh	r3, [r7, #10]
#endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00c      	beq.n	80121b8 <QTimeEvt_armX+0x44>
 801219e:	897b      	ldrh	r3, [r7, #10]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d109      	bne.n	80121b8 <QTimeEvt_armX+0x44>
 80121a4:	887b      	ldrh	r3, [r7, #2]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d006      	beq.n	80121b8 <QTimeEvt_armX+0x44>
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d803      	bhi.n	80121b8 <QTimeEvt_armX+0x44>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	2b03      	cmp	r3, #3
 80121b6:	d804      	bhi.n	80121c2 <QTimeEvt_armX+0x4e>
 80121b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80121bc:	4818      	ldr	r0, [pc, #96]	; (8012220 <QTimeEvt_armX+0xac>)
 80121be:	f7ee fc5d 	bl	8000a7c <Q_onAssert>
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80121c2:	233f      	movs	r3, #63	; 0x3f
 80121c4:	b672      	cpsid	i
 80121c6:	f383 8811 	msr	BASEPRI, r3
 80121ca:	b662      	cpsie	i
    me->ctr = nTicks;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	887a      	ldrh	r2, [r7, #2]
 80121d0:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	883a      	ldrh	r2, [r7, #0]
 80121d6:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	78db      	ldrb	r3, [r3, #3]
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	b25b      	sxtb	r3, r3
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	db16      	blt.n	8012212 <QTimeEvt_armX+0x9e>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	78db      	ldrb	r3, [r3, #3]
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121ee:	b2da      	uxtb	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 80121f4:	4a0b      	ldr	r2, [pc, #44]	; (8012224 <QTimeEvt_armX+0xb0>)
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	011b      	lsls	r3, r3, #4
 80121fa:	4413      	add	r3, r2
 80121fc:	3308      	adds	r3, #8
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8012204:	4a07      	ldr	r2, [pc, #28]	; (8012224 <QTimeEvt_armX+0xb0>)
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	011b      	lsls	r3, r3, #4
 801220a:	4413      	add	r3, r2
 801220c:	3308      	adds	r3, #8
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8012212:	2300      	movs	r3, #0
 8012214:	f383 8811 	msr	BASEPRI, r3
}
 8012218:	bf00      	nop
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	08016d78 	.word	0x08016d78
 8012224:	2000dab8 	.word	0x2000dab8

08012228 <QTimeEvt_disarm>:
* state machine.
*
* @note
* there is no harm in disarming an already disarmed time event
*/
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8012228:	b480      	push	{r7}
 801222a:	b085      	sub	sp, #20
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
#ifdef Q_SPY
    uint_fast8_t const qs_id = QACTIVE_CAST_(me->act)->prio;
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8012230:	233f      	movs	r3, #63	; 0x3f
 8012232:	b672      	cpsid	i
 8012234:	f383 8811 	msr	BASEPRI, r3
 8012238:	b662      	cpsie	i

    /* is the time event actually armed? */
    bool wasArmed;
    if (me->ctr != 0U) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	899b      	ldrh	r3, [r3, #12]
 801223e:	b29b      	uxth	r3, r3
 8012240:	2b00      	cmp	r3, #0
 8012242:	d00d      	beq.n	8012260 <QTimeEvt_disarm+0x38>
        wasArmed = true;
 8012244:	2301      	movs	r3, #1
 8012246:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ |= QTE_WAS_DISARMED;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	78db      	ldrb	r3, [r3, #3]
 801224c:	b2db      	uxtb	r3, r3
 801224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012252:	b2da      	uxtb	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	70da      	strb	r2, [r3, #3]
            QS_TEC_PRE_(me->ctr);      /* the number of ticks */
            QS_TEC_PRE_(me->interval); /* the interval */
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

        me->ctr = 0U;  /* schedule removal from the list */
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2200      	movs	r2, #0
 801225c:	819a      	strh	r2, [r3, #12]
 801225e:	e009      	b.n	8012274 <QTimeEvt_disarm+0x4c>
    }
    else { /* the time event was already disarmed automatically */
        wasArmed = false;
 8012260:	2300      	movs	r3, #0
 8012262:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ &= (uint8_t)(~QTE_WAS_DISARMED & 0xFFU);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	78db      	ldrb	r3, [r3, #3]
 8012268:	b2db      	uxtb	r3, r3
 801226a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801226e:	b2da      	uxtb	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	70da      	strb	r2, [r3, #3]
            QS_OBJ_PRE_(me->act);      /* the target AO */
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

    }
    QF_CRIT_X_();
 8012274:	2300      	movs	r3, #0
 8012276:	f383 8811 	msr	BASEPRI, r3

    return wasArmed;
 801227a:	7bfb      	ldrb	r3, [r7, #15]
}
 801227c:	4618      	mov	r0, r3
 801227e:	3714      	adds	r7, #20
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet * const me) {
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
    return me->bits != 0U;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	bf14      	ite	ne
 8012298:	2301      	movne	r3, #1
 801229a:	2300      	moveq	r3, #0
 801229c:	b2db      	uxtb	r3, r3
}
 801229e:	4618      	mov	r0, r3
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr

080122aa <QPSet_remove>:
static inline void QPSet_remove(QPSet * const me, uint_fast8_t const n) {
 80122aa:	b480      	push	{r7}
 80122ac:	b083      	sub	sp, #12
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	6039      	str	r1, [r7, #0]
    me->bits &= (QPSetBits)(~((QPSetBits)1 << (n - 1U)));
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681a      	ldr	r2, [r3, #0]
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	2101      	movs	r1, #1
 80122be:	fa01 f303 	lsl.w	r3, r1, r3
 80122c2:	43db      	mvns	r3, r3
 80122c4:	401a      	ands	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	601a      	str	r2, [r3, #0]
}
 80122ca:	bf00      	nop
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet * const me) {
 80122d6:	b480      	push	{r7}
 80122d8:	b083      	sub	sp, #12
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	fab3 f383 	clz	r3, r3
 80122e6:	f1c3 0320 	rsb	r3, r3, #32
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr
	...

080122f8 <QF_init>:
*
* @note QF_init() clears the internal QF variables, so that the framework
* can start correctly even if the startup code fails to clear the
* uninitialized data (as is required by the C Standard).
*/
void QF_init(void) {
 80122f8:	b580      	push	{r7, lr}
 80122fa:	af00      	add	r7, sp, #0
    QF_maxPool_      = 0U;
 80122fc:	4b0c      	ldr	r3, [pc, #48]	; (8012330 <QF_init+0x38>)
 80122fe:	2200      	movs	r2, #0
 8012300:	601a      	str	r2, [r3, #0]
    QF_subscrList_   = (QSubscrList *)0;
 8012302:	4b0c      	ldr	r3, [pc, #48]	; (8012334 <QF_init+0x3c>)
 8012304:	2200      	movs	r2, #0
 8012306:	601a      	str	r2, [r3, #0]
    QF_maxPubSignal_ = 0;
 8012308:	4b0b      	ldr	r3, [pc, #44]	; (8012338 <QF_init+0x40>)
 801230a:	2200      	movs	r2, #0
 801230c:	601a      	str	r2, [r3, #0]

    QF_bzero(&QF_timeEvtHead_[0], sizeof(QF_timeEvtHead_));
 801230e:	2120      	movs	r1, #32
 8012310:	480a      	ldr	r0, [pc, #40]	; (801233c <QF_init+0x44>)
 8012312:	f7ff f989 	bl	8011628 <QF_bzero>
    QF_bzero(&QF_active_[0],      sizeof(QF_active_));
 8012316:	2184      	movs	r1, #132	; 0x84
 8012318:	4809      	ldr	r0, [pc, #36]	; (8012340 <QF_init+0x48>)
 801231a:	f7ff f985 	bl	8011628 <QF_bzero>
    QF_bzero(&QV_readySet_,       sizeof(QV_readySet_));
 801231e:	2104      	movs	r1, #4
 8012320:	4808      	ldr	r0, [pc, #32]	; (8012344 <QF_init+0x4c>)
 8012322:	f7ff f981 	bl	8011628 <QF_bzero>

#ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8012326:	f000 f88b 	bl	8012440 <QV_init>
#endif
}
 801232a:	bf00      	nop
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	2000daac 	.word	0x2000daac
 8012334:	2000dab0 	.word	0x2000dab0
 8012338:	2000dab4 	.word	0x2000dab4
 801233c:	2000dab8 	.word	0x2000dab8
 8012340:	2000d9ec 	.word	0x2000d9ec
 8012344:	2000dad8 	.word	0x2000dad8

08012348 <QF_run>:
* QF_run() is typically called from main() after you initialize
* the QF and start at least one active object with QACTIVE_START().
*
* @returns In QV, the QF_run() function does not return.
*/
int_t QF_run(void) {
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
#ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
#endif

    QF_onStartup(); /* application-specific startup callback */
 801234e:	f7ee fbc6 	bl	8000ade <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 8012352:	233f      	movs	r3, #63	; 0x3f
 8012354:	b672      	cpsid	i
 8012356:	f383 8811 	msr	BASEPRI, r3
 801235a:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QV_readySet_)) {
 801235c:	481a      	ldr	r0, [pc, #104]	; (80123c8 <QF_run+0x80>)
 801235e:	f7ff ff93 	bl	8012288 <QPSet_notEmpty>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d027      	beq.n	80123b8 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QV_readySet_);
 8012368:	4817      	ldr	r0, [pc, #92]	; (80123c8 <QF_run+0x80>)
 801236a:	f7ff ffb4 	bl	80122d6 <QPSet_findMax>
 801236e:	60f8      	str	r0, [r7, #12]
            QActive * const a = QF_active_[p];
 8012370:	4a16      	ldr	r2, [pc, #88]	; (80123cc <QF_run+0x84>)
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012378:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
#endif /* Q_SPY */

            QF_INT_ENABLE();
 801237a:	2300      	movs	r3, #0
 801237c:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 8012380:	68b8      	ldr	r0, [r7, #8]
 8012382:	f7ff fa73 	bl	801186c <QActive_get_>
 8012386:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	68ba      	ldr	r2, [r7, #8]
 8012390:	6879      	ldr	r1, [r7, #4]
 8012392:	4610      	mov	r0, r2
 8012394:	4798      	blx	r3
            QF_gc(e);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f7ff fb66 	bl	8011a68 <QF_gc>

            QF_INT_DISABLE();
 801239c:	233f      	movs	r3, #63	; 0x3f
 801239e:	b672      	cpsid	i
 80123a0:	f383 8811 	msr	BASEPRI, r3
 80123a4:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1d6      	bne.n	801235c <QF_run+0x14>
                QPSet_remove(&QV_readySet_, p);
 80123ae:	68f9      	ldr	r1, [r7, #12]
 80123b0:	4805      	ldr	r0, [pc, #20]	; (80123c8 <QF_run+0x80>)
 80123b2:	f7ff ff7a 	bl	80122aa <QPSet_remove>
 80123b6:	e7d1      	b.n	801235c <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 80123b8:	f7ee fb84 	bl	8000ac4 <QV_onIdle>

            QF_INT_DISABLE();
 80123bc:	233f      	movs	r3, #63	; 0x3f
 80123be:	b672      	cpsid	i
 80123c0:	f383 8811 	msr	BASEPRI, r3
 80123c4:	b662      	cpsie	i
        if (QPSet_notEmpty(&QV_readySet_)) {
 80123c6:	e7c9      	b.n	801235c <QF_run+0x14>
 80123c8:	2000dad8 	.word	0x2000dad8
 80123cc:	2000d9ec 	.word	0x2000d9ec

080123d0 <QActive_start_>:
*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	603b      	str	r3, [r7, #0]
    (void)stkSize; /* unused parameter */

    /*! @pre The priority must be in range and the stack storage must not
    * be provided, because the QV kernel does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, (0U < prio) && (prio <= QF_MAX_ACTIVE)
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d005      	beq.n	80123f0 <QActive_start_+0x20>
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	2b20      	cmp	r3, #32
 80123e8:	d802      	bhi.n	80123f0 <QActive_start_+0x20>
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d004      	beq.n	80123fa <QActive_start_+0x2a>
 80123f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80123f4:	4811      	ldr	r0, [pc, #68]	; (801243c <QActive_start_+0x6c>)
 80123f6:	f7ee fb41 	bl	8000a7c <Q_onAssert>
                      && (stkSto == (void *)0));

    QEQueue_init(&me->eQueue, qSto, qLen); /* initialize the built-in queue */
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	330c      	adds	r3, #12
 80123fe:	683a      	ldr	r2, [r7, #0]
 8012400:	6879      	ldr	r1, [r7, #4]
 8012402:	4618      	mov	r0, r3
 8012404:	f7ff fdc2 	bl	8011f8c <QEQueue_init>
    me->prio = (uint8_t)prio; /* set the current priority of the AO */
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	b2da      	uxtb	r2, r3
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	771a      	strb	r2, [r3, #28]
    QF_add_(me); /* make QF aware of this active object */
 8012410:	68f8      	ldr	r0, [r7, #12]
 8012412:	f7ff f8dd 	bl	80115d0 <QF_add_>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d103      	bne.n	8012426 <QActive_start_+0x56>
 801241e:	21e1      	movs	r1, #225	; 0xe1
 8012420:	4806      	ldr	r0, [pc, #24]	; (801243c <QActive_start_+0x6c>)
 8012422:	f7ee fb2b 	bl	8000a7c <Q_onAssert>
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	6a39      	ldr	r1, [r7, #32]
 8012430:	4610      	mov	r0, r2
 8012432:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8012434:	bf00      	nop
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	08016d80 	.word	0x08016d80

08012440 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] |= (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI;
 8012446:	4b16      	ldr	r3, [pc, #88]	; (80124a0 <QV_init+0x60>)
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	4915      	ldr	r1, [pc, #84]	; (80124a0 <QV_init+0x60>)
 801244c:	4b15      	ldr	r3, [pc, #84]	; (80124a4 <QV_init+0x64>)
 801244e:	4313      	orrs	r3, r2
 8012450:	600b      	str	r3, [r1, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] |= (QF_BASEPRI << 24);
 8012452:	4b15      	ldr	r3, [pc, #84]	; (80124a8 <QV_init+0x68>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4a14      	ldr	r2, [pc, #80]	; (80124a8 <QV_init+0x68>)
 8012458:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801245c:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] |= (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI;
 801245e:	4b13      	ldr	r3, [pc, #76]	; (80124ac <QV_init+0x6c>)
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	4912      	ldr	r1, [pc, #72]	; (80124ac <QV_init+0x6c>)
 8012464:	4b12      	ldr	r3, [pc, #72]	; (80124b0 <QV_init+0x70>)
 8012466:	4313      	orrs	r3, r2
 8012468:	600b      	str	r3, [r1, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 801246a:	4b12      	ldr	r3, [pc, #72]	; (80124b4 <QV_init+0x74>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	00db      	lsls	r3, r3, #3
 8012470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012474:	3308      	adds	r3, #8
 8012476:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	3b01      	subs	r3, #1
 801247c:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	009a      	lsls	r2, r3, #2
 8012482:	4b0d      	ldr	r3, [pc, #52]	; (80124b8 <QV_init+0x78>)
 8012484:	4413      	add	r3, r2
 8012486:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 801248a:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d1f2      	bne.n	8012478 <QV_init+0x38>
}
 8012492:	bf00      	nop
 8012494:	bf00      	nop
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr
 80124a0:	e000ed18 	.word	0xe000ed18
 80124a4:	003f3f3f 	.word	0x003f3f3f
 80124a8:	e000ed1c 	.word	0xe000ed1c
 80124ac:	e000ed20 	.word	0xe000ed20
 80124b0:	3f3f003f 	.word	0x3f3f003f
 80124b4:	e000e004 	.word	0xe000e004
 80124b8:	e000e400 	.word	0xe000e400

080124bc <LwipDriver_ctor>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::LwipDriver} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::LwipDriver} ......................................................*/
/*.${AOs::LwipDriver::ctor} ................................................*/
void LwipDriver_ctor(LwipDriver * const me) {
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&LwipDriver_initial);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4908      	ldr	r1, [pc, #32]	; (80124e8 <LwipDriver_ctor+0x2c>)
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7ff fd47 	bl	8011f5c <QActive_ctor>
    QTimeEvt_ctorX(&me->te,&me->super,LWIP_PROCESS_SIG,0U);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f103 0020 	add.w	r0, r3, #32
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	2300      	movs	r3, #0
 80124d8:	2204      	movs	r2, #4
 80124da:	f7ff fe1b 	bl	8012114 <QTimeEvt_ctorX>
}
 80124de:	bf00      	nop
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	080124ed 	.word	0x080124ed

080124ec <LwipDriver_initial>:

/*.${AOs::LwipDriver::SM} ..................................................*/
QState LwipDriver_initial(LwipDriver * const me, void const * const par) {
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
    /*.${AOs::LwipDriver::SM::initial} */

    err_t PosErr=0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	73fb      	strb	r3, [r7, #15]
    me->upcb = udp_new();
 80124fa:	f7fc faed 	bl	800ead8 <udp_new>
 80124fe:	4602      	mov	r2, r0
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	649a      	str	r2, [r3, #72]	; 0x48
    IP4_ADDR(&me->upcb->remote_ip,REMOTEIP_1,REMOTEIP_2,REMOTEIP_3,REMOTEIP_4);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012508:	4a18      	ldr	r2, [pc, #96]	; (801256c <LwipDriver_initial+0x80>)
 801250a:	605a      	str	r2, [r3, #4]
    me->upcb->remote_port = UDP_SERVER_PORT;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012510:	2208      	movs	r2, #8
 8012512:	829a      	strh	r2, [r3, #20]
    IP4_ADDR(&me->upcb->local_ip,LOCALIP_1,LOCALIP_2,LOCALIP_3,LOCALIP_4);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012518:	4a15      	ldr	r2, [pc, #84]	; (8012570 <LwipDriver_initial+0x84>)
 801251a:	601a      	str	r2, [r3, #0]
    me->upcb->local_port = UDP_CLIENT_PORT;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012520:	2207      	movs	r2, #7
 8012522:	825a      	strh	r2, [r3, #18]
    PosErr = udp_bind(me->upcb, &me->upcb->local_ip,me->upcb->local_port);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801252c:	4619      	mov	r1, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012532:	8a5b      	ldrh	r3, [r3, #18]
 8012534:	461a      	mov	r2, r3
 8012536:	f7fc fa27 	bl	800e988 <udp_bind>
 801253a:	4603      	mov	r3, r0
 801253c:	73fb      	strb	r3, [r7, #15]
    if(PosErr == 0){
 801253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d106      	bne.n	8012554 <LwipDriver_initial+0x68>
      udp_recv(me->upcb, &udp_rx_callback, NULL);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801254a:	2200      	movs	r2, #0
 801254c:	4909      	ldr	r1, [pc, #36]	; (8012574 <LwipDriver_initial+0x88>)
 801254e:	4618      	mov	r0, r3
 8012550:	f7fc faa2 	bl	800ea98 <udp_recv>
    }

    QActive_subscribe((QActive *)me, LWIP_TX_SIG);
 8012554:	2106      	movs	r1, #6
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff fcc0 	bl	8011edc <QActive_subscribe>

    return Q_TRAN(&LwipDriver_LwipMngr);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	4a06      	ldr	r2, [pc, #24]	; (8012578 <LwipDriver_initial+0x8c>)
 8012560:	609a      	str	r2, [r3, #8]
 8012562:	2308      	movs	r3, #8
}
 8012564:	4618      	mov	r0, r3
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	0100a8c0 	.word	0x0100a8c0
 8012570:	0a00a8c0 	.word	0x0a00a8c0
 8012574:	0801264d 	.word	0x0801264d
 8012578:	0801257d 	.word	0x0801257d

0801257c <LwipDriver_LwipMngr>:
/*.${AOs::LwipDriver::SM::LwipMngr} ........................................*/
QState LwipDriver_LwipMngr(LwipDriver * const me, QEvt const * const e) {
 801257c:	b590      	push	{r4, r7, lr}
 801257e:	b08b      	sub	sp, #44	; 0x2c
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	3b01      	subs	r3, #1
 801258c:	2b05      	cmp	r3, #5
 801258e:	d850      	bhi.n	8012632 <LwipDriver_LwipMngr+0xb6>
 8012590:	a201      	add	r2, pc, #4	; (adr r2, 8012598 <LwipDriver_LwipMngr+0x1c>)
 8012592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012596:	bf00      	nop
 8012598:	080125b1 	.word	0x080125b1
 801259c:	080125c5 	.word	0x080125c5
 80125a0:	08012633 	.word	0x08012633
 80125a4:	080125d5 	.word	0x080125d5
 80125a8:	080125df 	.word	0x080125df
 80125ac:	080125f5 	.word	0x080125f5
        /*.${AOs::LwipDriver::SM::LwipMngr} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	3320      	adds	r3, #32
 80125b4:	2201      	movs	r2, #1
 80125b6:	2101      	movs	r1, #1
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fddb 	bl	8012174 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 80125be:	2303      	movs	r3, #3
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80125c2:	e03c      	b.n	801263e <LwipDriver_LwipMngr+0xc2>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr} */
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->te);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	3320      	adds	r3, #32
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7ff fe2d 	bl	8012228 <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 80125ce:	2303      	movs	r3, #3
 80125d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80125d2:	e034      	b.n	801263e <LwipDriver_LwipMngr+0xc2>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr::LWIP_PROCESS} */
        case LWIP_PROCESS_SIG: {
            MX_LWIP_Process();
 80125d4:	f7f4 f91c 	bl	8006810 <MX_LWIP_Process>
            status_ = Q_HANDLED();
 80125d8:	2303      	movs	r3, #3
 80125da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80125dc:	e02f      	b.n	801263e <LwipDriver_LwipMngr+0xc2>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr::LWIP_RX} */
        case LWIP_RX_SIG: {
            char temptext[20];
            strncpy(temptext, ((TextEvt const *)e)->text,Q_DIM(temptext));
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	1d19      	adds	r1, r3, #4
 80125e2:	f107 030c 	add.w	r3, r7, #12
 80125e6:	2214      	movs	r2, #20
 80125e8:	4618      	mov	r0, r3
 80125ea:	f000 fbe5 	bl	8012db8 <strncpy>
            status_ = Q_HANDLED();
 80125ee:	2303      	movs	r3, #3
 80125f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80125f2:	e024      	b.n	801263e <LwipDriver_LwipMngr+0xc2>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr::LWIP_TX} */
        case LWIP_TX_SIG: {
            struct pbuf *p = pbuf_new((u8_t *)((TextEvt const *)e)->text,
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	1d1c      	adds	r4, r3, #4
                                  strlen(((TextEvt const *)e)->text) + 1);
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	3304      	adds	r3, #4
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7ed fe07 	bl	8000210 <strlen>
 8012602:	4603      	mov	r3, r0
            struct pbuf *p = pbuf_new((u8_t *)((TextEvt const *)e)->text,
 8012604:	b29b      	uxth	r3, r3
 8012606:	3301      	adds	r3, #1
 8012608:	b29b      	uxth	r3, r3
 801260a:	4619      	mov	r1, r3
 801260c:	4620      	mov	r0, r4
 801260e:	f000 f85e 	bl	80126ce <pbuf_new>
 8012612:	6238      	str	r0, [r7, #32]
            if (p != (struct pbuf *)0) {
 8012614:	6a3b      	ldr	r3, [r7, #32]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d008      	beq.n	801262c <LwipDriver_LwipMngr+0xb0>
                udp_send(me->upcb, p);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801261e:	6a39      	ldr	r1, [r7, #32]
 8012620:	4618      	mov	r0, r3
 8012622:	f7fb ffc7 	bl	800e5b4 <udp_send>
                pbuf_free(p);                   /* don't leak the pbuf! */
 8012626:	6a38      	ldr	r0, [r7, #32]
 8012628:	f7f6 f8a6 	bl	8008778 <pbuf_free>
            }
            status_ = Q_HANDLED();
 801262c:	2303      	movs	r3, #3
 801262e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012630:	e005      	b.n	801263e <LwipDriver_LwipMngr+0xc2>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4a04      	ldr	r2, [pc, #16]	; (8012648 <LwipDriver_LwipMngr+0xcc>)
 8012636:	609a      	str	r2, [r3, #8]
 8012638:	2300      	movs	r3, #0
 801263a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801263c:	bf00      	nop
        }
    }
    return status_;
 801263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012640:	4618      	mov	r0, r3
 8012642:	372c      	adds	r7, #44	; 0x2c
 8012644:	46bd      	mov	sp, r7
 8012646:	bd90      	pop	{r4, r7, pc}
 8012648:	08011271 	.word	0x08011271

0801264c <udp_rx_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_rx_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
 8012658:	603b      	str	r3, [r7, #0]
  //QActive const *AO_LwipDriver;
  TextEvt *te = Q_NEW(TextEvt, LWIP_TX_SIG);
 801265a:	2206      	movs	r2, #6
 801265c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012660:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8012664:	f7ff f99c 	bl	80119a0 <QF_newX_>
 8012668:	6178      	str	r0, [r7, #20]
  snprintf(te->text,MAX_TEXT_LEN,(char *)p->payload);
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	1d18      	adds	r0, r3, #4
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	461a      	mov	r2, r3
 8012674:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012678:	f000 fb4a 	bl	8012d10 <sniprintf>
  QF_PUBLISH((QEvt *)te, AO_LwipDriver);
 801267c:	6978      	ldr	r0, [r7, #20]
 801267e:	f7ff fbb3 	bl	8011de8 <QF_publish_>
  TextEvt *re = Q_NEW(TextEvt, UART_TX_SIG);
 8012682:	2209      	movs	r2, #9
 8012684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012688:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 801268c:	f7ff f988 	bl	80119a0 <QF_newX_>
 8012690:	6138      	str	r0, [r7, #16]
  snprintf(re->text,MAX_TEXT_LEN,(char *)p->payload);
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	1d18      	adds	r0, r3, #4
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	461a      	mov	r2, r3
 801269c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80126a0:	f000 fb36 	bl	8012d10 <sniprintf>
  QF_PUBLISH((QEvt *)re, AO_LwipDriver);
 80126a4:	6938      	ldr	r0, [r7, #16]
 80126a6:	f7ff fb9f 	bl	8011de8 <QF_publish_>
  pbuf_free(p); /* don't leak the pbuf! */
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7f6 f864 	bl	8008778 <pbuf_free>

}
 80126b0:	bf00      	nop
 80126b2:	3718      	adds	r7, #24
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	4603      	mov	r3, r0
 80126c0:	80fb      	strh	r3, [r7, #6]
  //QActive * const AO_LwipDriver;
  UNUSED(GPIO_Pin);
  //TextEvt *te = Q_NEW(TextEvt, LWIP_TX_SIG);
  //strcpy(te->text, "Butona Basildi\n");
  //QACTIVE_POST(AO_LwipDriver, (QEvt *)te, 0U);
}
 80126c2:	bf00      	nop
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr

080126ce <pbuf_new>:
* care of splitting the data into successive pbuf payloads, if necessary.
*
* The function returns the newly created pbuf or NULL if the pbuf cannot
* be allocated.
*/
struct pbuf *pbuf_new(u8_t *data, u16_t len) {
 80126ce:	b580      	push	{r7, lr}
 80126d0:	b084      	sub	sp, #16
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	460b      	mov	r3, r1
 80126d8:	807b      	strh	r3, [r7, #2]
    struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80126da:	887b      	ldrh	r3, [r7, #2]
 80126dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126e0:	4619      	mov	r1, r3
 80126e2:	2036      	movs	r0, #54	; 0x36
 80126e4:	f7f5 fd5c 	bl	80081a0 <pbuf_alloc>
 80126e8:	60b8      	str	r0, [r7, #8]
    struct pbuf *q = p;
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	60fb      	str	r3, [r7, #12]
    while ((q != (struct pbuf *)0) && (len >= q->len)) {
 80126ee:	e015      	b.n	801271c <pbuf_new+0x4e>
        memcpy(q->payload, data, q->len);         /* copy data into payload */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	6858      	ldr	r0, [r3, #4]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	895b      	ldrh	r3, [r3, #10]
 80126f8:	461a      	mov	r2, r3
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	f000 f946 	bl	801298c <memcpy>
        len  -= q->len;                                 /* remaining length */
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	895b      	ldrh	r3, [r3, #10]
 8012704:	887a      	ldrh	r2, [r7, #2]
 8012706:	1ad3      	subs	r3, r2, r3
 8012708:	807b      	strh	r3, [r7, #2]
        data += q->len;                              /* remainig data chunk */
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	895b      	ldrh	r3, [r3, #10]
 801270e:	461a      	mov	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4413      	add	r3, r2
 8012714:	607b      	str	r3, [r7, #4]
        q = q->next;                                       /* get next pbuf */
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	60fb      	str	r3, [r7, #12]
    while ((q != (struct pbuf *)0) && (len >= q->len)) {
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d004      	beq.n	801272c <pbuf_new+0x5e>
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	895b      	ldrh	r3, [r3, #10]
 8012726:	887a      	ldrh	r2, [r7, #2]
 8012728:	429a      	cmp	r2, r3
 801272a:	d2e1      	bcs.n	80126f0 <pbuf_new+0x22>
    }
    return p;
 801272c:	68bb      	ldr	r3, [r7, #8]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3710      	adds	r7, #16
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
	...

08012738 <UartDriver_ctor>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::UartDriver} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::UartDriver} ......................................................*/
/*.${AOs::UartDriver::ctor} ................................................*/
void UartDriver_ctor(UartDriver * const me) {
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&UartDriver_initial);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4908      	ldr	r1, [pc, #32]	; (8012764 <UartDriver_ctor+0x2c>)
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff fc09 	bl	8011f5c <QActive_ctor>
    QTimeEvt_ctorX(&me->te,&me->super,UART_PROCESS_SIG,0U);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f103 0020 	add.w	r0, r3, #32
 8012750:	6879      	ldr	r1, [r7, #4]
 8012752:	2300      	movs	r3, #0
 8012754:	2207      	movs	r2, #7
 8012756:	f7ff fcdd 	bl	8012114 <QTimeEvt_ctorX>
}
 801275a:	bf00      	nop
 801275c:	3708      	adds	r7, #8
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	08012769 	.word	0x08012769

08012768 <UartDriver_initial>:

/*.${AOs::UartDriver::SM} ..................................................*/
QState UartDriver_initial(UartDriver * const me, void const * const par) {
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	6039      	str	r1, [r7, #0]
    /*.${AOs::UartDriver::SM::initial} */
    QActive_subscribe((QActive *)me, UART_TX_SIG);
 8012772:	2109      	movs	r1, #9
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7ff fbb1 	bl	8011edc <QActive_subscribe>
    QActive_subscribe((QActive *)me, UART_RX_SIG);
 801277a:	2108      	movs	r1, #8
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff fbad 	bl	8011edc <QActive_subscribe>
    return Q_TRAN(&UartDriver_UartMngr);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a03      	ldr	r2, [pc, #12]	; (8012794 <UartDriver_initial+0x2c>)
 8012786:	609a      	str	r2, [r3, #8]
 8012788:	2308      	movs	r3, #8
}
 801278a:	4618      	mov	r0, r3
 801278c:	3708      	adds	r7, #8
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	08012799 	.word	0x08012799

08012798 <UartDriver_UartMngr>:
/*.${AOs::UartDriver::SM::UartMngr} ........................................*/
QState UartDriver_UartMngr(UartDriver * const me, QEvt const * const e) {
 8012798:	b580      	push	{r7, lr}
 801279a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 801279e:	af00      	add	r7, sp, #0
 80127a0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127a4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80127a8:	6018      	str	r0, [r3, #0]
 80127aa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127ae:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80127b2:	6019      	str	r1, [r3, #0]
    QState status_;
    switch (e->sig) {
 80127b4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127b8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	2b08      	cmp	r3, #8
 80127c4:	d869      	bhi.n	801289a <UartDriver_UartMngr+0x102>
 80127c6:	a201      	add	r2, pc, #4	; (adr r2, 80127cc <UartDriver_UartMngr+0x34>)
 80127c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127cc:	080127f1 	.word	0x080127f1
 80127d0:	0801280f 	.word	0x0801280f
 80127d4:	0801289b 	.word	0x0801289b
 80127d8:	0801289b 	.word	0x0801289b
 80127dc:	0801289b 	.word	0x0801289b
 80127e0:	0801289b 	.word	0x0801289b
 80127e4:	08012829 	.word	0x08012829
 80127e8:	08012833 	.word	0x08012833
 80127ec:	0801286d 	.word	0x0801286d
        /*.${AOs::UartDriver::SM::UartMngr} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);
 80127f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127f4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	3320      	adds	r3, #32
 80127fc:	2201      	movs	r2, #1
 80127fe:	2101      	movs	r1, #1
 8012800:	4618      	mov	r0, r3
 8012802:	f7ff fcb7 	bl	8012174 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 8012806:	2303      	movs	r3, #3
 8012808:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 801280c:	e050      	b.n	80128b0 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr} */
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->te);
 801280e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012812:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3320      	adds	r3, #32
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff fd04 	bl	8012228 <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 8012820:	2303      	movs	r3, #3
 8012822:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8012826:	e043      	b.n	80128b0 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_PROCESS} */
        case UART_PROCESS_SIG: {
            __NOP();
 8012828:	bf00      	nop
            status_ = Q_HANDLED();
 801282a:	2303      	movs	r3, #3
 801282c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8012830:	e03e      	b.n	80128b0 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_RX} */
        case UART_RX_SIG: {
            static uint16_t receive_num=0;
            receive_num++;
 8012832:	4b23      	ldr	r3, [pc, #140]	; (80128c0 <UartDriver_UartMngr+0x128>)
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	3301      	adds	r3, #1
 8012838:	b29a      	uxth	r2, r3
 801283a:	4b21      	ldr	r3, [pc, #132]	; (80128c0 <UartDriver_UartMngr+0x128>)
 801283c:	801a      	strh	r2, [r3, #0]
            char temptext[20];
            strncpy(temptext, ((TextEvt const *)e)->text,Q_DIM(temptext));
 801283e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012842:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	1d19      	adds	r1, r3, #4
 801284a:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 801284e:	2214      	movs	r2, #20
 8012850:	4618      	mov	r0, r3
 8012852:	f000 fab1 	bl	8012db8 <strncpy>
            HAL_UART_Transmit(&huart3,(uint8_t *)temptext,sizeof(temptext),10);
 8012856:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 801285a:	230a      	movs	r3, #10
 801285c:	2214      	movs	r2, #20
 801285e:	4819      	ldr	r0, [pc, #100]	; (80128c4 <UartDriver_UartMngr+0x12c>)
 8012860:	f7f2 fba7 	bl	8004fb2 <HAL_UART_Transmit>
            status_ = Q_HANDLED();
 8012864:	2303      	movs	r3, #3
 8012866:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 801286a:	e021      	b.n	80128b0 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_TX} */
        case UART_TX_SIG: {
            char temptext[MAX_TEXT_LEN];
            uint16_t size=0;
 801286c:	2300      	movs	r3, #0
 801286e:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
            size = sprintf(temptext,((TextEvt const *)e)->text);
 8012872:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012876:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	1d1a      	adds	r2, r3, #4
 801287e:	f107 030c 	add.w	r3, r7, #12
 8012882:	4611      	mov	r1, r2
 8012884:	4618      	mov	r0, r3
 8012886:	f000 fa77 	bl	8012d78 <siprintf>
 801288a:	4603      	mov	r3, r0
 801288c:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
            __NOP();
 8012890:	bf00      	nop
            status_ = Q_HANDLED();
 8012892:	2303      	movs	r3, #3
 8012894:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8012898:	e00a      	b.n	80128b0 <UartDriver_UartMngr+0x118>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 801289a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801289e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4a08      	ldr	r2, [pc, #32]	; (80128c8 <UartDriver_UartMngr+0x130>)
 80128a6:	609a      	str	r2, [r3, #8]
 80128a8:	2300      	movs	r3, #0
 80128aa:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 80128ae:	bf00      	nop
        }
    }
    return status_;
 80128b0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	2000dadc 	.word	0x2000dadc
 80128c4:	200000e8 	.word	0x200000e8
 80128c8:	08011271 	.word	0x08011271

080128cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

 // QActive * const AO_UartDriver;
  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80128d4:	2101      	movs	r1, #1
 80128d6:	4811      	ldr	r0, [pc, #68]	; (801291c <HAL_UART_RxCpltCallback+0x50>)
 80128d8:	f7f0 fead 	bl	8003636 <HAL_GPIO_TogglePin>

  static uint16_t receive_num=0;
  receive_num++;
 80128dc:	4b10      	ldr	r3, [pc, #64]	; (8012920 <HAL_UART_RxCpltCallback+0x54>)
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	3301      	adds	r3, #1
 80128e2:	b29a      	uxth	r2, r3
 80128e4:	4b0e      	ldr	r3, [pc, #56]	; (8012920 <HAL_UART_RxCpltCallback+0x54>)
 80128e6:	801a      	strh	r2, [r3, #0]

  TextEvt *te = Q_NEW(TextEvt, UART_RX_SIG);
 80128e8:	2208      	movs	r2, #8
 80128ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80128ee:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 80128f2:	f7ff f855 	bl	80119a0 <QF_newX_>
 80128f6:	60f8      	str	r0, [r7, #12]
  strncpy(te->text,(char *)huart->pRxBuffPtr,Q_DIM(te->text));
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	1d18      	adds	r0, r3, #4
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012904:	4619      	mov	r1, r3
 8012906:	f000 fa57 	bl	8012db8 <strncpy>
  QF_PUBLISH((QEvt *)te, AO_UartDriver);
 801290a:	68f8      	ldr	r0, [r7, #12]
 801290c:	f7ff fa6c 	bl	8011de8 <QF_publish_>

  __NOP();
 8012910:	bf00      	nop
}
 8012912:	bf00      	nop
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	40020400 	.word	0x40020400
 8012920:	2000dade 	.word	0x2000dade

08012924 <__libc_init_array>:
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	4d0d      	ldr	r5, [pc, #52]	; (801295c <__libc_init_array+0x38>)
 8012928:	4c0d      	ldr	r4, [pc, #52]	; (8012960 <__libc_init_array+0x3c>)
 801292a:	1b64      	subs	r4, r4, r5
 801292c:	10a4      	asrs	r4, r4, #2
 801292e:	2600      	movs	r6, #0
 8012930:	42a6      	cmp	r6, r4
 8012932:	d109      	bne.n	8012948 <__libc_init_array+0x24>
 8012934:	4d0b      	ldr	r5, [pc, #44]	; (8012964 <__libc_init_array+0x40>)
 8012936:	4c0c      	ldr	r4, [pc, #48]	; (8012968 <__libc_init_array+0x44>)
 8012938:	f001 fbf2 	bl	8014120 <_init>
 801293c:	1b64      	subs	r4, r4, r5
 801293e:	10a4      	asrs	r4, r4, #2
 8012940:	2600      	movs	r6, #0
 8012942:	42a6      	cmp	r6, r4
 8012944:	d105      	bne.n	8012952 <__libc_init_array+0x2e>
 8012946:	bd70      	pop	{r4, r5, r6, pc}
 8012948:	f855 3b04 	ldr.w	r3, [r5], #4
 801294c:	4798      	blx	r3
 801294e:	3601      	adds	r6, #1
 8012950:	e7ee      	b.n	8012930 <__libc_init_array+0xc>
 8012952:	f855 3b04 	ldr.w	r3, [r5], #4
 8012956:	4798      	blx	r3
 8012958:	3601      	adds	r6, #1
 801295a:	e7f2      	b.n	8012942 <__libc_init_array+0x1e>
 801295c:	08016ed4 	.word	0x08016ed4
 8012960:	08016ed4 	.word	0x08016ed4
 8012964:	08016ed4 	.word	0x08016ed4
 8012968:	08016ed8 	.word	0x08016ed8

0801296c <memcmp>:
 801296c:	b510      	push	{r4, lr}
 801296e:	3901      	subs	r1, #1
 8012970:	4402      	add	r2, r0
 8012972:	4290      	cmp	r0, r2
 8012974:	d101      	bne.n	801297a <memcmp+0xe>
 8012976:	2000      	movs	r0, #0
 8012978:	e005      	b.n	8012986 <memcmp+0x1a>
 801297a:	7803      	ldrb	r3, [r0, #0]
 801297c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012980:	42a3      	cmp	r3, r4
 8012982:	d001      	beq.n	8012988 <memcmp+0x1c>
 8012984:	1b18      	subs	r0, r3, r4
 8012986:	bd10      	pop	{r4, pc}
 8012988:	3001      	adds	r0, #1
 801298a:	e7f2      	b.n	8012972 <memcmp+0x6>

0801298c <memcpy>:
 801298c:	440a      	add	r2, r1
 801298e:	4291      	cmp	r1, r2
 8012990:	f100 33ff 	add.w	r3, r0, #4294967295
 8012994:	d100      	bne.n	8012998 <memcpy+0xc>
 8012996:	4770      	bx	lr
 8012998:	b510      	push	{r4, lr}
 801299a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801299e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129a2:	4291      	cmp	r1, r2
 80129a4:	d1f9      	bne.n	801299a <memcpy+0xe>
 80129a6:	bd10      	pop	{r4, pc}

080129a8 <memmove>:
 80129a8:	4288      	cmp	r0, r1
 80129aa:	b510      	push	{r4, lr}
 80129ac:	eb01 0402 	add.w	r4, r1, r2
 80129b0:	d902      	bls.n	80129b8 <memmove+0x10>
 80129b2:	4284      	cmp	r4, r0
 80129b4:	4623      	mov	r3, r4
 80129b6:	d807      	bhi.n	80129c8 <memmove+0x20>
 80129b8:	1e43      	subs	r3, r0, #1
 80129ba:	42a1      	cmp	r1, r4
 80129bc:	d008      	beq.n	80129d0 <memmove+0x28>
 80129be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129c6:	e7f8      	b.n	80129ba <memmove+0x12>
 80129c8:	4402      	add	r2, r0
 80129ca:	4601      	mov	r1, r0
 80129cc:	428a      	cmp	r2, r1
 80129ce:	d100      	bne.n	80129d2 <memmove+0x2a>
 80129d0:	bd10      	pop	{r4, pc}
 80129d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129da:	e7f7      	b.n	80129cc <memmove+0x24>

080129dc <memset>:
 80129dc:	4402      	add	r2, r0
 80129de:	4603      	mov	r3, r0
 80129e0:	4293      	cmp	r3, r2
 80129e2:	d100      	bne.n	80129e6 <memset+0xa>
 80129e4:	4770      	bx	lr
 80129e6:	f803 1b01 	strb.w	r1, [r3], #1
 80129ea:	e7f9      	b.n	80129e0 <memset+0x4>

080129ec <iprintf>:
 80129ec:	b40f      	push	{r0, r1, r2, r3}
 80129ee:	4b0a      	ldr	r3, [pc, #40]	; (8012a18 <iprintf+0x2c>)
 80129f0:	b513      	push	{r0, r1, r4, lr}
 80129f2:	681c      	ldr	r4, [r3, #0]
 80129f4:	b124      	cbz	r4, 8012a00 <iprintf+0x14>
 80129f6:	69a3      	ldr	r3, [r4, #24]
 80129f8:	b913      	cbnz	r3, 8012a00 <iprintf+0x14>
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fbe8 	bl	80131d0 <__sinit>
 8012a00:	ab05      	add	r3, sp, #20
 8012a02:	9a04      	ldr	r2, [sp, #16]
 8012a04:	68a1      	ldr	r1, [r4, #8]
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 ff67 	bl	80138dc <_vfiprintf_r>
 8012a0e:	b002      	add	sp, #8
 8012a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a14:	b004      	add	sp, #16
 8012a16:	4770      	bx	lr
 8012a18:	2000001c 	.word	0x2000001c

08012a1c <_puts_r>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	460e      	mov	r6, r1
 8012a20:	4605      	mov	r5, r0
 8012a22:	b118      	cbz	r0, 8012a2c <_puts_r+0x10>
 8012a24:	6983      	ldr	r3, [r0, #24]
 8012a26:	b90b      	cbnz	r3, 8012a2c <_puts_r+0x10>
 8012a28:	f000 fbd2 	bl	80131d0 <__sinit>
 8012a2c:	69ab      	ldr	r3, [r5, #24]
 8012a2e:	68ac      	ldr	r4, [r5, #8]
 8012a30:	b913      	cbnz	r3, 8012a38 <_puts_r+0x1c>
 8012a32:	4628      	mov	r0, r5
 8012a34:	f000 fbcc 	bl	80131d0 <__sinit>
 8012a38:	4b2c      	ldr	r3, [pc, #176]	; (8012aec <_puts_r+0xd0>)
 8012a3a:	429c      	cmp	r4, r3
 8012a3c:	d120      	bne.n	8012a80 <_puts_r+0x64>
 8012a3e:	686c      	ldr	r4, [r5, #4]
 8012a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a42:	07db      	lsls	r3, r3, #31
 8012a44:	d405      	bmi.n	8012a52 <_puts_r+0x36>
 8012a46:	89a3      	ldrh	r3, [r4, #12]
 8012a48:	0598      	lsls	r0, r3, #22
 8012a4a:	d402      	bmi.n	8012a52 <_puts_r+0x36>
 8012a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a4e:	f000 fc6f 	bl	8013330 <__retarget_lock_acquire_recursive>
 8012a52:	89a3      	ldrh	r3, [r4, #12]
 8012a54:	0719      	lsls	r1, r3, #28
 8012a56:	d51d      	bpl.n	8012a94 <_puts_r+0x78>
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	b1db      	cbz	r3, 8012a94 <_puts_r+0x78>
 8012a5c:	3e01      	subs	r6, #1
 8012a5e:	68a3      	ldr	r3, [r4, #8]
 8012a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012a64:	3b01      	subs	r3, #1
 8012a66:	60a3      	str	r3, [r4, #8]
 8012a68:	bb39      	cbnz	r1, 8012aba <_puts_r+0x9e>
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	da38      	bge.n	8012ae0 <_puts_r+0xc4>
 8012a6e:	4622      	mov	r2, r4
 8012a70:	210a      	movs	r1, #10
 8012a72:	4628      	mov	r0, r5
 8012a74:	f000 f9b4 	bl	8012de0 <__swbuf_r>
 8012a78:	3001      	adds	r0, #1
 8012a7a:	d011      	beq.n	8012aa0 <_puts_r+0x84>
 8012a7c:	250a      	movs	r5, #10
 8012a7e:	e011      	b.n	8012aa4 <_puts_r+0x88>
 8012a80:	4b1b      	ldr	r3, [pc, #108]	; (8012af0 <_puts_r+0xd4>)
 8012a82:	429c      	cmp	r4, r3
 8012a84:	d101      	bne.n	8012a8a <_puts_r+0x6e>
 8012a86:	68ac      	ldr	r4, [r5, #8]
 8012a88:	e7da      	b.n	8012a40 <_puts_r+0x24>
 8012a8a:	4b1a      	ldr	r3, [pc, #104]	; (8012af4 <_puts_r+0xd8>)
 8012a8c:	429c      	cmp	r4, r3
 8012a8e:	bf08      	it	eq
 8012a90:	68ec      	ldreq	r4, [r5, #12]
 8012a92:	e7d5      	b.n	8012a40 <_puts_r+0x24>
 8012a94:	4621      	mov	r1, r4
 8012a96:	4628      	mov	r0, r5
 8012a98:	f000 f9f4 	bl	8012e84 <__swsetup_r>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d0dd      	beq.n	8012a5c <_puts_r+0x40>
 8012aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8012aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012aa6:	07da      	lsls	r2, r3, #31
 8012aa8:	d405      	bmi.n	8012ab6 <_puts_r+0x9a>
 8012aaa:	89a3      	ldrh	r3, [r4, #12]
 8012aac:	059b      	lsls	r3, r3, #22
 8012aae:	d402      	bmi.n	8012ab6 <_puts_r+0x9a>
 8012ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ab2:	f000 fc3e 	bl	8013332 <__retarget_lock_release_recursive>
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	bd70      	pop	{r4, r5, r6, pc}
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	da04      	bge.n	8012ac8 <_puts_r+0xac>
 8012abe:	69a2      	ldr	r2, [r4, #24]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	dc06      	bgt.n	8012ad2 <_puts_r+0xb6>
 8012ac4:	290a      	cmp	r1, #10
 8012ac6:	d004      	beq.n	8012ad2 <_puts_r+0xb6>
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	1c5a      	adds	r2, r3, #1
 8012acc:	6022      	str	r2, [r4, #0]
 8012ace:	7019      	strb	r1, [r3, #0]
 8012ad0:	e7c5      	b.n	8012a5e <_puts_r+0x42>
 8012ad2:	4622      	mov	r2, r4
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	f000 f983 	bl	8012de0 <__swbuf_r>
 8012ada:	3001      	adds	r0, #1
 8012adc:	d1bf      	bne.n	8012a5e <_puts_r+0x42>
 8012ade:	e7df      	b.n	8012aa0 <_puts_r+0x84>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	250a      	movs	r5, #10
 8012ae4:	1c5a      	adds	r2, r3, #1
 8012ae6:	6022      	str	r2, [r4, #0]
 8012ae8:	701d      	strb	r5, [r3, #0]
 8012aea:	e7db      	b.n	8012aa4 <_puts_r+0x88>
 8012aec:	08016e58 	.word	0x08016e58
 8012af0:	08016e78 	.word	0x08016e78
 8012af4:	08016e38 	.word	0x08016e38

08012af8 <puts>:
 8012af8:	4b02      	ldr	r3, [pc, #8]	; (8012b04 <puts+0xc>)
 8012afa:	4601      	mov	r1, r0
 8012afc:	6818      	ldr	r0, [r3, #0]
 8012afe:	f7ff bf8d 	b.w	8012a1c <_puts_r>
 8012b02:	bf00      	nop
 8012b04:	2000001c 	.word	0x2000001c

08012b08 <rand>:
 8012b08:	4b16      	ldr	r3, [pc, #88]	; (8012b64 <rand+0x5c>)
 8012b0a:	b510      	push	{r4, lr}
 8012b0c:	681c      	ldr	r4, [r3, #0]
 8012b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b10:	b9b3      	cbnz	r3, 8012b40 <rand+0x38>
 8012b12:	2018      	movs	r0, #24
 8012b14:	f000 fc74 	bl	8013400 <malloc>
 8012b18:	63a0      	str	r0, [r4, #56]	; 0x38
 8012b1a:	b928      	cbnz	r0, 8012b28 <rand+0x20>
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	4b12      	ldr	r3, [pc, #72]	; (8012b68 <rand+0x60>)
 8012b20:	4812      	ldr	r0, [pc, #72]	; (8012b6c <rand+0x64>)
 8012b22:	214e      	movs	r1, #78	; 0x4e
 8012b24:	f000 fa1c 	bl	8012f60 <__assert_func>
 8012b28:	4a11      	ldr	r2, [pc, #68]	; (8012b70 <rand+0x68>)
 8012b2a:	4b12      	ldr	r3, [pc, #72]	; (8012b74 <rand+0x6c>)
 8012b2c:	e9c0 2300 	strd	r2, r3, [r0]
 8012b30:	4b11      	ldr	r3, [pc, #68]	; (8012b78 <rand+0x70>)
 8012b32:	6083      	str	r3, [r0, #8]
 8012b34:	230b      	movs	r3, #11
 8012b36:	8183      	strh	r3, [r0, #12]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012b40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012b42:	4a0e      	ldr	r2, [pc, #56]	; (8012b7c <rand+0x74>)
 8012b44:	6920      	ldr	r0, [r4, #16]
 8012b46:	6963      	ldr	r3, [r4, #20]
 8012b48:	490d      	ldr	r1, [pc, #52]	; (8012b80 <rand+0x78>)
 8012b4a:	4342      	muls	r2, r0
 8012b4c:	fb01 2203 	mla	r2, r1, r3, r2
 8012b50:	fba0 0101 	umull	r0, r1, r0, r1
 8012b54:	1c43      	adds	r3, r0, #1
 8012b56:	eb42 0001 	adc.w	r0, r2, r1
 8012b5a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012b5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012b62:	bd10      	pop	{r4, pc}
 8012b64:	2000001c 	.word	0x2000001c
 8012b68:	08016d88 	.word	0x08016d88
 8012b6c:	08016d9f 	.word	0x08016d9f
 8012b70:	abcd330e 	.word	0xabcd330e
 8012b74:	e66d1234 	.word	0xe66d1234
 8012b78:	0005deec 	.word	0x0005deec
 8012b7c:	5851f42d 	.word	0x5851f42d
 8012b80:	4c957f2d 	.word	0x4c957f2d

08012b84 <setvbuf>:
 8012b84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b88:	461d      	mov	r5, r3
 8012b8a:	4b5d      	ldr	r3, [pc, #372]	; (8012d00 <setvbuf+0x17c>)
 8012b8c:	681f      	ldr	r7, [r3, #0]
 8012b8e:	4604      	mov	r4, r0
 8012b90:	460e      	mov	r6, r1
 8012b92:	4690      	mov	r8, r2
 8012b94:	b127      	cbz	r7, 8012ba0 <setvbuf+0x1c>
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	b913      	cbnz	r3, 8012ba0 <setvbuf+0x1c>
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	f000 fb18 	bl	80131d0 <__sinit>
 8012ba0:	4b58      	ldr	r3, [pc, #352]	; (8012d04 <setvbuf+0x180>)
 8012ba2:	429c      	cmp	r4, r3
 8012ba4:	d167      	bne.n	8012c76 <setvbuf+0xf2>
 8012ba6:	687c      	ldr	r4, [r7, #4]
 8012ba8:	f1b8 0f02 	cmp.w	r8, #2
 8012bac:	d006      	beq.n	8012bbc <setvbuf+0x38>
 8012bae:	f1b8 0f01 	cmp.w	r8, #1
 8012bb2:	f200 809f 	bhi.w	8012cf4 <setvbuf+0x170>
 8012bb6:	2d00      	cmp	r5, #0
 8012bb8:	f2c0 809c 	blt.w	8012cf4 <setvbuf+0x170>
 8012bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bbe:	07db      	lsls	r3, r3, #31
 8012bc0:	d405      	bmi.n	8012bce <setvbuf+0x4a>
 8012bc2:	89a3      	ldrh	r3, [r4, #12]
 8012bc4:	0598      	lsls	r0, r3, #22
 8012bc6:	d402      	bmi.n	8012bce <setvbuf+0x4a>
 8012bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bca:	f000 fbb1 	bl	8013330 <__retarget_lock_acquire_recursive>
 8012bce:	4621      	mov	r1, r4
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	f000 fa69 	bl	80130a8 <_fflush_r>
 8012bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bd8:	b141      	cbz	r1, 8012bec <setvbuf+0x68>
 8012bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bde:	4299      	cmp	r1, r3
 8012be0:	d002      	beq.n	8012be8 <setvbuf+0x64>
 8012be2:	4638      	mov	r0, r7
 8012be4:	f000 fc14 	bl	8013410 <_free_r>
 8012be8:	2300      	movs	r3, #0
 8012bea:	6363      	str	r3, [r4, #52]	; 0x34
 8012bec:	2300      	movs	r3, #0
 8012bee:	61a3      	str	r3, [r4, #24]
 8012bf0:	6063      	str	r3, [r4, #4]
 8012bf2:	89a3      	ldrh	r3, [r4, #12]
 8012bf4:	0619      	lsls	r1, r3, #24
 8012bf6:	d503      	bpl.n	8012c00 <setvbuf+0x7c>
 8012bf8:	6921      	ldr	r1, [r4, #16]
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	f000 fc08 	bl	8013410 <_free_r>
 8012c00:	89a3      	ldrh	r3, [r4, #12]
 8012c02:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012c06:	f023 0303 	bic.w	r3, r3, #3
 8012c0a:	f1b8 0f02 	cmp.w	r8, #2
 8012c0e:	81a3      	strh	r3, [r4, #12]
 8012c10:	d06c      	beq.n	8012cec <setvbuf+0x168>
 8012c12:	ab01      	add	r3, sp, #4
 8012c14:	466a      	mov	r2, sp
 8012c16:	4621      	mov	r1, r4
 8012c18:	4638      	mov	r0, r7
 8012c1a:	f000 fb8b 	bl	8013334 <__swhatbuf_r>
 8012c1e:	89a3      	ldrh	r3, [r4, #12]
 8012c20:	4318      	orrs	r0, r3
 8012c22:	81a0      	strh	r0, [r4, #12]
 8012c24:	2d00      	cmp	r5, #0
 8012c26:	d130      	bne.n	8012c8a <setvbuf+0x106>
 8012c28:	9d00      	ldr	r5, [sp, #0]
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f000 fbe8 	bl	8013400 <malloc>
 8012c30:	4606      	mov	r6, r0
 8012c32:	2800      	cmp	r0, #0
 8012c34:	d155      	bne.n	8012ce2 <setvbuf+0x15e>
 8012c36:	f8dd 9000 	ldr.w	r9, [sp]
 8012c3a:	45a9      	cmp	r9, r5
 8012c3c:	d14a      	bne.n	8012cd4 <setvbuf+0x150>
 8012c3e:	f04f 35ff 	mov.w	r5, #4294967295
 8012c42:	2200      	movs	r2, #0
 8012c44:	60a2      	str	r2, [r4, #8]
 8012c46:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8012c4a:	6022      	str	r2, [r4, #0]
 8012c4c:	6122      	str	r2, [r4, #16]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c54:	6162      	str	r2, [r4, #20]
 8012c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c58:	f043 0302 	orr.w	r3, r3, #2
 8012c5c:	07d2      	lsls	r2, r2, #31
 8012c5e:	81a3      	strh	r3, [r4, #12]
 8012c60:	d405      	bmi.n	8012c6e <setvbuf+0xea>
 8012c62:	f413 7f00 	tst.w	r3, #512	; 0x200
 8012c66:	d102      	bne.n	8012c6e <setvbuf+0xea>
 8012c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c6a:	f000 fb62 	bl	8013332 <__retarget_lock_release_recursive>
 8012c6e:	4628      	mov	r0, r5
 8012c70:	b003      	add	sp, #12
 8012c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c76:	4b24      	ldr	r3, [pc, #144]	; (8012d08 <setvbuf+0x184>)
 8012c78:	429c      	cmp	r4, r3
 8012c7a:	d101      	bne.n	8012c80 <setvbuf+0xfc>
 8012c7c:	68bc      	ldr	r4, [r7, #8]
 8012c7e:	e793      	b.n	8012ba8 <setvbuf+0x24>
 8012c80:	4b22      	ldr	r3, [pc, #136]	; (8012d0c <setvbuf+0x188>)
 8012c82:	429c      	cmp	r4, r3
 8012c84:	bf08      	it	eq
 8012c86:	68fc      	ldreq	r4, [r7, #12]
 8012c88:	e78e      	b.n	8012ba8 <setvbuf+0x24>
 8012c8a:	2e00      	cmp	r6, #0
 8012c8c:	d0cd      	beq.n	8012c2a <setvbuf+0xa6>
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	b913      	cbnz	r3, 8012c98 <setvbuf+0x114>
 8012c92:	4638      	mov	r0, r7
 8012c94:	f000 fa9c 	bl	80131d0 <__sinit>
 8012c98:	f1b8 0f01 	cmp.w	r8, #1
 8012c9c:	bf08      	it	eq
 8012c9e:	89a3      	ldrheq	r3, [r4, #12]
 8012ca0:	6026      	str	r6, [r4, #0]
 8012ca2:	bf04      	itt	eq
 8012ca4:	f043 0301 	orreq.w	r3, r3, #1
 8012ca8:	81a3      	strheq	r3, [r4, #12]
 8012caa:	89a2      	ldrh	r2, [r4, #12]
 8012cac:	f012 0308 	ands.w	r3, r2, #8
 8012cb0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8012cb4:	d01c      	beq.n	8012cf0 <setvbuf+0x16c>
 8012cb6:	07d3      	lsls	r3, r2, #31
 8012cb8:	bf41      	itttt	mi
 8012cba:	2300      	movmi	r3, #0
 8012cbc:	426d      	negmi	r5, r5
 8012cbe:	60a3      	strmi	r3, [r4, #8]
 8012cc0:	61a5      	strmi	r5, [r4, #24]
 8012cc2:	bf58      	it	pl
 8012cc4:	60a5      	strpl	r5, [r4, #8]
 8012cc6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012cc8:	f015 0501 	ands.w	r5, r5, #1
 8012ccc:	d115      	bne.n	8012cfa <setvbuf+0x176>
 8012cce:	f412 7f00 	tst.w	r2, #512	; 0x200
 8012cd2:	e7c8      	b.n	8012c66 <setvbuf+0xe2>
 8012cd4:	4648      	mov	r0, r9
 8012cd6:	f000 fb93 	bl	8013400 <malloc>
 8012cda:	4606      	mov	r6, r0
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d0ae      	beq.n	8012c3e <setvbuf+0xba>
 8012ce0:	464d      	mov	r5, r9
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ce8:	81a3      	strh	r3, [r4, #12]
 8012cea:	e7d0      	b.n	8012c8e <setvbuf+0x10a>
 8012cec:	2500      	movs	r5, #0
 8012cee:	e7a8      	b.n	8012c42 <setvbuf+0xbe>
 8012cf0:	60a3      	str	r3, [r4, #8]
 8012cf2:	e7e8      	b.n	8012cc6 <setvbuf+0x142>
 8012cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8012cf8:	e7b9      	b.n	8012c6e <setvbuf+0xea>
 8012cfa:	2500      	movs	r5, #0
 8012cfc:	e7b7      	b.n	8012c6e <setvbuf+0xea>
 8012cfe:	bf00      	nop
 8012d00:	2000001c 	.word	0x2000001c
 8012d04:	08016e58 	.word	0x08016e58
 8012d08:	08016e78 	.word	0x08016e78
 8012d0c:	08016e38 	.word	0x08016e38

08012d10 <sniprintf>:
 8012d10:	b40c      	push	{r2, r3}
 8012d12:	b530      	push	{r4, r5, lr}
 8012d14:	4b17      	ldr	r3, [pc, #92]	; (8012d74 <sniprintf+0x64>)
 8012d16:	1e0c      	subs	r4, r1, #0
 8012d18:	681d      	ldr	r5, [r3, #0]
 8012d1a:	b09d      	sub	sp, #116	; 0x74
 8012d1c:	da08      	bge.n	8012d30 <sniprintf+0x20>
 8012d1e:	238b      	movs	r3, #139	; 0x8b
 8012d20:	602b      	str	r3, [r5, #0]
 8012d22:	f04f 30ff 	mov.w	r0, #4294967295
 8012d26:	b01d      	add	sp, #116	; 0x74
 8012d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d2c:	b002      	add	sp, #8
 8012d2e:	4770      	bx	lr
 8012d30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012d34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012d38:	bf14      	ite	ne
 8012d3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012d3e:	4623      	moveq	r3, r4
 8012d40:	9304      	str	r3, [sp, #16]
 8012d42:	9307      	str	r3, [sp, #28]
 8012d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d48:	9002      	str	r0, [sp, #8]
 8012d4a:	9006      	str	r0, [sp, #24]
 8012d4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012d52:	ab21      	add	r3, sp, #132	; 0x84
 8012d54:	a902      	add	r1, sp, #8
 8012d56:	4628      	mov	r0, r5
 8012d58:	9301      	str	r3, [sp, #4]
 8012d5a:	f000 fc95 	bl	8013688 <_svfiprintf_r>
 8012d5e:	1c43      	adds	r3, r0, #1
 8012d60:	bfbc      	itt	lt
 8012d62:	238b      	movlt	r3, #139	; 0x8b
 8012d64:	602b      	strlt	r3, [r5, #0]
 8012d66:	2c00      	cmp	r4, #0
 8012d68:	d0dd      	beq.n	8012d26 <sniprintf+0x16>
 8012d6a:	9b02      	ldr	r3, [sp, #8]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	701a      	strb	r2, [r3, #0]
 8012d70:	e7d9      	b.n	8012d26 <sniprintf+0x16>
 8012d72:	bf00      	nop
 8012d74:	2000001c 	.word	0x2000001c

08012d78 <siprintf>:
 8012d78:	b40e      	push	{r1, r2, r3}
 8012d7a:	b500      	push	{lr}
 8012d7c:	b09c      	sub	sp, #112	; 0x70
 8012d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8012d80:	9002      	str	r0, [sp, #8]
 8012d82:	9006      	str	r0, [sp, #24]
 8012d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d88:	4809      	ldr	r0, [pc, #36]	; (8012db0 <siprintf+0x38>)
 8012d8a:	9107      	str	r1, [sp, #28]
 8012d8c:	9104      	str	r1, [sp, #16]
 8012d8e:	4909      	ldr	r1, [pc, #36]	; (8012db4 <siprintf+0x3c>)
 8012d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d94:	9105      	str	r1, [sp, #20]
 8012d96:	6800      	ldr	r0, [r0, #0]
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	a902      	add	r1, sp, #8
 8012d9c:	f000 fc74 	bl	8013688 <_svfiprintf_r>
 8012da0:	9b02      	ldr	r3, [sp, #8]
 8012da2:	2200      	movs	r2, #0
 8012da4:	701a      	strb	r2, [r3, #0]
 8012da6:	b01c      	add	sp, #112	; 0x70
 8012da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dac:	b003      	add	sp, #12
 8012dae:	4770      	bx	lr
 8012db0:	2000001c 	.word	0x2000001c
 8012db4:	ffff0208 	.word	0xffff0208

08012db8 <strncpy>:
 8012db8:	b510      	push	{r4, lr}
 8012dba:	3901      	subs	r1, #1
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	b132      	cbz	r2, 8012dce <strncpy+0x16>
 8012dc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012dc4:	f803 4b01 	strb.w	r4, [r3], #1
 8012dc8:	3a01      	subs	r2, #1
 8012dca:	2c00      	cmp	r4, #0
 8012dcc:	d1f7      	bne.n	8012dbe <strncpy+0x6>
 8012dce:	441a      	add	r2, r3
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	4293      	cmp	r3, r2
 8012dd4:	d100      	bne.n	8012dd8 <strncpy+0x20>
 8012dd6:	bd10      	pop	{r4, pc}
 8012dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8012ddc:	e7f9      	b.n	8012dd2 <strncpy+0x1a>
	...

08012de0 <__swbuf_r>:
 8012de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012de2:	460e      	mov	r6, r1
 8012de4:	4614      	mov	r4, r2
 8012de6:	4605      	mov	r5, r0
 8012de8:	b118      	cbz	r0, 8012df2 <__swbuf_r+0x12>
 8012dea:	6983      	ldr	r3, [r0, #24]
 8012dec:	b90b      	cbnz	r3, 8012df2 <__swbuf_r+0x12>
 8012dee:	f000 f9ef 	bl	80131d0 <__sinit>
 8012df2:	4b21      	ldr	r3, [pc, #132]	; (8012e78 <__swbuf_r+0x98>)
 8012df4:	429c      	cmp	r4, r3
 8012df6:	d12b      	bne.n	8012e50 <__swbuf_r+0x70>
 8012df8:	686c      	ldr	r4, [r5, #4]
 8012dfa:	69a3      	ldr	r3, [r4, #24]
 8012dfc:	60a3      	str	r3, [r4, #8]
 8012dfe:	89a3      	ldrh	r3, [r4, #12]
 8012e00:	071a      	lsls	r2, r3, #28
 8012e02:	d52f      	bpl.n	8012e64 <__swbuf_r+0x84>
 8012e04:	6923      	ldr	r3, [r4, #16]
 8012e06:	b36b      	cbz	r3, 8012e64 <__swbuf_r+0x84>
 8012e08:	6923      	ldr	r3, [r4, #16]
 8012e0a:	6820      	ldr	r0, [r4, #0]
 8012e0c:	1ac0      	subs	r0, r0, r3
 8012e0e:	6963      	ldr	r3, [r4, #20]
 8012e10:	b2f6      	uxtb	r6, r6
 8012e12:	4283      	cmp	r3, r0
 8012e14:	4637      	mov	r7, r6
 8012e16:	dc04      	bgt.n	8012e22 <__swbuf_r+0x42>
 8012e18:	4621      	mov	r1, r4
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f000 f944 	bl	80130a8 <_fflush_r>
 8012e20:	bb30      	cbnz	r0, 8012e70 <__swbuf_r+0x90>
 8012e22:	68a3      	ldr	r3, [r4, #8]
 8012e24:	3b01      	subs	r3, #1
 8012e26:	60a3      	str	r3, [r4, #8]
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	6022      	str	r2, [r4, #0]
 8012e2e:	701e      	strb	r6, [r3, #0]
 8012e30:	6963      	ldr	r3, [r4, #20]
 8012e32:	3001      	adds	r0, #1
 8012e34:	4283      	cmp	r3, r0
 8012e36:	d004      	beq.n	8012e42 <__swbuf_r+0x62>
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	07db      	lsls	r3, r3, #31
 8012e3c:	d506      	bpl.n	8012e4c <__swbuf_r+0x6c>
 8012e3e:	2e0a      	cmp	r6, #10
 8012e40:	d104      	bne.n	8012e4c <__swbuf_r+0x6c>
 8012e42:	4621      	mov	r1, r4
 8012e44:	4628      	mov	r0, r5
 8012e46:	f000 f92f 	bl	80130a8 <_fflush_r>
 8012e4a:	b988      	cbnz	r0, 8012e70 <__swbuf_r+0x90>
 8012e4c:	4638      	mov	r0, r7
 8012e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e50:	4b0a      	ldr	r3, [pc, #40]	; (8012e7c <__swbuf_r+0x9c>)
 8012e52:	429c      	cmp	r4, r3
 8012e54:	d101      	bne.n	8012e5a <__swbuf_r+0x7a>
 8012e56:	68ac      	ldr	r4, [r5, #8]
 8012e58:	e7cf      	b.n	8012dfa <__swbuf_r+0x1a>
 8012e5a:	4b09      	ldr	r3, [pc, #36]	; (8012e80 <__swbuf_r+0xa0>)
 8012e5c:	429c      	cmp	r4, r3
 8012e5e:	bf08      	it	eq
 8012e60:	68ec      	ldreq	r4, [r5, #12]
 8012e62:	e7ca      	b.n	8012dfa <__swbuf_r+0x1a>
 8012e64:	4621      	mov	r1, r4
 8012e66:	4628      	mov	r0, r5
 8012e68:	f000 f80c 	bl	8012e84 <__swsetup_r>
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	d0cb      	beq.n	8012e08 <__swbuf_r+0x28>
 8012e70:	f04f 37ff 	mov.w	r7, #4294967295
 8012e74:	e7ea      	b.n	8012e4c <__swbuf_r+0x6c>
 8012e76:	bf00      	nop
 8012e78:	08016e58 	.word	0x08016e58
 8012e7c:	08016e78 	.word	0x08016e78
 8012e80:	08016e38 	.word	0x08016e38

08012e84 <__swsetup_r>:
 8012e84:	4b32      	ldr	r3, [pc, #200]	; (8012f50 <__swsetup_r+0xcc>)
 8012e86:	b570      	push	{r4, r5, r6, lr}
 8012e88:	681d      	ldr	r5, [r3, #0]
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	460c      	mov	r4, r1
 8012e8e:	b125      	cbz	r5, 8012e9a <__swsetup_r+0x16>
 8012e90:	69ab      	ldr	r3, [r5, #24]
 8012e92:	b913      	cbnz	r3, 8012e9a <__swsetup_r+0x16>
 8012e94:	4628      	mov	r0, r5
 8012e96:	f000 f99b 	bl	80131d0 <__sinit>
 8012e9a:	4b2e      	ldr	r3, [pc, #184]	; (8012f54 <__swsetup_r+0xd0>)
 8012e9c:	429c      	cmp	r4, r3
 8012e9e:	d10f      	bne.n	8012ec0 <__swsetup_r+0x3c>
 8012ea0:	686c      	ldr	r4, [r5, #4]
 8012ea2:	89a3      	ldrh	r3, [r4, #12]
 8012ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ea8:	0719      	lsls	r1, r3, #28
 8012eaa:	d42c      	bmi.n	8012f06 <__swsetup_r+0x82>
 8012eac:	06dd      	lsls	r5, r3, #27
 8012eae:	d411      	bmi.n	8012ed4 <__swsetup_r+0x50>
 8012eb0:	2309      	movs	r3, #9
 8012eb2:	6033      	str	r3, [r6, #0]
 8012eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012eb8:	81a3      	strh	r3, [r4, #12]
 8012eba:	f04f 30ff 	mov.w	r0, #4294967295
 8012ebe:	e03e      	b.n	8012f3e <__swsetup_r+0xba>
 8012ec0:	4b25      	ldr	r3, [pc, #148]	; (8012f58 <__swsetup_r+0xd4>)
 8012ec2:	429c      	cmp	r4, r3
 8012ec4:	d101      	bne.n	8012eca <__swsetup_r+0x46>
 8012ec6:	68ac      	ldr	r4, [r5, #8]
 8012ec8:	e7eb      	b.n	8012ea2 <__swsetup_r+0x1e>
 8012eca:	4b24      	ldr	r3, [pc, #144]	; (8012f5c <__swsetup_r+0xd8>)
 8012ecc:	429c      	cmp	r4, r3
 8012ece:	bf08      	it	eq
 8012ed0:	68ec      	ldreq	r4, [r5, #12]
 8012ed2:	e7e6      	b.n	8012ea2 <__swsetup_r+0x1e>
 8012ed4:	0758      	lsls	r0, r3, #29
 8012ed6:	d512      	bpl.n	8012efe <__swsetup_r+0x7a>
 8012ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eda:	b141      	cbz	r1, 8012eee <__swsetup_r+0x6a>
 8012edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ee0:	4299      	cmp	r1, r3
 8012ee2:	d002      	beq.n	8012eea <__swsetup_r+0x66>
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	f000 fa93 	bl	8013410 <_free_r>
 8012eea:	2300      	movs	r3, #0
 8012eec:	6363      	str	r3, [r4, #52]	; 0x34
 8012eee:	89a3      	ldrh	r3, [r4, #12]
 8012ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ef4:	81a3      	strh	r3, [r4, #12]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	6063      	str	r3, [r4, #4]
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	6023      	str	r3, [r4, #0]
 8012efe:	89a3      	ldrh	r3, [r4, #12]
 8012f00:	f043 0308 	orr.w	r3, r3, #8
 8012f04:	81a3      	strh	r3, [r4, #12]
 8012f06:	6923      	ldr	r3, [r4, #16]
 8012f08:	b94b      	cbnz	r3, 8012f1e <__swsetup_r+0x9a>
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f14:	d003      	beq.n	8012f1e <__swsetup_r+0x9a>
 8012f16:	4621      	mov	r1, r4
 8012f18:	4630      	mov	r0, r6
 8012f1a:	f000 fa31 	bl	8013380 <__smakebuf_r>
 8012f1e:	89a0      	ldrh	r0, [r4, #12]
 8012f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f24:	f010 0301 	ands.w	r3, r0, #1
 8012f28:	d00a      	beq.n	8012f40 <__swsetup_r+0xbc>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	60a3      	str	r3, [r4, #8]
 8012f2e:	6963      	ldr	r3, [r4, #20]
 8012f30:	425b      	negs	r3, r3
 8012f32:	61a3      	str	r3, [r4, #24]
 8012f34:	6923      	ldr	r3, [r4, #16]
 8012f36:	b943      	cbnz	r3, 8012f4a <__swsetup_r+0xc6>
 8012f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f3c:	d1ba      	bne.n	8012eb4 <__swsetup_r+0x30>
 8012f3e:	bd70      	pop	{r4, r5, r6, pc}
 8012f40:	0781      	lsls	r1, r0, #30
 8012f42:	bf58      	it	pl
 8012f44:	6963      	ldrpl	r3, [r4, #20]
 8012f46:	60a3      	str	r3, [r4, #8]
 8012f48:	e7f4      	b.n	8012f34 <__swsetup_r+0xb0>
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	e7f7      	b.n	8012f3e <__swsetup_r+0xba>
 8012f4e:	bf00      	nop
 8012f50:	2000001c 	.word	0x2000001c
 8012f54:	08016e58 	.word	0x08016e58
 8012f58:	08016e78 	.word	0x08016e78
 8012f5c:	08016e38 	.word	0x08016e38

08012f60 <__assert_func>:
 8012f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f62:	4614      	mov	r4, r2
 8012f64:	461a      	mov	r2, r3
 8012f66:	4b09      	ldr	r3, [pc, #36]	; (8012f8c <__assert_func+0x2c>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4605      	mov	r5, r0
 8012f6c:	68d8      	ldr	r0, [r3, #12]
 8012f6e:	b14c      	cbz	r4, 8012f84 <__assert_func+0x24>
 8012f70:	4b07      	ldr	r3, [pc, #28]	; (8012f90 <__assert_func+0x30>)
 8012f72:	9100      	str	r1, [sp, #0]
 8012f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f78:	4906      	ldr	r1, [pc, #24]	; (8012f94 <__assert_func+0x34>)
 8012f7a:	462b      	mov	r3, r5
 8012f7c:	f000 f9a6 	bl	80132cc <fiprintf>
 8012f80:	f000 ffd6 	bl	8013f30 <abort>
 8012f84:	4b04      	ldr	r3, [pc, #16]	; (8012f98 <__assert_func+0x38>)
 8012f86:	461c      	mov	r4, r3
 8012f88:	e7f3      	b.n	8012f72 <__assert_func+0x12>
 8012f8a:	bf00      	nop
 8012f8c:	2000001c 	.word	0x2000001c
 8012f90:	08016dfa 	.word	0x08016dfa
 8012f94:	08016e07 	.word	0x08016e07
 8012f98:	08016e35 	.word	0x08016e35

08012f9c <__sflush_r>:
 8012f9c:	898a      	ldrh	r2, [r1, #12]
 8012f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	0710      	lsls	r0, r2, #28
 8012fa6:	460c      	mov	r4, r1
 8012fa8:	d458      	bmi.n	801305c <__sflush_r+0xc0>
 8012faa:	684b      	ldr	r3, [r1, #4]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	dc05      	bgt.n	8012fbc <__sflush_r+0x20>
 8012fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	dc02      	bgt.n	8012fbc <__sflush_r+0x20>
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fbe:	2e00      	cmp	r6, #0
 8012fc0:	d0f9      	beq.n	8012fb6 <__sflush_r+0x1a>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012fc8:	682f      	ldr	r7, [r5, #0]
 8012fca:	602b      	str	r3, [r5, #0]
 8012fcc:	d032      	beq.n	8013034 <__sflush_r+0x98>
 8012fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012fd0:	89a3      	ldrh	r3, [r4, #12]
 8012fd2:	075a      	lsls	r2, r3, #29
 8012fd4:	d505      	bpl.n	8012fe2 <__sflush_r+0x46>
 8012fd6:	6863      	ldr	r3, [r4, #4]
 8012fd8:	1ac0      	subs	r0, r0, r3
 8012fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fdc:	b10b      	cbz	r3, 8012fe2 <__sflush_r+0x46>
 8012fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012fe0:	1ac0      	subs	r0, r0, r3
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fe8:	6a21      	ldr	r1, [r4, #32]
 8012fea:	4628      	mov	r0, r5
 8012fec:	47b0      	blx	r6
 8012fee:	1c43      	adds	r3, r0, #1
 8012ff0:	89a3      	ldrh	r3, [r4, #12]
 8012ff2:	d106      	bne.n	8013002 <__sflush_r+0x66>
 8012ff4:	6829      	ldr	r1, [r5, #0]
 8012ff6:	291d      	cmp	r1, #29
 8012ff8:	d82c      	bhi.n	8013054 <__sflush_r+0xb8>
 8012ffa:	4a2a      	ldr	r2, [pc, #168]	; (80130a4 <__sflush_r+0x108>)
 8012ffc:	40ca      	lsrs	r2, r1
 8012ffe:	07d6      	lsls	r6, r2, #31
 8013000:	d528      	bpl.n	8013054 <__sflush_r+0xb8>
 8013002:	2200      	movs	r2, #0
 8013004:	6062      	str	r2, [r4, #4]
 8013006:	04d9      	lsls	r1, r3, #19
 8013008:	6922      	ldr	r2, [r4, #16]
 801300a:	6022      	str	r2, [r4, #0]
 801300c:	d504      	bpl.n	8013018 <__sflush_r+0x7c>
 801300e:	1c42      	adds	r2, r0, #1
 8013010:	d101      	bne.n	8013016 <__sflush_r+0x7a>
 8013012:	682b      	ldr	r3, [r5, #0]
 8013014:	b903      	cbnz	r3, 8013018 <__sflush_r+0x7c>
 8013016:	6560      	str	r0, [r4, #84]	; 0x54
 8013018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801301a:	602f      	str	r7, [r5, #0]
 801301c:	2900      	cmp	r1, #0
 801301e:	d0ca      	beq.n	8012fb6 <__sflush_r+0x1a>
 8013020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013024:	4299      	cmp	r1, r3
 8013026:	d002      	beq.n	801302e <__sflush_r+0x92>
 8013028:	4628      	mov	r0, r5
 801302a:	f000 f9f1 	bl	8013410 <_free_r>
 801302e:	2000      	movs	r0, #0
 8013030:	6360      	str	r0, [r4, #52]	; 0x34
 8013032:	e7c1      	b.n	8012fb8 <__sflush_r+0x1c>
 8013034:	6a21      	ldr	r1, [r4, #32]
 8013036:	2301      	movs	r3, #1
 8013038:	4628      	mov	r0, r5
 801303a:	47b0      	blx	r6
 801303c:	1c41      	adds	r1, r0, #1
 801303e:	d1c7      	bne.n	8012fd0 <__sflush_r+0x34>
 8013040:	682b      	ldr	r3, [r5, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d0c4      	beq.n	8012fd0 <__sflush_r+0x34>
 8013046:	2b1d      	cmp	r3, #29
 8013048:	d001      	beq.n	801304e <__sflush_r+0xb2>
 801304a:	2b16      	cmp	r3, #22
 801304c:	d101      	bne.n	8013052 <__sflush_r+0xb6>
 801304e:	602f      	str	r7, [r5, #0]
 8013050:	e7b1      	b.n	8012fb6 <__sflush_r+0x1a>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013058:	81a3      	strh	r3, [r4, #12]
 801305a:	e7ad      	b.n	8012fb8 <__sflush_r+0x1c>
 801305c:	690f      	ldr	r7, [r1, #16]
 801305e:	2f00      	cmp	r7, #0
 8013060:	d0a9      	beq.n	8012fb6 <__sflush_r+0x1a>
 8013062:	0793      	lsls	r3, r2, #30
 8013064:	680e      	ldr	r6, [r1, #0]
 8013066:	bf08      	it	eq
 8013068:	694b      	ldreq	r3, [r1, #20]
 801306a:	600f      	str	r7, [r1, #0]
 801306c:	bf18      	it	ne
 801306e:	2300      	movne	r3, #0
 8013070:	eba6 0807 	sub.w	r8, r6, r7
 8013074:	608b      	str	r3, [r1, #8]
 8013076:	f1b8 0f00 	cmp.w	r8, #0
 801307a:	dd9c      	ble.n	8012fb6 <__sflush_r+0x1a>
 801307c:	6a21      	ldr	r1, [r4, #32]
 801307e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013080:	4643      	mov	r3, r8
 8013082:	463a      	mov	r2, r7
 8013084:	4628      	mov	r0, r5
 8013086:	47b0      	blx	r6
 8013088:	2800      	cmp	r0, #0
 801308a:	dc06      	bgt.n	801309a <__sflush_r+0xfe>
 801308c:	89a3      	ldrh	r3, [r4, #12]
 801308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013092:	81a3      	strh	r3, [r4, #12]
 8013094:	f04f 30ff 	mov.w	r0, #4294967295
 8013098:	e78e      	b.n	8012fb8 <__sflush_r+0x1c>
 801309a:	4407      	add	r7, r0
 801309c:	eba8 0800 	sub.w	r8, r8, r0
 80130a0:	e7e9      	b.n	8013076 <__sflush_r+0xda>
 80130a2:	bf00      	nop
 80130a4:	20400001 	.word	0x20400001

080130a8 <_fflush_r>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	690b      	ldr	r3, [r1, #16]
 80130ac:	4605      	mov	r5, r0
 80130ae:	460c      	mov	r4, r1
 80130b0:	b913      	cbnz	r3, 80130b8 <_fflush_r+0x10>
 80130b2:	2500      	movs	r5, #0
 80130b4:	4628      	mov	r0, r5
 80130b6:	bd38      	pop	{r3, r4, r5, pc}
 80130b8:	b118      	cbz	r0, 80130c2 <_fflush_r+0x1a>
 80130ba:	6983      	ldr	r3, [r0, #24]
 80130bc:	b90b      	cbnz	r3, 80130c2 <_fflush_r+0x1a>
 80130be:	f000 f887 	bl	80131d0 <__sinit>
 80130c2:	4b14      	ldr	r3, [pc, #80]	; (8013114 <_fflush_r+0x6c>)
 80130c4:	429c      	cmp	r4, r3
 80130c6:	d11b      	bne.n	8013100 <_fflush_r+0x58>
 80130c8:	686c      	ldr	r4, [r5, #4]
 80130ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d0ef      	beq.n	80130b2 <_fflush_r+0xa>
 80130d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80130d4:	07d0      	lsls	r0, r2, #31
 80130d6:	d404      	bmi.n	80130e2 <_fflush_r+0x3a>
 80130d8:	0599      	lsls	r1, r3, #22
 80130da:	d402      	bmi.n	80130e2 <_fflush_r+0x3a>
 80130dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130de:	f000 f927 	bl	8013330 <__retarget_lock_acquire_recursive>
 80130e2:	4628      	mov	r0, r5
 80130e4:	4621      	mov	r1, r4
 80130e6:	f7ff ff59 	bl	8012f9c <__sflush_r>
 80130ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130ec:	07da      	lsls	r2, r3, #31
 80130ee:	4605      	mov	r5, r0
 80130f0:	d4e0      	bmi.n	80130b4 <_fflush_r+0xc>
 80130f2:	89a3      	ldrh	r3, [r4, #12]
 80130f4:	059b      	lsls	r3, r3, #22
 80130f6:	d4dd      	bmi.n	80130b4 <_fflush_r+0xc>
 80130f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130fa:	f000 f91a 	bl	8013332 <__retarget_lock_release_recursive>
 80130fe:	e7d9      	b.n	80130b4 <_fflush_r+0xc>
 8013100:	4b05      	ldr	r3, [pc, #20]	; (8013118 <_fflush_r+0x70>)
 8013102:	429c      	cmp	r4, r3
 8013104:	d101      	bne.n	801310a <_fflush_r+0x62>
 8013106:	68ac      	ldr	r4, [r5, #8]
 8013108:	e7df      	b.n	80130ca <_fflush_r+0x22>
 801310a:	4b04      	ldr	r3, [pc, #16]	; (801311c <_fflush_r+0x74>)
 801310c:	429c      	cmp	r4, r3
 801310e:	bf08      	it	eq
 8013110:	68ec      	ldreq	r4, [r5, #12]
 8013112:	e7da      	b.n	80130ca <_fflush_r+0x22>
 8013114:	08016e58 	.word	0x08016e58
 8013118:	08016e78 	.word	0x08016e78
 801311c:	08016e38 	.word	0x08016e38

08013120 <std>:
 8013120:	2300      	movs	r3, #0
 8013122:	b510      	push	{r4, lr}
 8013124:	4604      	mov	r4, r0
 8013126:	e9c0 3300 	strd	r3, r3, [r0]
 801312a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801312e:	6083      	str	r3, [r0, #8]
 8013130:	8181      	strh	r1, [r0, #12]
 8013132:	6643      	str	r3, [r0, #100]	; 0x64
 8013134:	81c2      	strh	r2, [r0, #14]
 8013136:	6183      	str	r3, [r0, #24]
 8013138:	4619      	mov	r1, r3
 801313a:	2208      	movs	r2, #8
 801313c:	305c      	adds	r0, #92	; 0x5c
 801313e:	f7ff fc4d 	bl	80129dc <memset>
 8013142:	4b05      	ldr	r3, [pc, #20]	; (8013158 <std+0x38>)
 8013144:	6263      	str	r3, [r4, #36]	; 0x24
 8013146:	4b05      	ldr	r3, [pc, #20]	; (801315c <std+0x3c>)
 8013148:	62a3      	str	r3, [r4, #40]	; 0x28
 801314a:	4b05      	ldr	r3, [pc, #20]	; (8013160 <std+0x40>)
 801314c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801314e:	4b05      	ldr	r3, [pc, #20]	; (8013164 <std+0x44>)
 8013150:	6224      	str	r4, [r4, #32]
 8013152:	6323      	str	r3, [r4, #48]	; 0x30
 8013154:	bd10      	pop	{r4, pc}
 8013156:	bf00      	nop
 8013158:	08013e85 	.word	0x08013e85
 801315c:	08013ea7 	.word	0x08013ea7
 8013160:	08013edf 	.word	0x08013edf
 8013164:	08013f03 	.word	0x08013f03

08013168 <_cleanup_r>:
 8013168:	4901      	ldr	r1, [pc, #4]	; (8013170 <_cleanup_r+0x8>)
 801316a:	f000 b8c1 	b.w	80132f0 <_fwalk_reent>
 801316e:	bf00      	nop
 8013170:	080130a9 	.word	0x080130a9

08013174 <__sfmoreglue>:
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	2268      	movs	r2, #104	; 0x68
 8013178:	1e4d      	subs	r5, r1, #1
 801317a:	4355      	muls	r5, r2
 801317c:	460e      	mov	r6, r1
 801317e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013182:	f000 f9b1 	bl	80134e8 <_malloc_r>
 8013186:	4604      	mov	r4, r0
 8013188:	b140      	cbz	r0, 801319c <__sfmoreglue+0x28>
 801318a:	2100      	movs	r1, #0
 801318c:	e9c0 1600 	strd	r1, r6, [r0]
 8013190:	300c      	adds	r0, #12
 8013192:	60a0      	str	r0, [r4, #8]
 8013194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013198:	f7ff fc20 	bl	80129dc <memset>
 801319c:	4620      	mov	r0, r4
 801319e:	bd70      	pop	{r4, r5, r6, pc}

080131a0 <__sfp_lock_acquire>:
 80131a0:	4801      	ldr	r0, [pc, #4]	; (80131a8 <__sfp_lock_acquire+0x8>)
 80131a2:	f000 b8c5 	b.w	8013330 <__retarget_lock_acquire_recursive>
 80131a6:	bf00      	nop
 80131a8:	2000dae5 	.word	0x2000dae5

080131ac <__sfp_lock_release>:
 80131ac:	4801      	ldr	r0, [pc, #4]	; (80131b4 <__sfp_lock_release+0x8>)
 80131ae:	f000 b8c0 	b.w	8013332 <__retarget_lock_release_recursive>
 80131b2:	bf00      	nop
 80131b4:	2000dae5 	.word	0x2000dae5

080131b8 <__sinit_lock_acquire>:
 80131b8:	4801      	ldr	r0, [pc, #4]	; (80131c0 <__sinit_lock_acquire+0x8>)
 80131ba:	f000 b8b9 	b.w	8013330 <__retarget_lock_acquire_recursive>
 80131be:	bf00      	nop
 80131c0:	2000dae6 	.word	0x2000dae6

080131c4 <__sinit_lock_release>:
 80131c4:	4801      	ldr	r0, [pc, #4]	; (80131cc <__sinit_lock_release+0x8>)
 80131c6:	f000 b8b4 	b.w	8013332 <__retarget_lock_release_recursive>
 80131ca:	bf00      	nop
 80131cc:	2000dae6 	.word	0x2000dae6

080131d0 <__sinit>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	4604      	mov	r4, r0
 80131d4:	f7ff fff0 	bl	80131b8 <__sinit_lock_acquire>
 80131d8:	69a3      	ldr	r3, [r4, #24]
 80131da:	b11b      	cbz	r3, 80131e4 <__sinit+0x14>
 80131dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e0:	f7ff bff0 	b.w	80131c4 <__sinit_lock_release>
 80131e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80131e8:	6523      	str	r3, [r4, #80]	; 0x50
 80131ea:	4b13      	ldr	r3, [pc, #76]	; (8013238 <__sinit+0x68>)
 80131ec:	4a13      	ldr	r2, [pc, #76]	; (801323c <__sinit+0x6c>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80131f2:	42a3      	cmp	r3, r4
 80131f4:	bf04      	itt	eq
 80131f6:	2301      	moveq	r3, #1
 80131f8:	61a3      	streq	r3, [r4, #24]
 80131fa:	4620      	mov	r0, r4
 80131fc:	f000 f820 	bl	8013240 <__sfp>
 8013200:	6060      	str	r0, [r4, #4]
 8013202:	4620      	mov	r0, r4
 8013204:	f000 f81c 	bl	8013240 <__sfp>
 8013208:	60a0      	str	r0, [r4, #8]
 801320a:	4620      	mov	r0, r4
 801320c:	f000 f818 	bl	8013240 <__sfp>
 8013210:	2200      	movs	r2, #0
 8013212:	60e0      	str	r0, [r4, #12]
 8013214:	2104      	movs	r1, #4
 8013216:	6860      	ldr	r0, [r4, #4]
 8013218:	f7ff ff82 	bl	8013120 <std>
 801321c:	68a0      	ldr	r0, [r4, #8]
 801321e:	2201      	movs	r2, #1
 8013220:	2109      	movs	r1, #9
 8013222:	f7ff ff7d 	bl	8013120 <std>
 8013226:	68e0      	ldr	r0, [r4, #12]
 8013228:	2202      	movs	r2, #2
 801322a:	2112      	movs	r1, #18
 801322c:	f7ff ff78 	bl	8013120 <std>
 8013230:	2301      	movs	r3, #1
 8013232:	61a3      	str	r3, [r4, #24]
 8013234:	e7d2      	b.n	80131dc <__sinit+0xc>
 8013236:	bf00      	nop
 8013238:	08016d84 	.word	0x08016d84
 801323c:	08013169 	.word	0x08013169

08013240 <__sfp>:
 8013240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013242:	4607      	mov	r7, r0
 8013244:	f7ff ffac 	bl	80131a0 <__sfp_lock_acquire>
 8013248:	4b1e      	ldr	r3, [pc, #120]	; (80132c4 <__sfp+0x84>)
 801324a:	681e      	ldr	r6, [r3, #0]
 801324c:	69b3      	ldr	r3, [r6, #24]
 801324e:	b913      	cbnz	r3, 8013256 <__sfp+0x16>
 8013250:	4630      	mov	r0, r6
 8013252:	f7ff ffbd 	bl	80131d0 <__sinit>
 8013256:	3648      	adds	r6, #72	; 0x48
 8013258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801325c:	3b01      	subs	r3, #1
 801325e:	d503      	bpl.n	8013268 <__sfp+0x28>
 8013260:	6833      	ldr	r3, [r6, #0]
 8013262:	b30b      	cbz	r3, 80132a8 <__sfp+0x68>
 8013264:	6836      	ldr	r6, [r6, #0]
 8013266:	e7f7      	b.n	8013258 <__sfp+0x18>
 8013268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801326c:	b9d5      	cbnz	r5, 80132a4 <__sfp+0x64>
 801326e:	4b16      	ldr	r3, [pc, #88]	; (80132c8 <__sfp+0x88>)
 8013270:	60e3      	str	r3, [r4, #12]
 8013272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013276:	6665      	str	r5, [r4, #100]	; 0x64
 8013278:	f000 f859 	bl	801332e <__retarget_lock_init_recursive>
 801327c:	f7ff ff96 	bl	80131ac <__sfp_lock_release>
 8013280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013288:	6025      	str	r5, [r4, #0]
 801328a:	61a5      	str	r5, [r4, #24]
 801328c:	2208      	movs	r2, #8
 801328e:	4629      	mov	r1, r5
 8013290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013294:	f7ff fba2 	bl	80129dc <memset>
 8013298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801329c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80132a0:	4620      	mov	r0, r4
 80132a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132a4:	3468      	adds	r4, #104	; 0x68
 80132a6:	e7d9      	b.n	801325c <__sfp+0x1c>
 80132a8:	2104      	movs	r1, #4
 80132aa:	4638      	mov	r0, r7
 80132ac:	f7ff ff62 	bl	8013174 <__sfmoreglue>
 80132b0:	4604      	mov	r4, r0
 80132b2:	6030      	str	r0, [r6, #0]
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d1d5      	bne.n	8013264 <__sfp+0x24>
 80132b8:	f7ff ff78 	bl	80131ac <__sfp_lock_release>
 80132bc:	230c      	movs	r3, #12
 80132be:	603b      	str	r3, [r7, #0]
 80132c0:	e7ee      	b.n	80132a0 <__sfp+0x60>
 80132c2:	bf00      	nop
 80132c4:	08016d84 	.word	0x08016d84
 80132c8:	ffff0001 	.word	0xffff0001

080132cc <fiprintf>:
 80132cc:	b40e      	push	{r1, r2, r3}
 80132ce:	b503      	push	{r0, r1, lr}
 80132d0:	4601      	mov	r1, r0
 80132d2:	ab03      	add	r3, sp, #12
 80132d4:	4805      	ldr	r0, [pc, #20]	; (80132ec <fiprintf+0x20>)
 80132d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80132da:	6800      	ldr	r0, [r0, #0]
 80132dc:	9301      	str	r3, [sp, #4]
 80132de:	f000 fafd 	bl	80138dc <_vfiprintf_r>
 80132e2:	b002      	add	sp, #8
 80132e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80132e8:	b003      	add	sp, #12
 80132ea:	4770      	bx	lr
 80132ec:	2000001c 	.word	0x2000001c

080132f0 <_fwalk_reent>:
 80132f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132f4:	4606      	mov	r6, r0
 80132f6:	4688      	mov	r8, r1
 80132f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132fc:	2700      	movs	r7, #0
 80132fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013302:	f1b9 0901 	subs.w	r9, r9, #1
 8013306:	d505      	bpl.n	8013314 <_fwalk_reent+0x24>
 8013308:	6824      	ldr	r4, [r4, #0]
 801330a:	2c00      	cmp	r4, #0
 801330c:	d1f7      	bne.n	80132fe <_fwalk_reent+0xe>
 801330e:	4638      	mov	r0, r7
 8013310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013314:	89ab      	ldrh	r3, [r5, #12]
 8013316:	2b01      	cmp	r3, #1
 8013318:	d907      	bls.n	801332a <_fwalk_reent+0x3a>
 801331a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801331e:	3301      	adds	r3, #1
 8013320:	d003      	beq.n	801332a <_fwalk_reent+0x3a>
 8013322:	4629      	mov	r1, r5
 8013324:	4630      	mov	r0, r6
 8013326:	47c0      	blx	r8
 8013328:	4307      	orrs	r7, r0
 801332a:	3568      	adds	r5, #104	; 0x68
 801332c:	e7e9      	b.n	8013302 <_fwalk_reent+0x12>

0801332e <__retarget_lock_init_recursive>:
 801332e:	4770      	bx	lr

08013330 <__retarget_lock_acquire_recursive>:
 8013330:	4770      	bx	lr

08013332 <__retarget_lock_release_recursive>:
 8013332:	4770      	bx	lr

08013334 <__swhatbuf_r>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	460e      	mov	r6, r1
 8013338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801333c:	2900      	cmp	r1, #0
 801333e:	b096      	sub	sp, #88	; 0x58
 8013340:	4614      	mov	r4, r2
 8013342:	461d      	mov	r5, r3
 8013344:	da08      	bge.n	8013358 <__swhatbuf_r+0x24>
 8013346:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801334a:	2200      	movs	r2, #0
 801334c:	602a      	str	r2, [r5, #0]
 801334e:	061a      	lsls	r2, r3, #24
 8013350:	d410      	bmi.n	8013374 <__swhatbuf_r+0x40>
 8013352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013356:	e00e      	b.n	8013376 <__swhatbuf_r+0x42>
 8013358:	466a      	mov	r2, sp
 801335a:	f000 fe01 	bl	8013f60 <_fstat_r>
 801335e:	2800      	cmp	r0, #0
 8013360:	dbf1      	blt.n	8013346 <__swhatbuf_r+0x12>
 8013362:	9a01      	ldr	r2, [sp, #4]
 8013364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801336c:	425a      	negs	r2, r3
 801336e:	415a      	adcs	r2, r3
 8013370:	602a      	str	r2, [r5, #0]
 8013372:	e7ee      	b.n	8013352 <__swhatbuf_r+0x1e>
 8013374:	2340      	movs	r3, #64	; 0x40
 8013376:	2000      	movs	r0, #0
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	b016      	add	sp, #88	; 0x58
 801337c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013380 <__smakebuf_r>:
 8013380:	898b      	ldrh	r3, [r1, #12]
 8013382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013384:	079d      	lsls	r5, r3, #30
 8013386:	4606      	mov	r6, r0
 8013388:	460c      	mov	r4, r1
 801338a:	d507      	bpl.n	801339c <__smakebuf_r+0x1c>
 801338c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013390:	6023      	str	r3, [r4, #0]
 8013392:	6123      	str	r3, [r4, #16]
 8013394:	2301      	movs	r3, #1
 8013396:	6163      	str	r3, [r4, #20]
 8013398:	b002      	add	sp, #8
 801339a:	bd70      	pop	{r4, r5, r6, pc}
 801339c:	ab01      	add	r3, sp, #4
 801339e:	466a      	mov	r2, sp
 80133a0:	f7ff ffc8 	bl	8013334 <__swhatbuf_r>
 80133a4:	9900      	ldr	r1, [sp, #0]
 80133a6:	4605      	mov	r5, r0
 80133a8:	4630      	mov	r0, r6
 80133aa:	f000 f89d 	bl	80134e8 <_malloc_r>
 80133ae:	b948      	cbnz	r0, 80133c4 <__smakebuf_r+0x44>
 80133b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133b4:	059a      	lsls	r2, r3, #22
 80133b6:	d4ef      	bmi.n	8013398 <__smakebuf_r+0x18>
 80133b8:	f023 0303 	bic.w	r3, r3, #3
 80133bc:	f043 0302 	orr.w	r3, r3, #2
 80133c0:	81a3      	strh	r3, [r4, #12]
 80133c2:	e7e3      	b.n	801338c <__smakebuf_r+0xc>
 80133c4:	4b0d      	ldr	r3, [pc, #52]	; (80133fc <__smakebuf_r+0x7c>)
 80133c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80133c8:	89a3      	ldrh	r3, [r4, #12]
 80133ca:	6020      	str	r0, [r4, #0]
 80133cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d0:	81a3      	strh	r3, [r4, #12]
 80133d2:	9b00      	ldr	r3, [sp, #0]
 80133d4:	6163      	str	r3, [r4, #20]
 80133d6:	9b01      	ldr	r3, [sp, #4]
 80133d8:	6120      	str	r0, [r4, #16]
 80133da:	b15b      	cbz	r3, 80133f4 <__smakebuf_r+0x74>
 80133dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133e0:	4630      	mov	r0, r6
 80133e2:	f000 fdcf 	bl	8013f84 <_isatty_r>
 80133e6:	b128      	cbz	r0, 80133f4 <__smakebuf_r+0x74>
 80133e8:	89a3      	ldrh	r3, [r4, #12]
 80133ea:	f023 0303 	bic.w	r3, r3, #3
 80133ee:	f043 0301 	orr.w	r3, r3, #1
 80133f2:	81a3      	strh	r3, [r4, #12]
 80133f4:	89a0      	ldrh	r0, [r4, #12]
 80133f6:	4305      	orrs	r5, r0
 80133f8:	81a5      	strh	r5, [r4, #12]
 80133fa:	e7cd      	b.n	8013398 <__smakebuf_r+0x18>
 80133fc:	08013169 	.word	0x08013169

08013400 <malloc>:
 8013400:	4b02      	ldr	r3, [pc, #8]	; (801340c <malloc+0xc>)
 8013402:	4601      	mov	r1, r0
 8013404:	6818      	ldr	r0, [r3, #0]
 8013406:	f000 b86f 	b.w	80134e8 <_malloc_r>
 801340a:	bf00      	nop
 801340c:	2000001c 	.word	0x2000001c

08013410 <_free_r>:
 8013410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013412:	2900      	cmp	r1, #0
 8013414:	d044      	beq.n	80134a0 <_free_r+0x90>
 8013416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801341a:	9001      	str	r0, [sp, #4]
 801341c:	2b00      	cmp	r3, #0
 801341e:	f1a1 0404 	sub.w	r4, r1, #4
 8013422:	bfb8      	it	lt
 8013424:	18e4      	addlt	r4, r4, r3
 8013426:	f000 fdcf 	bl	8013fc8 <__malloc_lock>
 801342a:	4a1e      	ldr	r2, [pc, #120]	; (80134a4 <_free_r+0x94>)
 801342c:	9801      	ldr	r0, [sp, #4]
 801342e:	6813      	ldr	r3, [r2, #0]
 8013430:	b933      	cbnz	r3, 8013440 <_free_r+0x30>
 8013432:	6063      	str	r3, [r4, #4]
 8013434:	6014      	str	r4, [r2, #0]
 8013436:	b003      	add	sp, #12
 8013438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801343c:	f000 bdca 	b.w	8013fd4 <__malloc_unlock>
 8013440:	42a3      	cmp	r3, r4
 8013442:	d908      	bls.n	8013456 <_free_r+0x46>
 8013444:	6825      	ldr	r5, [r4, #0]
 8013446:	1961      	adds	r1, r4, r5
 8013448:	428b      	cmp	r3, r1
 801344a:	bf01      	itttt	eq
 801344c:	6819      	ldreq	r1, [r3, #0]
 801344e:	685b      	ldreq	r3, [r3, #4]
 8013450:	1949      	addeq	r1, r1, r5
 8013452:	6021      	streq	r1, [r4, #0]
 8013454:	e7ed      	b.n	8013432 <_free_r+0x22>
 8013456:	461a      	mov	r2, r3
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	b10b      	cbz	r3, 8013460 <_free_r+0x50>
 801345c:	42a3      	cmp	r3, r4
 801345e:	d9fa      	bls.n	8013456 <_free_r+0x46>
 8013460:	6811      	ldr	r1, [r2, #0]
 8013462:	1855      	adds	r5, r2, r1
 8013464:	42a5      	cmp	r5, r4
 8013466:	d10b      	bne.n	8013480 <_free_r+0x70>
 8013468:	6824      	ldr	r4, [r4, #0]
 801346a:	4421      	add	r1, r4
 801346c:	1854      	adds	r4, r2, r1
 801346e:	42a3      	cmp	r3, r4
 8013470:	6011      	str	r1, [r2, #0]
 8013472:	d1e0      	bne.n	8013436 <_free_r+0x26>
 8013474:	681c      	ldr	r4, [r3, #0]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	6053      	str	r3, [r2, #4]
 801347a:	4421      	add	r1, r4
 801347c:	6011      	str	r1, [r2, #0]
 801347e:	e7da      	b.n	8013436 <_free_r+0x26>
 8013480:	d902      	bls.n	8013488 <_free_r+0x78>
 8013482:	230c      	movs	r3, #12
 8013484:	6003      	str	r3, [r0, #0]
 8013486:	e7d6      	b.n	8013436 <_free_r+0x26>
 8013488:	6825      	ldr	r5, [r4, #0]
 801348a:	1961      	adds	r1, r4, r5
 801348c:	428b      	cmp	r3, r1
 801348e:	bf04      	itt	eq
 8013490:	6819      	ldreq	r1, [r3, #0]
 8013492:	685b      	ldreq	r3, [r3, #4]
 8013494:	6063      	str	r3, [r4, #4]
 8013496:	bf04      	itt	eq
 8013498:	1949      	addeq	r1, r1, r5
 801349a:	6021      	streq	r1, [r4, #0]
 801349c:	6054      	str	r4, [r2, #4]
 801349e:	e7ca      	b.n	8013436 <_free_r+0x26>
 80134a0:	b003      	add	sp, #12
 80134a2:	bd30      	pop	{r4, r5, pc}
 80134a4:	2000dae8 	.word	0x2000dae8

080134a8 <sbrk_aligned>:
 80134a8:	b570      	push	{r4, r5, r6, lr}
 80134aa:	4e0e      	ldr	r6, [pc, #56]	; (80134e4 <sbrk_aligned+0x3c>)
 80134ac:	460c      	mov	r4, r1
 80134ae:	6831      	ldr	r1, [r6, #0]
 80134b0:	4605      	mov	r5, r0
 80134b2:	b911      	cbnz	r1, 80134ba <sbrk_aligned+0x12>
 80134b4:	f000 fcd6 	bl	8013e64 <_sbrk_r>
 80134b8:	6030      	str	r0, [r6, #0]
 80134ba:	4621      	mov	r1, r4
 80134bc:	4628      	mov	r0, r5
 80134be:	f000 fcd1 	bl	8013e64 <_sbrk_r>
 80134c2:	1c43      	adds	r3, r0, #1
 80134c4:	d00a      	beq.n	80134dc <sbrk_aligned+0x34>
 80134c6:	1cc4      	adds	r4, r0, #3
 80134c8:	f024 0403 	bic.w	r4, r4, #3
 80134cc:	42a0      	cmp	r0, r4
 80134ce:	d007      	beq.n	80134e0 <sbrk_aligned+0x38>
 80134d0:	1a21      	subs	r1, r4, r0
 80134d2:	4628      	mov	r0, r5
 80134d4:	f000 fcc6 	bl	8013e64 <_sbrk_r>
 80134d8:	3001      	adds	r0, #1
 80134da:	d101      	bne.n	80134e0 <sbrk_aligned+0x38>
 80134dc:	f04f 34ff 	mov.w	r4, #4294967295
 80134e0:	4620      	mov	r0, r4
 80134e2:	bd70      	pop	{r4, r5, r6, pc}
 80134e4:	2000daec 	.word	0x2000daec

080134e8 <_malloc_r>:
 80134e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ec:	1ccd      	adds	r5, r1, #3
 80134ee:	f025 0503 	bic.w	r5, r5, #3
 80134f2:	3508      	adds	r5, #8
 80134f4:	2d0c      	cmp	r5, #12
 80134f6:	bf38      	it	cc
 80134f8:	250c      	movcc	r5, #12
 80134fa:	2d00      	cmp	r5, #0
 80134fc:	4607      	mov	r7, r0
 80134fe:	db01      	blt.n	8013504 <_malloc_r+0x1c>
 8013500:	42a9      	cmp	r1, r5
 8013502:	d905      	bls.n	8013510 <_malloc_r+0x28>
 8013504:	230c      	movs	r3, #12
 8013506:	603b      	str	r3, [r7, #0]
 8013508:	2600      	movs	r6, #0
 801350a:	4630      	mov	r0, r6
 801350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013510:	4e2e      	ldr	r6, [pc, #184]	; (80135cc <_malloc_r+0xe4>)
 8013512:	f000 fd59 	bl	8013fc8 <__malloc_lock>
 8013516:	6833      	ldr	r3, [r6, #0]
 8013518:	461c      	mov	r4, r3
 801351a:	bb34      	cbnz	r4, 801356a <_malloc_r+0x82>
 801351c:	4629      	mov	r1, r5
 801351e:	4638      	mov	r0, r7
 8013520:	f7ff ffc2 	bl	80134a8 <sbrk_aligned>
 8013524:	1c43      	adds	r3, r0, #1
 8013526:	4604      	mov	r4, r0
 8013528:	d14d      	bne.n	80135c6 <_malloc_r+0xde>
 801352a:	6834      	ldr	r4, [r6, #0]
 801352c:	4626      	mov	r6, r4
 801352e:	2e00      	cmp	r6, #0
 8013530:	d140      	bne.n	80135b4 <_malloc_r+0xcc>
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	4631      	mov	r1, r6
 8013536:	4638      	mov	r0, r7
 8013538:	eb04 0803 	add.w	r8, r4, r3
 801353c:	f000 fc92 	bl	8013e64 <_sbrk_r>
 8013540:	4580      	cmp	r8, r0
 8013542:	d13a      	bne.n	80135ba <_malloc_r+0xd2>
 8013544:	6821      	ldr	r1, [r4, #0]
 8013546:	3503      	adds	r5, #3
 8013548:	1a6d      	subs	r5, r5, r1
 801354a:	f025 0503 	bic.w	r5, r5, #3
 801354e:	3508      	adds	r5, #8
 8013550:	2d0c      	cmp	r5, #12
 8013552:	bf38      	it	cc
 8013554:	250c      	movcc	r5, #12
 8013556:	4629      	mov	r1, r5
 8013558:	4638      	mov	r0, r7
 801355a:	f7ff ffa5 	bl	80134a8 <sbrk_aligned>
 801355e:	3001      	adds	r0, #1
 8013560:	d02b      	beq.n	80135ba <_malloc_r+0xd2>
 8013562:	6823      	ldr	r3, [r4, #0]
 8013564:	442b      	add	r3, r5
 8013566:	6023      	str	r3, [r4, #0]
 8013568:	e00e      	b.n	8013588 <_malloc_r+0xa0>
 801356a:	6822      	ldr	r2, [r4, #0]
 801356c:	1b52      	subs	r2, r2, r5
 801356e:	d41e      	bmi.n	80135ae <_malloc_r+0xc6>
 8013570:	2a0b      	cmp	r2, #11
 8013572:	d916      	bls.n	80135a2 <_malloc_r+0xba>
 8013574:	1961      	adds	r1, r4, r5
 8013576:	42a3      	cmp	r3, r4
 8013578:	6025      	str	r5, [r4, #0]
 801357a:	bf18      	it	ne
 801357c:	6059      	strne	r1, [r3, #4]
 801357e:	6863      	ldr	r3, [r4, #4]
 8013580:	bf08      	it	eq
 8013582:	6031      	streq	r1, [r6, #0]
 8013584:	5162      	str	r2, [r4, r5]
 8013586:	604b      	str	r3, [r1, #4]
 8013588:	4638      	mov	r0, r7
 801358a:	f104 060b 	add.w	r6, r4, #11
 801358e:	f000 fd21 	bl	8013fd4 <__malloc_unlock>
 8013592:	f026 0607 	bic.w	r6, r6, #7
 8013596:	1d23      	adds	r3, r4, #4
 8013598:	1af2      	subs	r2, r6, r3
 801359a:	d0b6      	beq.n	801350a <_malloc_r+0x22>
 801359c:	1b9b      	subs	r3, r3, r6
 801359e:	50a3      	str	r3, [r4, r2]
 80135a0:	e7b3      	b.n	801350a <_malloc_r+0x22>
 80135a2:	6862      	ldr	r2, [r4, #4]
 80135a4:	42a3      	cmp	r3, r4
 80135a6:	bf0c      	ite	eq
 80135a8:	6032      	streq	r2, [r6, #0]
 80135aa:	605a      	strne	r2, [r3, #4]
 80135ac:	e7ec      	b.n	8013588 <_malloc_r+0xa0>
 80135ae:	4623      	mov	r3, r4
 80135b0:	6864      	ldr	r4, [r4, #4]
 80135b2:	e7b2      	b.n	801351a <_malloc_r+0x32>
 80135b4:	4634      	mov	r4, r6
 80135b6:	6876      	ldr	r6, [r6, #4]
 80135b8:	e7b9      	b.n	801352e <_malloc_r+0x46>
 80135ba:	230c      	movs	r3, #12
 80135bc:	603b      	str	r3, [r7, #0]
 80135be:	4638      	mov	r0, r7
 80135c0:	f000 fd08 	bl	8013fd4 <__malloc_unlock>
 80135c4:	e7a1      	b.n	801350a <_malloc_r+0x22>
 80135c6:	6025      	str	r5, [r4, #0]
 80135c8:	e7de      	b.n	8013588 <_malloc_r+0xa0>
 80135ca:	bf00      	nop
 80135cc:	2000dae8 	.word	0x2000dae8

080135d0 <__ssputs_r>:
 80135d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d4:	688e      	ldr	r6, [r1, #8]
 80135d6:	429e      	cmp	r6, r3
 80135d8:	4682      	mov	sl, r0
 80135da:	460c      	mov	r4, r1
 80135dc:	4690      	mov	r8, r2
 80135de:	461f      	mov	r7, r3
 80135e0:	d838      	bhi.n	8013654 <__ssputs_r+0x84>
 80135e2:	898a      	ldrh	r2, [r1, #12]
 80135e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135e8:	d032      	beq.n	8013650 <__ssputs_r+0x80>
 80135ea:	6825      	ldr	r5, [r4, #0]
 80135ec:	6909      	ldr	r1, [r1, #16]
 80135ee:	eba5 0901 	sub.w	r9, r5, r1
 80135f2:	6965      	ldr	r5, [r4, #20]
 80135f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135fc:	3301      	adds	r3, #1
 80135fe:	444b      	add	r3, r9
 8013600:	106d      	asrs	r5, r5, #1
 8013602:	429d      	cmp	r5, r3
 8013604:	bf38      	it	cc
 8013606:	461d      	movcc	r5, r3
 8013608:	0553      	lsls	r3, r2, #21
 801360a:	d531      	bpl.n	8013670 <__ssputs_r+0xa0>
 801360c:	4629      	mov	r1, r5
 801360e:	f7ff ff6b 	bl	80134e8 <_malloc_r>
 8013612:	4606      	mov	r6, r0
 8013614:	b950      	cbnz	r0, 801362c <__ssputs_r+0x5c>
 8013616:	230c      	movs	r3, #12
 8013618:	f8ca 3000 	str.w	r3, [sl]
 801361c:	89a3      	ldrh	r3, [r4, #12]
 801361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013622:	81a3      	strh	r3, [r4, #12]
 8013624:	f04f 30ff 	mov.w	r0, #4294967295
 8013628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801362c:	6921      	ldr	r1, [r4, #16]
 801362e:	464a      	mov	r2, r9
 8013630:	f7ff f9ac 	bl	801298c <memcpy>
 8013634:	89a3      	ldrh	r3, [r4, #12]
 8013636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801363a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801363e:	81a3      	strh	r3, [r4, #12]
 8013640:	6126      	str	r6, [r4, #16]
 8013642:	6165      	str	r5, [r4, #20]
 8013644:	444e      	add	r6, r9
 8013646:	eba5 0509 	sub.w	r5, r5, r9
 801364a:	6026      	str	r6, [r4, #0]
 801364c:	60a5      	str	r5, [r4, #8]
 801364e:	463e      	mov	r6, r7
 8013650:	42be      	cmp	r6, r7
 8013652:	d900      	bls.n	8013656 <__ssputs_r+0x86>
 8013654:	463e      	mov	r6, r7
 8013656:	6820      	ldr	r0, [r4, #0]
 8013658:	4632      	mov	r2, r6
 801365a:	4641      	mov	r1, r8
 801365c:	f7ff f9a4 	bl	80129a8 <memmove>
 8013660:	68a3      	ldr	r3, [r4, #8]
 8013662:	1b9b      	subs	r3, r3, r6
 8013664:	60a3      	str	r3, [r4, #8]
 8013666:	6823      	ldr	r3, [r4, #0]
 8013668:	4433      	add	r3, r6
 801366a:	6023      	str	r3, [r4, #0]
 801366c:	2000      	movs	r0, #0
 801366e:	e7db      	b.n	8013628 <__ssputs_r+0x58>
 8013670:	462a      	mov	r2, r5
 8013672:	f000 fcb5 	bl	8013fe0 <_realloc_r>
 8013676:	4606      	mov	r6, r0
 8013678:	2800      	cmp	r0, #0
 801367a:	d1e1      	bne.n	8013640 <__ssputs_r+0x70>
 801367c:	6921      	ldr	r1, [r4, #16]
 801367e:	4650      	mov	r0, sl
 8013680:	f7ff fec6 	bl	8013410 <_free_r>
 8013684:	e7c7      	b.n	8013616 <__ssputs_r+0x46>
	...

08013688 <_svfiprintf_r>:
 8013688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801368c:	4698      	mov	r8, r3
 801368e:	898b      	ldrh	r3, [r1, #12]
 8013690:	061b      	lsls	r3, r3, #24
 8013692:	b09d      	sub	sp, #116	; 0x74
 8013694:	4607      	mov	r7, r0
 8013696:	460d      	mov	r5, r1
 8013698:	4614      	mov	r4, r2
 801369a:	d50e      	bpl.n	80136ba <_svfiprintf_r+0x32>
 801369c:	690b      	ldr	r3, [r1, #16]
 801369e:	b963      	cbnz	r3, 80136ba <_svfiprintf_r+0x32>
 80136a0:	2140      	movs	r1, #64	; 0x40
 80136a2:	f7ff ff21 	bl	80134e8 <_malloc_r>
 80136a6:	6028      	str	r0, [r5, #0]
 80136a8:	6128      	str	r0, [r5, #16]
 80136aa:	b920      	cbnz	r0, 80136b6 <_svfiprintf_r+0x2e>
 80136ac:	230c      	movs	r3, #12
 80136ae:	603b      	str	r3, [r7, #0]
 80136b0:	f04f 30ff 	mov.w	r0, #4294967295
 80136b4:	e0d1      	b.n	801385a <_svfiprintf_r+0x1d2>
 80136b6:	2340      	movs	r3, #64	; 0x40
 80136b8:	616b      	str	r3, [r5, #20]
 80136ba:	2300      	movs	r3, #0
 80136bc:	9309      	str	r3, [sp, #36]	; 0x24
 80136be:	2320      	movs	r3, #32
 80136c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80136c8:	2330      	movs	r3, #48	; 0x30
 80136ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013874 <_svfiprintf_r+0x1ec>
 80136ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136d2:	f04f 0901 	mov.w	r9, #1
 80136d6:	4623      	mov	r3, r4
 80136d8:	469a      	mov	sl, r3
 80136da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136de:	b10a      	cbz	r2, 80136e4 <_svfiprintf_r+0x5c>
 80136e0:	2a25      	cmp	r2, #37	; 0x25
 80136e2:	d1f9      	bne.n	80136d8 <_svfiprintf_r+0x50>
 80136e4:	ebba 0b04 	subs.w	fp, sl, r4
 80136e8:	d00b      	beq.n	8013702 <_svfiprintf_r+0x7a>
 80136ea:	465b      	mov	r3, fp
 80136ec:	4622      	mov	r2, r4
 80136ee:	4629      	mov	r1, r5
 80136f0:	4638      	mov	r0, r7
 80136f2:	f7ff ff6d 	bl	80135d0 <__ssputs_r>
 80136f6:	3001      	adds	r0, #1
 80136f8:	f000 80aa 	beq.w	8013850 <_svfiprintf_r+0x1c8>
 80136fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136fe:	445a      	add	r2, fp
 8013700:	9209      	str	r2, [sp, #36]	; 0x24
 8013702:	f89a 3000 	ldrb.w	r3, [sl]
 8013706:	2b00      	cmp	r3, #0
 8013708:	f000 80a2 	beq.w	8013850 <_svfiprintf_r+0x1c8>
 801370c:	2300      	movs	r3, #0
 801370e:	f04f 32ff 	mov.w	r2, #4294967295
 8013712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013716:	f10a 0a01 	add.w	sl, sl, #1
 801371a:	9304      	str	r3, [sp, #16]
 801371c:	9307      	str	r3, [sp, #28]
 801371e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013722:	931a      	str	r3, [sp, #104]	; 0x68
 8013724:	4654      	mov	r4, sl
 8013726:	2205      	movs	r2, #5
 8013728:	f814 1b01 	ldrb.w	r1, [r4], #1
 801372c:	4851      	ldr	r0, [pc, #324]	; (8013874 <_svfiprintf_r+0x1ec>)
 801372e:	f7ec fd77 	bl	8000220 <memchr>
 8013732:	9a04      	ldr	r2, [sp, #16]
 8013734:	b9d8      	cbnz	r0, 801376e <_svfiprintf_r+0xe6>
 8013736:	06d0      	lsls	r0, r2, #27
 8013738:	bf44      	itt	mi
 801373a:	2320      	movmi	r3, #32
 801373c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013740:	0711      	lsls	r1, r2, #28
 8013742:	bf44      	itt	mi
 8013744:	232b      	movmi	r3, #43	; 0x2b
 8013746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801374a:	f89a 3000 	ldrb.w	r3, [sl]
 801374e:	2b2a      	cmp	r3, #42	; 0x2a
 8013750:	d015      	beq.n	801377e <_svfiprintf_r+0xf6>
 8013752:	9a07      	ldr	r2, [sp, #28]
 8013754:	4654      	mov	r4, sl
 8013756:	2000      	movs	r0, #0
 8013758:	f04f 0c0a 	mov.w	ip, #10
 801375c:	4621      	mov	r1, r4
 801375e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013762:	3b30      	subs	r3, #48	; 0x30
 8013764:	2b09      	cmp	r3, #9
 8013766:	d94e      	bls.n	8013806 <_svfiprintf_r+0x17e>
 8013768:	b1b0      	cbz	r0, 8013798 <_svfiprintf_r+0x110>
 801376a:	9207      	str	r2, [sp, #28]
 801376c:	e014      	b.n	8013798 <_svfiprintf_r+0x110>
 801376e:	eba0 0308 	sub.w	r3, r0, r8
 8013772:	fa09 f303 	lsl.w	r3, r9, r3
 8013776:	4313      	orrs	r3, r2
 8013778:	9304      	str	r3, [sp, #16]
 801377a:	46a2      	mov	sl, r4
 801377c:	e7d2      	b.n	8013724 <_svfiprintf_r+0x9c>
 801377e:	9b03      	ldr	r3, [sp, #12]
 8013780:	1d19      	adds	r1, r3, #4
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	9103      	str	r1, [sp, #12]
 8013786:	2b00      	cmp	r3, #0
 8013788:	bfbb      	ittet	lt
 801378a:	425b      	neglt	r3, r3
 801378c:	f042 0202 	orrlt.w	r2, r2, #2
 8013790:	9307      	strge	r3, [sp, #28]
 8013792:	9307      	strlt	r3, [sp, #28]
 8013794:	bfb8      	it	lt
 8013796:	9204      	strlt	r2, [sp, #16]
 8013798:	7823      	ldrb	r3, [r4, #0]
 801379a:	2b2e      	cmp	r3, #46	; 0x2e
 801379c:	d10c      	bne.n	80137b8 <_svfiprintf_r+0x130>
 801379e:	7863      	ldrb	r3, [r4, #1]
 80137a0:	2b2a      	cmp	r3, #42	; 0x2a
 80137a2:	d135      	bne.n	8013810 <_svfiprintf_r+0x188>
 80137a4:	9b03      	ldr	r3, [sp, #12]
 80137a6:	1d1a      	adds	r2, r3, #4
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	9203      	str	r2, [sp, #12]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	bfb8      	it	lt
 80137b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80137b4:	3402      	adds	r4, #2
 80137b6:	9305      	str	r3, [sp, #20]
 80137b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013884 <_svfiprintf_r+0x1fc>
 80137bc:	7821      	ldrb	r1, [r4, #0]
 80137be:	2203      	movs	r2, #3
 80137c0:	4650      	mov	r0, sl
 80137c2:	f7ec fd2d 	bl	8000220 <memchr>
 80137c6:	b140      	cbz	r0, 80137da <_svfiprintf_r+0x152>
 80137c8:	2340      	movs	r3, #64	; 0x40
 80137ca:	eba0 000a 	sub.w	r0, r0, sl
 80137ce:	fa03 f000 	lsl.w	r0, r3, r0
 80137d2:	9b04      	ldr	r3, [sp, #16]
 80137d4:	4303      	orrs	r3, r0
 80137d6:	3401      	adds	r4, #1
 80137d8:	9304      	str	r3, [sp, #16]
 80137da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137de:	4826      	ldr	r0, [pc, #152]	; (8013878 <_svfiprintf_r+0x1f0>)
 80137e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137e4:	2206      	movs	r2, #6
 80137e6:	f7ec fd1b 	bl	8000220 <memchr>
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d038      	beq.n	8013860 <_svfiprintf_r+0x1d8>
 80137ee:	4b23      	ldr	r3, [pc, #140]	; (801387c <_svfiprintf_r+0x1f4>)
 80137f0:	bb1b      	cbnz	r3, 801383a <_svfiprintf_r+0x1b2>
 80137f2:	9b03      	ldr	r3, [sp, #12]
 80137f4:	3307      	adds	r3, #7
 80137f6:	f023 0307 	bic.w	r3, r3, #7
 80137fa:	3308      	adds	r3, #8
 80137fc:	9303      	str	r3, [sp, #12]
 80137fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013800:	4433      	add	r3, r6
 8013802:	9309      	str	r3, [sp, #36]	; 0x24
 8013804:	e767      	b.n	80136d6 <_svfiprintf_r+0x4e>
 8013806:	fb0c 3202 	mla	r2, ip, r2, r3
 801380a:	460c      	mov	r4, r1
 801380c:	2001      	movs	r0, #1
 801380e:	e7a5      	b.n	801375c <_svfiprintf_r+0xd4>
 8013810:	2300      	movs	r3, #0
 8013812:	3401      	adds	r4, #1
 8013814:	9305      	str	r3, [sp, #20]
 8013816:	4619      	mov	r1, r3
 8013818:	f04f 0c0a 	mov.w	ip, #10
 801381c:	4620      	mov	r0, r4
 801381e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013822:	3a30      	subs	r2, #48	; 0x30
 8013824:	2a09      	cmp	r2, #9
 8013826:	d903      	bls.n	8013830 <_svfiprintf_r+0x1a8>
 8013828:	2b00      	cmp	r3, #0
 801382a:	d0c5      	beq.n	80137b8 <_svfiprintf_r+0x130>
 801382c:	9105      	str	r1, [sp, #20]
 801382e:	e7c3      	b.n	80137b8 <_svfiprintf_r+0x130>
 8013830:	fb0c 2101 	mla	r1, ip, r1, r2
 8013834:	4604      	mov	r4, r0
 8013836:	2301      	movs	r3, #1
 8013838:	e7f0      	b.n	801381c <_svfiprintf_r+0x194>
 801383a:	ab03      	add	r3, sp, #12
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	462a      	mov	r2, r5
 8013840:	4b0f      	ldr	r3, [pc, #60]	; (8013880 <_svfiprintf_r+0x1f8>)
 8013842:	a904      	add	r1, sp, #16
 8013844:	4638      	mov	r0, r7
 8013846:	f3af 8000 	nop.w
 801384a:	1c42      	adds	r2, r0, #1
 801384c:	4606      	mov	r6, r0
 801384e:	d1d6      	bne.n	80137fe <_svfiprintf_r+0x176>
 8013850:	89ab      	ldrh	r3, [r5, #12]
 8013852:	065b      	lsls	r3, r3, #25
 8013854:	f53f af2c 	bmi.w	80136b0 <_svfiprintf_r+0x28>
 8013858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801385a:	b01d      	add	sp, #116	; 0x74
 801385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013860:	ab03      	add	r3, sp, #12
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	462a      	mov	r2, r5
 8013866:	4b06      	ldr	r3, [pc, #24]	; (8013880 <_svfiprintf_r+0x1f8>)
 8013868:	a904      	add	r1, sp, #16
 801386a:	4638      	mov	r0, r7
 801386c:	f000 f9d4 	bl	8013c18 <_printf_i>
 8013870:	e7eb      	b.n	801384a <_svfiprintf_r+0x1c2>
 8013872:	bf00      	nop
 8013874:	08016e98 	.word	0x08016e98
 8013878:	08016ea2 	.word	0x08016ea2
 801387c:	00000000 	.word	0x00000000
 8013880:	080135d1 	.word	0x080135d1
 8013884:	08016e9e 	.word	0x08016e9e

08013888 <__sfputc_r>:
 8013888:	6893      	ldr	r3, [r2, #8]
 801388a:	3b01      	subs	r3, #1
 801388c:	2b00      	cmp	r3, #0
 801388e:	b410      	push	{r4}
 8013890:	6093      	str	r3, [r2, #8]
 8013892:	da08      	bge.n	80138a6 <__sfputc_r+0x1e>
 8013894:	6994      	ldr	r4, [r2, #24]
 8013896:	42a3      	cmp	r3, r4
 8013898:	db01      	blt.n	801389e <__sfputc_r+0x16>
 801389a:	290a      	cmp	r1, #10
 801389c:	d103      	bne.n	80138a6 <__sfputc_r+0x1e>
 801389e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138a2:	f7ff ba9d 	b.w	8012de0 <__swbuf_r>
 80138a6:	6813      	ldr	r3, [r2, #0]
 80138a8:	1c58      	adds	r0, r3, #1
 80138aa:	6010      	str	r0, [r2, #0]
 80138ac:	7019      	strb	r1, [r3, #0]
 80138ae:	4608      	mov	r0, r1
 80138b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138b4:	4770      	bx	lr

080138b6 <__sfputs_r>:
 80138b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b8:	4606      	mov	r6, r0
 80138ba:	460f      	mov	r7, r1
 80138bc:	4614      	mov	r4, r2
 80138be:	18d5      	adds	r5, r2, r3
 80138c0:	42ac      	cmp	r4, r5
 80138c2:	d101      	bne.n	80138c8 <__sfputs_r+0x12>
 80138c4:	2000      	movs	r0, #0
 80138c6:	e007      	b.n	80138d8 <__sfputs_r+0x22>
 80138c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138cc:	463a      	mov	r2, r7
 80138ce:	4630      	mov	r0, r6
 80138d0:	f7ff ffda 	bl	8013888 <__sfputc_r>
 80138d4:	1c43      	adds	r3, r0, #1
 80138d6:	d1f3      	bne.n	80138c0 <__sfputs_r+0xa>
 80138d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138dc <_vfiprintf_r>:
 80138dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e0:	460d      	mov	r5, r1
 80138e2:	b09d      	sub	sp, #116	; 0x74
 80138e4:	4614      	mov	r4, r2
 80138e6:	4698      	mov	r8, r3
 80138e8:	4606      	mov	r6, r0
 80138ea:	b118      	cbz	r0, 80138f4 <_vfiprintf_r+0x18>
 80138ec:	6983      	ldr	r3, [r0, #24]
 80138ee:	b90b      	cbnz	r3, 80138f4 <_vfiprintf_r+0x18>
 80138f0:	f7ff fc6e 	bl	80131d0 <__sinit>
 80138f4:	4b89      	ldr	r3, [pc, #548]	; (8013b1c <_vfiprintf_r+0x240>)
 80138f6:	429d      	cmp	r5, r3
 80138f8:	d11b      	bne.n	8013932 <_vfiprintf_r+0x56>
 80138fa:	6875      	ldr	r5, [r6, #4]
 80138fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138fe:	07d9      	lsls	r1, r3, #31
 8013900:	d405      	bmi.n	801390e <_vfiprintf_r+0x32>
 8013902:	89ab      	ldrh	r3, [r5, #12]
 8013904:	059a      	lsls	r2, r3, #22
 8013906:	d402      	bmi.n	801390e <_vfiprintf_r+0x32>
 8013908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801390a:	f7ff fd11 	bl	8013330 <__retarget_lock_acquire_recursive>
 801390e:	89ab      	ldrh	r3, [r5, #12]
 8013910:	071b      	lsls	r3, r3, #28
 8013912:	d501      	bpl.n	8013918 <_vfiprintf_r+0x3c>
 8013914:	692b      	ldr	r3, [r5, #16]
 8013916:	b9eb      	cbnz	r3, 8013954 <_vfiprintf_r+0x78>
 8013918:	4629      	mov	r1, r5
 801391a:	4630      	mov	r0, r6
 801391c:	f7ff fab2 	bl	8012e84 <__swsetup_r>
 8013920:	b1c0      	cbz	r0, 8013954 <_vfiprintf_r+0x78>
 8013922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013924:	07dc      	lsls	r4, r3, #31
 8013926:	d50e      	bpl.n	8013946 <_vfiprintf_r+0x6a>
 8013928:	f04f 30ff 	mov.w	r0, #4294967295
 801392c:	b01d      	add	sp, #116	; 0x74
 801392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013932:	4b7b      	ldr	r3, [pc, #492]	; (8013b20 <_vfiprintf_r+0x244>)
 8013934:	429d      	cmp	r5, r3
 8013936:	d101      	bne.n	801393c <_vfiprintf_r+0x60>
 8013938:	68b5      	ldr	r5, [r6, #8]
 801393a:	e7df      	b.n	80138fc <_vfiprintf_r+0x20>
 801393c:	4b79      	ldr	r3, [pc, #484]	; (8013b24 <_vfiprintf_r+0x248>)
 801393e:	429d      	cmp	r5, r3
 8013940:	bf08      	it	eq
 8013942:	68f5      	ldreq	r5, [r6, #12]
 8013944:	e7da      	b.n	80138fc <_vfiprintf_r+0x20>
 8013946:	89ab      	ldrh	r3, [r5, #12]
 8013948:	0598      	lsls	r0, r3, #22
 801394a:	d4ed      	bmi.n	8013928 <_vfiprintf_r+0x4c>
 801394c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801394e:	f7ff fcf0 	bl	8013332 <__retarget_lock_release_recursive>
 8013952:	e7e9      	b.n	8013928 <_vfiprintf_r+0x4c>
 8013954:	2300      	movs	r3, #0
 8013956:	9309      	str	r3, [sp, #36]	; 0x24
 8013958:	2320      	movs	r3, #32
 801395a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801395e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013962:	2330      	movs	r3, #48	; 0x30
 8013964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b28 <_vfiprintf_r+0x24c>
 8013968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801396c:	f04f 0901 	mov.w	r9, #1
 8013970:	4623      	mov	r3, r4
 8013972:	469a      	mov	sl, r3
 8013974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013978:	b10a      	cbz	r2, 801397e <_vfiprintf_r+0xa2>
 801397a:	2a25      	cmp	r2, #37	; 0x25
 801397c:	d1f9      	bne.n	8013972 <_vfiprintf_r+0x96>
 801397e:	ebba 0b04 	subs.w	fp, sl, r4
 8013982:	d00b      	beq.n	801399c <_vfiprintf_r+0xc0>
 8013984:	465b      	mov	r3, fp
 8013986:	4622      	mov	r2, r4
 8013988:	4629      	mov	r1, r5
 801398a:	4630      	mov	r0, r6
 801398c:	f7ff ff93 	bl	80138b6 <__sfputs_r>
 8013990:	3001      	adds	r0, #1
 8013992:	f000 80aa 	beq.w	8013aea <_vfiprintf_r+0x20e>
 8013996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013998:	445a      	add	r2, fp
 801399a:	9209      	str	r2, [sp, #36]	; 0x24
 801399c:	f89a 3000 	ldrb.w	r3, [sl]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f000 80a2 	beq.w	8013aea <_vfiprintf_r+0x20e>
 80139a6:	2300      	movs	r3, #0
 80139a8:	f04f 32ff 	mov.w	r2, #4294967295
 80139ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139b0:	f10a 0a01 	add.w	sl, sl, #1
 80139b4:	9304      	str	r3, [sp, #16]
 80139b6:	9307      	str	r3, [sp, #28]
 80139b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139bc:	931a      	str	r3, [sp, #104]	; 0x68
 80139be:	4654      	mov	r4, sl
 80139c0:	2205      	movs	r2, #5
 80139c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c6:	4858      	ldr	r0, [pc, #352]	; (8013b28 <_vfiprintf_r+0x24c>)
 80139c8:	f7ec fc2a 	bl	8000220 <memchr>
 80139cc:	9a04      	ldr	r2, [sp, #16]
 80139ce:	b9d8      	cbnz	r0, 8013a08 <_vfiprintf_r+0x12c>
 80139d0:	06d1      	lsls	r1, r2, #27
 80139d2:	bf44      	itt	mi
 80139d4:	2320      	movmi	r3, #32
 80139d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139da:	0713      	lsls	r3, r2, #28
 80139dc:	bf44      	itt	mi
 80139de:	232b      	movmi	r3, #43	; 0x2b
 80139e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139e4:	f89a 3000 	ldrb.w	r3, [sl]
 80139e8:	2b2a      	cmp	r3, #42	; 0x2a
 80139ea:	d015      	beq.n	8013a18 <_vfiprintf_r+0x13c>
 80139ec:	9a07      	ldr	r2, [sp, #28]
 80139ee:	4654      	mov	r4, sl
 80139f0:	2000      	movs	r0, #0
 80139f2:	f04f 0c0a 	mov.w	ip, #10
 80139f6:	4621      	mov	r1, r4
 80139f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139fc:	3b30      	subs	r3, #48	; 0x30
 80139fe:	2b09      	cmp	r3, #9
 8013a00:	d94e      	bls.n	8013aa0 <_vfiprintf_r+0x1c4>
 8013a02:	b1b0      	cbz	r0, 8013a32 <_vfiprintf_r+0x156>
 8013a04:	9207      	str	r2, [sp, #28]
 8013a06:	e014      	b.n	8013a32 <_vfiprintf_r+0x156>
 8013a08:	eba0 0308 	sub.w	r3, r0, r8
 8013a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8013a10:	4313      	orrs	r3, r2
 8013a12:	9304      	str	r3, [sp, #16]
 8013a14:	46a2      	mov	sl, r4
 8013a16:	e7d2      	b.n	80139be <_vfiprintf_r+0xe2>
 8013a18:	9b03      	ldr	r3, [sp, #12]
 8013a1a:	1d19      	adds	r1, r3, #4
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	9103      	str	r1, [sp, #12]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	bfbb      	ittet	lt
 8013a24:	425b      	neglt	r3, r3
 8013a26:	f042 0202 	orrlt.w	r2, r2, #2
 8013a2a:	9307      	strge	r3, [sp, #28]
 8013a2c:	9307      	strlt	r3, [sp, #28]
 8013a2e:	bfb8      	it	lt
 8013a30:	9204      	strlt	r2, [sp, #16]
 8013a32:	7823      	ldrb	r3, [r4, #0]
 8013a34:	2b2e      	cmp	r3, #46	; 0x2e
 8013a36:	d10c      	bne.n	8013a52 <_vfiprintf_r+0x176>
 8013a38:	7863      	ldrb	r3, [r4, #1]
 8013a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8013a3c:	d135      	bne.n	8013aaa <_vfiprintf_r+0x1ce>
 8013a3e:	9b03      	ldr	r3, [sp, #12]
 8013a40:	1d1a      	adds	r2, r3, #4
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	9203      	str	r2, [sp, #12]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	bfb8      	it	lt
 8013a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a4e:	3402      	adds	r4, #2
 8013a50:	9305      	str	r3, [sp, #20]
 8013a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b38 <_vfiprintf_r+0x25c>
 8013a56:	7821      	ldrb	r1, [r4, #0]
 8013a58:	2203      	movs	r2, #3
 8013a5a:	4650      	mov	r0, sl
 8013a5c:	f7ec fbe0 	bl	8000220 <memchr>
 8013a60:	b140      	cbz	r0, 8013a74 <_vfiprintf_r+0x198>
 8013a62:	2340      	movs	r3, #64	; 0x40
 8013a64:	eba0 000a 	sub.w	r0, r0, sl
 8013a68:	fa03 f000 	lsl.w	r0, r3, r0
 8013a6c:	9b04      	ldr	r3, [sp, #16]
 8013a6e:	4303      	orrs	r3, r0
 8013a70:	3401      	adds	r4, #1
 8013a72:	9304      	str	r3, [sp, #16]
 8013a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a78:	482c      	ldr	r0, [pc, #176]	; (8013b2c <_vfiprintf_r+0x250>)
 8013a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a7e:	2206      	movs	r2, #6
 8013a80:	f7ec fbce 	bl	8000220 <memchr>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d03f      	beq.n	8013b08 <_vfiprintf_r+0x22c>
 8013a88:	4b29      	ldr	r3, [pc, #164]	; (8013b30 <_vfiprintf_r+0x254>)
 8013a8a:	bb1b      	cbnz	r3, 8013ad4 <_vfiprintf_r+0x1f8>
 8013a8c:	9b03      	ldr	r3, [sp, #12]
 8013a8e:	3307      	adds	r3, #7
 8013a90:	f023 0307 	bic.w	r3, r3, #7
 8013a94:	3308      	adds	r3, #8
 8013a96:	9303      	str	r3, [sp, #12]
 8013a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a9a:	443b      	add	r3, r7
 8013a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a9e:	e767      	b.n	8013970 <_vfiprintf_r+0x94>
 8013aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013aa4:	460c      	mov	r4, r1
 8013aa6:	2001      	movs	r0, #1
 8013aa8:	e7a5      	b.n	80139f6 <_vfiprintf_r+0x11a>
 8013aaa:	2300      	movs	r3, #0
 8013aac:	3401      	adds	r4, #1
 8013aae:	9305      	str	r3, [sp, #20]
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	f04f 0c0a 	mov.w	ip, #10
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013abc:	3a30      	subs	r2, #48	; 0x30
 8013abe:	2a09      	cmp	r2, #9
 8013ac0:	d903      	bls.n	8013aca <_vfiprintf_r+0x1ee>
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d0c5      	beq.n	8013a52 <_vfiprintf_r+0x176>
 8013ac6:	9105      	str	r1, [sp, #20]
 8013ac8:	e7c3      	b.n	8013a52 <_vfiprintf_r+0x176>
 8013aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ace:	4604      	mov	r4, r0
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	e7f0      	b.n	8013ab6 <_vfiprintf_r+0x1da>
 8013ad4:	ab03      	add	r3, sp, #12
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	462a      	mov	r2, r5
 8013ada:	4b16      	ldr	r3, [pc, #88]	; (8013b34 <_vfiprintf_r+0x258>)
 8013adc:	a904      	add	r1, sp, #16
 8013ade:	4630      	mov	r0, r6
 8013ae0:	f3af 8000 	nop.w
 8013ae4:	4607      	mov	r7, r0
 8013ae6:	1c78      	adds	r0, r7, #1
 8013ae8:	d1d6      	bne.n	8013a98 <_vfiprintf_r+0x1bc>
 8013aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013aec:	07d9      	lsls	r1, r3, #31
 8013aee:	d405      	bmi.n	8013afc <_vfiprintf_r+0x220>
 8013af0:	89ab      	ldrh	r3, [r5, #12]
 8013af2:	059a      	lsls	r2, r3, #22
 8013af4:	d402      	bmi.n	8013afc <_vfiprintf_r+0x220>
 8013af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013af8:	f7ff fc1b 	bl	8013332 <__retarget_lock_release_recursive>
 8013afc:	89ab      	ldrh	r3, [r5, #12]
 8013afe:	065b      	lsls	r3, r3, #25
 8013b00:	f53f af12 	bmi.w	8013928 <_vfiprintf_r+0x4c>
 8013b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b06:	e711      	b.n	801392c <_vfiprintf_r+0x50>
 8013b08:	ab03      	add	r3, sp, #12
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	462a      	mov	r2, r5
 8013b0e:	4b09      	ldr	r3, [pc, #36]	; (8013b34 <_vfiprintf_r+0x258>)
 8013b10:	a904      	add	r1, sp, #16
 8013b12:	4630      	mov	r0, r6
 8013b14:	f000 f880 	bl	8013c18 <_printf_i>
 8013b18:	e7e4      	b.n	8013ae4 <_vfiprintf_r+0x208>
 8013b1a:	bf00      	nop
 8013b1c:	08016e58 	.word	0x08016e58
 8013b20:	08016e78 	.word	0x08016e78
 8013b24:	08016e38 	.word	0x08016e38
 8013b28:	08016e98 	.word	0x08016e98
 8013b2c:	08016ea2 	.word	0x08016ea2
 8013b30:	00000000 	.word	0x00000000
 8013b34:	080138b7 	.word	0x080138b7
 8013b38:	08016e9e 	.word	0x08016e9e

08013b3c <_printf_common>:
 8013b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b40:	4616      	mov	r6, r2
 8013b42:	4699      	mov	r9, r3
 8013b44:	688a      	ldr	r2, [r1, #8]
 8013b46:	690b      	ldr	r3, [r1, #16]
 8013b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	bfb8      	it	lt
 8013b50:	4613      	movlt	r3, r2
 8013b52:	6033      	str	r3, [r6, #0]
 8013b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b58:	4607      	mov	r7, r0
 8013b5a:	460c      	mov	r4, r1
 8013b5c:	b10a      	cbz	r2, 8013b62 <_printf_common+0x26>
 8013b5e:	3301      	adds	r3, #1
 8013b60:	6033      	str	r3, [r6, #0]
 8013b62:	6823      	ldr	r3, [r4, #0]
 8013b64:	0699      	lsls	r1, r3, #26
 8013b66:	bf42      	ittt	mi
 8013b68:	6833      	ldrmi	r3, [r6, #0]
 8013b6a:	3302      	addmi	r3, #2
 8013b6c:	6033      	strmi	r3, [r6, #0]
 8013b6e:	6825      	ldr	r5, [r4, #0]
 8013b70:	f015 0506 	ands.w	r5, r5, #6
 8013b74:	d106      	bne.n	8013b84 <_printf_common+0x48>
 8013b76:	f104 0a19 	add.w	sl, r4, #25
 8013b7a:	68e3      	ldr	r3, [r4, #12]
 8013b7c:	6832      	ldr	r2, [r6, #0]
 8013b7e:	1a9b      	subs	r3, r3, r2
 8013b80:	42ab      	cmp	r3, r5
 8013b82:	dc26      	bgt.n	8013bd2 <_printf_common+0x96>
 8013b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b88:	1e13      	subs	r3, r2, #0
 8013b8a:	6822      	ldr	r2, [r4, #0]
 8013b8c:	bf18      	it	ne
 8013b8e:	2301      	movne	r3, #1
 8013b90:	0692      	lsls	r2, r2, #26
 8013b92:	d42b      	bmi.n	8013bec <_printf_common+0xb0>
 8013b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b98:	4649      	mov	r1, r9
 8013b9a:	4638      	mov	r0, r7
 8013b9c:	47c0      	blx	r8
 8013b9e:	3001      	adds	r0, #1
 8013ba0:	d01e      	beq.n	8013be0 <_printf_common+0xa4>
 8013ba2:	6823      	ldr	r3, [r4, #0]
 8013ba4:	68e5      	ldr	r5, [r4, #12]
 8013ba6:	6832      	ldr	r2, [r6, #0]
 8013ba8:	f003 0306 	and.w	r3, r3, #6
 8013bac:	2b04      	cmp	r3, #4
 8013bae:	bf08      	it	eq
 8013bb0:	1aad      	subeq	r5, r5, r2
 8013bb2:	68a3      	ldr	r3, [r4, #8]
 8013bb4:	6922      	ldr	r2, [r4, #16]
 8013bb6:	bf0c      	ite	eq
 8013bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bbc:	2500      	movne	r5, #0
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	bfc4      	itt	gt
 8013bc2:	1a9b      	subgt	r3, r3, r2
 8013bc4:	18ed      	addgt	r5, r5, r3
 8013bc6:	2600      	movs	r6, #0
 8013bc8:	341a      	adds	r4, #26
 8013bca:	42b5      	cmp	r5, r6
 8013bcc:	d11a      	bne.n	8013c04 <_printf_common+0xc8>
 8013bce:	2000      	movs	r0, #0
 8013bd0:	e008      	b.n	8013be4 <_printf_common+0xa8>
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	4652      	mov	r2, sl
 8013bd6:	4649      	mov	r1, r9
 8013bd8:	4638      	mov	r0, r7
 8013bda:	47c0      	blx	r8
 8013bdc:	3001      	adds	r0, #1
 8013bde:	d103      	bne.n	8013be8 <_printf_common+0xac>
 8013be0:	f04f 30ff 	mov.w	r0, #4294967295
 8013be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013be8:	3501      	adds	r5, #1
 8013bea:	e7c6      	b.n	8013b7a <_printf_common+0x3e>
 8013bec:	18e1      	adds	r1, r4, r3
 8013bee:	1c5a      	adds	r2, r3, #1
 8013bf0:	2030      	movs	r0, #48	; 0x30
 8013bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013bf6:	4422      	add	r2, r4
 8013bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c00:	3302      	adds	r3, #2
 8013c02:	e7c7      	b.n	8013b94 <_printf_common+0x58>
 8013c04:	2301      	movs	r3, #1
 8013c06:	4622      	mov	r2, r4
 8013c08:	4649      	mov	r1, r9
 8013c0a:	4638      	mov	r0, r7
 8013c0c:	47c0      	blx	r8
 8013c0e:	3001      	adds	r0, #1
 8013c10:	d0e6      	beq.n	8013be0 <_printf_common+0xa4>
 8013c12:	3601      	adds	r6, #1
 8013c14:	e7d9      	b.n	8013bca <_printf_common+0x8e>
	...

08013c18 <_printf_i>:
 8013c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c1c:	7e0f      	ldrb	r7, [r1, #24]
 8013c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c20:	2f78      	cmp	r7, #120	; 0x78
 8013c22:	4691      	mov	r9, r2
 8013c24:	4680      	mov	r8, r0
 8013c26:	460c      	mov	r4, r1
 8013c28:	469a      	mov	sl, r3
 8013c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c2e:	d807      	bhi.n	8013c40 <_printf_i+0x28>
 8013c30:	2f62      	cmp	r7, #98	; 0x62
 8013c32:	d80a      	bhi.n	8013c4a <_printf_i+0x32>
 8013c34:	2f00      	cmp	r7, #0
 8013c36:	f000 80d8 	beq.w	8013dea <_printf_i+0x1d2>
 8013c3a:	2f58      	cmp	r7, #88	; 0x58
 8013c3c:	f000 80a3 	beq.w	8013d86 <_printf_i+0x16e>
 8013c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c48:	e03a      	b.n	8013cc0 <_printf_i+0xa8>
 8013c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c4e:	2b15      	cmp	r3, #21
 8013c50:	d8f6      	bhi.n	8013c40 <_printf_i+0x28>
 8013c52:	a101      	add	r1, pc, #4	; (adr r1, 8013c58 <_printf_i+0x40>)
 8013c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c58:	08013cb1 	.word	0x08013cb1
 8013c5c:	08013cc5 	.word	0x08013cc5
 8013c60:	08013c41 	.word	0x08013c41
 8013c64:	08013c41 	.word	0x08013c41
 8013c68:	08013c41 	.word	0x08013c41
 8013c6c:	08013c41 	.word	0x08013c41
 8013c70:	08013cc5 	.word	0x08013cc5
 8013c74:	08013c41 	.word	0x08013c41
 8013c78:	08013c41 	.word	0x08013c41
 8013c7c:	08013c41 	.word	0x08013c41
 8013c80:	08013c41 	.word	0x08013c41
 8013c84:	08013dd1 	.word	0x08013dd1
 8013c88:	08013cf5 	.word	0x08013cf5
 8013c8c:	08013db3 	.word	0x08013db3
 8013c90:	08013c41 	.word	0x08013c41
 8013c94:	08013c41 	.word	0x08013c41
 8013c98:	08013df3 	.word	0x08013df3
 8013c9c:	08013c41 	.word	0x08013c41
 8013ca0:	08013cf5 	.word	0x08013cf5
 8013ca4:	08013c41 	.word	0x08013c41
 8013ca8:	08013c41 	.word	0x08013c41
 8013cac:	08013dbb 	.word	0x08013dbb
 8013cb0:	682b      	ldr	r3, [r5, #0]
 8013cb2:	1d1a      	adds	r2, r3, #4
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	602a      	str	r2, [r5, #0]
 8013cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	e0a3      	b.n	8013e0c <_printf_i+0x1f4>
 8013cc4:	6820      	ldr	r0, [r4, #0]
 8013cc6:	6829      	ldr	r1, [r5, #0]
 8013cc8:	0606      	lsls	r6, r0, #24
 8013cca:	f101 0304 	add.w	r3, r1, #4
 8013cce:	d50a      	bpl.n	8013ce6 <_printf_i+0xce>
 8013cd0:	680e      	ldr	r6, [r1, #0]
 8013cd2:	602b      	str	r3, [r5, #0]
 8013cd4:	2e00      	cmp	r6, #0
 8013cd6:	da03      	bge.n	8013ce0 <_printf_i+0xc8>
 8013cd8:	232d      	movs	r3, #45	; 0x2d
 8013cda:	4276      	negs	r6, r6
 8013cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ce0:	485e      	ldr	r0, [pc, #376]	; (8013e5c <_printf_i+0x244>)
 8013ce2:	230a      	movs	r3, #10
 8013ce4:	e019      	b.n	8013d1a <_printf_i+0x102>
 8013ce6:	680e      	ldr	r6, [r1, #0]
 8013ce8:	602b      	str	r3, [r5, #0]
 8013cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013cee:	bf18      	it	ne
 8013cf0:	b236      	sxthne	r6, r6
 8013cf2:	e7ef      	b.n	8013cd4 <_printf_i+0xbc>
 8013cf4:	682b      	ldr	r3, [r5, #0]
 8013cf6:	6820      	ldr	r0, [r4, #0]
 8013cf8:	1d19      	adds	r1, r3, #4
 8013cfa:	6029      	str	r1, [r5, #0]
 8013cfc:	0601      	lsls	r1, r0, #24
 8013cfe:	d501      	bpl.n	8013d04 <_printf_i+0xec>
 8013d00:	681e      	ldr	r6, [r3, #0]
 8013d02:	e002      	b.n	8013d0a <_printf_i+0xf2>
 8013d04:	0646      	lsls	r6, r0, #25
 8013d06:	d5fb      	bpl.n	8013d00 <_printf_i+0xe8>
 8013d08:	881e      	ldrh	r6, [r3, #0]
 8013d0a:	4854      	ldr	r0, [pc, #336]	; (8013e5c <_printf_i+0x244>)
 8013d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8013d0e:	bf0c      	ite	eq
 8013d10:	2308      	moveq	r3, #8
 8013d12:	230a      	movne	r3, #10
 8013d14:	2100      	movs	r1, #0
 8013d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d1a:	6865      	ldr	r5, [r4, #4]
 8013d1c:	60a5      	str	r5, [r4, #8]
 8013d1e:	2d00      	cmp	r5, #0
 8013d20:	bfa2      	ittt	ge
 8013d22:	6821      	ldrge	r1, [r4, #0]
 8013d24:	f021 0104 	bicge.w	r1, r1, #4
 8013d28:	6021      	strge	r1, [r4, #0]
 8013d2a:	b90e      	cbnz	r6, 8013d30 <_printf_i+0x118>
 8013d2c:	2d00      	cmp	r5, #0
 8013d2e:	d04d      	beq.n	8013dcc <_printf_i+0x1b4>
 8013d30:	4615      	mov	r5, r2
 8013d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d36:	fb03 6711 	mls	r7, r3, r1, r6
 8013d3a:	5dc7      	ldrb	r7, [r0, r7]
 8013d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d40:	4637      	mov	r7, r6
 8013d42:	42bb      	cmp	r3, r7
 8013d44:	460e      	mov	r6, r1
 8013d46:	d9f4      	bls.n	8013d32 <_printf_i+0x11a>
 8013d48:	2b08      	cmp	r3, #8
 8013d4a:	d10b      	bne.n	8013d64 <_printf_i+0x14c>
 8013d4c:	6823      	ldr	r3, [r4, #0]
 8013d4e:	07de      	lsls	r6, r3, #31
 8013d50:	d508      	bpl.n	8013d64 <_printf_i+0x14c>
 8013d52:	6923      	ldr	r3, [r4, #16]
 8013d54:	6861      	ldr	r1, [r4, #4]
 8013d56:	4299      	cmp	r1, r3
 8013d58:	bfde      	ittt	le
 8013d5a:	2330      	movle	r3, #48	; 0x30
 8013d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d64:	1b52      	subs	r2, r2, r5
 8013d66:	6122      	str	r2, [r4, #16]
 8013d68:	f8cd a000 	str.w	sl, [sp]
 8013d6c:	464b      	mov	r3, r9
 8013d6e:	aa03      	add	r2, sp, #12
 8013d70:	4621      	mov	r1, r4
 8013d72:	4640      	mov	r0, r8
 8013d74:	f7ff fee2 	bl	8013b3c <_printf_common>
 8013d78:	3001      	adds	r0, #1
 8013d7a:	d14c      	bne.n	8013e16 <_printf_i+0x1fe>
 8013d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d80:	b004      	add	sp, #16
 8013d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d86:	4835      	ldr	r0, [pc, #212]	; (8013e5c <_printf_i+0x244>)
 8013d88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013d8c:	6829      	ldr	r1, [r5, #0]
 8013d8e:	6823      	ldr	r3, [r4, #0]
 8013d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8013d94:	6029      	str	r1, [r5, #0]
 8013d96:	061d      	lsls	r5, r3, #24
 8013d98:	d514      	bpl.n	8013dc4 <_printf_i+0x1ac>
 8013d9a:	07df      	lsls	r7, r3, #31
 8013d9c:	bf44      	itt	mi
 8013d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8013da2:	6023      	strmi	r3, [r4, #0]
 8013da4:	b91e      	cbnz	r6, 8013dae <_printf_i+0x196>
 8013da6:	6823      	ldr	r3, [r4, #0]
 8013da8:	f023 0320 	bic.w	r3, r3, #32
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	2310      	movs	r3, #16
 8013db0:	e7b0      	b.n	8013d14 <_printf_i+0xfc>
 8013db2:	6823      	ldr	r3, [r4, #0]
 8013db4:	f043 0320 	orr.w	r3, r3, #32
 8013db8:	6023      	str	r3, [r4, #0]
 8013dba:	2378      	movs	r3, #120	; 0x78
 8013dbc:	4828      	ldr	r0, [pc, #160]	; (8013e60 <_printf_i+0x248>)
 8013dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013dc2:	e7e3      	b.n	8013d8c <_printf_i+0x174>
 8013dc4:	0659      	lsls	r1, r3, #25
 8013dc6:	bf48      	it	mi
 8013dc8:	b2b6      	uxthmi	r6, r6
 8013dca:	e7e6      	b.n	8013d9a <_printf_i+0x182>
 8013dcc:	4615      	mov	r5, r2
 8013dce:	e7bb      	b.n	8013d48 <_printf_i+0x130>
 8013dd0:	682b      	ldr	r3, [r5, #0]
 8013dd2:	6826      	ldr	r6, [r4, #0]
 8013dd4:	6961      	ldr	r1, [r4, #20]
 8013dd6:	1d18      	adds	r0, r3, #4
 8013dd8:	6028      	str	r0, [r5, #0]
 8013dda:	0635      	lsls	r5, r6, #24
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	d501      	bpl.n	8013de4 <_printf_i+0x1cc>
 8013de0:	6019      	str	r1, [r3, #0]
 8013de2:	e002      	b.n	8013dea <_printf_i+0x1d2>
 8013de4:	0670      	lsls	r0, r6, #25
 8013de6:	d5fb      	bpl.n	8013de0 <_printf_i+0x1c8>
 8013de8:	8019      	strh	r1, [r3, #0]
 8013dea:	2300      	movs	r3, #0
 8013dec:	6123      	str	r3, [r4, #16]
 8013dee:	4615      	mov	r5, r2
 8013df0:	e7ba      	b.n	8013d68 <_printf_i+0x150>
 8013df2:	682b      	ldr	r3, [r5, #0]
 8013df4:	1d1a      	adds	r2, r3, #4
 8013df6:	602a      	str	r2, [r5, #0]
 8013df8:	681d      	ldr	r5, [r3, #0]
 8013dfa:	6862      	ldr	r2, [r4, #4]
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4628      	mov	r0, r5
 8013e00:	f7ec fa0e 	bl	8000220 <memchr>
 8013e04:	b108      	cbz	r0, 8013e0a <_printf_i+0x1f2>
 8013e06:	1b40      	subs	r0, r0, r5
 8013e08:	6060      	str	r0, [r4, #4]
 8013e0a:	6863      	ldr	r3, [r4, #4]
 8013e0c:	6123      	str	r3, [r4, #16]
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e14:	e7a8      	b.n	8013d68 <_printf_i+0x150>
 8013e16:	6923      	ldr	r3, [r4, #16]
 8013e18:	462a      	mov	r2, r5
 8013e1a:	4649      	mov	r1, r9
 8013e1c:	4640      	mov	r0, r8
 8013e1e:	47d0      	blx	sl
 8013e20:	3001      	adds	r0, #1
 8013e22:	d0ab      	beq.n	8013d7c <_printf_i+0x164>
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	079b      	lsls	r3, r3, #30
 8013e28:	d413      	bmi.n	8013e52 <_printf_i+0x23a>
 8013e2a:	68e0      	ldr	r0, [r4, #12]
 8013e2c:	9b03      	ldr	r3, [sp, #12]
 8013e2e:	4298      	cmp	r0, r3
 8013e30:	bfb8      	it	lt
 8013e32:	4618      	movlt	r0, r3
 8013e34:	e7a4      	b.n	8013d80 <_printf_i+0x168>
 8013e36:	2301      	movs	r3, #1
 8013e38:	4632      	mov	r2, r6
 8013e3a:	4649      	mov	r1, r9
 8013e3c:	4640      	mov	r0, r8
 8013e3e:	47d0      	blx	sl
 8013e40:	3001      	adds	r0, #1
 8013e42:	d09b      	beq.n	8013d7c <_printf_i+0x164>
 8013e44:	3501      	adds	r5, #1
 8013e46:	68e3      	ldr	r3, [r4, #12]
 8013e48:	9903      	ldr	r1, [sp, #12]
 8013e4a:	1a5b      	subs	r3, r3, r1
 8013e4c:	42ab      	cmp	r3, r5
 8013e4e:	dcf2      	bgt.n	8013e36 <_printf_i+0x21e>
 8013e50:	e7eb      	b.n	8013e2a <_printf_i+0x212>
 8013e52:	2500      	movs	r5, #0
 8013e54:	f104 0619 	add.w	r6, r4, #25
 8013e58:	e7f5      	b.n	8013e46 <_printf_i+0x22e>
 8013e5a:	bf00      	nop
 8013e5c:	08016ea9 	.word	0x08016ea9
 8013e60:	08016eba 	.word	0x08016eba

08013e64 <_sbrk_r>:
 8013e64:	b538      	push	{r3, r4, r5, lr}
 8013e66:	4d06      	ldr	r5, [pc, #24]	; (8013e80 <_sbrk_r+0x1c>)
 8013e68:	2300      	movs	r3, #0
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	4608      	mov	r0, r1
 8013e6e:	602b      	str	r3, [r5, #0]
 8013e70:	f7ed f8d6 	bl	8001020 <_sbrk>
 8013e74:	1c43      	adds	r3, r0, #1
 8013e76:	d102      	bne.n	8013e7e <_sbrk_r+0x1a>
 8013e78:	682b      	ldr	r3, [r5, #0]
 8013e7a:	b103      	cbz	r3, 8013e7e <_sbrk_r+0x1a>
 8013e7c:	6023      	str	r3, [r4, #0]
 8013e7e:	bd38      	pop	{r3, r4, r5, pc}
 8013e80:	2000dae0 	.word	0x2000dae0

08013e84 <__sread>:
 8013e84:	b510      	push	{r4, lr}
 8013e86:	460c      	mov	r4, r1
 8013e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e8c:	f000 f8d8 	bl	8014040 <_read_r>
 8013e90:	2800      	cmp	r0, #0
 8013e92:	bfab      	itete	ge
 8013e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013e96:	89a3      	ldrhlt	r3, [r4, #12]
 8013e98:	181b      	addge	r3, r3, r0
 8013e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e9e:	bfac      	ite	ge
 8013ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ea2:	81a3      	strhlt	r3, [r4, #12]
 8013ea4:	bd10      	pop	{r4, pc}

08013ea6 <__swrite>:
 8013ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eaa:	461f      	mov	r7, r3
 8013eac:	898b      	ldrh	r3, [r1, #12]
 8013eae:	05db      	lsls	r3, r3, #23
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	460c      	mov	r4, r1
 8013eb4:	4616      	mov	r6, r2
 8013eb6:	d505      	bpl.n	8013ec4 <__swrite+0x1e>
 8013eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ebc:	2302      	movs	r3, #2
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	f000 f870 	bl	8013fa4 <_lseek_r>
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ece:	81a3      	strh	r3, [r4, #12]
 8013ed0:	4632      	mov	r2, r6
 8013ed2:	463b      	mov	r3, r7
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013eda:	f000 b817 	b.w	8013f0c <_write_r>

08013ede <__sseek>:
 8013ede:	b510      	push	{r4, lr}
 8013ee0:	460c      	mov	r4, r1
 8013ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ee6:	f000 f85d 	bl	8013fa4 <_lseek_r>
 8013eea:	1c43      	adds	r3, r0, #1
 8013eec:	89a3      	ldrh	r3, [r4, #12]
 8013eee:	bf15      	itete	ne
 8013ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013efa:	81a3      	strheq	r3, [r4, #12]
 8013efc:	bf18      	it	ne
 8013efe:	81a3      	strhne	r3, [r4, #12]
 8013f00:	bd10      	pop	{r4, pc}

08013f02 <__sclose>:
 8013f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f06:	f000 b81b 	b.w	8013f40 <_close_r>
	...

08013f0c <_write_r>:
 8013f0c:	b538      	push	{r3, r4, r5, lr}
 8013f0e:	4d07      	ldr	r5, [pc, #28]	; (8013f2c <_write_r+0x20>)
 8013f10:	4604      	mov	r4, r0
 8013f12:	4608      	mov	r0, r1
 8013f14:	4611      	mov	r1, r2
 8013f16:	2200      	movs	r2, #0
 8013f18:	602a      	str	r2, [r5, #0]
 8013f1a:	461a      	mov	r2, r3
 8013f1c:	f7ec fe1c 	bl	8000b58 <_write>
 8013f20:	1c43      	adds	r3, r0, #1
 8013f22:	d102      	bne.n	8013f2a <_write_r+0x1e>
 8013f24:	682b      	ldr	r3, [r5, #0]
 8013f26:	b103      	cbz	r3, 8013f2a <_write_r+0x1e>
 8013f28:	6023      	str	r3, [r4, #0]
 8013f2a:	bd38      	pop	{r3, r4, r5, pc}
 8013f2c:	2000dae0 	.word	0x2000dae0

08013f30 <abort>:
 8013f30:	b508      	push	{r3, lr}
 8013f32:	2006      	movs	r0, #6
 8013f34:	f000 f8be 	bl	80140b4 <raise>
 8013f38:	2001      	movs	r0, #1
 8013f3a:	f000 f8ef 	bl	801411c <_exit>
	...

08013f40 <_close_r>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	4d06      	ldr	r5, [pc, #24]	; (8013f5c <_close_r+0x1c>)
 8013f44:	2300      	movs	r3, #0
 8013f46:	4604      	mov	r4, r0
 8013f48:	4608      	mov	r0, r1
 8013f4a:	602b      	str	r3, [r5, #0]
 8013f4c:	f7ec fe30 	bl	8000bb0 <_close>
 8013f50:	1c43      	adds	r3, r0, #1
 8013f52:	d102      	bne.n	8013f5a <_close_r+0x1a>
 8013f54:	682b      	ldr	r3, [r5, #0]
 8013f56:	b103      	cbz	r3, 8013f5a <_close_r+0x1a>
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}
 8013f5c:	2000dae0 	.word	0x2000dae0

08013f60 <_fstat_r>:
 8013f60:	b538      	push	{r3, r4, r5, lr}
 8013f62:	4d07      	ldr	r5, [pc, #28]	; (8013f80 <_fstat_r+0x20>)
 8013f64:	2300      	movs	r3, #0
 8013f66:	4604      	mov	r4, r0
 8013f68:	4608      	mov	r0, r1
 8013f6a:	4611      	mov	r1, r2
 8013f6c:	602b      	str	r3, [r5, #0]
 8013f6e:	f7ec fe75 	bl	8000c5c <_fstat>
 8013f72:	1c43      	adds	r3, r0, #1
 8013f74:	d102      	bne.n	8013f7c <_fstat_r+0x1c>
 8013f76:	682b      	ldr	r3, [r5, #0]
 8013f78:	b103      	cbz	r3, 8013f7c <_fstat_r+0x1c>
 8013f7a:	6023      	str	r3, [r4, #0]
 8013f7c:	bd38      	pop	{r3, r4, r5, pc}
 8013f7e:	bf00      	nop
 8013f80:	2000dae0 	.word	0x2000dae0

08013f84 <_isatty_r>:
 8013f84:	b538      	push	{r3, r4, r5, lr}
 8013f86:	4d06      	ldr	r5, [pc, #24]	; (8013fa0 <_isatty_r+0x1c>)
 8013f88:	2300      	movs	r3, #0
 8013f8a:	4604      	mov	r4, r0
 8013f8c:	4608      	mov	r0, r1
 8013f8e:	602b      	str	r3, [r5, #0]
 8013f90:	f7ec fdca 	bl	8000b28 <_isatty>
 8013f94:	1c43      	adds	r3, r0, #1
 8013f96:	d102      	bne.n	8013f9e <_isatty_r+0x1a>
 8013f98:	682b      	ldr	r3, [r5, #0]
 8013f9a:	b103      	cbz	r3, 8013f9e <_isatty_r+0x1a>
 8013f9c:	6023      	str	r3, [r4, #0]
 8013f9e:	bd38      	pop	{r3, r4, r5, pc}
 8013fa0:	2000dae0 	.word	0x2000dae0

08013fa4 <_lseek_r>:
 8013fa4:	b538      	push	{r3, r4, r5, lr}
 8013fa6:	4d07      	ldr	r5, [pc, #28]	; (8013fc4 <_lseek_r+0x20>)
 8013fa8:	4604      	mov	r4, r0
 8013faa:	4608      	mov	r0, r1
 8013fac:	4611      	mov	r1, r2
 8013fae:	2200      	movs	r2, #0
 8013fb0:	602a      	str	r2, [r5, #0]
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	f7ec fe16 	bl	8000be4 <_lseek>
 8013fb8:	1c43      	adds	r3, r0, #1
 8013fba:	d102      	bne.n	8013fc2 <_lseek_r+0x1e>
 8013fbc:	682b      	ldr	r3, [r5, #0]
 8013fbe:	b103      	cbz	r3, 8013fc2 <_lseek_r+0x1e>
 8013fc0:	6023      	str	r3, [r4, #0]
 8013fc2:	bd38      	pop	{r3, r4, r5, pc}
 8013fc4:	2000dae0 	.word	0x2000dae0

08013fc8 <__malloc_lock>:
 8013fc8:	4801      	ldr	r0, [pc, #4]	; (8013fd0 <__malloc_lock+0x8>)
 8013fca:	f7ff b9b1 	b.w	8013330 <__retarget_lock_acquire_recursive>
 8013fce:	bf00      	nop
 8013fd0:	2000dae4 	.word	0x2000dae4

08013fd4 <__malloc_unlock>:
 8013fd4:	4801      	ldr	r0, [pc, #4]	; (8013fdc <__malloc_unlock+0x8>)
 8013fd6:	f7ff b9ac 	b.w	8013332 <__retarget_lock_release_recursive>
 8013fda:	bf00      	nop
 8013fdc:	2000dae4 	.word	0x2000dae4

08013fe0 <_realloc_r>:
 8013fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe4:	4680      	mov	r8, r0
 8013fe6:	4614      	mov	r4, r2
 8013fe8:	460e      	mov	r6, r1
 8013fea:	b921      	cbnz	r1, 8013ff6 <_realloc_r+0x16>
 8013fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	f7ff ba79 	b.w	80134e8 <_malloc_r>
 8013ff6:	b92a      	cbnz	r2, 8014004 <_realloc_r+0x24>
 8013ff8:	f7ff fa0a 	bl	8013410 <_free_r>
 8013ffc:	4625      	mov	r5, r4
 8013ffe:	4628      	mov	r0, r5
 8014000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014004:	f000 f872 	bl	80140ec <_malloc_usable_size_r>
 8014008:	4284      	cmp	r4, r0
 801400a:	4607      	mov	r7, r0
 801400c:	d802      	bhi.n	8014014 <_realloc_r+0x34>
 801400e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014012:	d812      	bhi.n	801403a <_realloc_r+0x5a>
 8014014:	4621      	mov	r1, r4
 8014016:	4640      	mov	r0, r8
 8014018:	f7ff fa66 	bl	80134e8 <_malloc_r>
 801401c:	4605      	mov	r5, r0
 801401e:	2800      	cmp	r0, #0
 8014020:	d0ed      	beq.n	8013ffe <_realloc_r+0x1e>
 8014022:	42bc      	cmp	r4, r7
 8014024:	4622      	mov	r2, r4
 8014026:	4631      	mov	r1, r6
 8014028:	bf28      	it	cs
 801402a:	463a      	movcs	r2, r7
 801402c:	f7fe fcae 	bl	801298c <memcpy>
 8014030:	4631      	mov	r1, r6
 8014032:	4640      	mov	r0, r8
 8014034:	f7ff f9ec 	bl	8013410 <_free_r>
 8014038:	e7e1      	b.n	8013ffe <_realloc_r+0x1e>
 801403a:	4635      	mov	r5, r6
 801403c:	e7df      	b.n	8013ffe <_realloc_r+0x1e>
	...

08014040 <_read_r>:
 8014040:	b538      	push	{r3, r4, r5, lr}
 8014042:	4d07      	ldr	r5, [pc, #28]	; (8014060 <_read_r+0x20>)
 8014044:	4604      	mov	r4, r0
 8014046:	4608      	mov	r0, r1
 8014048:	4611      	mov	r1, r2
 801404a:	2200      	movs	r2, #0
 801404c:	602a      	str	r2, [r5, #0]
 801404e:	461a      	mov	r2, r3
 8014050:	f7ec fddc 	bl	8000c0c <_read>
 8014054:	1c43      	adds	r3, r0, #1
 8014056:	d102      	bne.n	801405e <_read_r+0x1e>
 8014058:	682b      	ldr	r3, [r5, #0]
 801405a:	b103      	cbz	r3, 801405e <_read_r+0x1e>
 801405c:	6023      	str	r3, [r4, #0]
 801405e:	bd38      	pop	{r3, r4, r5, pc}
 8014060:	2000dae0 	.word	0x2000dae0

08014064 <_raise_r>:
 8014064:	291f      	cmp	r1, #31
 8014066:	b538      	push	{r3, r4, r5, lr}
 8014068:	4604      	mov	r4, r0
 801406a:	460d      	mov	r5, r1
 801406c:	d904      	bls.n	8014078 <_raise_r+0x14>
 801406e:	2316      	movs	r3, #22
 8014070:	6003      	str	r3, [r0, #0]
 8014072:	f04f 30ff 	mov.w	r0, #4294967295
 8014076:	bd38      	pop	{r3, r4, r5, pc}
 8014078:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801407a:	b112      	cbz	r2, 8014082 <_raise_r+0x1e>
 801407c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014080:	b94b      	cbnz	r3, 8014096 <_raise_r+0x32>
 8014082:	4620      	mov	r0, r4
 8014084:	f000 f830 	bl	80140e8 <_getpid_r>
 8014088:	462a      	mov	r2, r5
 801408a:	4601      	mov	r1, r0
 801408c:	4620      	mov	r0, r4
 801408e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014092:	f000 b817 	b.w	80140c4 <_kill_r>
 8014096:	2b01      	cmp	r3, #1
 8014098:	d00a      	beq.n	80140b0 <_raise_r+0x4c>
 801409a:	1c59      	adds	r1, r3, #1
 801409c:	d103      	bne.n	80140a6 <_raise_r+0x42>
 801409e:	2316      	movs	r3, #22
 80140a0:	6003      	str	r3, [r0, #0]
 80140a2:	2001      	movs	r0, #1
 80140a4:	e7e7      	b.n	8014076 <_raise_r+0x12>
 80140a6:	2400      	movs	r4, #0
 80140a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80140ac:	4628      	mov	r0, r5
 80140ae:	4798      	blx	r3
 80140b0:	2000      	movs	r0, #0
 80140b2:	e7e0      	b.n	8014076 <_raise_r+0x12>

080140b4 <raise>:
 80140b4:	4b02      	ldr	r3, [pc, #8]	; (80140c0 <raise+0xc>)
 80140b6:	4601      	mov	r1, r0
 80140b8:	6818      	ldr	r0, [r3, #0]
 80140ba:	f7ff bfd3 	b.w	8014064 <_raise_r>
 80140be:	bf00      	nop
 80140c0:	2000001c 	.word	0x2000001c

080140c4 <_kill_r>:
 80140c4:	b538      	push	{r3, r4, r5, lr}
 80140c6:	4d07      	ldr	r5, [pc, #28]	; (80140e4 <_kill_r+0x20>)
 80140c8:	2300      	movs	r3, #0
 80140ca:	4604      	mov	r4, r0
 80140cc:	4608      	mov	r0, r1
 80140ce:	4611      	mov	r1, r2
 80140d0:	602b      	str	r3, [r5, #0]
 80140d2:	f000 f81b 	bl	801410c <_kill>
 80140d6:	1c43      	adds	r3, r0, #1
 80140d8:	d102      	bne.n	80140e0 <_kill_r+0x1c>
 80140da:	682b      	ldr	r3, [r5, #0]
 80140dc:	b103      	cbz	r3, 80140e0 <_kill_r+0x1c>
 80140de:	6023      	str	r3, [r4, #0]
 80140e0:	bd38      	pop	{r3, r4, r5, pc}
 80140e2:	bf00      	nop
 80140e4:	2000dae0 	.word	0x2000dae0

080140e8 <_getpid_r>:
 80140e8:	f000 b808 	b.w	80140fc <_getpid>

080140ec <_malloc_usable_size_r>:
 80140ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140f0:	1f18      	subs	r0, r3, #4
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	bfbc      	itt	lt
 80140f6:	580b      	ldrlt	r3, [r1, r0]
 80140f8:	18c0      	addlt	r0, r0, r3
 80140fa:	4770      	bx	lr

080140fc <_getpid>:
 80140fc:	4b02      	ldr	r3, [pc, #8]	; (8014108 <_getpid+0xc>)
 80140fe:	2258      	movs	r2, #88	; 0x58
 8014100:	601a      	str	r2, [r3, #0]
 8014102:	f04f 30ff 	mov.w	r0, #4294967295
 8014106:	4770      	bx	lr
 8014108:	2000dae0 	.word	0x2000dae0

0801410c <_kill>:
 801410c:	4b02      	ldr	r3, [pc, #8]	; (8014118 <_kill+0xc>)
 801410e:	2258      	movs	r2, #88	; 0x58
 8014110:	601a      	str	r2, [r3, #0]
 8014112:	f04f 30ff 	mov.w	r0, #4294967295
 8014116:	4770      	bx	lr
 8014118:	2000dae0 	.word	0x2000dae0

0801411c <_exit>:
 801411c:	e7fe      	b.n	801411c <_exit>
	...

08014120 <_init>:
 8014120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014122:	bf00      	nop
 8014124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014126:	bc08      	pop	{r3}
 8014128:	469e      	mov	lr, r3
 801412a:	4770      	bx	lr

0801412c <_fini>:
 801412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801412e:	bf00      	nop
 8014130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014132:	bc08      	pop	{r3}
 8014134:	469e      	mov	lr, r3
 8014136:	4770      	bx	lr
