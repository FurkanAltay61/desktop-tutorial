
CommTestQXK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a0  080092a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a8  080092a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080092b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034c0  20000078  08009328  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20003538  08009328  00023538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221a3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000586b  00000000  00000000  0004224b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00047ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  000491f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f051  00000000  00000000  0004a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b71  00000000  00000000  00079799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001106de  00000000  00000000  0009a30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa9e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f4  00000000  00000000  001aaa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000076  00000000  00000000  001b0f2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009120 	.word	0x08009120

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009120 	.word	0x08009120

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <__NVIC_SystemReset+0x24>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005fa:	4904      	ldr	r1, [pc, #16]	; (800060c <__NVIC_SystemReset+0x24>)
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <__NVIC_SystemReset+0x28>)
 80005fe:	4313      	orrs	r3, r2
 8000600:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <__NVIC_SystemReset+0x20>
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	05fa0004 	.word	0x05fa0004

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b08d      	sub	sp, #52	; 0x34
 8000618:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fd5c 	bl	80010d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f867 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f95f 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f907 	bl	8000838 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800062a:	f000 f935 	bl	8000898 <MX_DMA_Init>
  MX_TIM6_Init();
 800062e:	f000 f8cd 	bl	80007cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_DeInit(&huart3);
 8000632:	4824      	ldr	r0, [pc, #144]	; (80006c4 <main+0xb0>)
 8000634:	f003 fb20 	bl	8003c78 <HAL_UART_DeInit>
  HAL_UART_Init(&huart3);
 8000638:	4822      	ldr	r0, [pc, #136]	; (80006c4 <main+0xb0>)
 800063a:	f003 facf 	bl	8003bdc <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart3,(uint8_t *)uartdriver.text,sizeof(uartdriver.text));
 800063e:	2214      	movs	r2, #20
 8000640:	4921      	ldr	r1, [pc, #132]	; (80006c8 <main+0xb4>)
 8000642:	4820      	ldr	r0, [pc, #128]	; (80006c4 <main+0xb0>)
 8000644:	f003 fcb4 	bl	8003fb0 <HAL_UART_Receive_DMA>
  RetargetInit(&huart3);
 8000648:	481e      	ldr	r0, [pc, #120]	; (80006c4 <main+0xb0>)
 800064a:	f000 fa41 	bl	8000ad0 <RetargetInit>

  printf("Merhaba\r\n");
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <main+0xb8>)
 8000650:	f007 fcac 	bl	8007fac <puts>

  UartDriver_ctor(&uartdriver);
 8000654:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0xbc>)
 8000656:	f007 fadf 	bl	8007c18 <UartDriver_ctor>
//  LwipDriver_ctor(&lwipdriver);


  QF_init();
 800065a:	f006 fd81 	bl	8007160 <QF_init>
  QF_psInit(subscrSto, Q_DIM(subscrSto));
 800065e:	210a      	movs	r1, #10
 8000660:	481c      	ldr	r0, [pc, #112]	; (80006d4 <main+0xc0>)
 8000662:	f007 f97d 	bl	8007960 <QF_psInit>
  /* initialize event pools... */
  QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 8000666:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800066a:	f242 7138 	movw	r1, #10040	; 0x2738
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <main+0xc4>)
 8000670:	f006 fc4e 	bl	8006f10 <QF_poolInit>

  /*Aktif objeler arasındaki öncelik ilişkisine dikkat et , öncelikler kesinlikle aynı olmayacak*/
//  QActive_setAttr(AO_LwipDriver, TASK_NAME_ATTR, "Lwip");
//  QACTIVE_START(AO_LwipDriver,2U,LwipDriver_queue,Q_DIM(LwipDriver_queue),LwipDriverStack,Q_DIM(LwipDriverStack),(QEvt *)0);
  QActive_setAttr(AO_UartDriver, TASK_NAME_ATTR, "Uart");
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <main+0xc8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <main+0xcc>)
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f006 fdeb 	bl	8007258 <QActive_setAttr>
  QACTIVE_START(AO_UartDriver,1U,UartDriver_queue,Q_DIM(UartDriver_queue),UartDriverStack,Q_DIM(UartDriverStack),(QEvt *)0);
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <main+0xc8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <main+0x80>
 800068c:	2197      	movs	r1, #151	; 0x97
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <main+0xd0>)
 8000690:	f000 f9ee 	bl	8000a70 <Q_onAssert>
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <main+0xc8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689c      	ldr	r4, [r3, #8]
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <main+0xc8>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <main+0xd4>)
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	230a      	movs	r3, #10
 80006b0:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <main+0xd8>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	47a0      	blx	r4
  return QF_run();
 80006b6:	f006 fd5b 	bl	8007170 <QF_run>
 80006ba:	4603      	mov	r3, r0

//	  MX_LWIP_Process();

  }
  /* USER CODE END 3 */
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3724      	adds	r7, #36	; 0x24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	20000334 	.word	0x20000334
 80006c8:	200004fc 	.word	0x200004fc
 80006cc:	08009144 	.word	0x08009144
 80006d0:	20000478 	.word	0x20000478
 80006d4:	20000510 	.word	0x20000510
 80006d8:	20000538 	.word	0x20000538
 80006dc:	20000000 	.word	0x20000000
 80006e0:	08009150 	.word	0x08009150
 80006e4:	08009164 	.word	0x08009164
 80006e8:	20002c98 	.word	0x20002c98
 80006ec:	20002c70 	.word	0x20002c70

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f007 fbde 	bl	8007ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000714:	f001 fe54 	bl	80023c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a29      	ldr	r2, [pc, #164]	; (80007c4 <SystemClock_Config+0xd4>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <SystemClock_Config+0xd8>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800074c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000760:	23d8      	movs	r3, #216	; 0xd8
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000768:	2309      	movs	r3, #9
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fe85 	bl	8002480 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800077c:	f000 f9a3 	bl	8000ac6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000780:	f001 fe2e 	bl	80023e0 <HAL_PWREx_EnableOverDrive>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078a:	f000 f99c 	bl	8000ac6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2107      	movs	r1, #7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 f90b 	bl	80029c8 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007b8:	f000 f985 	bl	8000ac6 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_TIM6_Init+0x64>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_TIM6_Init+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_TIM6_Init+0x64>)
 80007e4:	f240 221b 	movw	r2, #539	; 0x21b
 80007e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_TIM6_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_TIM6_Init+0x64>)
 80007f2:	2263      	movs	r2, #99	; 0x63
 80007f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_TIM6_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_TIM6_Init+0x64>)
 80007fe:	f002 fef9 	bl	80035f4 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000808:	f000 f95d 	bl	8000ac6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_TIM6_Init+0x64>)
 800081a:	f003 f933 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 f94f 	bl	8000ac6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200002e8 	.word	0x200002e8
 8000834:	40001000 	.word	0x40001000

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART3_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800087c:	f003 f9ae 	bl	8003bdc <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f91e 	bl	8000ac6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000334 	.word	0x20000334
 8000894:	40004800 	.word	0x40004800

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_DMA_Init+0x48>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_DMA_Init+0x48>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_DMA_Init+0x48>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	200c      	movs	r0, #12
 80008bc:	f000 fd67 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008c0:	200c      	movs	r0, #12
 80008c2:	f000 fd80 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2105      	movs	r1, #5
 80008ca:	200e      	movs	r0, #14
 80008cc:	f000 fd5f 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008d0:	200e      	movs	r0, #14
 80008d2:	f000 fd78 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x17c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a58      	ldr	r2, [pc, #352]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a52      	ldr	r2, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <MX_GPIO_Init+0x17c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a4c      	ldr	r2, [pc, #304]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <MX_GPIO_Init+0x17c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a40      	ldr	r2, [pc, #256]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <MX_GPIO_Init+0x17c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000990:	4834      	ldr	r0, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000992:	f001 fcc9 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	4833      	ldr	r0, [pc, #204]	; (8000a68 <MX_GPIO_Init+0x184>)
 800099c:	f001 fcc4 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009a6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ac:	2302      	movs	r3, #2
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x188>)
 80009b8:	f001 f9fe 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <MX_GPIO_Init+0x180>)
 80009d6:	f001 f9ef 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_GPIO_Init+0x184>)
 80009f2:	f001 f9e1 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <MX_GPIO_Init+0x184>)
 8000a0a:	f001 f9d5 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 8000a0e:	2330      	movs	r3, #48	; 0x30
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a12:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4810      	ldr	r0, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000a24:	f001 f9c8 	bl	8001db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f000 fcae 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a32:	200a      	movs	r0, #10
 8000a34:	f000 fcc7 	bl	80013c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	2017      	movs	r0, #23
 8000a3e:	f000 fca6 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a42:	2017      	movs	r0, #23
 8000a44:	f000 fcbf 	bl	80013c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2105      	movs	r1, #5
 8000a4c:	2028      	movs	r0, #40	; 0x28
 8000a4e:	f000 fc9e 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a52:	2028      	movs	r0, #40	; 0x28
 8000a54:	f000 fcb7 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40020800 	.word	0x40020800

08000a70 <Q_onAssert>:

/* USER CODE BEGIN 4 */


void Q_onAssert(char const *module, int loc) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000a7a:	f7ff fdb5 	bl	80005e8 <__NVIC_SystemReset>
	...

08000a80 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */

	  static uint8_t const l_tickhook = 0;
	  BaseType_t xTickWoken = pdFALSE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
	  QF_TICK_X_FROM_ISR(0U,&xTickWoken,&l_tickhook);
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f006 fd3e 	bl	8007510 <QF_tickXFromISR_>
	  portEND_SWITCHING_ISR(xTickWoken);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <HAL_SYSTICK_Callback+0x2a>
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_SYSTICK_Callback+0x34>)
 8000a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	f3bf 8f6f 	isb	sy
	__NOP();
 8000aaa:	bf00      	nop
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	e000ed04 	.word	0xe000ed04

08000ab8 <QF_onStartup>:
	QF_INT_ENABLE();
#endif
}


void QF_onStartup(void){
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
//	MX_LWIP_Init();
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aca:	b672      	cpsid	i
}
 8000acc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ace:	e7fe      	b.n	8000ace <Error_Handler+0x8>

08000ad0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <RetargetInit+0x28>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <RetargetInit+0x2c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6898      	ldr	r0, [r3, #8]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f007 fa67 	bl	8007fbc <setvbuf>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20003298 	.word	0x20003298
 8000afc:	20000014 	.word	0x20000014

08000b00 <_isatty>:

int _isatty(int fd) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db04      	blt.n	8000b18 <_isatty+0x18>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	dc01      	bgt.n	8000b18 <_isatty+0x18>
    return 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e003      	b.n	8000b20 <_isatty+0x20>

  errno = EBADF;
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <_isatty+0x2c>)
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	601a      	str	r2, [r3, #0]
  return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	20003448 	.word	0x20003448

08000b30 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d002      	beq.n	8000b48 <_write+0x18>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d111      	bne.n	8000b6c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <_write+0x50>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	f003 f8c8 	bl	8003cea <HAL_UART_Transmit>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <_write+0x38>
      return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	e006      	b.n	8000b76 <_write+0x46>
    else
      return EIO;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	e004      	b.n	8000b76 <_write+0x46>
  }
  errno = EBADF;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <_write+0x54>)
 8000b6e:	2209      	movs	r2, #9
 8000b70:	601a      	str	r2, [r3, #0]
  return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20003298 	.word	0x20003298
 8000b84:	20003448 	.word	0x20003448

08000b88 <_close>:

int _close(int fd) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db04      	blt.n	8000ba0 <_close+0x18>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	dc01      	bgt.n	8000ba0 <_close+0x18>
    return 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e004      	b.n	8000baa <_close+0x22>

  errno = EBADF;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <_close+0x30>)
 8000ba2:	2209      	movs	r2, #9
 8000ba4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20003448 	.word	0x20003448

08000bbc <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <_lseek+0x24>)
 8000bca:	2209      	movs	r2, #9
 8000bcc:	601a      	str	r2, [r3, #0]
  return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20003448 	.word	0x20003448

08000be4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d110      	bne.n	8000c18 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <_read+0x48>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	2201      	movs	r2, #1
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	f003 f905 	bl	8003e10 <HAL_UART_Receive>
 8000c06:	4603      	mov	r3, r0
 8000c08:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <_read+0x30>
      return 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e006      	b.n	8000c22 <_read+0x3e>
    else
      return EIO;
 8000c14:	2305      	movs	r3, #5
 8000c16:	e004      	b.n	8000c22 <_read+0x3e>
  }
  errno = EBADF;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <_read+0x4c>)
 8000c1a:	2209      	movs	r2, #9
 8000c1c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20003298 	.word	0x20003298
 8000c30:	20003448 	.word	0x20003448

08000c34 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db08      	blt.n	8000c56 <_fstat+0x22>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	dc05      	bgt.n	8000c56 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c50:	605a      	str	r2, [r3, #4]
    return 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e003      	b.n	8000c5e <_fstat+0x2a>
  }

  errno = EBADF;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <_fstat+0x38>)
 8000c58:	2209      	movs	r2, #9
 8000c5a:	601a      	str	r2, [r3, #0]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20003448 	.word	0x20003448

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fb6e 	bl	800138e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_TIM_Base_MspInit+0x44>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d113      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	2036      	movs	r0, #54	; 0x36
 8000cf0:	f000 fb4d 	bl	800138e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf4:	2036      	movs	r0, #54	; 0x36
 8000cf6:	f000 fb66 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40001000 	.word	0x40001000
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0aa      	sub	sp, #168	; 0xa8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2284      	movs	r2, #132	; 0x84
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f007 f8c7 	bl	8007ec0 <memset>
  if(huart->Instance==USART3)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a55      	ldr	r2, [pc, #340]	; (8000e8c <HAL_UART_MspInit+0x180>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	f040 80a2 	bne.w	8000e82 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 f861 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000d58:	f7ff feb5 	bl	8000ac6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5c:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <HAL_UART_MspInit+0x184>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a4b      	ldr	r2, [pc, #300]	; (8000e90 <HAL_UART_MspInit+0x184>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <HAL_UART_MspInit+0x184>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <HAL_UART_MspInit+0x184>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_UART_MspInit+0x184>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_UART_MspInit+0x184>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da6:	2307      	movs	r3, #7
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000db0:	4619      	mov	r1, r3
 8000db2:	4838      	ldr	r0, [pc, #224]	; (8000e94 <HAL_UART_MspInit+0x188>)
 8000db4:	f001 f800 	bl	8001db8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000db8:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000dba:	4a38      	ldr	r2, [pc, #224]	; (8000e9c <HAL_UART_MspInit+0x190>)
 8000dbc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000dc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000dfa:	4827      	ldr	r0, [pc, #156]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000dfc:	f000 fb0c 	bl	8001418 <HAL_DMA_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000e06:	f7ff fe5e 	bl	8000ac6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000e0e:	671a      	str	r2, [r3, #112]	; 0x70
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_UART_MspInit+0x18c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e18:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <HAL_UART_MspInit+0x198>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e22:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e36:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e56:	4812      	ldr	r0, [pc, #72]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e58:	f000 fade 	bl	8001418 <HAL_DMA_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8000e62:	f7ff fe30 	bl	8000ac6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_UART_MspInit+0x194>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2105      	movs	r1, #5
 8000e76:	2027      	movs	r0, #39	; 0x27
 8000e78:	f000 fa89 	bl	800138e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e7c:	2027      	movs	r0, #39	; 0x27
 8000e7e:	f000 faa2 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	37a8      	adds	r7, #168	; 0xa8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	200003b8 	.word	0x200003b8
 8000e9c:	40026028 	.word	0x40026028
 8000ea0:	20000418 	.word	0x20000418
 8000ea4:	40026058 	.word	0x40026058

08000ea8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_UART_MspDeInit+0x4c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d117      	bne.n	8000eea <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_UART_MspDeInit+0x50>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_UART_MspDeInit+0x50>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8000ec6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <HAL_UART_MspDeInit+0x54>)
 8000ecc:	f001 f920 	bl	8002110 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fb4d 	bl	8001574 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fb48 	bl	8001574 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000ee4:	2027      	movs	r0, #39	; 0x27
 8000ee6:	f000 fa7c 	bl	80013e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f90e 	bl	8001150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f34:	f004 fee0 	bl	8005cf8 <xTaskGetSchedulerState>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d001      	beq.n	8000f42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f3e:	f005 fa9b 	bl	8006478 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8000f42:	f7ff fd9d 	bl	8000a80 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON2_Pin);
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f001 fa1e 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <DMA1_Stream1_IRQHandler+0x10>)
 8000f5e:	f000 fc59 	bl	8001814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003b8 	.word	0x200003b8

08000f6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream3_IRQHandler+0x10>)
 8000f72:	f000 fc4f 	bl	8001814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000418 	.word	0x20000418

08000f80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON1_Pin);
 8000f84:	2020      	movs	r0, #32
 8000f86:	f001 fa03 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <USART3_IRQHandler+0x10>)
 8000f96:	f003 f859 	bl	800404c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000334 	.word	0x20000334

08000fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fac:	f001 f9f0 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM6_DAC_IRQHandler+0x10>)
 8000fba:	f002 fb72 	bl	80036a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200002e8 	.word	0x200002e8

08000fc8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <ETH_IRQHandler+0x10>)
 8000fce:	f000 fe8b 	bl	8001ce8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200032a4 	.word	0x200032a4

08000fdc <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <ETH_WKUP_IRQHandler+0x10>)
 8000fe2:	f000 fe81 	bl	8001ce8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200032a4 	.word	0x200032a4

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d205      	bcs.n	800102c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <_sbrk+0x6c>)
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20050000 	.word	0x20050000
 8001050:	00004000 	.word	0x00004000
 8001054:	2000329c 	.word	0x2000329c
 8001058:	20003538 	.word	0x20003538
 800105c:	20003448 	.word	0x20003448

08001060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ae:	f7ff ffd7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f006 feb9 	bl	8007e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff faad 	bl	8000614 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010c8:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 80010cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010d0:	20003538 	.word	0x20003538

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>

080010d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f94c 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e0:	200f      	movs	r0, #15
 80010e2:	f000 f805 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fdc3 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f975 	bl	80013fe <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f92f 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000004 	.word	0x20000004
 8001148:	2000000c 	.word	0x2000000c
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000000c 	.word	0x2000000c
 8001174:	200032a0 	.word	0x200032a0

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200032a0 	.word	0x200032a0

08001190 <__NVIC_SetPriorityGrouping>:
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_DisableIRQ>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db12      	blt.n	8001268 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	490a      	ldr	r1, [pc, #40]	; (8001274 <__NVIC_DisableIRQ+0x44>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	3320      	adds	r3, #32
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800125c:	f3bf 8f4f 	dsb	sy
}
 8001260:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001262:	f3bf 8f6f 	isb	sy
}
 8001266:	bf00      	nop
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff05 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff1a 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff0d 	bl	80011f4 <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff1d 	bl	8001230 <__NVIC_DisableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff94 	bl	8001334 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fea8 	bl	8001178 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e099      	b.n	8001568 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001454:	e00f      	b.n	8001476 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001456:	f7ff fe8f 	bl	8001178 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b05      	cmp	r3, #5
 8001462:	d908      	bls.n	8001476 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e078      	b.n	8001568 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e8      	bne.n	8001456 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_DMA_Init+0x158>)
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d107      	bne.n	80014e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4313      	orrs	r3, r2
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f023 0307 	bic.w	r3, r3, #7
 80014f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4313      	orrs	r3, r2
 8001500:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	2b04      	cmp	r3, #4
 8001508:	d117      	bne.n	800153a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00e      	beq.n	800153a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fb67 	bl	8001bf0 <DMA_CheckFifoParam>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001536:	2301      	movs	r3, #1
 8001538:	e016      	b.n	8001568 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fb1e 	bl	8001b84 <DMA_CalcBaseAndBitshift>
 8001548:	4603      	mov	r3, r0
 800154a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	223f      	movs	r2, #63	; 0x3f
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	f010803f 	.word	0xf010803f

08001574 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e050      	b.n	8001628 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d101      	bne.n	8001596 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001592:	2302      	movs	r3, #2
 8001594:	e048      	b.n	8001628 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2221      	movs	r2, #33	; 0x21
 80015d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fad4 	bl	8001b84 <DMA_CalcBaseAndBitshift>
 80015dc:	4603      	mov	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	223f      	movs	r2, #63	; 0x3f
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Start_IT+0x26>
 8001652:	2302      	movs	r3, #2
 8001654:	e048      	b.n	80016e8 <HAL_DMA_Start_IT+0xb8>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d137      	bne.n	80016da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2202      	movs	r2, #2
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 fa52 	bl	8001b28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	223f      	movs	r2, #63	; 0x3f
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0216 	orr.w	r2, r2, #22
 800169e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0208 	orr.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e005      	b.n	80016e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016fe:	f7ff fd3b 	bl	8001178 <HAL_GetTick>
 8001702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d008      	beq.n	8001722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e052      	b.n	80017c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0216 	bic.w	r2, r2, #22
 8001730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <HAL_DMA_Abort+0x62>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	e013      	b.n	800179c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001774:	f7ff fd00 	bl	8001178 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b05      	cmp	r3, #5
 8001780:	d90c      	bls.n	800179c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e015      	b.n	80017c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e4      	bne.n	8001774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	223f      	movs	r2, #63	; 0x3f
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00c      	b.n	8001808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001820:	4b8e      	ldr	r3, [pc, #568]	; (8001a5c <HAL_DMA_IRQHandler+0x248>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a8e      	ldr	r2, [pc, #568]	; (8001a60 <HAL_DMA_IRQHandler+0x24c>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0a9b      	lsrs	r3, r3, #10
 800182c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	2208      	movs	r2, #8
 8001840:	409a      	lsls	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0204 	bic.w	r2, r2, #4
 8001866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2208      	movs	r2, #8
 800186e:	409a      	lsls	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2201      	movs	r2, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2201      	movs	r2, #1
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2204      	movs	r2, #4
 80018bc:	409a      	lsls	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2204      	movs	r2, #4
 80018da:	409a      	lsls	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e4:	f043 0204 	orr.w	r2, r3, #4
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	2210      	movs	r2, #16
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d043      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03c      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2210      	movs	r2, #16
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d018      	beq.n	8001956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d024      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
 8001942:	e01f      	b.n	8001984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01b      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
 8001954:	e016      	b.n	8001984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0208 	bic.w	r2, r2, #8
 8001972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	2220      	movs	r2, #32
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 808f 	beq.w	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8087 	beq.w	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	2220      	movs	r2, #32
 80019ac:	409a      	lsls	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d136      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0216 	bic.w	r2, r2, #22
 80019cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <HAL_DMA_IRQHandler+0x1da>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0208 	bic.w	r2, r2, #8
 80019fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	223f      	movs	r2, #63	; 0x3f
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d07e      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
        }
        return;
 8001a2a:	e079      	b.n	8001b20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01d      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10d      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d031      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
 8001a58:	e02c      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
 8001a5a:	bf00      	nop
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
 8001a74:	e01e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0210 	bic.w	r2, r2, #16
 8001a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d032      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2205      	movs	r2, #5
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d307      	bcc.n	8001afc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f2      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x2cc>
 8001afa:	e000      	b.n	8001afe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001afc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
 8001b1e:	e000      	b.n	8001b22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b20:	bf00      	nop
    }
  }
}
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	d108      	bne.n	8001b68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b66:	e007      	b.n	8001b78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	60da      	str	r2, [r3, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3b10      	subs	r3, #16
 8001b94:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <DMA_CalcBaseAndBitshift+0x60>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <DMA_CalcBaseAndBitshift+0x64>)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d908      	bls.n	8001bc4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <DMA_CalcBaseAndBitshift+0x68>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	1d1a      	adds	r2, r3, #4
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58
 8001bc2:	e006      	b.n	8001bd2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <DMA_CalcBaseAndBitshift+0x68>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	aaaaaaab 	.word	0xaaaaaaab
 8001be8:	08009184 	.word	0x08009184
 8001bec:	fffffc00 	.word	0xfffffc00

08001bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11f      	bne.n	8001c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d856      	bhi.n	8001cbe <DMA_CheckFifoParam+0xce>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <DMA_CheckFifoParam+0x28>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c3b 	.word	0x08001c3b
 8001c20:	08001c29 	.word	0x08001c29
 8001c24:	08001cbf 	.word	0x08001cbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d046      	beq.n	8001cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c38:	e043      	b.n	8001cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c42:	d140      	bne.n	8001cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c48:	e03d      	b.n	8001cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c52:	d121      	bne.n	8001c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d837      	bhi.n	8001cca <DMA_CheckFifoParam+0xda>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <DMA_CheckFifoParam+0x70>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c77 	.word	0x08001c77
 8001c68:	08001c71 	.word	0x08001c71
 8001c6c:	08001c89 	.word	0x08001c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      break;
 8001c74:	e030      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d025      	beq.n	8001cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c86:	e022      	b.n	8001cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c90:	d11f      	bne.n	8001cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c96:	e01c      	b.n	8001cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d903      	bls.n	8001ca6 <DMA_CheckFifoParam+0xb6>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d003      	beq.n	8001cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ca4:	e018      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8001caa:	e015      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00e      	beq.n	8001cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbc:	e00b      	b.n	8001cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e00a      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e008      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e006      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e004      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e002      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cd2:	bf00      	nop
 8001cd4:	e000      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d113      	bne.n	8001d2a <HAL_ETH_IRQHandler+0x42>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	461a      	mov	r2, r3
 8001d14:	2340      	movs	r3, #64	; 0x40
 8001d16:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d28:	e01b      	b.n	8001d62 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d112      	bne.n	8001d62 <HAL_ETH_IRQHandler+0x7a>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d70:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d84:	d113      	bne.n	8001dae <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	461a      	mov	r2, r3
 8001d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9c:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e175      	b.n	80020c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8164 	bne.w	80020be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_GPIO_Init+0x56>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80be 	beq.w	80020be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_GPIO_Init+0x324>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_GPIO_Init+0x324>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <HAL_GPIO_Init+0x324>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f5a:	4a61      	ldr	r2, [pc, #388]	; (80020e0 <HAL_GPIO_Init+0x328>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_GPIO_Init+0x32c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d037      	beq.n	8001ff6 <HAL_GPIO_Init+0x23e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <HAL_GPIO_Init+0x330>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d031      	beq.n	8001ff2 <HAL_GPIO_Init+0x23a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_GPIO_Init+0x334>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <HAL_GPIO_Init+0x236>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <HAL_GPIO_Init+0x338>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d025      	beq.n	8001fea <HAL_GPIO_Init+0x232>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_GPIO_Init+0x33c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x22e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_GPIO_Init+0x340>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x22a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_GPIO_Init+0x344>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x226>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_GPIO_Init+0x348>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x222>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <HAL_GPIO_Init+0x34c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x21e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_GPIO_Init+0x350>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x21a>
 8001fce:	2309      	movs	r3, #9
 8001fd0:	e012      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	e010      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	e00e      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fda:	2307      	movs	r3, #7
 8001fdc:	e00c      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fde:	2306      	movs	r3, #6
 8001fe0:	e00a      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e008      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fea:	2303      	movs	r3, #3
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x240>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	f002 0203 	and.w	r2, r2, #3
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	4093      	lsls	r3, r2
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002008:	4935      	ldr	r1, [pc, #212]	; (80020e0 <HAL_GPIO_Init+0x328>)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_GPIO_Init+0x354>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203a:	4a34      	ldr	r2, [pc, #208]	; (800210c <HAL_GPIO_Init+0x354>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_GPIO_Init+0x354>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002064:	4a29      	ldr	r2, [pc, #164]	; (800210c <HAL_GPIO_Init+0x354>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800206a:	4b28      	ldr	r3, [pc, #160]	; (800210c <HAL_GPIO_Init+0x354>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208e:	4a1f      	ldr	r2, [pc, #124]	; (800210c <HAL_GPIO_Init+0x354>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_GPIO_Init+0x354>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <HAL_GPIO_Init+0x354>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	f67f ae86 	bls.w	8001dd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020400 	.word	0x40020400
 80020ec:	40020800 	.word	0x40020800
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40021400 	.word	0x40021400
 80020fc:	40021800 	.word	0x40021800
 8002100:	40021c00 	.word	0x40021c00
 8002104:	40022000 	.word	0x40022000
 8002108:	40022400 	.word	0x40022400
 800210c:	40013c00 	.word	0x40013c00

08002110 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e0d9      	b.n	80022e0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800212c:	2201      	movs	r2, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	429a      	cmp	r2, r3
 8002144:	f040 80c9 	bne.w	80022da <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002148:	4a6b      	ldr	r2, [pc, #428]	; (80022f8 <HAL_GPIO_DeInit+0x1e8>)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	4013      	ands	r3, r2
 8002168:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a63      	ldr	r2, [pc, #396]	; (80022fc <HAL_GPIO_DeInit+0x1ec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d037      	beq.n	80021e2 <HAL_GPIO_DeInit+0xd2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a62      	ldr	r2, [pc, #392]	; (8002300 <HAL_GPIO_DeInit+0x1f0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d031      	beq.n	80021de <HAL_GPIO_DeInit+0xce>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a61      	ldr	r2, [pc, #388]	; (8002304 <HAL_GPIO_DeInit+0x1f4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02b      	beq.n	80021da <HAL_GPIO_DeInit+0xca>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a60      	ldr	r2, [pc, #384]	; (8002308 <HAL_GPIO_DeInit+0x1f8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d025      	beq.n	80021d6 <HAL_GPIO_DeInit+0xc6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a5f      	ldr	r2, [pc, #380]	; (800230c <HAL_GPIO_DeInit+0x1fc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <HAL_GPIO_DeInit+0xc2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <HAL_GPIO_DeInit+0x200>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d019      	beq.n	80021ce <HAL_GPIO_DeInit+0xbe>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_GPIO_DeInit+0x204>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_DeInit+0xba>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_GPIO_DeInit+0x208>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_DeInit+0xb6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a5b      	ldr	r2, [pc, #364]	; (800231c <HAL_GPIO_DeInit+0x20c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_DeInit+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <HAL_GPIO_DeInit+0x210>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_DeInit+0xae>
 80021ba:	2309      	movs	r3, #9
 80021bc:	e012      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021be:	230a      	movs	r3, #10
 80021c0:	e010      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021c2:	2308      	movs	r3, #8
 80021c4:	e00e      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e00c      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00a      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021ce:	2305      	movs	r3, #5
 80021d0:	e008      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e004      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021da:	2302      	movs	r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_GPIO_DeInit+0xd4>
 80021e2:	2300      	movs	r3, #0
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	4093      	lsls	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d132      	bne.n	800225a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021f4:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4949      	ldr	r1, [pc, #292]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 80021fe:	4013      	ands	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002202:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	43db      	mvns	r3, r3
 800220a:	4946      	ldr	r1, [pc, #280]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 800220c:	4013      	ands	r3, r2
 800220e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002210:	4b44      	ldr	r3, [pc, #272]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	4942      	ldr	r1, [pc, #264]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 800221a:	4013      	ands	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	493f      	ldr	r1, [pc, #252]	; (8002324 <HAL_GPIO_DeInit+0x214>)
 8002228:	4013      	ands	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800223c:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_GPIO_DeInit+0x1e8>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	43da      	mvns	r2, r3
 800224c:	482a      	ldr	r0, [pc, #168]	; (80022f8 <HAL_GPIO_DeInit+0x1e8>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	400a      	ands	r2, r1
 8002254:	3302      	adds	r3, #2
 8002256:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2103      	movs	r1, #3
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	08d2      	lsrs	r2, r2, #3
 8002290:	4019      	ands	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2103      	movs	r1, #3
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	2101      	movs	r1, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2103      	movs	r1, #3
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f af22 	bls.w	800212c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40021800 	.word	0x40021800
 8002318:	40021c00 	.word	0x40021c00
 800231c:	40022000 	.word	0x40022000
 8002320:	40022400 	.word	0x40022400
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	041a      	lsls	r2, r3, #16
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43d9      	mvns	r1, r3
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	400b      	ands	r3, r1
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fc26 	bl	8007c00 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000

080023e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240e:	f7fe feb3 	bl	8001178 <HAL_GetTick>
 8002412:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002414:	e009      	b.n	800242a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002416:	f7fe feaf 	bl	8001178 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002424:	d901      	bls.n	800242a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e022      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002436:	d1ee      	bne.n	8002416 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 800243e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002444:	f7fe fe98 	bl	8001178 <HAL_GetTick>
 8002448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800244a:	e009      	b.n	8002460 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800244c:	f7fe fe94 	bl	8001178 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245a:	d901      	bls.n	8002460 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e007      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800246c:	d1ee      	bne.n	800244c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e291      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b96      	ldr	r3, [pc, #600]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b0:	4b93      	ldr	r3, [pc, #588]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62>
 80024bc:	4b90      	ldr	r3, [pc, #576]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ca:	4b8d      	ldr	r3, [pc, #564]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d06c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x130>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d168      	bne.n	80025b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e26b      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x7a>
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a83      	ldr	r2, [pc, #524]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0xd8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x9c>
 8002502:	4b7f      	ldr	r3, [pc, #508]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7e      	ldr	r2, [pc, #504]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7b      	ldr	r2, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xd8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xc0>
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a75      	ldr	r2, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xd8>
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6b      	ldr	r2, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fe0a 	bl	8001178 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fe06 	bl	8001178 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e21f      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fdf6 	bl	8001178 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fdf2 	bl	8001178 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e20b      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x110>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d069      	beq.n	8002692 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x190>
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x17a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1df      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	493d      	ldr	r1, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e040      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a38      	ldr	r2, [pc, #224]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fda8 	bl	8001178 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7fe fda4 	bl	8001178 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1bd      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4929      	ldr	r1, [pc, #164]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
 800265e:	e018      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fd84 	bl	8001178 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe fd80 	bl	8001178 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e199      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d038      	beq.n	8002710 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d019      	beq.n	80026da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe fd61 	bl	8001178 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7fe fd5d 	bl	8001178 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e176      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x23a>
 80026d8:	e01a      	b.n	8002710 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe fd47 	bl	8001178 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ee:	f7fe fd43 	bl	8001178 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d903      	bls.n	8002704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e15c      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
 8002700:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ee      	bne.n	80026ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a4 	beq.w	8002866 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10d      	bne.n	8002746 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b85      	ldr	r3, [pc, #532]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002746:	4b82      	ldr	r3, [pc, #520]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002752:	4b7f      	ldr	r3, [pc, #508]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7e      	ldr	r2, [pc, #504]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7fe fd0b 	bl	8001178 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fd07 	bl	8001178 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	; 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e120      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x31a>
 800278c:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	e02d      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x33c>
 80027a2:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a69      	ldr	r2, [pc, #420]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a66      	ldr	r2, [pc, #408]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e01c      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x35e>
 80027c4:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a60      	ldr	r2, [pc, #384]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a5d      	ldr	r2, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
 80027de:	4b5b      	ldr	r3, [pc, #364]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a5a      	ldr	r2, [pc, #360]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b58      	ldr	r3, [pc, #352]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d015      	beq.n	800282a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fcbb 	bl	8001178 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fcb7 	bl	8001178 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0ce      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCC_OscConfig+0x386>
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fca5 	bl	8001178 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fca1 	bl	8001178 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285a:	4b3c      	ldr	r3, [pc, #240]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80a4 	beq.w	80029b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d06b      	beq.n	8002954 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d149      	bne.n	8002918 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800288a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fc72 	bl	8001178 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fc6e 	bl	8001178 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e087      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4313      	orrs	r3, r2
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc42 	bl	8001178 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fc3e 	bl	8001178 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e057      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x478>
 8002916:	e04f      	b.n	80029b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fc28 	bl	8001178 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fc24 	bl	8001178 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e03d      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x4ac>
 800294a:	e035      	b.n	80029b8 <HAL_RCC_OscConfig+0x538>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x544>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d028      	beq.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d121      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0d0      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 020f 	bic.w	r2, r3, #15
 80029f6:	4965      	ldr	r1, [pc, #404]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b8      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a28:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a58      	ldr	r2, [pc, #352]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a40:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	494d      	ldr	r1, [pc, #308]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d040      	beq.n	8002aec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e07f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e073      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4936      	ldr	r1, [pc, #216]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe fb5c 	bl	8001178 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe fb58 	bl	8001178 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e053      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d210      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 020f 	bic.w	r2, r3, #15
 8002b02:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e032      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4916      	ldr	r1, [pc, #88]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	490e      	ldr	r1, [pc, #56]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b5a:	f000 f821 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	490a      	ldr	r1, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1cc>)
 8002b6c:	5ccb      	ldrb	r3, [r1, r3]
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d0>)
 8002b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fab8 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023c00 	.word	0x40023c00
 8002b90:	40023800 	.word	0x40023800
 8002b94:	0800916c 	.word	0x0800916c
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	20000008 	.word	0x20000008

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba4:	b094      	sub	sp, #80	; 0x50
 8002ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	647b      	str	r3, [r7, #68]	; 0x44
 8002bac:	2300      	movs	r3, #0
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb8:	4b79      	ldr	r3, [pc, #484]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d00d      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	f200 80e1 	bhi.w	8002d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x3a>
 8002bd2:	e0db      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd8:	e0db      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bda:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bde:	e0d8      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d063      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c12:	4622      	mov	r2, r4
 8002c14:	462b      	mov	r3, r5
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	0159      	lsls	r1, r3, #5
 8002c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c24:	0150      	lsls	r0, r2, #5
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	1a51      	subs	r1, r2, r1
 8002c2e:	6139      	str	r1, [r7, #16]
 8002c30:	4629      	mov	r1, r5
 8002c32:	eb63 0301 	sbc.w	r3, r3, r1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c44:	4659      	mov	r1, fp
 8002c46:	018b      	lsls	r3, r1, #6
 8002c48:	4651      	mov	r1, sl
 8002c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4e:	4651      	mov	r1, sl
 8002c50:	018a      	lsls	r2, r1, #6
 8002c52:	4651      	mov	r1, sl
 8002c54:	ebb2 0801 	subs.w	r8, r2, r1
 8002c58:	4659      	mov	r1, fp
 8002c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c72:	4690      	mov	r8, r2
 8002c74:	4699      	mov	r9, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	eb18 0303 	adds.w	r3, r8, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	462b      	mov	r3, r5
 8002c80:	eb49 0303 	adc.w	r3, r9, r3
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c92:	4629      	mov	r1, r5
 8002c94:	024b      	lsls	r3, r1, #9
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	024a      	lsls	r2, r1, #9
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb0:	f7fd fafe 	bl	80002b0 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cbc:	e058      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4611      	mov	r1, r2
 8002cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cd8:	4642      	mov	r2, r8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	f04f 0000 	mov.w	r0, #0
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	0159      	lsls	r1, r3, #5
 8002ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cea:	0150      	lsls	r0, r2, #5
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4641      	mov	r1, r8
 8002cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d10:	ebb2 040a 	subs.w	r4, r2, sl
 8002d14:	eb63 050b 	sbc.w	r5, r3, fp
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	00eb      	lsls	r3, r5, #3
 8002d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d26:	00e2      	lsls	r2, r4, #3
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	18e3      	adds	r3, r4, r3
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	464b      	mov	r3, r9
 8002d34:	eb45 0303 	adc.w	r3, r5, r3
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d46:	4629      	mov	r1, r5
 8002d48:	028b      	lsls	r3, r1, #10
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d50:	4621      	mov	r1, r4
 8002d52:	028a      	lsls	r2, r1, #10
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	61fa      	str	r2, [r7, #28]
 8002d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d64:	f7fd faa4 	bl	80002b0 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d8a:	e002      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3750      	adds	r7, #80	; 0x50
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	00f42400 	.word	0x00f42400
 8002da8:	007a1200 	.word	0x007a1200

08002dac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	0800917c 	.word	0x0800917c

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df0:	f7ff ffdc 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0b5b      	lsrs	r3, r3, #13
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	0800917c 	.word	0x0800917c

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e3c:	4b69      	ldr	r3, [pc, #420]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a68      	ldr	r2, [pc, #416]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	4964      	ldr	r1, [pc, #400]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d017      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	4959      	ldr	r1, [pc, #356]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	494a      	ldr	r1, [pc, #296]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 808b 	beq.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4a39      	ldr	r2, [pc, #228]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	; 0x40
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f92c 	bl	8001178 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f24:	f7fe f928 	bl	8001178 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e357      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f42:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d035      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d02e      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d114      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe f8f0 	bl	8001178 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe f8ec 	bl	8001178 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e319      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fca:	d111      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fda:	400b      	ands	r3, r1
 8002fdc:	4901      	ldr	r1, [pc, #4]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	0ffffcff 	.word	0x0ffffcff
 8002ff0:	4baa      	ldr	r3, [pc, #680]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4aa9      	ldr	r2, [pc, #676]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ffa:	6093      	str	r3, [r2, #8]
 8002ffc:	4ba7      	ldr	r3, [pc, #668]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	49a4      	ldr	r1, [pc, #656]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	4313      	orrs	r3, r2
 800300c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301a:	4ba0      	ldr	r3, [pc, #640]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003020:	4a9e      	ldr	r2, [pc, #632]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800302a:	4b9c      	ldr	r3, [pc, #624]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	4999      	ldr	r1, [pc, #612]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003048:	4b94      	ldr	r3, [pc, #592]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	4991      	ldr	r1, [pc, #580]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306a:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003078:	4988      	ldr	r1, [pc, #544]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800308c:	4b83      	ldr	r3, [pc, #524]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309a:	4980      	ldr	r1, [pc, #512]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030ae:	4b7b      	ldr	r3, [pc, #492]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4977      	ldr	r1, [pc, #476]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d0:	4b72      	ldr	r3, [pc, #456]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	496f      	ldr	r1, [pc, #444]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f2:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f023 020c 	bic.w	r2, r3, #12
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	4966      	ldr	r1, [pc, #408]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	495e      	ldr	r1, [pc, #376]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	4955      	ldr	r1, [pc, #340]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800317a:	4b48      	ldr	r3, [pc, #288]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4944      	ldr	r1, [pc, #272]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	493c      	ldr	r1, [pc, #240]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	4933      	ldr	r1, [pc, #204]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ee:	492b      	ldr	r1, [pc, #172]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003210:	4922      	ldr	r1, [pc, #136]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003220:	d101      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	4912      	ldr	r1, [pc, #72]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003264:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003274:	4909      	ldr	r1, [pc, #36]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d006      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80d9 	beq.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a01      	ldr	r2, [pc, #4]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800329a:	e001      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800329c:	40023800 	.word	0x40023800
 80032a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a2:	f7fd ff69 	bl	8001178 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032aa:	f7fd ff65 	bl	8001178 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e194      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d021      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11d      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	019a      	lsls	r2, r3, #6
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	4957      	ldr	r1, [pc, #348]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003342:	d129      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003344:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003358:	0f1b      	lsrs	r3, r3, #28
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	019a      	lsls	r2, r3, #6
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	071b      	lsls	r3, r3, #28
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003386:	f023 021f 	bic.w	r2, r3, #31
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	3b01      	subs	r3, #1
 8003390:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01d      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	0e1b      	lsrs	r3, r3, #24
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	0f1b      	lsrs	r3, r3, #28
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	019a      	lsls	r2, r3, #6
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	431a      	orrs	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	071b      	lsls	r3, r3, #28
 80033d8:	4925      	ldr	r1, [pc, #148]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d011      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	019a      	lsls	r2, r3, #6
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	071b      	lsls	r3, r3, #28
 8003408:	4919      	ldr	r1, [pc, #100]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800341a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fd feac 	bl	8001178 <HAL_GetTick>
 8003420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003424:	f7fd fea8 	bl	8001178 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0d7      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 80cd 	bne.w	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003456:	f7fd fe8f 	bl	8001178 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800345e:	f7fd fe8b 	bl	8001178 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d903      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0ba      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d0ed      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	0f1b      	lsrs	r3, r3, #28
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	4944      	ldr	r1, [pc, #272]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034e6:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d022      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003514:	d11d      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0e1b      	lsrs	r3, r3, #24
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0f1b      	lsrs	r3, r3, #28
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4929      	ldr	r1, [pc, #164]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	0e1b      	lsrs	r3, r3, #24
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	4917      	ldr	r1, [pc, #92]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fd fddc 	bl	8001178 <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c4:	f7fd fdd8 	bl	8001178 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e007      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e2:	d1ef      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e049      	b.n	800369a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fb50 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 f986 	bl	8003944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d122      	bne.n	80036fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d11b      	bne.n	80036fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0202 	mvn.w	r2, #2
 80036ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f90f 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80036ea:	e005      	b.n	80036f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f901 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f912 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d122      	bne.n	8003752 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d11b      	bne.n	8003752 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f06f 0204 	mvn.w	r2, #4
 8003722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8e5 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 800373e:	e005      	b.n	800374c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8d7 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8e8 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d122      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d11b      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0208 	mvn.w	r2, #8
 8003776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2204      	movs	r2, #4
 800377c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8bb 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003792:	e005      	b.n	80037a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8ad 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8be 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d122      	bne.n	80037fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d11b      	bne.n	80037fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f06f 0210 	mvn.w	r2, #16
 80037ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2208      	movs	r2, #8
 80037d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f891 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80037e6:	e005      	b.n	80037f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f883 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f894 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10e      	bne.n	8003826 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f06f 0201 	mvn.w	r2, #1
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f85d 	bl	80038e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d10e      	bne.n	8003852 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d107      	bne.n	8003852 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800384a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f9b1 	bl	8003bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9a4 	bl	8003bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f842 	bl	8003930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f964 	bl	8003ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a40      	ldr	r2, [pc, #256]	; (8003a58 <TIM_Base_SetConfig+0x114>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003962:	d00f      	beq.n	8003984 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3d      	ldr	r2, [pc, #244]	; (8003a5c <TIM_Base_SetConfig+0x118>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00b      	beq.n	8003984 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3c      	ldr	r2, [pc, #240]	; (8003a60 <TIM_Base_SetConfig+0x11c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d007      	beq.n	8003984 <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3b      	ldr	r2, [pc, #236]	; (8003a64 <TIM_Base_SetConfig+0x120>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3a      	ldr	r2, [pc, #232]	; (8003a68 <TIM_Base_SetConfig+0x124>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d108      	bne.n	8003996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <TIM_Base_SetConfig+0x114>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02b      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d027      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <TIM_Base_SetConfig+0x118>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d023      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <TIM_Base_SetConfig+0x11c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01f      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <TIM_Base_SetConfig+0x120>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01b      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <TIM_Base_SetConfig+0x124>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d017      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <TIM_Base_SetConfig+0x128>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <TIM_Base_SetConfig+0x12c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00f      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <TIM_Base_SetConfig+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <TIM_Base_SetConfig+0x134>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <TIM_Base_SetConfig+0x138>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <TIM_Base_SetConfig+0x13c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d108      	bne.n	8003a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <TIM_Base_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_Base_SetConfig+0xf8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <TIM_Base_SetConfig+0x124>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d103      	bne.n	8003a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	615a      	str	r2, [r3, #20]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800
 8003a78:	40001800 	.word	0x40001800
 8003a7c:	40001c00 	.word	0x40001c00
 8003a80:	40002000 	.word	0x40002000

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e06d      	b.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0e:	d01d      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10c      	bne.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40001800 	.word	0x40001800

08003ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e040      	b.n	8003c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd f884 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fd0a 	bl	8004634 <UART_SetConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 ff62 	bl	8004afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 ffe9 	bl	8004c40 <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02b      	b.n	8003ce2 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	; 0x24
 8003c8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fd f8f5 	bl	8000ea8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b08a      	sub	sp, #40	; 0x28
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 8081 	bne.w	8003e06 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Transmit+0x26>
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e079      	b.n	8003e08 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Transmit+0x38>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e072      	b.n	8003e08 <HAL_UART_Transmit+0x11e>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	; 0x21
 8003d36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d38:	f7fd fa1e 	bl	8001178 <HAL_GetTick>
 8003d3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d108      	bne.n	8003d6a <HAL_UART_Transmit+0x80>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	e003      	b.n	8003d72 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d7a:	e02c      	b.n	8003dd6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 ff8d 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e038      	b.n	8003e08 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	3302      	adds	r3, #2
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e007      	b.n	8003dc4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1cc      	bne.n	8003d7c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 ff5a 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e005      	b.n	8003e08 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	f040 80be 	bne.w	8003fa6 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_UART_Receive+0x26>
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0b6      	b.n	8003fa8 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Receive+0x38>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e0af      	b.n	8003fa8 <HAL_UART_Receive+0x198>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2222      	movs	r2, #34	; 0x22
 8003e5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e64:	f7fd f988 	bl	8001178 <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e82:	d10e      	bne.n	8003ea2 <HAL_UART_Receive+0x92>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_UART_Receive+0x88>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e96:	e02d      	b.n	8003ef4 <HAL_UART_Receive+0xe4>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	22ff      	movs	r2, #255	; 0xff
 8003e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ea0:	e028      	b.n	8003ef4 <HAL_UART_Receive+0xe4>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_UART_Receive+0xb6>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <HAL_UART_Receive+0xac>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	22ff      	movs	r2, #255	; 0xff
 8003eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eba:	e01b      	b.n	8003ef4 <HAL_UART_Receive+0xe4>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	227f      	movs	r2, #127	; 0x7f
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec4:	e016      	b.n	8003ef4 <HAL_UART_Receive+0xe4>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ece:	d10d      	bne.n	8003eec <HAL_UART_Receive+0xdc>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_UART_Receive+0xd2>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	227f      	movs	r2, #127	; 0x7f
 8003edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee0:	e008      	b.n	8003ef4 <HAL_UART_Receive+0xe4>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	223f      	movs	r2, #63	; 0x3f
 8003ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eea:	e003      	b.n	8003ef4 <HAL_UART_Receive+0xe4>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003efa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d108      	bne.n	8003f18 <HAL_UART_Receive+0x108>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e003      	b.n	8003f20 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f28:	e032      	b.n	8003f90 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2120      	movs	r1, #32
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 feb6 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e031      	b.n	8003fa8 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	8a7b      	ldrh	r3, [r7, #18]
 8003f54:	4013      	ands	r3, r2
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3302      	adds	r3, #2
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e00c      	b.n	8003f7e <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	8a7b      	ldrh	r3, [r7, #18]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4013      	ands	r3, r2
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1c6      	bne.n	8003f2a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d13d      	bne.n	8004042 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_UART_Receive_DMA+0x22>
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e036      	b.n	8004044 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Receive_DMA+0x34>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e02f      	b.n	8004044 <HAL_UART_Receive_DMA+0x94>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d018      	beq.n	8004032 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	613b      	str	r3, [r7, #16]
   return(result);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	69f9      	ldr	r1, [r7, #28]
 8004024:	6a3a      	ldr	r2, [r7, #32]
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	61bb      	str	r3, [r7, #24]
   return(result);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e6      	bne.n	8004000 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	461a      	mov	r2, r3
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fef9 	bl	8004e30 <UART_Start_Receive_DMA>
 800403e:	4603      	mov	r3, r0
 8004040:	e000      	b.n	8004044 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0ba      	sub	sp, #232	; 0xe8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004072:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004076:	f640 030f 	movw	r3, #2063	; 0x80f
 800407a:	4013      	ands	r3, r2
 800407c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d115      	bne.n	80040b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 828f 	beq.w	80045c8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
      }
      return;
 80040b2:	e289      	b.n	80045c8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8117 	beq.w	80042ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040ce:	4b85      	ldr	r3, [pc, #532]	; (80042e4 <HAL_UART_IRQHandler+0x298>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 810a 	beq.w	80042ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d011      	beq.n	8004108 <HAL_UART_IRQHandler+0xbc>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <HAL_UART_IRQHandler+0xec>
 8004114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <HAL_UART_IRQHandler+0x11c>
 8004144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2204      	movs	r2, #4
 8004156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004184:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419a:	f043 0208 	orr.w	r2, r3, #8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_UART_IRQHandler+0x18a>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 81f5 	beq.w	80045cc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04f      	beq.n	80042ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 feca 	bl	8004fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d141      	bne.n	80042c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800427a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d9      	bne.n	8004242 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <HAL_UART_IRQHandler+0x29c>)
 800429c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fa94 	bl	80017d0 <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00f      	b.n	80042de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9a2 	bl	8004608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00b      	b.n	80042de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f99e 	bl	8004608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e007      	b.n	80042de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f99a 	bl	8004608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042dc:	e176      	b.n	80045cc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042de:	bf00      	nop
    return;
 80042e0:	e174      	b.n	80045cc <HAL_UART_IRQHandler+0x580>
 80042e2:	bf00      	nop
 80042e4:	04000120 	.word	0x04000120
 80042e8:	08005263 	.word	0x08005263

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 8144 	bne.w	800457e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 813d 	beq.w	800457e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8136 	beq.w	800457e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2210      	movs	r2, #16
 8004318:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	f040 80b2 	bne.w	800448e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004336:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8148 	beq.w	80045d0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434a:	429a      	cmp	r2, r3
 800434c:	f080 8140 	bcs.w	80045d0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004364:	f000 8085 	beq.w	8004472 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800437c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004396:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800439e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1da      	bne.n	8004368 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3308      	adds	r3, #8
 80043b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e1      	bne.n	80043b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e3      	bne.n	80043ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004454:	65bb      	str	r3, [r7, #88]	; 0x58
 8004456:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800445a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e4      	bne.n	8004432 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd f93f 	bl	80016f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800447e:	b29b      	uxth	r3, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8c8 	bl	800461c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800448c:	e0a0      	b.n	80045d0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800449a:	b29b      	uxth	r3, r3
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8092 	beq.w	80045d4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 808d 	beq.w	80045d4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
 80044de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e4      	bne.n	80044ba <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004514:	633a      	str	r2, [r7, #48]	; 0x30
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e3      	bne.n	80044f0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60fb      	str	r3, [r7, #12]
   return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e4      	bne.n	800453a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f850 	bl	800461c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800457c:	e02a      	b.n	80045d4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01c      	beq.n	80045d8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
    }
    return;
 80045a6:	e017      	b.n	80045d8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <HAL_UART_IRQHandler+0x58e>
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fe64 	bl	800528e <UART_EndTransmit_IT>
    return;
 80045c6:	e008      	b.n	80045da <HAL_UART_IRQHandler+0x58e>
      return;
 80045c8:	bf00      	nop
 80045ca:	e006      	b.n	80045da <HAL_UART_IRQHandler+0x58e>
    return;
 80045cc:	bf00      	nop
 80045ce:	e004      	b.n	80045da <HAL_UART_IRQHandler+0x58e>
      return;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <HAL_UART_IRQHandler+0x58e>
      return;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HAL_UART_IRQHandler+0x58e>
    return;
 80045d8:	bf00      	nop
  }

}
 80045da:	37e8      	adds	r7, #232	; 0xe8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4ba6      	ldr	r3, [pc, #664]	; (80048f8 <UART_SetConfig+0x2c4>)
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	6979      	ldr	r1, [r7, #20]
 8004668:	430b      	orrs	r3, r1
 800466a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a94      	ldr	r2, [pc, #592]	; (80048fc <UART_SetConfig+0x2c8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d120      	bne.n	80046f2 <UART_SetConfig+0xbe>
 80046b0:	4b93      	ldr	r3, [pc, #588]	; (8004900 <UART_SetConfig+0x2cc>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d816      	bhi.n	80046ec <UART_SetConfig+0xb8>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <UART_SetConfig+0x90>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046e1 	.word	0x080046e1
 80046cc:	080046db 	.word	0x080046db
 80046d0:	080046e7 	.word	0x080046e7
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e150      	b.n	800497c <UART_SetConfig+0x348>
 80046da:	2302      	movs	r3, #2
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e14d      	b.n	800497c <UART_SetConfig+0x348>
 80046e0:	2304      	movs	r3, #4
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e14a      	b.n	800497c <UART_SetConfig+0x348>
 80046e6:	2308      	movs	r3, #8
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e147      	b.n	800497c <UART_SetConfig+0x348>
 80046ec:	2310      	movs	r3, #16
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e144      	b.n	800497c <UART_SetConfig+0x348>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a83      	ldr	r2, [pc, #524]	; (8004904 <UART_SetConfig+0x2d0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d132      	bne.n	8004762 <UART_SetConfig+0x12e>
 80046fc:	4b80      	ldr	r3, [pc, #512]	; (8004900 <UART_SetConfig+0x2cc>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d828      	bhi.n	800475c <UART_SetConfig+0x128>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <UART_SetConfig+0xdc>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004745 	.word	0x08004745
 8004714:	0800475d 	.word	0x0800475d
 8004718:	0800475d 	.word	0x0800475d
 800471c:	0800475d 	.word	0x0800475d
 8004720:	08004751 	.word	0x08004751
 8004724:	0800475d 	.word	0x0800475d
 8004728:	0800475d 	.word	0x0800475d
 800472c:	0800475d 	.word	0x0800475d
 8004730:	0800474b 	.word	0x0800474b
 8004734:	0800475d 	.word	0x0800475d
 8004738:	0800475d 	.word	0x0800475d
 800473c:	0800475d 	.word	0x0800475d
 8004740:	08004757 	.word	0x08004757
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e118      	b.n	800497c <UART_SetConfig+0x348>
 800474a:	2302      	movs	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e115      	b.n	800497c <UART_SetConfig+0x348>
 8004750:	2304      	movs	r3, #4
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e112      	b.n	800497c <UART_SetConfig+0x348>
 8004756:	2308      	movs	r3, #8
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e10f      	b.n	800497c <UART_SetConfig+0x348>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e10c      	b.n	800497c <UART_SetConfig+0x348>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a68      	ldr	r2, [pc, #416]	; (8004908 <UART_SetConfig+0x2d4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d120      	bne.n	80047ae <UART_SetConfig+0x17a>
 800476c:	4b64      	ldr	r3, [pc, #400]	; (8004900 <UART_SetConfig+0x2cc>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004776:	2b30      	cmp	r3, #48	; 0x30
 8004778:	d013      	beq.n	80047a2 <UART_SetConfig+0x16e>
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d814      	bhi.n	80047a8 <UART_SetConfig+0x174>
 800477e:	2b20      	cmp	r3, #32
 8004780:	d009      	beq.n	8004796 <UART_SetConfig+0x162>
 8004782:	2b20      	cmp	r3, #32
 8004784:	d810      	bhi.n	80047a8 <UART_SetConfig+0x174>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <UART_SetConfig+0x15c>
 800478a:	2b10      	cmp	r3, #16
 800478c:	d006      	beq.n	800479c <UART_SetConfig+0x168>
 800478e:	e00b      	b.n	80047a8 <UART_SetConfig+0x174>
 8004790:	2300      	movs	r3, #0
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e0f2      	b.n	800497c <UART_SetConfig+0x348>
 8004796:	2302      	movs	r3, #2
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e0ef      	b.n	800497c <UART_SetConfig+0x348>
 800479c:	2304      	movs	r3, #4
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e0ec      	b.n	800497c <UART_SetConfig+0x348>
 80047a2:	2308      	movs	r3, #8
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e0e9      	b.n	800497c <UART_SetConfig+0x348>
 80047a8:	2310      	movs	r3, #16
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e0e6      	b.n	800497c <UART_SetConfig+0x348>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a56      	ldr	r2, [pc, #344]	; (800490c <UART_SetConfig+0x2d8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d120      	bne.n	80047fa <UART_SetConfig+0x1c6>
 80047b8:	4b51      	ldr	r3, [pc, #324]	; (8004900 <UART_SetConfig+0x2cc>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047c2:	2bc0      	cmp	r3, #192	; 0xc0
 80047c4:	d013      	beq.n	80047ee <UART_SetConfig+0x1ba>
 80047c6:	2bc0      	cmp	r3, #192	; 0xc0
 80047c8:	d814      	bhi.n	80047f4 <UART_SetConfig+0x1c0>
 80047ca:	2b80      	cmp	r3, #128	; 0x80
 80047cc:	d009      	beq.n	80047e2 <UART_SetConfig+0x1ae>
 80047ce:	2b80      	cmp	r3, #128	; 0x80
 80047d0:	d810      	bhi.n	80047f4 <UART_SetConfig+0x1c0>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <UART_SetConfig+0x1a8>
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d006      	beq.n	80047e8 <UART_SetConfig+0x1b4>
 80047da:	e00b      	b.n	80047f4 <UART_SetConfig+0x1c0>
 80047dc:	2300      	movs	r3, #0
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e0cc      	b.n	800497c <UART_SetConfig+0x348>
 80047e2:	2302      	movs	r3, #2
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e0c9      	b.n	800497c <UART_SetConfig+0x348>
 80047e8:	2304      	movs	r3, #4
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e0c6      	b.n	800497c <UART_SetConfig+0x348>
 80047ee:	2308      	movs	r3, #8
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e0c3      	b.n	800497c <UART_SetConfig+0x348>
 80047f4:	2310      	movs	r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e0c0      	b.n	800497c <UART_SetConfig+0x348>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a44      	ldr	r2, [pc, #272]	; (8004910 <UART_SetConfig+0x2dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x21c>
 8004804:	4b3e      	ldr	r3, [pc, #248]	; (8004900 <UART_SetConfig+0x2cc>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004812:	d017      	beq.n	8004844 <UART_SetConfig+0x210>
 8004814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004818:	d817      	bhi.n	800484a <UART_SetConfig+0x216>
 800481a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481e:	d00b      	beq.n	8004838 <UART_SetConfig+0x204>
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d811      	bhi.n	800484a <UART_SetConfig+0x216>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <UART_SetConfig+0x1fe>
 800482a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482e:	d006      	beq.n	800483e <UART_SetConfig+0x20a>
 8004830:	e00b      	b.n	800484a <UART_SetConfig+0x216>
 8004832:	2300      	movs	r3, #0
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e0a1      	b.n	800497c <UART_SetConfig+0x348>
 8004838:	2302      	movs	r3, #2
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e09e      	b.n	800497c <UART_SetConfig+0x348>
 800483e:	2304      	movs	r3, #4
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e09b      	b.n	800497c <UART_SetConfig+0x348>
 8004844:	2308      	movs	r3, #8
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e098      	b.n	800497c <UART_SetConfig+0x348>
 800484a:	2310      	movs	r3, #16
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e095      	b.n	800497c <UART_SetConfig+0x348>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <UART_SetConfig+0x2e0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d125      	bne.n	80048a6 <UART_SetConfig+0x272>
 800485a:	4b29      	ldr	r3, [pc, #164]	; (8004900 <UART_SetConfig+0x2cc>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004868:	d017      	beq.n	800489a <UART_SetConfig+0x266>
 800486a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800486e:	d817      	bhi.n	80048a0 <UART_SetConfig+0x26c>
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	d00b      	beq.n	800488e <UART_SetConfig+0x25a>
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d811      	bhi.n	80048a0 <UART_SetConfig+0x26c>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART_SetConfig+0x254>
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d006      	beq.n	8004894 <UART_SetConfig+0x260>
 8004886:	e00b      	b.n	80048a0 <UART_SetConfig+0x26c>
 8004888:	2301      	movs	r3, #1
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e076      	b.n	800497c <UART_SetConfig+0x348>
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e073      	b.n	800497c <UART_SetConfig+0x348>
 8004894:	2304      	movs	r3, #4
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e070      	b.n	800497c <UART_SetConfig+0x348>
 800489a:	2308      	movs	r3, #8
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e06d      	b.n	800497c <UART_SetConfig+0x348>
 80048a0:	2310      	movs	r3, #16
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e06a      	b.n	800497c <UART_SetConfig+0x348>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <UART_SetConfig+0x2e4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d138      	bne.n	8004922 <UART_SetConfig+0x2ee>
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <UART_SetConfig+0x2cc>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048be:	d017      	beq.n	80048f0 <UART_SetConfig+0x2bc>
 80048c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048c4:	d82a      	bhi.n	800491c <UART_SetConfig+0x2e8>
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	d00b      	beq.n	80048e4 <UART_SetConfig+0x2b0>
 80048cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d0:	d824      	bhi.n	800491c <UART_SetConfig+0x2e8>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <UART_SetConfig+0x2aa>
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d006      	beq.n	80048ea <UART_SetConfig+0x2b6>
 80048dc:	e01e      	b.n	800491c <UART_SetConfig+0x2e8>
 80048de:	2300      	movs	r3, #0
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e04b      	b.n	800497c <UART_SetConfig+0x348>
 80048e4:	2302      	movs	r3, #2
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e048      	b.n	800497c <UART_SetConfig+0x348>
 80048ea:	2304      	movs	r3, #4
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e045      	b.n	800497c <UART_SetConfig+0x348>
 80048f0:	2308      	movs	r3, #8
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e042      	b.n	800497c <UART_SetConfig+0x348>
 80048f6:	bf00      	nop
 80048f8:	efff69f3 	.word	0xefff69f3
 80048fc:	40011000 	.word	0x40011000
 8004900:	40023800 	.word	0x40023800
 8004904:	40004400 	.word	0x40004400
 8004908:	40004800 	.word	0x40004800
 800490c:	40004c00 	.word	0x40004c00
 8004910:	40005000 	.word	0x40005000
 8004914:	40011400 	.word	0x40011400
 8004918:	40007800 	.word	0x40007800
 800491c:	2310      	movs	r3, #16
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e02c      	b.n	800497c <UART_SetConfig+0x348>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a72      	ldr	r2, [pc, #456]	; (8004af0 <UART_SetConfig+0x4bc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d125      	bne.n	8004978 <UART_SetConfig+0x344>
 800492c:	4b71      	ldr	r3, [pc, #452]	; (8004af4 <UART_SetConfig+0x4c0>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004936:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800493a:	d017      	beq.n	800496c <UART_SetConfig+0x338>
 800493c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004940:	d817      	bhi.n	8004972 <UART_SetConfig+0x33e>
 8004942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004946:	d00b      	beq.n	8004960 <UART_SetConfig+0x32c>
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d811      	bhi.n	8004972 <UART_SetConfig+0x33e>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <UART_SetConfig+0x326>
 8004952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004956:	d006      	beq.n	8004966 <UART_SetConfig+0x332>
 8004958:	e00b      	b.n	8004972 <UART_SetConfig+0x33e>
 800495a:	2300      	movs	r3, #0
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e00d      	b.n	800497c <UART_SetConfig+0x348>
 8004960:	2302      	movs	r3, #2
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e00a      	b.n	800497c <UART_SetConfig+0x348>
 8004966:	2304      	movs	r3, #4
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e007      	b.n	800497c <UART_SetConfig+0x348>
 800496c:	2308      	movs	r3, #8
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e004      	b.n	800497c <UART_SetConfig+0x348>
 8004972:	2310      	movs	r3, #16
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e001      	b.n	800497c <UART_SetConfig+0x348>
 8004978:	2310      	movs	r3, #16
 800497a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004984:	d15b      	bne.n	8004a3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d828      	bhi.n	80049de <UART_SetConfig+0x3aa>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <UART_SetConfig+0x360>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049c9 	.word	0x080049c9
 80049a0:	080049df 	.word	0x080049df
 80049a4:	080049cf 	.word	0x080049cf
 80049a8:	080049df 	.word	0x080049df
 80049ac:	080049df 	.word	0x080049df
 80049b0:	080049df 	.word	0x080049df
 80049b4:	080049d7 	.word	0x080049d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe fa04 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80049bc:	61b8      	str	r0, [r7, #24]
        break;
 80049be:	e013      	b.n	80049e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7fe fa14 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c8:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <UART_SetConfig+0x4c4>)
 80049ca:	61bb      	str	r3, [r7, #24]
        break;
 80049cc:	e00c      	b.n	80049e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ce:	f7fe f8e7 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 80049d2:	61b8      	str	r0, [r7, #24]
        break;
 80049d4:	e008      	b.n	80049e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049da:	61bb      	str	r3, [r7, #24]
        break;
 80049dc:	e004      	b.n	80049e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	77bb      	strb	r3, [r7, #30]
        break;
 80049e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d074      	beq.n	8004ad8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	005a      	lsls	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	441a      	add	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b0f      	cmp	r3, #15
 8004a08:	d916      	bls.n	8004a38 <UART_SetConfig+0x404>
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d212      	bcs.n	8004a38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f023 030f 	bic.w	r3, r3, #15
 8004a1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	89fa      	ldrh	r2, [r7, #14]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	e04f      	b.n	8004ad8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	77bb      	strb	r3, [r7, #30]
 8004a3c:	e04c      	b.n	8004ad8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d828      	bhi.n	8004a96 <UART_SetConfig+0x462>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0x418>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a79 	.word	0x08004a79
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004a97 	.word	0x08004a97
 8004a5c:	08004a87 	.word	0x08004a87
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a97 	.word	0x08004a97
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fe f9a8 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8004a74:	61b8      	str	r0, [r7, #24]
        break;
 8004a76:	e013      	b.n	8004aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fe f9b8 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 8004a7c:	61b8      	str	r0, [r7, #24]
        break;
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <UART_SetConfig+0x4c4>)
 8004a82:	61bb      	str	r3, [r7, #24]
        break;
 8004a84:	e00c      	b.n	8004aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fe f88b 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8004a8a:	61b8      	str	r0, [r7, #24]
        break;
 8004a8c:	e008      	b.n	8004aa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	61bb      	str	r3, [r7, #24]
        break;
 8004a94:	e004      	b.n	8004aa0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a9e:	bf00      	nop
    }

    if (pclk != 0U)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d018      	beq.n	8004ad8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	085a      	lsrs	r2, r3, #1
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	441a      	add	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d909      	bls.n	8004ad4 <UART_SetConfig+0x4a0>
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d205      	bcs.n	8004ad4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e001      	b.n	8004ad8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ae4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40007c00 	.word	0x40007c00
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400

08004afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfa:	d10a      	bne.n	8004c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c50:	f7fc fa92 	bl	8001178 <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d10e      	bne.n	8004c82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f817 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e00d      	b.n	8004c9e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b09c      	sub	sp, #112	; 0x70
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb6:	e0a5      	b.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	f000 80a1 	beq.w	8004e04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fc fa59 	bl	8001178 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d13e      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cec:	667b      	str	r3, [r7, #100]	; 0x64
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e6      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	663b      	str	r3, [r7, #96]	; 0x60
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e067      	b.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d04f      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d147      	bne.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e6      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3308      	adds	r3, #8
 8004db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dd0:	623a      	str	r2, [r7, #32]
 8004dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	6a3a      	ldr	r2, [r7, #32]
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e010      	b.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	f43f af4a 	beq.w	8004cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3770      	adds	r7, #112	; 0x70
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b096      	sub	sp, #88	; 0x58
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2222      	movs	r2, #34	; 0x22
 8004e58:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d02b      	beq.n	8004eba <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a42      	ldr	r2, [pc, #264]	; (8004f70 <UART_Start_Receive_DMA+0x140>)
 8004e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a41      	ldr	r2, [pc, #260]	; (8004f74 <UART_Start_Receive_DMA+0x144>)
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <UART_Start_Receive_DMA+0x148>)
 8004e78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	2200      	movs	r2, #0
 8004e80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	461a      	mov	r2, r3
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	f7fc fbcb 	bl	8001630 <HAL_DMA_Start_IT>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00c      	beq.n	8004eba <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2210      	movs	r2, #16
 8004ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e055      	b.n	8004f66 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ede:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f1c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3308      	adds	r3, #8
 8004f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f50:	623a      	str	r2, [r7, #32]
 8004f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	69f9      	ldr	r1, [r7, #28]
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e5      	bne.n	8004f30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3758      	adds	r7, #88	; 0x58
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	0800508f 	.word	0x0800508f
 8004f74:	080051af 	.word	0x080051af
 8004f78:	080051e7 	.word	0x080051e7

08004f7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004fbc:	bf00      	nop
 8004fbe:	3724      	adds	r7, #36	; 0x24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b095      	sub	sp, #84	; 0x54
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e6      	bne.n	8004fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	61fb      	str	r3, [r7, #28]
   return(result);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503a:	2b01      	cmp	r3, #1
 800503c:	d118      	bne.n	8005070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60bb      	str	r3, [r7, #8]
   return(result);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0310 	bic.w	r3, r3, #16
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6979      	ldr	r1, [r7, #20]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	613b      	str	r3, [r7, #16]
   return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005082:	bf00      	nop
 8005084:	3754      	adds	r7, #84	; 0x54
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b09c      	sub	sp, #112	; 0x70
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a4:	d070      	beq.n	8005188 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	667b      	str	r3, [r7, #100]	; 0x64
 80050f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3308      	adds	r3, #8
 80050fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005100:	647a      	str	r2, [r7, #68]	; 0x44
 8005102:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	623b      	str	r3, [r7, #32]
   return(result);
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512a:	663b      	str	r3, [r7, #96]	; 0x60
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005134:	633a      	str	r2, [r7, #48]	; 0x30
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800513a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	2220      	movs	r2, #32
 800514c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	2b01      	cmp	r3, #1
 8005154:	d118      	bne.n	8005188 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	617b      	str	r3, [r7, #20]
   return(result);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005192:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005196:	4619      	mov	r1, r3
 8005198:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800519a:	f7ff fa3f 	bl	800461c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800519e:	e002      	b.n	80051a6 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 80051a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051a2:	f002 fe03 	bl	8007dac <HAL_UART_RxCpltCallback>
}
 80051a6:	bf00      	nop
 80051a8:	3770      	adds	r7, #112	; 0x70
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d109      	bne.n	80051d8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	4619      	mov	r1, r3
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff fa23 	bl	800461c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051d6:	e002      	b.n	80051de <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff fa0b 	bl	80045f4 <HAL_UART_RxHalfCpltCallback>
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	d109      	bne.n	8005222 <UART_DMAError+0x3c>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b21      	cmp	r3, #33	; 0x21
 8005212:	d106      	bne.n	8005222 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800521c:	6978      	ldr	r0, [r7, #20]
 800521e:	f7ff fead 	bl	8004f7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d109      	bne.n	8005244 <UART_DMAError+0x5e>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b22      	cmp	r3, #34	; 0x22
 8005234:	d106      	bne.n	8005244 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800523e:	6978      	ldr	r0, [r7, #20]
 8005240:	f7ff fec2 	bl	8004fc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524a:	f043 0210 	orr.w	r2, r3, #16
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005254:	6978      	ldr	r0, [r7, #20]
 8005256:	f7ff f9d7 	bl	8004608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff f9c1 	bl	8004608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b088      	sub	sp, #32
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	613b      	str	r3, [r7, #16]
   return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff f983 	bl	80045e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052da:	bf00      	nop
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f103 0208 	add.w	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f103 0208 	add.w	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f103 0208 	add.w	r2, r3, #8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e00c      	b.n	80053be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3308      	adds	r3, #8
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <vListInsert+0x2e>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d2f6      	bcs.n	80053ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6852      	ldr	r2, [r2, #4]
 8005416:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d103      	bne.n	800542a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08e      	sub	sp, #56	; 0x38
 800544e:	af04      	add	r7, sp, #16
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10c      	bne.n	8005498 <xTaskCreateStatic+0x4e>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	b672      	cpsid	i
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	b662      	cpsie	i
 8005492:	61fb      	str	r3, [r7, #28]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005498:	2354      	movs	r3, #84	; 0x54
 800549a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b54      	cmp	r3, #84	; 0x54
 80054a0:	d00c      	beq.n	80054bc <xTaskCreateStatic+0x72>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	b672      	cpsid	i
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	b662      	cpsie	i
 80054b6:	61bb      	str	r3, [r7, #24]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01e      	beq.n	8005502 <xTaskCreateStatic+0xb8>
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01b      	beq.n	8005502 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054dc:	2300      	movs	r3, #0
 80054de:	9303      	str	r3, [sp, #12]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	9302      	str	r3, [sp, #8]
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f80b 	bl	8005510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054fc:	f000 f892 	bl	8005624 <prvAddNewTaskToReadyList>
 8005500:	e001      	b.n	8005506 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005506:	697b      	ldr	r3, [r7, #20]
	}
 8005508:	4618      	mov	r0, r3
 800550a:	3728      	adds	r7, #40	; 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005528:	440b      	add	r3, r1
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f023 0307 	bic.w	r3, r3, #7
 8005536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	b672      	cpsid	i
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	b662      	cpsie	i
 8005556:	617b      	str	r3, [r7, #20]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01f      	beq.n	80055a2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e012      	b.n	800558e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	7819      	ldrb	r1, [r3, #0]
 8005570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	3334      	adds	r3, #52	; 0x34
 8005578:	460a      	mov	r2, r1
 800557a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b0f      	cmp	r3, #15
 8005592:	d9e9      	bls.n	8005568 <prvInitialiseNewTask+0x58>
 8005594:	e000      	b.n	8005598 <prvInitialiseNewTask+0x88>
			{
				break;
 8005596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	e003      	b.n	80055aa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	d901      	bls.n	80055b4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055b0:	2306      	movs	r3, #6
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	3304      	adds	r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fea9 	bl	8005322 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	3318      	adds	r3, #24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fea4 	bl	8005322 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f1c3 0207 	rsb	r2, r3, #7
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2200      	movs	r2, #0
 80055f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	69b8      	ldr	r0, [r7, #24]
 8005604:	f000 fd98 	bl	8006138 <pxPortInitialiseStack>
 8005608:	4602      	mov	r2, r0
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561a:	bf00      	nop
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800562c:	f000 fe8e 	bl	800634c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <prvAddNewTaskToReadyList+0xb8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	4a29      	ldr	r2, [pc, #164]	; (80056dc <prvAddNewTaskToReadyList+0xb8>)
 8005638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005642:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <prvAddNewTaskToReadyList+0xb8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d110      	bne.n	8005672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005650:	f000 fa92 	bl	8005b78 <prvInitialiseTaskLists>
 8005654:	e00d      	b.n	8005672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005656:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <prvAddNewTaskToReadyList+0xc0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d802      	bhi.n	8005672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800566c:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 800567a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4313      	orrs	r3, r2
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <prvAddNewTaskToReadyList+0xcc>)
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f7ff fe49 	bl	800533c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056aa:	f000 fe83 	bl	80063b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <prvAddNewTaskToReadyList+0xc0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d207      	bcs.n	80056d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <prvAddNewTaskToReadyList+0xd0>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20003400 	.word	0x20003400
 80056e0:	20003300 	.word	0x20003300
 80056e4:	2000340c 	.word	0x2000340c
 80056e8:	2000341c 	.word	0x2000341c
 80056ec:	20003408 	.word	0x20003408
 80056f0:	20003304 	.word	0x20003304
 80056f4:	e000ed04 	.word	0xe000ed04

080056f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005706:	463a      	mov	r2, r7
 8005708:	1d39      	adds	r1, r7, #4
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	4618      	mov	r0, r3
 8005710:	f7fa ff50 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	9202      	str	r2, [sp, #8]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2300      	movs	r3, #0
 8005724:	460a      	mov	r2, r1
 8005726:	4920      	ldr	r1, [pc, #128]	; (80057a8 <vTaskStartScheduler+0xb0>)
 8005728:	4820      	ldr	r0, [pc, #128]	; (80057ac <vTaskStartScheduler+0xb4>)
 800572a:	f7ff fe8e 	bl	800544a <xTaskCreateStatic>
 800572e:	4603      	mov	r3, r0
 8005730:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <vTaskStartScheduler+0xb8>)
 8005732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005734:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <vTaskStartScheduler+0xb8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800573c:	2301      	movs	r3, #1
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e001      	b.n	8005746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d118      	bne.n	800577e <vTaskStartScheduler+0x86>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	b672      	cpsid	i
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	b662      	cpsie	i
 8005760:	613b      	str	r3, [r7, #16]
}
 8005762:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005764:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <vTaskStartScheduler+0xbc>)
 8005766:	f04f 32ff 	mov.w	r2, #4294967295
 800576a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <vTaskStartScheduler+0xc0>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <vTaskStartScheduler+0xc4>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005778:	f000 fd6a 	bl	8006250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800577c:	e010      	b.n	80057a0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d10c      	bne.n	80057a0 <vTaskStartScheduler+0xa8>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	b672      	cpsid	i
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	b662      	cpsie	i
 800579a:	60fb      	str	r3, [r7, #12]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <vTaskStartScheduler+0xa6>
}
 80057a0:	bf00      	nop
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	08009158 	.word	0x08009158
 80057ac:	08005b49 	.word	0x08005b49
 80057b0:	20003424 	.word	0x20003424
 80057b4:	20003420 	.word	0x20003420
 80057b8:	2000340c 	.word	0x2000340c
 80057bc:	20003404 	.word	0x20003404

080057c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <vTaskSuspendAll+0x18>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	4a03      	ldr	r2, [pc, #12]	; (80057d8 <vTaskSuspendAll+0x18>)
 80057cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20003428 	.word	0x20003428

080057dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ea:	4b42      	ldr	r3, [pc, #264]	; (80058f4 <xTaskResumeAll+0x118>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <xTaskResumeAll+0x30>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	b672      	cpsid	i
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	b662      	cpsie	i
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800580c:	f000 fd9e 	bl	800634c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005810:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <xTaskResumeAll+0x118>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3b01      	subs	r3, #1
 8005816:	4a37      	ldr	r2, [pc, #220]	; (80058f4 <xTaskResumeAll+0x118>)
 8005818:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581a:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <xTaskResumeAll+0x118>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d161      	bne.n	80058e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005822:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <xTaskResumeAll+0x11c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d05d      	beq.n	80058e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800582a:	e02e      	b.n	800588a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582c:	4b33      	ldr	r3, [pc, #204]	; (80058fc <xTaskResumeAll+0x120>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fddc 	bl	80053f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fdd7 	bl	80053f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <xTaskResumeAll+0x124>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <xTaskResumeAll+0x124>)
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4a27      	ldr	r2, [pc, #156]	; (8005904 <xTaskResumeAll+0x128>)
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f7ff fd63 	bl	800533c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <xTaskResumeAll+0x12c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <xTaskResumeAll+0x130>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <xTaskResumeAll+0x120>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1cc      	bne.n	800582c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005898:	f000 fa0e 	bl	8005cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <xTaskResumeAll+0x134>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058a8:	f000 f836 	bl	8005918 <xTaskIncrementTick>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058b2:	4b16      	ldr	r3, [pc, #88]	; (800590c <xTaskResumeAll+0x130>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f1      	bne.n	80058a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80058c4:	4b12      	ldr	r3, [pc, #72]	; (8005910 <xTaskResumeAll+0x134>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <xTaskResumeAll+0x130>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <xTaskResumeAll+0x138>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e6:	f000 fd65 	bl	80063b4 <vPortExitCritical>

	return xAlreadyYielded;
 80058ea:	68bb      	ldr	r3, [r7, #8]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20003428 	.word	0x20003428
 80058f8:	20003400 	.word	0x20003400
 80058fc:	200033c0 	.word	0x200033c0
 8005900:	20003408 	.word	0x20003408
 8005904:	20003304 	.word	0x20003304
 8005908:	20003300 	.word	0x20003300
 800590c:	20003414 	.word	0x20003414
 8005910:	20003410 	.word	0x20003410
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005922:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <xTaskIncrementTick+0x148>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 808a 	bne.w	8005a40 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800592c:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <xTaskIncrementTick+0x14c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005934:	4a4b      	ldr	r2, [pc, #300]	; (8005a64 <xTaskIncrementTick+0x14c>)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d122      	bne.n	8005986 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005940:	4b49      	ldr	r3, [pc, #292]	; (8005a68 <xTaskIncrementTick+0x150>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <xTaskIncrementTick+0x4c>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	b672      	cpsid	i
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	b662      	cpsie	i
 800595e:	603b      	str	r3, [r7, #0]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <xTaskIncrementTick+0x4a>
 8005964:	4b40      	ldr	r3, [pc, #256]	; (8005a68 <xTaskIncrementTick+0x150>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <xTaskIncrementTick+0x154>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3e      	ldr	r2, [pc, #248]	; (8005a68 <xTaskIncrementTick+0x150>)
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4a3e      	ldr	r2, [pc, #248]	; (8005a6c <xTaskIncrementTick+0x154>)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <xTaskIncrementTick+0x158>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	4a3c      	ldr	r2, [pc, #240]	; (8005a70 <xTaskIncrementTick+0x158>)
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	f000 f999 	bl	8005cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005986:	4b3b      	ldr	r3, [pc, #236]	; (8005a74 <xTaskIncrementTick+0x15c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d348      	bcc.n	8005a22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005990:	4b35      	ldr	r3, [pc, #212]	; (8005a68 <xTaskIncrementTick+0x150>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599a:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <xTaskIncrementTick+0x15c>)
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	601a      	str	r2, [r3, #0]
					break;
 80059a2:	e03e      	b.n	8005a22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a4:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <xTaskIncrementTick+0x150>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d203      	bcs.n	80059c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059bc:	4a2d      	ldr	r2, [pc, #180]	; (8005a74 <xTaskIncrementTick+0x15c>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059c2:	e02e      	b.n	8005a22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fd14 	bl	80053f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3318      	adds	r3, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fd0b 	bl	80053f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	2201      	movs	r2, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <xTaskIncrementTick+0x160>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <xTaskIncrementTick+0x160>)
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <xTaskIncrementTick+0x164>)
 8005a00:	441a      	add	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f7ff fc97 	bl	800533c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a12:	4b1b      	ldr	r3, [pc, #108]	; (8005a80 <xTaskIncrementTick+0x168>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3b9      	bcc.n	8005990 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a20:	e7b6      	b.n	8005990 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a22:	4b17      	ldr	r3, [pc, #92]	; (8005a80 <xTaskIncrementTick+0x168>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4914      	ldr	r1, [pc, #80]	; (8005a7c <xTaskIncrementTick+0x164>)
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d907      	bls.n	8005a4a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e004      	b.n	8005a4a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <xTaskIncrementTick+0x16c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a0f      	ldr	r2, [pc, #60]	; (8005a84 <xTaskIncrementTick+0x16c>)
 8005a48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <xTaskIncrementTick+0x170>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a56:	697b      	ldr	r3, [r7, #20]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20003428 	.word	0x20003428
 8005a64:	20003404 	.word	0x20003404
 8005a68:	200033b8 	.word	0x200033b8
 8005a6c:	200033bc 	.word	0x200033bc
 8005a70:	20003418 	.word	0x20003418
 8005a74:	20003420 	.word	0x20003420
 8005a78:	20003408 	.word	0x20003408
 8005a7c:	20003304 	.word	0x20003304
 8005a80:	20003300 	.word	0x20003300
 8005a84:	20003410 	.word	0x20003410
 8005a88:	20003414 	.word	0x20003414

08005a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a92:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <vTaskSwitchContext+0xa8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a9a:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <vTaskSwitchContext+0xac>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aa0:	e041      	b.n	8005b26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005aa2:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <vTaskSwitchContext+0xac>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa8:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <vTaskSwitchContext+0xb0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	fab3 f383 	clz	r3, r3
 8005ab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	f1c3 031f 	rsb	r3, r3, #31
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	4920      	ldr	r1, [pc, #128]	; (8005b40 <vTaskSwitchContext+0xb4>)
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10c      	bne.n	8005aec <vTaskSwitchContext+0x60>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	b672      	cpsid	i
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	b662      	cpsie	i
 8005ae6:	607b      	str	r3, [r7, #4]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <vTaskSwitchContext+0x5e>
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <vTaskSwitchContext+0xb4>)
 8005af8:	4413      	add	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d104      	bne.n	8005b1c <vTaskSwitchContext+0x90>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <vTaskSwitchContext+0xb8>)
 8005b24:	6013      	str	r3, [r2, #0]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20003428 	.word	0x20003428
 8005b38:	20003414 	.word	0x20003414
 8005b3c:	20003408 	.word	0x20003408
 8005b40:	20003304 	.word	0x20003304
 8005b44:	20003300 	.word	0x20003300

08005b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b50:	f000 f852 	bl	8005bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <prvIdleTask+0x28>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d9f9      	bls.n	8005b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <prvIdleTask+0x2c>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b6c:	e7f0      	b.n	8005b50 <prvIdleTask+0x8>
 8005b6e:	bf00      	nop
 8005b70:	20003304 	.word	0x20003304
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	e00c      	b.n	8005b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <prvInitialiseTaskLists+0x60>)
 8005b90:	4413      	add	r3, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fba5 	bl	80052e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b06      	cmp	r3, #6
 8005ba2:	d9ef      	bls.n	8005b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ba4:	480d      	ldr	r0, [pc, #52]	; (8005bdc <prvInitialiseTaskLists+0x64>)
 8005ba6:	f7ff fb9c 	bl	80052e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005baa:	480d      	ldr	r0, [pc, #52]	; (8005be0 <prvInitialiseTaskLists+0x68>)
 8005bac:	f7ff fb99 	bl	80052e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bb0:	480c      	ldr	r0, [pc, #48]	; (8005be4 <prvInitialiseTaskLists+0x6c>)
 8005bb2:	f7ff fb96 	bl	80052e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bb6:	480c      	ldr	r0, [pc, #48]	; (8005be8 <prvInitialiseTaskLists+0x70>)
 8005bb8:	f7ff fb93 	bl	80052e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bbc:	480b      	ldr	r0, [pc, #44]	; (8005bec <prvInitialiseTaskLists+0x74>)
 8005bbe:	f7ff fb90 	bl	80052e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <prvInitialiseTaskLists+0x78>)
 8005bc4:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <prvInitialiseTaskLists+0x64>)
 8005bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <prvInitialiseTaskLists+0x7c>)
 8005bca:	4a05      	ldr	r2, [pc, #20]	; (8005be0 <prvInitialiseTaskLists+0x68>)
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20003304 	.word	0x20003304
 8005bdc:	20003390 	.word	0x20003390
 8005be0:	200033a4 	.word	0x200033a4
 8005be4:	200033c0 	.word	0x200033c0
 8005be8:	200033d4 	.word	0x200033d4
 8005bec:	200033ec 	.word	0x200033ec
 8005bf0:	200033b8 	.word	0x200033b8
 8005bf4:	200033bc 	.word	0x200033bc

08005bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bfe:	e019      	b.n	8005c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c00:	f000 fba4 	bl	800634c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c04:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <prvCheckTasksWaitingTermination+0x50>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fbf0 	bl	80053f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <prvCheckTasksWaitingTermination+0x54>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	4a0b      	ldr	r2, [pc, #44]	; (8005c4c <prvCheckTasksWaitingTermination+0x54>)
 8005c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <prvCheckTasksWaitingTermination+0x58>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <prvCheckTasksWaitingTermination+0x58>)
 8005c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c2a:	f000 fbc3 	bl	80063b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f810 	bl	8005c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <prvCheckTasksWaitingTermination+0x58>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e1      	bne.n	8005c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200033d4 	.word	0x200033d4
 8005c4c:	20003400 	.word	0x20003400
 8005c50:	200033e8 	.word	0x200033e8

08005c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d108      	bne.n	8005c78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fc9a 	bl	80065a4 <vPortFree>
				vPortFree( pxTCB );
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fc97 	bl	80065a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c76:	e01a      	b.n	8005cae <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d103      	bne.n	8005c8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fc8e 	bl	80065a4 <vPortFree>
	}
 8005c88:	e011      	b.n	8005cae <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d00c      	beq.n	8005cae <prvDeleteTCB+0x5a>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	b672      	cpsid	i
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	b662      	cpsie	i
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <prvDeleteTCB+0x58>
	}
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <prvResetNextTaskUnblockTime+0x38>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cd0:	e008      	b.n	8005ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <prvResetNextTaskUnblockTime+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ce2:	6013      	str	r3, [r2, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	200033b8 	.word	0x200033b8
 8005cf4:	20003420 	.word	0x20003420

08005cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <xTaskGetSchedulerState+0x34>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d06:	2301      	movs	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	e008      	b.n	8005d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <xTaskGetSchedulerState+0x38>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d14:	2302      	movs	r3, #2
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	e001      	b.n	8005d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d1e:	687b      	ldr	r3, [r7, #4]
	}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	2000340c 	.word	0x2000340c
 8005d30:	20003428 	.word	0x20003428

08005d34 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005d3e:	f000 fb05 	bl	800634c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <ulTaskNotifyTake+0x88>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d113      	bne.n	8005d74 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <ulTaskNotifyTake+0x88>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	6838      	ldr	r0, [r7, #0]
 8005d60:	f000 f984 	bl	800606c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005d64:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <ulTaskNotifyTake+0x8c>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005d74:	f000 fb1e 	bl	80063b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005d78:	f000 fae8 	bl	800634c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <ulTaskNotifyTake+0x88>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d82:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <ulTaskNotifyTake+0x88>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2200      	movs	r2, #0
 8005d96:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d98:	e004      	b.n	8005da4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <ulTaskNotifyTake+0x88>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	3a01      	subs	r2, #1
 8005da2:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <ulTaskNotifyTake+0x88>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005dae:	f000 fb01 	bl	80063b4 <vPortExitCritical>

		return ulReturn;
 8005db2:	68fb      	ldr	r3, [r7, #12]
	}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20003300 	.word	0x20003300
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10c      	bne.n	8005df8 <xTaskGenericNotify+0x34>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	b672      	cpsid	i
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	b662      	cpsie	i
 8005df2:	61bb      	str	r3, [r7, #24]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005dfc:	f000 faa6 	bl	800634c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e14:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d828      	bhi.n	8005e76 <xTaskGenericNotify+0xb2>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <xTaskGenericNotify+0x68>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e9b 	.word	0x08005e9b
 8005e30:	08005e41 	.word	0x08005e41
 8005e34:	08005e4f 	.word	0x08005e4f
 8005e38:	08005e5b 	.word	0x08005e5b
 8005e3c:	08005e63 	.word	0x08005e63
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e4c:	e028      	b.n	8005ea0 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e58:	e022      	b.n	8005ea0 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e60:	e01e      	b.n	8005ea0 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e62:	7ffb      	ldrb	r3, [r7, #31]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d003      	beq.n	8005e70 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005e6e:	e017      	b.n	8005ea0 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005e74:	e014      	b.n	8005ea0 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d00e      	beq.n	8005e9e <xTaskGenericNotify+0xda>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	b672      	cpsid	i
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	b662      	cpsie	i
 8005e94:	617b      	str	r3, [r7, #20]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xTaskGenericNotify+0xd4>
					break;
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <xTaskGenericNotify+0xdc>

					break;
 8005e9e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d13b      	bne.n	8005f1e <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff faa3 	bl	80053f6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	4b1c      	ldr	r3, [pc, #112]	; (8005f2c <xTaskGenericNotify+0x168>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <xTaskGenericNotify+0x168>)
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <xTaskGenericNotify+0x16c>)
 8005ed0:	441a      	add	r2, r3
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f7ff fa2f 	bl	800533c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <xTaskGenericNotify+0x13c>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	b672      	cpsid	i
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	b662      	cpsie	i
 8005efa:	613b      	str	r3, [r7, #16]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <xTaskGenericNotify+0x170>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d907      	bls.n	8005f1e <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <xTaskGenericNotify+0x174>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005f1e:	f000 fa49 	bl	80063b4 <vPortExitCritical>

		return xReturn;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3728      	adds	r7, #40	; 0x28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20003408 	.word	0x20003408
 8005f30:	20003304 	.word	0x20003304
 8005f34:	20003300 	.word	0x20003300
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10c      	bne.n	8005f66 <vTaskNotifyGiveFromISR+0x2a>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	b672      	cpsid	i
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	b662      	cpsie	i
 8005f60:	61bb      	str	r3, [r7, #24]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f66:	f000 fad9 	bl	800651c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	b672      	cpsid	i
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	b662      	cpsie	i
 8005f86:	617a      	str	r2, [r7, #20]
 8005f88:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f8a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f8c:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f94:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d147      	bne.n	800603e <vTaskNotifyGiveFromISR+0x102>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <vTaskNotifyGiveFromISR+0x94>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	b672      	cpsid	i
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	b662      	cpsie	i
 8005fca:	60fb      	str	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vTaskNotifyGiveFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd0:	4b20      	ldr	r3, [pc, #128]	; (8006054 <vTaskNotifyGiveFromISR+0x118>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11c      	bne.n	8006012 <vTaskNotifyGiveFromISR+0xd6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fa0a 	bl	80053f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <vTaskNotifyGiveFromISR+0x11c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	4a19      	ldr	r2, [pc, #100]	; (8006058 <vTaskNotifyGiveFromISR+0x11c>)
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4a16      	ldr	r2, [pc, #88]	; (800605c <vTaskNotifyGiveFromISR+0x120>)
 8006002:	441a      	add	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f7ff f996 	bl	800533c <vListInsertEnd>
 8006010:	e005      	b.n	800601e <vTaskNotifyGiveFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	3318      	adds	r3, #24
 8006016:	4619      	mov	r1, r3
 8006018:	4811      	ldr	r0, [pc, #68]	; (8006060 <vTaskNotifyGiveFromISR+0x124>)
 800601a:	f7ff f98f 	bl	800533c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006022:	4b10      	ldr	r3, [pc, #64]	; (8006064 <vTaskNotifyGiveFromISR+0x128>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	429a      	cmp	r2, r3
 800602a:	d908      	bls.n	800603e <vTaskNotifyGiveFromISR+0x102>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006038:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <vTaskNotifyGiveFromISR+0x12c>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006048:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800604a:	bf00      	nop
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20003428 	.word	0x20003428
 8006058:	20003408 	.word	0x20003408
 800605c:	20003304 	.word	0x20003304
 8006060:	200033c0 	.word	0x200033c0
 8006064:	20003300 	.word	0x20003300
 8006068:	20003414 	.word	0x20003414

0800606c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006076:	4b29      	ldr	r3, [pc, #164]	; (800611c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800607c:	4b28      	ldr	r3, [pc, #160]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff f9b7 	bl	80053f6 <uxListRemove>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	2201      	movs	r2, #1
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43da      	mvns	r2, r3
 800609c:	4b21      	ldr	r3, [pc, #132]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4013      	ands	r3, r2
 80060a2:	4a20      	ldr	r2, [pc, #128]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d10a      	bne.n	80060c4 <prvAddCurrentTaskToDelayedList+0x58>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	481a      	ldr	r0, [pc, #104]	; (8006128 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060be:	f7ff f93d 	bl	800533c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060c2:	e026      	b.n	8006112 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d209      	bcs.n	80060f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <prvAddCurrentTaskToDelayedList+0xc0>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7ff f94b 	bl	8005384 <vListInsert>
}
 80060ee:	e010      	b.n	8006112 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7ff f941 	bl	8005384 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	d202      	bcs.n	8006112 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <prvAddCurrentTaskToDelayedList+0xc8>)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20003404 	.word	0x20003404
 8006120:	20003300 	.word	0x20003300
 8006124:	20003408 	.word	0x20003408
 8006128:	200033ec 	.word	0x200033ec
 800612c:	200033bc 	.word	0x200033bc
 8006130:	200033b8 	.word	0x200033b8
 8006134:	20003420 	.word	0x20003420

08006138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3b04      	subs	r3, #4
 8006148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b04      	subs	r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3b04      	subs	r3, #4
 8006166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006168:	4a0c      	ldr	r2, [pc, #48]	; (800619c <pxPortInitialiseStack+0x64>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3b14      	subs	r3, #20
 8006172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b04      	subs	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f06f 0202 	mvn.w	r2, #2
 8006186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b20      	subs	r3, #32
 800618c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	080061a1 	.word	0x080061a1

080061a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061aa:	4b14      	ldr	r3, [pc, #80]	; (80061fc <prvTaskExitError+0x5c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d00c      	beq.n	80061ce <prvTaskExitError+0x2e>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	b672      	cpsid	i
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	b662      	cpsie	i
 80061c8:	60fb      	str	r3, [r7, #12]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <prvTaskExitError+0x2c>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	b672      	cpsid	i
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	b662      	cpsie	i
 80061e2:	60bb      	str	r3, [r7, #8]
}
 80061e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061e6:	bf00      	nop
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0fc      	beq.n	80061e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000010 	.word	0x20000010

08006200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <pxCurrentTCBConst2>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f380 8809 	msr	PSP, r0
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8811 	msr	BASEPRI, r0
 800621a:	4770      	bx	lr
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst2>:
 8006220:	20003300 	.word	0x20003300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <prvPortStartFirstTask+0x24>)
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f380 8808 	msr	MSP, r0
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8814 	msr	CONTROL, r0
 800623a:	b662      	cpsie	i
 800623c:	b661      	cpsie	f
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	df00      	svc	0
 8006248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800624a:	bf00      	nop
 800624c:	e000ed08 	.word	0xe000ed08

08006250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006256:	4b37      	ldr	r3, [pc, #220]	; (8006334 <xPortStartScheduler+0xe4>)
 8006258:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006278:	b2da      	uxtb	r2, r3
 800627a:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <xPortStartScheduler+0xe8>)
 800627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800627e:	4b2f      	ldr	r3, [pc, #188]	; (800633c <xPortStartScheduler+0xec>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006284:	e009      	b.n	800629a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006286:	4b2d      	ldr	r3, [pc, #180]	; (800633c <xPortStartScheduler+0xec>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a2b      	ldr	r2, [pc, #172]	; (800633c <xPortStartScheduler+0xec>)
 800628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d0ef      	beq.n	8006286 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062a6:	4b25      	ldr	r3, [pc, #148]	; (800633c <xPortStartScheduler+0xec>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1c3 0307 	rsb	r3, r3, #7
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d00c      	beq.n	80062cc <xPortStartScheduler+0x7c>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	b672      	cpsid	i
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	b662      	cpsie	i
 80062c6:	60bb      	str	r3, [r7, #8]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <xPortStartScheduler+0xec>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	4a1a      	ldr	r2, [pc, #104]	; (800633c <xPortStartScheduler+0xec>)
 80062d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062d6:	4b19      	ldr	r3, [pc, #100]	; (800633c <xPortStartScheduler+0xec>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062de:	4a17      	ldr	r2, [pc, #92]	; (800633c <xPortStartScheduler+0xec>)
 80062e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <xPortStartScheduler+0xf0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a14      	ldr	r2, [pc, #80]	; (8006340 <xPortStartScheduler+0xf0>)
 80062f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <xPortStartScheduler+0xf0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <xPortStartScheduler+0xf0>)
 80062fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006300:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006302:	f000 f8dd 	bl	80064c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <xPortStartScheduler+0xf4>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800630c:	f000 f8fc 	bl	8006508 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006310:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <xPortStartScheduler+0xf8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a0c      	ldr	r2, [pc, #48]	; (8006348 <xPortStartScheduler+0xf8>)
 8006316:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800631a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800631c:	f7ff ff84 	bl	8006228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006320:	f7ff fbb4 	bl	8005a8c <vTaskSwitchContext>
	prvTaskExitError();
 8006324:	f7ff ff3c 	bl	80061a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	e000e400 	.word	0xe000e400
 8006338:	2000342c 	.word	0x2000342c
 800633c:	20003430 	.word	0x20003430
 8006340:	e000ed20 	.word	0xe000ed20
 8006344:	20000010 	.word	0x20000010
 8006348:	e000ef34 	.word	0xe000ef34

0800634c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	b672      	cpsid	i
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	b662      	cpsie	i
 8006366:	607b      	str	r3, [r7, #4]
}
 8006368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <vPortEnterCritical+0x60>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3301      	adds	r3, #1
 8006370:	4a0e      	ldr	r2, [pc, #56]	; (80063ac <vPortEnterCritical+0x60>)
 8006372:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006374:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <vPortEnterCritical+0x60>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d111      	bne.n	80063a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <vPortEnterCritical+0x64>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00c      	beq.n	80063a0 <vPortEnterCritical+0x54>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vPortEnterCritical+0x52>
	}
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20000010 	.word	0x20000010
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <vPortExitCritical+0x54>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10c      	bne.n	80063dc <vPortExitCritical+0x28>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	607b      	str	r3, [r7, #4]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <vPortExitCritical+0x54>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4a09      	ldr	r2, [pc, #36]	; (8006408 <vPortExitCritical+0x54>)
 80063e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063e6:	4b08      	ldr	r3, [pc, #32]	; (8006408 <vPortExitCritical+0x54>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <vPortExitCritical+0x46>
 80063ee:	2300      	movs	r3, #0
 80063f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f383 8811 	msr	BASEPRI, r3
}
 80063f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000010 	.word	0x20000010
 800640c:	00000000 	.word	0x00000000

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	b672      	cpsid	i
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	b662      	cpsie	i
 8006444:	f7ff fb22 	bl	8005a8c <vTaskSwitchContext>
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f380 8811 	msr	BASEPRI, r0
 8006450:	bc09      	pop	{r0, r3}
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f01e 0f10 	tst.w	lr, #16
 800645e:	bf08      	it	eq
 8006460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006464:	f380 8809 	msr	PSP, r0
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <pxCurrentTCBConst>:
 8006470:	20003300 	.word	0x20003300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	b672      	cpsid	i
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	b662      	cpsie	i
 8006492:	607b      	str	r3, [r7, #4]
}
 8006494:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006496:	f7ff fa3f 	bl	8005918 <xTaskIncrementTick>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064a0:	4b06      	ldr	r3, [pc, #24]	; (80064bc <xPortSysTickHandler+0x44>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f383 8811 	msr	BASEPRI, r3
}
 80064b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x34>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064ca:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <vPortSetupTimerInterrupt+0x38>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x3c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <vPortSetupTimerInterrupt+0x40>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	099b      	lsrs	r3, r3, #6
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <vPortSetupTimerInterrupt+0x44>)
 80064de:	3b01      	subs	r3, #1
 80064e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <vPortSetupTimerInterrupt+0x34>)
 80064e4:	2207      	movs	r2, #7
 80064e6:	601a      	str	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	e000e010 	.word	0xe000e010
 80064f8:	e000e018 	.word	0xe000e018
 80064fc:	20000004 	.word	0x20000004
 8006500:	10624dd3 	.word	0x10624dd3
 8006504:	e000e014 	.word	0xe000e014

08006508 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006508:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006518 <vPortEnableVFP+0x10>
 800650c:	6801      	ldr	r1, [r0, #0]
 800650e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006512:	6001      	str	r1, [r0, #0]
 8006514:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006516:	bf00      	nop
 8006518:	e000ed88 	.word	0xe000ed88

0800651c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006522:	f3ef 8305 	mrs	r3, IPSR
 8006526:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d916      	bls.n	800655c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652e:	4a19      	ldr	r2, [pc, #100]	; (8006594 <vPortValidateInterruptPriority+0x78>)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <vPortValidateInterruptPriority+0x7c>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	7afa      	ldrb	r2, [r7, #11]
 800653e:	429a      	cmp	r2, r3
 8006540:	d20c      	bcs.n	800655c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	b672      	cpsid	i
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	b662      	cpsie	i
 8006556:	607b      	str	r3, [r7, #4]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <vPortValidateInterruptPriority+0x80>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <vPortValidateInterruptPriority+0x84>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d90c      	bls.n	8006586 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	b672      	cpsid	i
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	b662      	cpsie	i
 8006580:	603b      	str	r3, [r7, #0]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <vPortValidateInterruptPriority+0x68>
	}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	e000e3f0 	.word	0xe000e3f0
 8006598:	2000342c 	.word	0x2000342c
 800659c:	e000ed0c 	.word	0xe000ed0c
 80065a0:	20003430 	.word	0x20003430

080065a4 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d04c      	beq.n	8006650 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065b6:	2308      	movs	r3, #8
 80065b8:	425b      	negs	r3, r3
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4413      	add	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	4b23      	ldr	r3, [pc, #140]	; (8006658 <vPortFree+0xb4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10c      	bne.n	80065ec <vPortFree+0x48>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	b672      	cpsid	i
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	b662      	cpsie	i
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <vPortFree+0x6a>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	b672      	cpsid	i
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	b662      	cpsie	i
 8006608:	60bb      	str	r3, [r7, #8]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4b11      	ldr	r3, [pc, #68]	; (8006658 <vPortFree+0xb4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d019      	beq.n	8006650 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d115      	bne.n	8006650 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <vPortFree+0xb4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006634:	f7ff f8c4 	bl	80057c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <vPortFree+0xb8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4413      	add	r3, r2
 8006642:	4a06      	ldr	r2, [pc, #24]	; (800665c <vPortFree+0xb8>)
 8006644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 f80a 	bl	8006660 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800664c:	f7ff f8c6 	bl	80057dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006650:	bf00      	nop
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20003444 	.word	0x20003444
 800665c:	20003440 	.word	0x20003440

08006660 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006668:	4b28      	ldr	r3, [pc, #160]	; (800670c <prvInsertBlockIntoFreeList+0xac>)
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e002      	b.n	8006674 <prvInsertBlockIntoFreeList+0x14>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	429a      	cmp	r2, r3
 800667c:	d8f7      	bhi.n	800666e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4413      	add	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d108      	bne.n	80066a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	441a      	add	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	441a      	add	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d118      	bne.n	80066e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b15      	ldr	r3, [pc, #84]	; (8006710 <prvInsertBlockIntoFreeList+0xb0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d00d      	beq.n	80066de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e008      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <prvInsertBlockIntoFreeList+0xb0>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e003      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d002      	beq.n	80066fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20003434 	.word	0x20003434
 8006710:	2000343c 	.word	0x2000343c

08006714 <QHsm_ctor>:
* @usage
* The following example illustrates how to invoke QHsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qhsm_ctor.c
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->vptr      = &vtable;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a06      	ldr	r2, [pc, #24]	; (800673c <QHsm_ctor+0x28>)
 8006722:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a06      	ldr	r2, [pc, #24]	; (8006740 <QHsm_ctor+0x2c>)
 8006728:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	080091a4 	.word	0x080091a4
 8006740:	0800683d 	.word	0x0800683d

08006744 <QHsm_init_>:
void QHsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QHsm_init_(QHsm * const me, void const * const e)
#endif
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c

    /** @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <QHsm_init_+0x28>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <QHsm_init_+0x28>
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	4a30      	ldr	r2, [pc, #192]	; (8006828 <QHsm_init_+0xe4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <QHsm_init_+0x30>
 800676c:	21c8      	movs	r1, #200	; 0xc8
 800676e:	482f      	ldr	r0, [pc, #188]	; (800682c <QHsm_init_+0xe8>)
 8006770:	f7fa f97e 	bl	8000a70 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	2b08      	cmp	r3, #8
 8006784:	d003      	beq.n	800678e <QHsm_init_+0x4a>
 8006786:	21d2      	movs	r1, #210	; 0xd2
 8006788:	4828      	ldr	r0, [pc, #160]	; (800682c <QHsm_init_+0xe8>)
 800678a:	f7fa f971 	bl	8000a70 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 800678e:	2300      	movs	r3, #0
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28

        path[0] = me->temp.fun;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	60fb      	str	r3, [r7, #12]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4924      	ldr	r1, [pc, #144]	; (8006830 <QHsm_init_+0xec>)
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
        while (me->temp.fun != t) {
 80067a2:	e016      	b.n	80067d2 <QHsm_init_+0x8e>
            ++ip;
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	3301      	adds	r3, #1
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	dd03      	ble.n	80067b8 <QHsm_init_+0x74>
 80067b0:	21dc      	movs	r1, #220	; 0xdc
 80067b2:	481e      	ldr	r0, [pc, #120]	; (800682c <QHsm_init_+0xe8>)
 80067b4:	f7fa f95c 	bl	8000a70 <Q_onAssert>
            path[ip] = me->temp.fun;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	3330      	adds	r3, #48	; 0x30
 80067c2:	443b      	add	r3, r7
 80067c4:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4918      	ldr	r1, [pc, #96]	; (8006830 <QHsm_init_+0xec>)
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
        while (me->temp.fun != t) {
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1e3      	bne.n	80067a4 <QHsm_init_+0x60>
        }
        me->temp.fun = path[0];
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	609a      	str	r2, [r3, #8]

        /* retrace the entry path in reverse (desired) order... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3330      	adds	r3, #48	; 0x30
 80067e8:	443b      	add	r3, r7
 80067ea:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80067ee:	4911      	ldr	r1, [pc, #68]	; (8006834 <QHsm_init_+0xf0>)
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
            --ip;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	3b01      	subs	r3, #1
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (ip >= 0);
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	daf0      	bge.n	80067e2 <QHsm_init_+0x9e>

        t = path[0]; /* current state becomes the new source */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	490c      	ldr	r1, [pc, #48]	; (8006838 <QHsm_init_+0xf4>)
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
 800680c:	6278      	str	r0, [r7, #36]	; 0x24
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
#endif /* Q_SPY */

    } while (r == (QState)Q_RET_TRAN);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	2b08      	cmp	r3, #8
 8006812:	d0bc      	beq.n	800678e <QHsm_init_+0x4a>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006818:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800681e:	609a      	str	r2, [r3, #8]
}
 8006820:	bf00      	nop
 8006822:	3730      	adds	r7, #48	; 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	0800683d 	.word	0x0800683d
 800682c:	0800918c 	.word	0x0800918c
 8006830:	08009194 	.word	0x08009194
 8006834:	08009198 	.word	0x08009198
 8006838:	080091a0 	.word	0x080091a0

0800683c <QHsm_top>:
*          ignores all events.
*
* @note The parameters to this state handler are not used. They are provided
* for conformance with the state-handler function signature ::QStateHandler.
*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
    (void)me; /* suppress the "unused parameter" compiler warning */
    (void)e;  /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
 8006846:	2304      	movs	r3, #4
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QHsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
    QS_CRIT_STAT_

    /** @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <QHsm_dispatch_+0x20>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006870:	429a      	cmp	r2, r3
 8006872:	d004      	beq.n	800687e <QHsm_dispatch_+0x2a>
 8006874:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006878:	484e      	ldr	r0, [pc, #312]	; (80069b4 <QHsm_dispatch_+0x160>)
 800687a:	f7fa f8f9 	bl	8000a70 <Q_onAssert>
        QS_FUN_PRE_(t);         /* the current state */
    QS_END_PRE_()

    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	623b      	str	r3, [r7, #32]
        r = (*s)(me, e); /* invoke state handler s */
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
 800688c:	62b8      	str	r0, [r7, #40]	; 0x28

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	2b02      	cmp	r3, #2
 8006892:	d104      	bne.n	800689e <QHsm_dispatch_+0x4a>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	4948      	ldr	r1, [pc, #288]	; (80069b8 <QHsm_dispatch_+0x164>)
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
 800689c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
    } while (r == (QState)Q_RET_SUPER);
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0ec      	beq.n	800687e <QHsm_dispatch_+0x2a>

    /* transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	d979      	bls.n	800699e <QHsm_dispatch_+0x14a>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip;

        path[0] = me->temp.fun; /* save the target of the transition */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]
        path[1] = t;
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	60fb      	str	r3, [r7, #12]
        path[2] = s;
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	613b      	str	r3, [r7, #16]

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp.fun) {
 80068b8:	e00d      	b.n	80068d6 <QHsm_dispatch_+0x82>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	493f      	ldr	r1, [pc, #252]	; (80069bc <QHsm_dispatch_+0x168>)
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d103      	bne.n	80068d0 <QHsm_dispatch_+0x7c>
                QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	493b      	ldr	r1, [pc, #236]	; (80069b8 <QHsm_dispatch_+0x164>)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d1ed      	bne.n	80068ba <QHsm_dispatch_+0x66>
        }

#ifdef Q_SPY
        ip = QHsm_tran_(me, path, qs_id);
#else
        ip = QHsm_tran_(me, path);
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f86f 	bl	80069c8 <QHsm_tran_>
 80068ea:	6278      	str	r0, [r7, #36]	; 0x24

        }
#endif /* Q_SPY */

        /* retrace the entry path in reverse (desired) order... */
        for (; ip >= 0; --ip) {
 80068ec:	e00b      	b.n	8006906 <QHsm_dispatch_+0xb2>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	3330      	adds	r3, #48	; 0x30
 80068f4:	443b      	add	r3, r7
 80068f6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80068fa:	4931      	ldr	r1, [pc, #196]	; (80069c0 <QHsm_dispatch_+0x16c>)
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	3b01      	subs	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	daf0      	bge.n	80068ee <QHsm_dispatch_+0x9a>
        }

        t = path[0];      /* stick the target into register */
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
        me->temp.fun = t; /* update the next state */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006914:	609a      	str	r2, [r3, #8]

        /* drill into the target hierarchy... */
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8006916:	e03b      	b.n	8006990 <QHsm_dispatch_+0x13c>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
            path[0] = me->temp.fun;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	60bb      	str	r3, [r7, #8]

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	4924      	ldr	r1, [pc, #144]	; (80069b8 <QHsm_dispatch_+0x164>)
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3

            while (me->temp.fun != t) {
 800692c:	e00f      	b.n	800694e <QHsm_dispatch_+0xfa>
                ++ip;
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	3301      	adds	r3, #1
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
                path[ip] = me->temp.fun;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	3330      	adds	r3, #48	; 0x30
 800693e:	443b      	add	r3, r7
 8006940:	f843 2c28 	str.w	r2, [r3, #-40]
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	491b      	ldr	r1, [pc, #108]	; (80069b8 <QHsm_dispatch_+0x164>)
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
            while (me->temp.fun != t) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006954:	429a      	cmp	r2, r3
 8006956:	d1ea      	bne.n	800692e <QHsm_dispatch_+0xda>
            }
            me->temp.fun = path[0];
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	2b05      	cmp	r3, #5
 8006962:	dd04      	ble.n	800696e <QHsm_dispatch_+0x11a>
 8006964:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8006968:	4812      	ldr	r0, [pc, #72]	; (80069b4 <QHsm_dispatch_+0x160>)
 800696a:	f7fa f881 	bl	8000a70 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	3330      	adds	r3, #48	; 0x30
 8006974:	443b      	add	r3, r7
 8006976:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800697a:	4911      	ldr	r1, [pc, #68]	; (80069c0 <QHsm_dispatch_+0x16c>)
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
                --ip;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	3b01      	subs	r3, #1
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
            } while (ip >= 0);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	daf0      	bge.n	800696e <QHsm_dispatch_+0x11a>

            t = path[0]; /* current state becomes the new source */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	490c      	ldr	r1, [pc, #48]	; (80069c4 <QHsm_dispatch_+0x170>)
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
 8006998:	4603      	mov	r3, r0
 800699a:	2b08      	cmp	r3, #8
 800699c:	d0bc      	beq.n	8006918 <QHsm_dispatch_+0xc4>
        QS_END_PRE_()

    }
#endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a2:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a8:	609a      	str	r2, [r3, #8]
}
 80069aa:	bf00      	nop
 80069ac:	3730      	adds	r7, #48	; 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	0800918c 	.word	0x0800918c
 80069b8:	08009194 	.word	0x08009194
 80069bc:	0800919c 	.word	0x0800919c
 80069c0:	08009198 	.word	0x08009198
 80069c4:	080091a0 	.word	0x080091a0

080069c8 <QHsm_tran_>:
                              uint_fast8_t const qs_id)
#else
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
#endif
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
    int_fast8_t ip = -1; /* transition entry path index */
 80069d2:	f04f 33ff 	mov.w	r3, #4294967295
 80069d6:	61fb      	str	r3, [r7, #28]
    int_fast8_t iq; /* helper transition entry path index */
    QStateHandler t = path[0];
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	617b      	str	r3, [r7, #20]
    QStateHandler const s = path[2];
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60fb      	str	r3, [r7, #12]
    QState r;
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d106      	bne.n	80069fa <QHsm_tran_+0x32>
        QEP_EXIT_(s, qs_id); /* exit the source */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4964      	ldr	r1, [pc, #400]	; (8006b80 <QHsm_tran_+0x1b8>)
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
        ip = 0; /* enter the target */
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e0bc      	b.n	8006b74 <QHsm_tran_+0x1ac>
    }
    else {
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of target */
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4961      	ldr	r1, [pc, #388]	; (8006b84 <QHsm_tran_+0x1bc>)
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3

        t = me->temp.fun;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	617b      	str	r3, [r7, #20]

        /* (b) check source==target->super... */
        if (s == t) {
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d102      	bne.n	8006a16 <QHsm_tran_+0x4e>
            ip = 0; /* enter the target */
 8006a10:	2300      	movs	r3, #0
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e0ae      	b.n	8006b74 <QHsm_tran_+0x1ac>
        }
        else {
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of src */
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	495a      	ldr	r1, [pc, #360]	; (8006b84 <QHsm_tran_+0x1bc>)
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d106      	bne.n	8006a36 <QHsm_tran_+0x6e>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4955      	ldr	r1, [pc, #340]	; (8006b80 <QHsm_tran_+0x1b8>)
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
                ip = 0; /* enter the target */
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e09e      	b.n	8006b74 <QHsm_tran_+0x1ac>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d104      	bne.n	8006a4c <QHsm_tran_+0x84>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	494e      	ldr	r1, [pc, #312]	; (8006b80 <QHsm_tran_+0x1b8>)
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
 8006a4a:	e093      	b.n	8006b74 <QHsm_tran_+0x1ac>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = 0; /* indicate that LCA not found */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61bb      	str	r3, [r7, #24]
                    ip = 1; /* enter target and its superstate */
 8006a50:	2301      	movs	r3, #1
 8006a52:	61fb      	str	r3, [r7, #28]
                    path[1] = t;      /* save the superstate of target */
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	3304      	adds	r3, #4
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	617b      	str	r3, [r7, #20]

                    /* find target->super->super... */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	3304      	adds	r3, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4946      	ldr	r1, [pc, #280]	; (8006b84 <QHsm_tran_+0x1bc>)
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8006a70:	e024      	b.n	8006abc <QHsm_tran_+0xf4>
                        ++ip;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	3301      	adds	r3, #1
 8006a76:	61fb      	str	r3, [r7, #28]
                        path[ip] = me->temp.fun; /* store the entry path */
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	4413      	add	r3, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6892      	ldr	r2, [r2, #8]
 8006a84:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d10f      	bne.n	8006ab0 <QHsm_tran_+0xe8>
                            iq = 1; /* indicate that LCA found */
 8006a90:	2301      	movs	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	dd04      	ble.n	8006aa4 <QHsm_tran_+0xdc>
 8006a9a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8006a9e:	483a      	ldr	r0, [pc, #232]	; (8006b88 <QHsm_tran_+0x1c0>)
 8006aa0:	f7f9 ffe6 	bl	8000a70 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
 8006aaa:	2303      	movs	r3, #3
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	e005      	b.n	8006abc <QHsm_tran_+0xf4>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4933      	ldr	r1, [pc, #204]	; (8006b84 <QHsm_tran_+0x1bc>)
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0d7      	beq.n	8006a72 <QHsm_tran_+0xaa>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d155      	bne.n	8006b74 <QHsm_tran_+0x1ac>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	dd04      	ble.n	8006ad8 <QHsm_tran_+0x110>
 8006ace:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006ad2:	482d      	ldr	r0, [pc, #180]	; (8006b88 <QHsm_tran_+0x1c0>)
 8006ad4:	f7f9 ffcc 	bl	8000a70 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4929      	ldr	r1, [pc, #164]	; (8006b80 <QHsm_tran_+0x1b8>)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	61bb      	str	r3, [r7, #24]
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	613b      	str	r3, [r7, #16]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d108      	bne.n	8006b0a <QHsm_tran_+0x142>
                                r = (QState)Q_RET_HANDLED; /* LCA found */
 8006af8:	2303      	movs	r3, #3
 8006afa:	613b      	str	r3, [r7, #16]
                                ip = iq - 1; /* do not enter LCA */
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]
                                iq = -1; /* cause termintion of the loop */
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e002      	b.n	8006b10 <QHsm_tran_+0x148>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
                            }
                        } while (iq >= 0);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dae8      	bge.n	8006ae8 <QHsm_tran_+0x120>

                        /* LCA not found? */
                        if (r != (QState)Q_RET_HANDLED) {
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d02b      	beq.n	8006b74 <QHsm_tran_+0x1ac>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	613b      	str	r3, [r7, #16]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4917      	ldr	r1, [pc, #92]	; (8006b80 <QHsm_tran_+0x1b8>)
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d103      	bne.n	8006b36 <QHsm_tran_+0x16e>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4914      	ldr	r1, [pc, #80]	; (8006b84 <QHsm_tran_+0x1bc>)
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	617b      	str	r3, [r7, #20]
                                iq = ip;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	61bb      	str	r3, [r7, #24]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	4413      	add	r3, r2
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d108      	bne.n	8006b62 <QHsm_tran_+0x19a>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
                                        iq = -1; /* break out of inner loop */
 8006b56:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5a:	61bb      	str	r3, [r7, #24]
                                        /* break out of outer loop */
                                        r = (QState)Q_RET_HANDLED;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	e002      	b.n	8006b68 <QHsm_tran_+0x1a0>
                                    }
                                    else {
                                        --iq;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	61bb      	str	r3, [r7, #24]
                                    }
                                } while (iq >= 0);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dae8      	bge.n	8006b40 <QHsm_tran_+0x178>
                            } while (r != (QState)Q_RET_HANDLED);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d1d5      	bne.n	8006b20 <QHsm_tran_+0x158>
                    }
                }
            }
        }
    }
    return ip;
 8006b74:	69fb      	ldr	r3, [r7, #28]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	0800919c 	.word	0x0800919c
 8006b84:	08009194 	.word	0x08009194
 8006b88:	0800918c 	.word	0x0800918c

08006b8c <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
    uint_fast8_t p = (uint_fast8_t)a->prio;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
    /** @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <QF_add_+0x28>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d805      	bhi.n	8006bb4 <QF_add_+0x28>
 8006ba8:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <QF_add_+0x4c>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <QF_add_+0x30>
 8006bb4:	2164      	movs	r1, #100	; 0x64
 8006bb6:	4809      	ldr	r0, [pc, #36]	; (8006bdc <QF_add_+0x50>)
 8006bb8:	f7f9 ff5a 	bl	8000a70 <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));

    QF_CRIT_E_();
 8006bbc:	f7ff fbc6 	bl	800634c <vPortEnterCritical>
    QF_active_[p] = a; /* register the active object at this priority */
 8006bc0:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <QF_add_+0x4c>)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 8006bca:	f7ff fbf3 	bl	80063b4 <vPortExitCritical>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2000344c 	.word	0x2000344c
 8006bdc:	080091ac 	.word	0x080091ac

08006be0 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
    uint_fast16_t n;
    for (n = len; n > 0U; --n) {
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	e008      	b.n	8006c06 <QF_bzero+0x26>
        *ptr = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
        QF_PTR_INC_(ptr);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
    for (n = len; n > 0U; --n) {
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f3      	bne.n	8006bf4 <QF_bzero+0x14>
    }
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <QF_LOG2>:

/* log-base-2 implementation ************************************************/
#ifndef QF_LOG2

    uint_fast8_t QF_LOG2(QPSetBits x) {
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
        static uint8_t const log2LUT[16] = {
            0U, 1U, 2U, 2U, 3U, 3U, 3U, 3U,
            4U, 4U, 4U, 4U, 4U, 4U, 4U, 4U
        };
        uint_fast8_t n = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
        QPSetBits    t;

#if (QF_MAX_ACTIVE > 16)
        t = (QPSetBits)(x >> 16);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	60bb      	str	r3, [r7, #8]
        if (t != 0U) {
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <QF_LOG2+0x22>
            n += 16U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3310      	adds	r3, #16
 8006c38:	60fb      	str	r3, [r7, #12]
            x = t;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	607b      	str	r3, [r7, #4]
        }
#endif
#if (QF_MAX_ACTIVE > 8)
        t = (x >> 8);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0a1b      	lsrs	r3, r3, #8
 8006c42:	60bb      	str	r3, [r7, #8]
        if (t != 0U) {
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <QF_LOG2+0x38>
            n += 8U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	60fb      	str	r3, [r7, #12]
            x = t;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	607b      	str	r3, [r7, #4]
        }
#endif
        t = (x >> 4);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	60bb      	str	r3, [r7, #8]
        if (t != 0U) {
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <QF_LOG2+0x4e>
            n += 4U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3304      	adds	r3, #4
 8006c64:	60fb      	str	r3, [r7, #12]
            x = t;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	607b      	str	r3, [r7, #4]
        }
        return n + log2LUT[x];
 8006c6a:	4a06      	ldr	r2, [pc, #24]	; (8006c84 <QF_LOG2+0x68>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
    }
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	080091b4 	.word	0x080091b4

08006c88 <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
    bool status;
    QF_CRIT_STAT_
    QS_TEST_PROBE_DEF(&QActive_post_)

    /** @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <QActive_post_+0x1a>
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	483d      	ldr	r0, [pc, #244]	; (8006d94 <QActive_post_+0x10c>)
 8006c9e:	f7f9 fee7 	bl	8000a70 <Q_onAssert>

    QF_CRIT_E_();
 8006ca2:	f7ff fb53 	bl	800634c <vPortEnterCritical>
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	7ddb      	ldrb	r3, [r3, #23]
 8006caa:	75bb      	strb	r3, [r7, #22]
    /* test-probe#1 for faking queue overflow */
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    if (margin == QF_NO_MARGIN) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10e      	bne.n	8006cd4 <QActive_post_+0x4c>
        if (nFree > 0U) {
 8006cb6:	7dbb      	ldrb	r3, [r7, #22]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <QActive_post_+0x3a>
            status = true; /* can post */
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
 8006cc0:	e012      	b.n	8006ce8 <QActive_post_+0x60>
        }
        else {
            status = false; /* cannot post */
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8006cc6:	f7ff fb75 	bl	80063b4 <vPortExitCritical>
 8006cca:	216e      	movs	r1, #110	; 0x6e
 8006ccc:	4831      	ldr	r0, [pc, #196]	; (8006d94 <QActive_post_+0x10c>)
 8006cce:	f7f9 fecf 	bl	8000a70 <Q_onAssert>
 8006cd2:	e009      	b.n	8006ce8 <QActive_post_+0x60>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	7dba      	ldrb	r2, [r7, #22]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d902      	bls.n	8006ce4 <QActive_post_+0x5c>
        status = true; /* can post */
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
 8006ce2:	e001      	b.n	8006ce8 <QActive_post_+0x60>
    }
    else {
        status = false; /* cannot post, but don't assert */
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	789b      	ldrb	r3, [r3, #2]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d006      	beq.n	8006cfe <QActive_post_+0x76>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	78db      	ldrb	r3, [r3, #3]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d03d      	beq.n	8006d80 <QActive_post_+0xf8>

        --nFree; /* one free entry just used up */
 8006d04:	7dbb      	ldrb	r3, [r7, #22]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	7dba      	ldrb	r2, [r7, #22]
 8006d0e:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	7e1b      	ldrb	r3, [r3, #24]
 8006d14:	7dba      	ldrb	r2, [r7, #22]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d202      	bcs.n	8006d20 <QActive_post_+0x98>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	7dba      	ldrb	r2, [r7, #22]
 8006d1e:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10f      	bne.n	8006d48 <QActive_post_+0xc0>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8006d2e:	f7ff fb41 	bl	80063b4 <vPortExitCritical>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f103 001c 	add.w	r0, r3, #28
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	f7ff f841 	bl	8005dc4 <xTaskGenericNotify>
 8006d42:	f7ff fb03 	bl	800634c <vPortEnterCritical>
 8006d46:	e018      	b.n	8006d7a <QActive_post_+0xf2>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	7d5b      	ldrb	r3, [r3, #21]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7d5b      	ldrb	r3, [r3, #21]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <QActive_post_+0xe4>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	7d1a      	ldrb	r2, [r3, #20]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	7d5b      	ldrb	r3, [r3, #21]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8006d7a:	f7ff fb1b 	bl	80063b4 <vPortExitCritical>
 8006d7e:	e004      	b.n	8006d8a <QActive_post_+0x102>
        {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 8006d80:	f7ff fb18 	bl	80063b4 <vPortExitCritical>

        QF_gc(e); /* recycle the event to avoid a leak */
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 f905 	bl	8006f94 <QF_gc>
    }

    return status;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	080091c4 	.word	0x080091c4

08006d98 <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
    QEvt const *frontEvt;  /* temporary to avoid UB for volatile access */
    QEQueueCtr nFree;      /* temporary to avoid UB for volatile access */
    QF_CRIT_STAT_
    QS_TEST_PROBE_DEF(&QActive_postLIFO_)

    QF_CRIT_E_();
 8006da2:	f7ff fad3 	bl	800634c <vPortEnterCritical>
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7ddb      	ldrb	r3, [r3, #23]
 8006daa:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <QActive_postLIFO_+0x26>
 8006db2:	f7ff faff 	bl	80063b4 <vPortExitCritical>
 8006db6:	21d2      	movs	r1, #210	; 0xd2
 8006db8:	4828      	ldr	r0, [pc, #160]	; (8006e5c <QActive_postLIFO_+0xc4>)
 8006dba:	f7f9 fe59 	bl	8000a70 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	789b      	ldrb	r3, [r3, #2]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <QActive_postLIFO_+0x3c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	78db      	ldrb	r3, [r3, #3]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	7e1b      	ldrb	r3, [r3, #24]
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d202      	bcs.n	8006df0 <QActive_postLIFO_+0x58>
        me->eQueue.nMin = nFree; /* update minimum so far */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7bfa      	ldrb	r2, [r7, #15]
 8006dee:	761a      	strb	r2, [r3, #24]
        {
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    frontEvt = me->eQueue.frontEvt; /* read volatile into the temporary */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10c      	bne.n	8006e1c <QActive_postLIFO_+0x84>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8006e02:	f7ff fad7 	bl	80063b4 <vPortExitCritical>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f103 001c 	add.w	r0, r3, #28
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2202      	movs	r2, #2
 8006e10:	2100      	movs	r1, #0
 8006e12:	f7fe ffd7 	bl	8005dc4 <xTaskGenericNotify>
 8006e16:	f7ff fa99 	bl	800634c <vPortEnterCritical>
 8006e1a:	e019      	b.n	8006e50 <QActive_postLIFO_+0xb8>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7d9b      	ldrb	r3, [r3, #22]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	3301      	adds	r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7d9b      	ldrb	r3, [r3, #22]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d102      	bne.n	8006e3e <QActive_postLIFO_+0xa6>
            me->eQueue.tail = 0U; /* wrap around */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7d9b      	ldrb	r3, [r3, #22]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8006e50:	f7ff fab0 	bl	80063b4 <vPortExitCritical>
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	080091c4 	.word	0x080091c4

08006e60 <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
    QEQueueCtr nFree;
    QEvt const *e;
    QF_CRIT_STAT_

    QF_CRIT_E_();
 8006e68:	f7ff fa70 	bl	800634c <vPortEnterCritical>
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8006e6c:	e008      	b.n	8006e80 <QActive_get_+0x20>
 8006e6e:	f7ff faa1 	bl	80063b4 <vPortExitCritical>
 8006e72:	f04f 31ff 	mov.w	r1, #4294967295
 8006e76:	2001      	movs	r0, #1
 8006e78:	f7fe ff5c 	bl	8005d34 <ulTaskNotifyTake>
 8006e7c:	f7ff fa66 	bl	800634c <vPortEnterCritical>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f2      	beq.n	8006e6e <QActive_get_+0xe>

    e = me->eQueue.frontEvt; /* always remove event from the front location */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	60fb      	str	r3, [r7, #12]
    nFree = me->eQueue.nFree + 1U; /* get volatile into tmp */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7ddb      	ldrb	r3, [r3, #23]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	3301      	adds	r3, #1
 8006e96:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7afa      	ldrb	r2, [r7, #11]
 8006e9c:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7d1b      	ldrb	r3, [r3, #20]
 8006ea2:	7afa      	ldrb	r2, [r7, #11]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d81a      	bhi.n	8006ede <QActive_get_+0x7e>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7d9b      	ldrb	r3, [r3, #22]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7d9b      	ldrb	r3, [r3, #22]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <QActive_get_+0x6e>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7d1a      	ldrb	r2, [r3, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7d9b      	ldrb	r3, [r3, #22]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	759a      	strb	r2, [r3, #22]
 8006edc:	e00f      	b.n	8006efe <QActive_get_+0x9e>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 8006ee4:	7afa      	ldrb	r2, [r7, #11]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	7d1b      	ldrb	r3, [r3, #20]
 8006eea:	3301      	adds	r3, #1
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d006      	beq.n	8006efe <QActive_get_+0x9e>
 8006ef0:	f7ff fa60 	bl	80063b4 <vPortExitCritical>
 8006ef4:	f44f 719b 	mov.w	r1, #310	; 0x136
 8006ef8:	4804      	ldr	r0, [pc, #16]	; (8006f0c <QActive_get_+0xac>)
 8006efa:	f7f9 fdb9 	bl	8000a70 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8006efe:	f7ff fa59 	bl	80063b4 <vPortExitCritical>
    return e;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	080091c4 	.word	0x080091c4

08006f10 <QF_poolInit>:
*
* @sa QF initialization example for QF_init()
*/
void QF_poolInit(void * const poolSto, uint_fast32_t const poolSize,
                 uint_fast16_t const evtSize)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
    /** @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < Q_DIM(QF_pool_));
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <QF_poolInit+0x78>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d903      	bls.n	8006f2c <QF_poolInit+0x1c>
 8006f24:	21c8      	movs	r1, #200	; 0xc8
 8006f26:	4819      	ldr	r0, [pc, #100]	; (8006f8c <QF_poolInit+0x7c>)
 8006f28:	f7f9 fda2 	bl	8000a70 <Q_onAssert>
    /** @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8006f2c:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <QF_poolInit+0x78>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d012      	beq.n	8006f5a <QF_poolInit+0x4a>
 8006f34:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <QF_poolInit+0x78>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	1e5a      	subs	r2, r3, #1
 8006f3a:	4915      	ldr	r1, [pc, #84]	; (8006f90 <QF_poolInit+0x80>)
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	330c      	adds	r3, #12
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d803      	bhi.n	8006f5a <QF_poolInit+0x4a>
 8006f52:	21c9      	movs	r1, #201	; 0xc9
 8006f54:	480d      	ldr	r0, [pc, #52]	; (8006f8c <QF_poolInit+0x7c>)
 8006f56:	f7f9 fd8b 	bl	8000a70 <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_pool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_pool_[QF_maxPool_], poolSto, poolSize, evtSize);
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <QF_poolInit+0x78>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <QF_poolInit+0x80>)
 8006f68:	1898      	adds	r0, r3, r2
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	f000 f850 	bl	8007014 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <QF_poolInit+0x78>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a03      	ldr	r2, [pc, #12]	; (8006f88 <QF_poolInit+0x78>)
 8006f7c:	6013      	str	r3, [r2, #0]
        char_t obj_name[9] = "EvtPool?";
        obj_name[7] = '0' + (QF_maxPool_ & 0x7FU);
        QS_obj_dict_pre_(&QF_pool_[QF_maxPool_ - 1U], obj_name);
    }
#endif /* Q_SPY*/
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	2000350c 	.word	0x2000350c
 8006f8c:	080091cc 	.word	0x080091cc
 8006f90:	200034d0 	.word	0x200034d0

08006f94 <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	789b      	ldrb	r3, [r3, #2]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d02c      	beq.n	8006ffe <QF_gc+0x6a>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8006fa4:	f7ff f9d2 	bl	800634c <vPortEnterCritical>

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	78db      	ldrb	r3, [r3, #3]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d909      	bls.n	8006fc6 <QF_gc+0x32>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	78db      	ldrb	r3, [r3, #3]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 8006fc0:	f7ff f9f8 	bl	80063b4 <vPortExitCritical>
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 8006fc4:	e01b      	b.n	8006ffe <QF_gc+0x6a>
            uint_fast8_t idx = (uint_fast8_t)e->poolId_ - 1U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	789b      	ldrb	r3, [r3, #2]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 8006fce:	f7ff f9f1 	bl	80063b4 <vPortExitCritical>
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <QF_gc+0x74>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d304      	bcc.n	8006fe6 <QF_gc+0x52>
 8006fdc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8006fe0:	480a      	ldr	r0, [pc, #40]	; (800700c <QF_gc+0x78>)
 8006fe2:	f7f9 fd45 	bl	8000a70 <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4a07      	ldr	r2, [pc, #28]	; (8007010 <QF_gc+0x7c>)
 8006ff2:	4413      	add	r3, r2
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f87d 	bl	80070f8 <QMPool_put>
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000350c 	.word	0x2000350c
 800700c:	080091cc 	.word	0x080091cc
 8007010:	200034d0 	.word	0x200034d0

08007014 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]

    /** @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <QMPool_init+0x22>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b03      	cmp	r3, #3
 800702c:	d903      	bls.n	8007036 <QMPool_init+0x22>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f113 0f05 	cmn.w	r3, #5
 8007034:	d903      	bls.n	800703e <QMPool_init+0x2a>
 8007036:	2164      	movs	r1, #100	; 0x64
 8007038:	482e      	ldr	r0, [pc, #184]	; (80070f4 <QMPool_init+0xe0>)
 800703a:	f7f9 fd19 	bl	8000a70 <Q_onAssert>
              && (poolSize >= sizeof(QFreeBlock))
              && ((blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	601a      	str	r2, [r3, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2204      	movs	r2, #4
 8007048:	819a      	strh	r2, [r3, #12]
    nblocks = 1U;/* #free blocks that fit in one memory block */
 800704a:	2301      	movs	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
    while (me->blockSize < (QMPoolSize)blockSize) {
 800704e:	e008      	b.n	8007062 <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	899b      	ldrh	r3, [r3, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	3301      	adds	r3, #1
 8007060:	613b      	str	r3, [r7, #16]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	899a      	ldrh	r2, [r3, #12]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	429a      	cmp	r2, r3
 800706c:	d3f0      	bcc.n	8007050 <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	899b      	ldrh	r3, [r3, #12]
 8007072:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d203      	bcs.n	8007084 <QMPool_init+0x70>
 800707c:	216e      	movs	r1, #110	; 0x6e
 800707e:	481d      	ldr	r0, [pc, #116]	; (80070f4 <QMPool_init+0xe0>)
 8007080:	f7f9 fcf6 	bl	8000a70 <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	81da      	strh	r2, [r3, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	617b      	str	r3, [r7, #20]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 8007098:	e012      	b.n	80070c0 <QMPool_init+0xac>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	441a      	add	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	617b      	str	r3, [r7, #20]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	89db      	ldrh	r3, [r3, #14]
 80070b8:	3301      	adds	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d2e8      	bcs.n	800709a <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	89da      	ldrh	r2, [r3, #14]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	89da      	ldrh	r2, [r3, #14]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	605a      	str	r2, [r3, #4]
    me->end   = fb;              /* the last block in this pool */
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	609a      	str	r2, [r3, #8]
}
 80070ea:	bf00      	nop
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	080091d4 	.word	0x080091d4

080070f8 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT_

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8a1b      	ldrh	r3, [r3, #16]
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	89db      	ldrh	r3, [r3, #14]
 800710e:	429a      	cmp	r2, r3
 8007110:	d209      	bcs.n	8007126 <QMPool_put+0x2e>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	d304      	bcc.n	8007126 <QMPool_put+0x2e>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d903      	bls.n	800712e <QMPool_put+0x36>
 8007126:	21c8      	movs	r1, #200	; 0xc8
 8007128:	480c      	ldr	r0, [pc, #48]	; (800715c <QMPool_put+0x64>)
 800712a:	f7f9 fca1 	bl	8000a70 <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    QF_CRIT_E_();
 800712e:	f7ff f90d 	bl	800634c <vPortEnterCritical>
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8a1b      	ldrh	r3, [r3, #16]
 8007144:	b29b      	uxth	r3, r3
 8007146:	3301      	adds	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 800714e:	f7ff f931 	bl	80063b4 <vPortExitCritical>
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	080091d4 	.word	0x080091d4

08007160 <QF_init>:

/* Local objects -----------------------------------------------------------*/
static void task_function(void *pvParameters); /* FreeRTOS task signature */

/*==========================================================================*/
void QF_init(void) {
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
    /* empty for FreeRTOS */
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <QF_run>:
/*..........................................................................*/
int_t QF_run(void) {
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
    QS_CRIT_STAT_

    QF_onStartup();  /* the startup callback (configure/enable interrupts) */
 8007174:	f7f9 fca0 	bl	8000ab8 <QF_onStartup>

    /* produce the QS_QF_RUN trace record */
    QS_BEGIN_PRE_(QS_QF_RUN, 0U)
    QS_END_PRE_()

    vTaskStartScheduler(); /* start the FreeRTOS scheduler */
 8007178:	f7fe fabe 	bl	80056f8 <vTaskStartScheduler>
    Q_ERROR_ID(110); /* the FreeRTOS scheduler should never return */
 800717c:	216e      	movs	r1, #110	; 0x6e
 800717e:	4803      	ldr	r0, [pc, #12]	; (800718c <QF_run+0x1c>)
 8007180:	f7f9 fc76 	bl	8000a70 <Q_onAssert>
    return 0; /* dummy return to make the compiler happy */
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	080091dc 	.word	0x080091dc

08007190 <QActive_start_>:
/*..........................................................................*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af04      	add	r7, sp, #16
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
    TaskHandle_t thr;
    /* task name provided by the user in QF_setTaskName() or default name */
    char_t const *taskName = (me->thread.pxDummy1 != (void *)0)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	69db      	ldr	r3, [r3, #28]
                             ? (char_t const *)me->thread.pxDummy1
                             : (char_t const *)"AO";
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <QActive_start_+0x1c>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	e000      	b.n	80071ae <QActive_start_+0x1e>
 80071ac:	4b27      	ldr	r3, [pc, #156]	; (800724c <QActive_start_+0xbc>)
    char_t const *taskName = (me->thread.pxDummy1 != (void *)0)
 80071ae:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_ID(200, (0U < prio)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <QActive_start_+0x44>
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d80b      	bhi.n	80071d4 <QActive_start_+0x44>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d008      	beq.n	80071d4 <QActive_start_+0x44>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <QActive_start_+0x44>
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <QActive_start_+0x44>
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <QActive_start_+0x4c>
 80071d4:	21c8      	movs	r1, #200	; 0xc8
 80071d6:	481e      	ldr	r0, [pc, #120]	; (8007250 <QActive_start_+0xc0>)
 80071d8:	f7f9 fc4a 	bl	8000a70 <Q_onAssert>
        && (qLen > 0U)             /* queue size must be provided */
        && (stkSto != (void *)0)   /* stack storage must be provided */
        && (stkSize > 0U));        /* stack size must be provided */

    /* create the event queue for the AO */
    QEQueue_init(&me->eQueue, qSto, qLen);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	330c      	adds	r3, #12
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fc31 	bl	8007a4c <QEQueue_init>

    me->prio = prio;  /* save the QF priority */
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    QF_add_(me);      /* make QF aware of this active object */
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff fcc9 	bl	8006b8c <QF_add_>
    QHSM_INIT(&me->super, par, me->prio); /* the top-most initial tran. */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <QActive_start_+0x7a>
 8007202:	216e      	movs	r1, #110	; 0x6e
 8007204:	4812      	ldr	r0, [pc, #72]	; (8007250 <QActive_start_+0xc0>)
 8007206:	f7f9 fc33 	bl	8000a70 <Q_onAssert>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3

    /* statically create the FreeRTOS task for the AO */
    thr = xTaskCreateStatic(
              &task_function,           /* the task function */
              taskName ,                /* the name of the task */
              stkSize/sizeof(portSTACK_TYPE), /* stack size */
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	089a      	lsrs	r2, r3, #2
    thr = xTaskCreateStatic(
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	331c      	adds	r3, #28
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6979      	ldr	r1, [r7, #20]
 800722e:	4809      	ldr	r0, [pc, #36]	; (8007254 <QActive_start_+0xc4>)
 8007230:	f7fe f90b 	bl	800544a <xTaskCreateStatic>
 8007234:	6138      	str	r0, [r7, #16]
              (void *)me,               /* the 'pvParameters' parameter */
              (UBaseType_t)(prio + tskIDLE_PRIORITY),  /* FreeRTOS priority */
              (StackType_t *)stkSto,    /* stack storage */
              &me->thread);             /* task buffer */
    Q_ENSURE_ID(210, thr != (TaskHandle_t)0); /* must be created */
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <QActive_start_+0xb4>
 800723c:	21d2      	movs	r1, #210	; 0xd2
 800723e:	4804      	ldr	r0, [pc, #16]	; (8007250 <QActive_start_+0xc0>)
 8007240:	f7f9 fc16 	bl	8000a70 <Q_onAssert>
}
 8007244:	bf00      	nop
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	08009160 	.word	0x08009160
 8007250:	080091dc 	.word	0x080091dc
 8007254:	08007291 	.word	0x08007291

08007258 <QActive_setAttr>:
/*..........................................................................*/
void QActive_setAttr(QActive *const me, uint32_t attr1, void const *attr2) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
    /* this function must be called before QACTIVE_START(),
    * which implies that me->thread.pxDummy1 must not be used yet;
    */
    Q_REQUIRE_ID(300, me->thread.pxDummy1 == (void *)0);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d004      	beq.n	8007276 <QActive_setAttr+0x1e>
 800726c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007270:	4806      	ldr	r0, [pc, #24]	; (800728c <QActive_setAttr+0x34>)
 8007272:	f7f9 fbfd 	bl	8000a70 <Q_onAssert>
    switch (attr1) {
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <QActive_setAttr+0x2c>
        case TASK_NAME_ATTR:
            /* temporarily store the name */
            me->thread.pxDummy1 = (void *)attr2; /* cast 'const' away */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	61da      	str	r2, [r3, #28]
            break;
 8007282:	bf00      	nop
        /* ... */
    }
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	080091dc 	.word	0x080091dc

08007290 <task_function>:
/*..........................................................................*/
static void task_function(void *pvParameters) { /* FreeRTOS task signature */
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
    QActive *act = (QActive *)pvParameters;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

    /* event-loop */
    for (;;) { /* for-ever */
        QEvt const *e = QActive_get_(act);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fddf 	bl	8006e60 <QActive_get_>
 80072a2:	60b8      	str	r0, [r7, #8]
        QHSM_DISPATCH(&act->super, e, act->prio);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	4610      	mov	r0, r2
 80072b0:	4798      	blx	r3
        QF_gc(e); /* check if the event is garbage, and collect it if so */
 80072b2:	68b8      	ldr	r0, [r7, #8]
 80072b4:	f7ff fe6e 	bl	8006f94 <QF_gc>
    for (;;) { /* for-ever */
 80072b8:	e7f0      	b.n	800729c <task_function+0xc>
	...

080072bc <QActive_postFromISR_>:
#else
bool QActive_postFromISR_(QActive * const me, QEvt const * const e,
                          uint_fast16_t const margin,
                          BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08c      	sub	sp, #48	; 0x30
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
    QEQueueCtr nFree; /* temporary to avoid UB for volatile access */
    bool status;
    UBaseType_t uxSavedInterruptState;

    /** @pre event pointer must be valid */
    Q_REQUIRE_ID(400, e != (QEvt *)0);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <QActive_postFromISR_+0x1e>
 80072d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072d4:	484e      	ldr	r0, [pc, #312]	; (8007410 <QActive_postFromISR_+0x154>)
 80072d6:	f7f9 fbcb 	bl	8000a70 <Q_onAssert>
	__asm volatile
 80072da:	f3ef 8211 	mrs	r2, BASEPRI
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	623a      	str	r2, [r7, #32]
 80072f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80072f6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	7ddb      	ldrb	r3, [r3, #23]
 80072fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (margin == QF_NO_MARGIN) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007308:	4293      	cmp	r3, r2
 800730a:	d110      	bne.n	800732e <QActive_postFromISR_+0x72>
        if (nFree > 0U) {
 800730c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <QActive_postFromISR_+0x60>
            status = true; /* can post */
 8007314:	2301      	movs	r3, #1
 8007316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800731a:	e015      	b.n	8007348 <QActive_postFromISR_+0x8c>
        }
        else {
            status = false; /* cannot post */
 800731c:	2300      	movs	r3, #0
 800731e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Q_ERROR_ID(410); /* must be able to post the event */
 8007322:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8007326:	483a      	ldr	r0, [pc, #232]	; (8007410 <QActive_postFromISR_+0x154>)
 8007328:	f7f9 fba2 	bl	8000a70 <Q_onAssert>
 800732c:	e00c      	b.n	8007348 <QActive_postFromISR_+0x8c>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007336:	429a      	cmp	r2, r3
 8007338:	d903      	bls.n	8007342 <QActive_postFromISR_+0x86>
        status = true; /* can post */
 800733a:	2301      	movs	r3, #1
 800733c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007340:	e002      	b.n	8007348 <QActive_postFromISR_+0x8c>
    }
    else {
        status = false; /* cannot post */
 8007342:	2300      	movs	r3, #0
 8007344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (status) { /* can post the event? */
 8007348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800734c:	2b00      	cmp	r3, #0
 800734e:	d050      	beq.n	80073f2 <QActive_postFromISR_+0x136>
            QS_EQC_PRE_(nFree);   /* number of free entries */
            QS_EQC_PRE_(me->eQueue.nMin); /* min number of free entries */
        QS_END_NOCRIT_PRE_()

        /* is it a pool event? */
        if (e->poolId_ != 0U) {
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	789b      	ldrb	r3, [r3, #2]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <QActive_postFromISR_+0xaa>
            QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	78db      	ldrb	r3, [r3, #3]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3301      	adds	r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	70da      	strb	r2, [r3, #3]
        }

        --nFree; /* one free entry just used up */
 8007366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736a:	3b01      	subs	r3, #1
 800736c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        me->eQueue.nFree = nFree;    /* update the volatile */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007376:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	7e1b      	ldrb	r3, [r3, #24]
 800737c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007380:	429a      	cmp	r2, r3
 8007382:	d203      	bcs.n	800738c <QActive_postFromISR_+0xd0>
            me->eQueue.nMin = nFree; /* update minimum so far */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800738a:	761a      	strb	r2, [r3, #24]
        }

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10f      	bne.n	80073b4 <QActive_postFromISR_+0xf8>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	61bb      	str	r3, [r7, #24]
	__asm volatile
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f383 8811 	msr	BASEPRI, r3
}
 80073a4:	bf00      	nop
            taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

            /* signal the event queue */
            vTaskNotifyGiveFromISR((TaskHandle_t)&me->thread,
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	331c      	adds	r3, #28
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fdc5 	bl	8005f3c <vTaskNotifyGiveFromISR>
 80073b2:	e027      	b.n	8007404 <QActive_postFromISR_+0x148>
                                   pxHigherPriorityTaskWoken);
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	7d5b      	ldrb	r3, [r3, #21]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	601a      	str	r2, [r3, #0]
            if (me->eQueue.head == 0U) { /* need to wrap head? */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	7d5b      	ldrb	r3, [r3, #21]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d103      	bne.n	80073d8 <QActive_postFromISR_+0x11c>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7d1a      	ldrb	r2, [r3, #20]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	7d5b      	ldrb	r3, [r3, #21]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	755a      	strb	r2, [r3, #21]
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f383 8811 	msr	BASEPRI, r3
}
 80073f0:	e008      	b.n	8007404 <QActive_postFromISR_+0x148>
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f383 8811 	msr	BASEPRI, r3
}
 80073fc:	bf00      	nop
            QS_EQC_PRE_(margin); /* margin requested */
        QS_END_NOCRIT_PRE_()

        taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

        QF_gcFromISR(e); /* recycle the event to avoid a leak */
 80073fe:	68b8      	ldr	r0, [r7, #8]
 8007400:	f000 f9a0 	bl	8007744 <QF_gcFromISR>
    }

    return status;
 8007404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007408:	4618      	mov	r0, r3
 800740a:	3730      	adds	r7, #48	; 0x30
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	080091dc 	.word	0x080091dc

08007414 <QF_publishFromISR_>:
                        void const * const sender)
#else
void QF_publishFromISR_(QEvt const * const e,
                        BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
    QPSet subscrList; /* local, modifiable copy of the subscriber list */
    UBaseType_t uxSavedInterruptState;

    /** @pre the published signal must be within the configured range */
    Q_REQUIRE_ID(500, e->sig < (QSignal)QF_maxPubSignal_);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	881a      	ldrh	r2, [r3, #0]
 8007422:	4b37      	ldr	r3, [pc, #220]	; (8007500 <QF_publishFromISR_+0xec>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	429a      	cmp	r2, r3
 800742a:	d304      	bcc.n	8007436 <QF_publishFromISR_+0x22>
 800742c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007430:	4834      	ldr	r0, [pc, #208]	; (8007504 <QF_publishFromISR_+0xf0>)
 8007432:	f7f9 fb1d 	bl	8000a70 <Q_onAssert>
	__asm volatile
 8007436:	f3ef 8211 	mrs	r2, BASEPRI
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	b672      	cpsid	i
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	b662      	cpsie	i
 800744e:	617a      	str	r2, [r7, #20]
 8007450:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007452:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8007454:	61bb      	str	r3, [r7, #24]
        QS_SIG_PRE_(e->sig);     /* the signal of the event */
        QS_2U8_PRE_(e->poolId_, e->refCtr_);/* pool-Id & ref-Count */
    QS_END_NOCRIT_PRE_()

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	789b      	ldrb	r3, [r3, #2]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d006      	beq.n	800746c <QF_publishFromISR_+0x58>
        * is still in progress. At the end of the function, the garbage
        * collector step (QF_gcFromISR()) decrements the reference counter and
        * recycles the event if the counter drops to zero. This covers the
        * case when the event was published without any subscribers.
        */
        QF_EVT_REF_CTR_INC_(e);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	78db      	ldrb	r3, [r3, #3]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	3301      	adds	r3, #1
 8007466:	b2da      	uxtb	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	70da      	strb	r2, [r3, #3]
    }

    /* make a local, modifiable copy of the subscriber list */
    subscrList = QF_PTR_AT_(QF_subscrList_, e->sig);
 800746c:	4b26      	ldr	r3, [pc, #152]	; (8007508 <QF_publishFromISR_+0xf4>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f383 8811 	msr	BASEPRI, r3
}
 8007486:	bf00      	nop
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

    if (QPSet_notEmpty(&subscrList)) { /* any subscribers? */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d030      	beq.n	80074f0 <QF_publishFromISR_+0xdc>
        uint_fast8_t p;

        QPSet_findMax(&subscrList, p); /* the highest-prio subscriber */
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fbc3 	bl	8006c1c <QF_LOG2>
 8007496:	61f8      	str	r0, [r7, #28]

        /* no need to lock the scheduler in the ISR context */
        do { /* loop over all subscribers */
            /* the prio of the AO must be registered with the framework */
            Q_ASSERT_ID(510, QF_active_[p] != (QActive *)0);
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <QF_publishFromISR_+0xf8>)
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <QF_publishFromISR_+0x9a>
 80074a4:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80074a8:	4816      	ldr	r0, [pc, #88]	; (8007504 <QF_publishFromISR_+0xf0>)
 80074aa:	f7f9 fae1 	bl	8000a70 <Q_onAssert>

            /* QACTIVE_POST_FROM_ISR() asserts if the queue overflows */
            QACTIVE_POST_FROM_ISR(QF_active_[p], e,
 80074ae:	4a17      	ldr	r2, [pc, #92]	; (800750c <QF_publishFromISR_+0xf8>)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	f7ff fefd 	bl	80072bc <QActive_postFromISR_>
                                  pxHigherPriorityTaskWoken, sender);

            QPSet_remove(&subscrList, p); /* remove the handled subscriber */
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	2101      	movs	r1, #1
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	4013      	ands	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]
            if (QPSet_notEmpty(&subscrList)) { /* still more subscribers? */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <QF_publishFromISR_+0xd2>
                QPSet_findMax(&subscrList, p); /* highest-prio subscriber */
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fb9d 	bl	8006c1c <QF_LOG2>
 80074e2:	61f8      	str	r0, [r7, #28]
 80074e4:	e001      	b.n	80074ea <QF_publishFromISR_+0xd6>
            }
            else {
                p = 0U; /* no more subscribers */
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
            }
        } while (p != 0U);
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1d3      	bne.n	8007498 <QF_publishFromISR_+0x84>

    /* The following garbage collection step decrements the reference counter
    * and recycles the event if the counter drops to zero. This covers both
    * cases when the event was published with or without any subscribers.
    */
    QF_gcFromISR(e);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f927 	bl	8007744 <QF_gcFromISR>
}
 80074f6:	bf00      	nop
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20003514 	.word	0x20003514
 8007504:	080091dc 	.word	0x080091dc
 8007508:	20003510 	.word	0x20003510
 800750c:	2000344c 	.word	0x2000344c

08007510 <QF_tickXFromISR_>:
                      void const * const sender)
#else
void QF_tickXFromISR_(uint_fast8_t const tickRate,
                      BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	; 0x38
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	4a55      	ldr	r2, [pc, #340]	; (8007674 <QF_tickXFromISR_+0x164>)
 8007520:	4413      	add	r3, r2
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
	__asm volatile
 8007524:	f3ef 8211 	mrs	r2, BASEPRI
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	b672      	cpsid	i
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	b662      	cpsie	i
 800753c:	627a      	str	r2, [r7, #36]	; 0x24
 800753e:	623b      	str	r3, [r7, #32]
	return ulOriginalBASEPRI;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    UBaseType_t uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d121      	bne.n	8007594 <QF_tickXFromISR_+0x84>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 8007550:	4a48      	ldr	r2, [pc, #288]	; (8007674 <QF_tickXFromISR_+0x164>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	4413      	add	r3, r2
 8007558:	3308      	adds	r3, #8
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d07d      	beq.n	800765c <QF_tickXFromISR_+0x14c>

                /* sanity check */
                Q_ASSERT_ID(610, prev != (QTimeEvt *)0);
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <QF_tickXFromISR_+0x60>
 8007566:	f240 2162 	movw	r1, #610	; 0x262
 800756a:	4843      	ldr	r0, [pc, #268]	; (8007678 <QF_tickXFromISR_+0x168>)
 800756c:	f7f9 fa80 	bl	8000a70 <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8007570:	4a40      	ldr	r2, [pc, #256]	; (8007674 <QF_tickXFromISR_+0x164>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	3308      	adds	r3, #8
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 8007580:	4a3c      	ldr	r2, [pc, #240]	; (8007674 <QF_tickXFromISR_+0x164>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	4413      	add	r3, r2
 8007588:	3308      	adds	r3, #8
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	899b      	ldrh	r3, [r3, #12]
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d111      	bne.n	80075c2 <QF_tickXFromISR_+0xb2>
            prev->next = t->next;
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a4:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~TE_IS_LINKED);
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	78db      	ldrb	r3, [r3, #3]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	70da      	strb	r2, [r3, #3]
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	61fb      	str	r3, [r7, #28]
	__asm volatile
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	f383 8811 	msr	BASEPRI, r3
}
 80075c0:	e03b      	b.n	800763a <QF_tickXFromISR_+0x12a>
            /* do NOT advance the prev pointer */
            /* exit crit. section to reduce latency */
            taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
        }
        else {
            --t->ctr;
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	899b      	ldrh	r3, [r3, #12]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == (QTimeEvtCtr)0) {
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	899b      	ldrh	r3, [r3, #12]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d127      	bne.n	800762a <QF_tickXFromISR_+0x11a>
                QActive *act = (QActive *)t->act; /* temp. for volatile */
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28

                /* periodic time evt? */
                if (t->interval != 0U) {
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	89db      	ldrh	r3, [r3, #14]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d006      	beq.n	80075f6 <QF_tickXFromISR_+0xe6>
                    t->ctr = t->interval; /* rearm the time event */
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	89da      	ldrh	r2, [r3, #14]
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
 80075f4:	e00b      	b.n	800760e <QF_tickXFromISR_+0xfe>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~TE_IS_LINKED);
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	78db      	ldrb	r3, [r3, #3]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007608:	b2da      	uxtb	r2, r3
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	70da      	strb	r2, [r3, #3]
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	61bb      	str	r3, [r7, #24]
	__asm volatile
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	f383 8811 	msr	BASEPRI, r3
}
 8007618:	bf00      	nop

                /* exit critical section before posting */
                taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

                /* QACTIVE_POST_FROM_ISR() asserts if the queue overflows */
                QACTIVE_POST_FROM_ISR(act, &t->super,
 800761a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007624:	f7ff fe4a 	bl	80072bc <QActive_postFromISR_>
 8007628:	e007      	b.n	800763a <QF_tickXFromISR_+0x12a>
                                      pxHigherPriorityTaskWoken,
                                      sender);
            }
            else {
                prev = t;         /* advance to this time event */
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f383 8811 	msr	BASEPRI, r3
}
 8007638:	bf00      	nop
	__asm volatile
 800763a:	f3ef 8211 	mrs	r2, BASEPRI
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	613a      	str	r2, [r7, #16]
 8007654:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8007656:	693b      	ldr	r3, [r7, #16]
                /* exit crit. section to reduce latency */
                taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
            }
        }
        /* re-enter crit. section to continue */
        uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8007658:	633b      	str	r3, [r7, #48]	; 0x30
    for (;;) {
 800765a:	e773      	b.n	8007544 <QF_tickXFromISR_+0x34>
                break; /* all currently armed time evts. processed */
 800765c:	bf00      	nop
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f383 8811 	msr	BASEPRI, r3
}
 8007668:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
}
 800766a:	bf00      	nop
 800766c:	3738      	adds	r7, #56	; 0x38
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20003518 	.word	0x20003518
 8007678:	080091dc 	.word	0x080091dc

0800767c <QF_newXFromISR_>:
/*..........................................................................*/
QEvt *QF_newXFromISR_(uint_fast16_t const evtSize,
                      uint_fast16_t const margin, enum_t const sig)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
#ifdef Q_SPY
    UBaseType_t uxSavedInterruptState;
#endif /* Q_SPY */

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 8007688:	2300      	movs	r3, #0
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e00f      	b.n	80076ae <QF_newXFromISR_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_pool_[idx])) {
 800768e:	492a      	ldr	r1, [pc, #168]	; (8007738 <QF_newXFromISR_+0xbc>)
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	330c      	adds	r3, #12
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d908      	bls.n	80076ba <QF_newXFromISR_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3301      	adds	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <QF_newXFromISR_+0xc0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d3ea      	bcc.n	800768e <QF_newXFromISR_+0x12>
 80076b8:	e000      	b.n	80076bc <QF_newXFromISR_+0x40>
            break;
 80076ba:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(710, idx < QF_maxPool_);
 80076bc:	4b1f      	ldr	r3, [pc, #124]	; (800773c <QF_newXFromISR_+0xc0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d304      	bcc.n	80076d0 <QF_newXFromISR_+0x54>
 80076c6:	f240 21c6 	movw	r1, #710	; 0x2c6
 80076ca:	481d      	ldr	r0, [pc, #116]	; (8007740 <QF_newXFromISR_+0xc4>)
 80076cc:	f7f9 f9d0 	bl	8000a70 <Q_onAssert>
#ifdef Q_SPY
    e = QMPool_getFromISR(&QF_pool_[idx],
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
#else
    e = QMPool_getFromISR(&QF_pool_[idx],
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <QF_newXFromISR_+0xbc>)
 80076dc:	1898      	adds	r0, r3, r2
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d001      	beq.n	80076ec <QF_newXFromISR_+0x70>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	e000      	b.n	80076ee <QF_newXFromISR_+0x72>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2200      	movs	r2, #0
 80076f0:	4619      	mov	r1, r3
 80076f2:	f000 f8c3 	bl	800787c <QMPool_getFromISR>
 80076f6:	6138      	str	r0, [r7, #16]
                      ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    /* was e allocated correctly? */
    if (e != (QEvt *)0) {
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <QF_newXFromISR_+0x9e>
        e->sig = (QSignal)sig;   /* set signal for this event */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	b29a      	uxth	r2, r3
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	3301      	adds	r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2200      	movs	r2, #0
 8007716:	70da      	strb	r2, [r3, #3]
 8007718:	e009      	b.n	800772e <QF_newXFromISR_+0xb2>
#endif /* Q_SPY */
    }
    /* event cannot be allocated */
    else {
        /* must tolerate bad alloc. */
        Q_ASSERT_ID(720, margin != QF_NO_MARGIN);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007720:	4293      	cmp	r3, r2
 8007722:	d104      	bne.n	800772e <QF_newXFromISR_+0xb2>
 8007724:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8007728:	4805      	ldr	r0, [pc, #20]	; (8007740 <QF_newXFromISR_+0xc4>)
 800772a:	f7f9 f9a1 	bl	8000a70 <Q_onAssert>
            QS_SIG_PRE_(sig);       /* the signal of the event */
        QS_END_NOCRIT_PRE_()
        taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
#endif /* Q_SPY */
    }
    return e; /* can't be NULL if we can't tolerate bad allocation */
 800772e:	693b      	ldr	r3, [r7, #16]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	200034d0 	.word	0x200034d0
 800773c:	2000350c 	.word	0x2000350c
 8007740:	080091dc 	.word	0x080091dc

08007744 <QF_gcFromISR>:
/*..........................................................................*/
void QF_gcFromISR(QEvt const * const e) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	789b      	ldrb	r3, [r3, #2]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d042      	beq.n	80077da <QF_gcFromISR+0x96>
	__asm volatile
 8007754:	f3ef 8211 	mrs	r2, BASEPRI
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	b672      	cpsid	i
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	b662      	cpsie	i
 800776c:	617a      	str	r2, [r7, #20]
 800776e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007770:	697b      	ldr	r3, [r7, #20]
        UBaseType_t uxSavedInterruptState;
        uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8007772:	61fb      	str	r3, [r7, #28]

        /* isn't this the last ref? */
        if (e->refCtr_ > 1U) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	78db      	ldrb	r3, [r3, #3]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	d90d      	bls.n	800779a <QF_gcFromISR+0x56>
            QF_EVT_REF_CTR_DEC_(e); /* decrements the ref counter */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	78db      	ldrb	r3, [r3, #3]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b2da      	uxtb	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	70da      	strb	r2, [r3, #3]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f383 8811 	msr	BASEPRI, r3
}
 8007796:	bf00      	nop
#else
            QMPool_putFromISR(&QF_pool_[idx], (QEvt *)e, 0U);
#endif
        }
    }
}
 8007798:	e01f      	b.n	80077da <QF_gcFromISR+0x96>
            uint_fast8_t idx = (uint_fast8_t)e->poolId_ - 1U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	789b      	ldrb	r3, [r3, #2]
 800779e:	3b01      	subs	r3, #1
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f383 8811 	msr	BASEPRI, r3
}
 80077ac:	bf00      	nop
            Q_ASSERT_ID(810, idx < QF_maxPool_);
 80077ae:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <QF_gcFromISR+0xa0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d304      	bcc.n	80077c2 <QF_gcFromISR+0x7e>
 80077b8:	f240 312a 	movw	r1, #810	; 0x32a
 80077bc:	480a      	ldr	r0, [pc, #40]	; (80077e8 <QF_gcFromISR+0xa4>)
 80077be:	f7f9 f957 	bl	8000a70 <Q_onAssert>
            QMPool_putFromISR(&QF_pool_[idx], (QEvt *)e, 0U);
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a07      	ldr	r2, [pc, #28]	; (80077ec <QF_gcFromISR+0xa8>)
 80077ce:	4413      	add	r3, r2
 80077d0:	2200      	movs	r2, #0
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f80b 	bl	80077f0 <QMPool_putFromISR>
}
 80077da:	bf00      	nop
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	2000350c 	.word	0x2000350c
 80077e8:	080091dc 	.word	0x080091dc
 80077ec:	200034d0 	.word	0x200034d0

080077f0 <QMPool_putFromISR>:
/*..........................................................................*/
void QMPool_putFromISR(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
    UBaseType_t uxSavedInterruptState;

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(900, (me->nFree < me->nTot)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8a1b      	ldrh	r3, [r3, #16]
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	89db      	ldrh	r3, [r3, #14]
 8007806:	429a      	cmp	r2, r3
 8007808:	d209      	bcs.n	800781e <QMPool_putFromISR+0x2e>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	d304      	bcc.n	800781e <QMPool_putFromISR+0x2e>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	429a      	cmp	r2, r3
 800781c:	d904      	bls.n	8007828 <QMPool_putFromISR+0x38>
 800781e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8007822:	4815      	ldr	r0, [pc, #84]	; (8007878 <QMPool_putFromISR+0x88>)
 8007824:	f7f9 f924 	bl	8000a70 <Q_onAssert>
	__asm volatile
 8007828:	f3ef 8211 	mrs	r2, BASEPRI
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	b672      	cpsid	i
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	b662      	cpsie	i
 8007840:	61ba      	str	r2, [r7, #24]
 8007842:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007844:	69bb      	ldr	r3, [r7, #24]
                      && QF_PTR_RANGE_(b, me->start, me->end));

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8007846:	61fb      	str	r3, [r7, #28]

    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8a1b      	ldrh	r3, [r3, #16]
 800785a:	b29b      	uxth	r3, r3
 800785c:	3301      	adds	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	821a      	strh	r2, [r3, #16]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
        QS_OBJ_PRE_(me->start); /* the memory managed by this pool */
        QS_MPC_PRE_(me->nFree); /* # free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
}
 8007870:	bf00      	nop
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	080091dc 	.word	0x080091dc

0800787c <QMPool_getFromISR>:
/*..........................................................................*/
void *QMPool_getFromISR(QMPool * const me, uint_fast16_t const margin,
                 uint_fast8_t const qs_id)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
	__asm volatile
 8007888:	f3ef 8211 	mrs	r2, BASEPRI
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	b672      	cpsid	i
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	b662      	cpsie	i
 80078a0:	61ba      	str	r2, [r7, #24]
 80078a2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078a4:	69bb      	ldr	r3, [r7, #24]
    QFreeBlock *fb;
    UBaseType_t uxSavedInterruptState;

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80078a6:	623b      	str	r3, [r7, #32]

    /* have more free blocks than the requested margin? */
    if (me->nFree > (QMPoolCtr)margin) {
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8a1b      	ldrh	r3, [r3, #16]
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d944      	bls.n	8007940 <QMPool_getFromISR+0xc4>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_ID(910, fb != (QFreeBlock *)0);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <QMPool_getFromISR+0x50>
 80078c2:	f240 318e 	movw	r1, #910	; 0x38e
 80078c6:	4825      	ldr	r0, [pc, #148]	; (800795c <QMPool_getFromISR+0xe0>)
 80078c8:	f7f9 f8d2 	bl	8000a70 <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	61fb      	str	r3, [r7, #28]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8a1b      	ldrh	r3, [r3, #16]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	821a      	strh	r2, [r3, #16]
        if (me->nFree == (QMPoolCtr)0) {
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8a1b      	ldrh	r3, [r3, #16]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <QMPool_getFromISR+0x86>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_ID(920, fb_next == (QFreeBlock *)0);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <QMPool_getFromISR+0x7e>
 80078f0:	f44f 7166 	mov.w	r1, #920	; 0x398
 80078f4:	4819      	ldr	r0, [pc, #100]	; (800795c <QMPool_getFromISR+0xe0>)
 80078f6:	f7f9 f8bb 	bl	8000a70 <Q_onAssert>

            me->nMin = (QMPoolCtr)0; /* remember that the pool got empty */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	825a      	strh	r2, [r3, #18]
 8007900:	e01a      	b.n	8007938 <QMPool_getFromISR+0xbc>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_ID(930, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	429a      	cmp	r2, r3
 800790a:	d304      	bcc.n	8007916 <QMPool_getFromISR+0x9a>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	429a      	cmp	r2, r3
 8007914:	d904      	bls.n	8007920 <QMPool_getFromISR+0xa4>
 8007916:	f240 31a2 	movw	r1, #930	; 0x3a2
 800791a:	4810      	ldr	r0, [pc, #64]	; (800795c <QMPool_getFromISR+0xe0>)
 800791c:	f7f9 f8a8 	bl	8000a70 <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8a5a      	ldrh	r2, [r3, #18]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8a1b      	ldrh	r3, [r3, #16]
 8007928:	b29b      	uxth	r3, r3
 800792a:	429a      	cmp	r2, r3
 800792c:	d904      	bls.n	8007938 <QMPool_getFromISR+0xbc>
                me->nMin = me->nFree; /* remember the new minimum */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8a1b      	ldrh	r3, [r3, #16]
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e001      	b.n	8007944 <QMPool_getFromISR+0xc8>
        QS_END_NOCRIT_PRE_()

    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 8007940:	2300      	movs	r3, #0
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

    return fb; /* return the pointer to memory block or NULL to the caller */
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007952:	4618      	mov	r0, r3
 8007954:	3728      	adds	r7, #40	; 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	080091dc 	.word	0x080091dc

08007960 <QF_psInit>:
*
* @usage
* The following example shows the typical initialization sequence of QF:
* @include qf_main.c
*/
void QF_psInit(QSubscrList * const subscrSto, enum_t const maxSignal) {
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
    QF_subscrList_   = subscrSto;
 800796a:	4a08      	ldr	r2, [pc, #32]	; (800798c <QF_psInit+0x2c>)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6013      	str	r3, [r2, #0]
    QF_maxPubSignal_ = maxSignal;
 8007970:	4a07      	ldr	r2, [pc, #28]	; (8007990 <QF_psInit+0x30>)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff f92f 	bl	8006be0 <QF_bzero>
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20003510 	.word	0x20003510
 8007990:	20003514 	.word	0x20003514

08007994 <QActive_subscribe>:
* @include qf_subscribe.c
*
* @sa
* QF_publish_(), QActive_unsubscribe(), and QActive_unsubscribeAll()
*/
void QActive_subscribe(QActive const * const me, enum_t const sig) {
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
    uint_fast8_t p = (uint_fast8_t)me->prio;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80079a4:	60fb      	str	r3, [r7, #12]
    QF_CRIT_STAT_

    Q_REQUIRE_ID(300, ((enum_t)Q_USER_SIG <= sig)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	dd11      	ble.n	80079d0 <QActive_subscribe+0x3c>
 80079ac:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <QActive_subscribe+0x78>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	da0c      	bge.n	80079d0 <QActive_subscribe+0x3c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d009      	beq.n	80079d0 <QActive_subscribe+0x3c>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d806      	bhi.n	80079d0 <QActive_subscribe+0x3c>
 80079c2:	4a13      	ldr	r2, [pc, #76]	; (8007a10 <QActive_subscribe+0x7c>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d004      	beq.n	80079da <QActive_subscribe+0x46>
 80079d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80079d4:	480f      	ldr	r0, [pc, #60]	; (8007a14 <QActive_subscribe+0x80>)
 80079d6:	f7f9 f84b 	bl	8000a70 <Q_onAssert>
              && (sig < QF_maxPubSignal_)
              && (0U < p) && (p <= QF_MAX_ACTIVE)
              && (QF_active_[p] == me));

    QF_CRIT_E_();
 80079da:	f7fe fcb7 	bl	800634c <vPortEnterCritical>
        QS_SIG_PRE_(sig);  /* the signal of this event */
        QS_OBJ_PRE_(me);   /* this active object */
    QS_END_NOCRIT_PRE_()

    /* set the priority bit */
    QPSet_insert(&QF_PTR_AT_(QF_subscrList_, sig), p);
 80079de:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <QActive_subscribe+0x84>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	2201      	movs	r2, #1
 80079f0:	409a      	lsls	r2, r3
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <QActive_subscribe+0x84>)
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4403      	add	r3, r0
 80079fc:	430a      	orrs	r2, r1
 80079fe:	601a      	str	r2, [r3, #0]

    QF_CRIT_X_();
 8007a00:	f7fe fcd8 	bl	80063b4 <vPortExitCritical>
}
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20003514 	.word	0x20003514
 8007a10:	2000344c 	.word	0x2000344c
 8007a14:	080091e4 	.word	0x080091e4
 8007a18:	20003510 	.word	0x20003510

08007a1c <QActive_ctor>:
* @param[in]     initial  pointer to the event to be dispatched to the MSM
*
* @note  Must be called only __once__ before QMSM_INIT().
* @sa QMsm_ctor() and QHsm_ctor()
*/
void QActive_ctor(QActive * const me, QStateHandler initial) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8007a26:	2174      	movs	r1, #116	; 0x74
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff f8d9 	bl	8006be0 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fe6e 	bl	8006714 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a03      	ldr	r2, [pc, #12]	; (8007a48 <QActive_ctor+0x2c>)
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	080091ec 	.word	0x080091ec

08007a4c <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <QEQueue_init+0x32>
        me->head = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	3301      	adds	r3, #1
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	7adb      	ldrb	r3, [r3, #11]
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	731a      	strb	r2, [r3, #12]
}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
    /** @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	dd02      	ble.n	8007aba <QTimeEvt_ctorX+0x1a>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <QTimeEvt_ctorX+0x24>
 8007aba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007abe:	480f      	ldr	r0, [pc, #60]	; (8007afc <QTimeEvt_ctorX+0x5c>)
 8007ac0:	f7f8 ffd6 	bl	8000a70 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	70da      	strb	r2, [r3, #3]
}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	08009200 	.word	0x08009200

08007b00 <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	803b      	strh	r3, [r7, #0]
    uint_fast8_t tickRate = ((uint_fast8_t)me->super.refCtr_ & TE_TICK_RATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	78db      	ldrb	r3, [r3, #3]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr ctr = me->ctr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	899b      	ldrh	r3, [r3, #12]
 8007b20:	817b      	strh	r3, [r7, #10]
    QF_CRIT_STAT_

    /** @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <QTimeEvt_armX+0x44>
 8007b2a:	897b      	ldrh	r3, [r7, #10]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <QTimeEvt_armX+0x44>
 8007b30:	887b      	ldrh	r3, [r7, #2]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d006      	beq.n	8007b44 <QTimeEvt_armX+0x44>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <QTimeEvt_armX+0x44>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d804      	bhi.n	8007b4e <QTimeEvt_armX+0x4e>
 8007b44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b48:	4816      	ldr	r0, [pc, #88]	; (8007ba4 <QTimeEvt_armX+0xa4>)
 8007b4a:	f7f8 ff91 	bl	8000a70 <Q_onAssert>
                 && (me->super.sig >= (QSignal)Q_USER_SIG));
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_E_();
 8007b4e:	f7fe fbfd 	bl	800634c <vPortEnterCritical>
    me->ctr = nTicks;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	887a      	ldrh	r2, [r7, #2]
 8007b56:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	883a      	ldrh	r2, [r7, #0]
 8007b5c:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & TE_IS_LINKED) == 0U) {
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	b25b      	sxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	db16      	blt.n	8007b98 <QTimeEvt_armX+0x98>
        me->super.refCtr_ |= TE_IS_LINKED; /* mark as linked */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	78db      	ldrb	r3, [r3, #3]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8007b7a:	4a0b      	ldr	r2, [pc, #44]	; (8007ba8 <QTimeEvt_armX+0xa8>)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	4413      	add	r3, r2
 8007b82:	3308      	adds	r3, #8
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8007b8a:	4a07      	ldr	r2, [pc, #28]	; (8007ba8 <QTimeEvt_armX+0xa8>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	4413      	add	r3, r2
 8007b92:	3308      	adds	r3, #8
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8007b98:	f7fe fc0c 	bl	80063b4 <vPortExitCritical>
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	08009200 	.word	0x08009200
 8007ba8:	20003518 	.word	0x20003518

08007bac <QTimeEvt_disarm>:
* state machine.
*
* @note
* there is no harm in disarming an already disarmed time event
*/
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
#ifdef Q_SPY
    uint_fast8_t const qs_id = ((QActive *)(me->act))->prio;
#endif
    QF_CRIT_STAT_

    QF_CRIT_E_();
 8007bb4:	f7fe fbca 	bl	800634c <vPortEnterCritical>

    /* is the time event actually armed? */
    if (me->ctr != 0U) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	899b      	ldrh	r3, [r3, #12]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <QTimeEvt_disarm+0x32>
        wasArmed = true;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ |= TE_WAS_DISARMED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	78db      	ldrb	r3, [r3, #3]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	70da      	strb	r2, [r3, #3]
            QS_TEC_PRE_(me->ctr);      /* the number of ticks */
            QS_TEC_PRE_(me->interval); /* the interval */
            QS_U8_PRE_(me->super.refCtr_ & TE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

        me->ctr = 0U;  /* schedule removal from the list */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	819a      	strh	r2, [r3, #12]
 8007bdc:	e009      	b.n	8007bf2 <QTimeEvt_disarm+0x46>
    }
    else { /* the time event was already disarmed automatically */
        wasArmed = false;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ &= (uint8_t)(~TE_WAS_DISARMED & 0xFFU);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	78db      	ldrb	r3, [r3, #3]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	70da      	strb	r2, [r3, #3]
            QS_OBJ_PRE_(me->act);      /* the target AO */
            QS_U8_PRE_(me->super.refCtr_ & TE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

    }
    QF_CRIT_X_();
 8007bf2:	f7fe fbdf 	bl	80063b4 <vPortExitCritical>
    return wasArmed;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	80fb      	strh	r3, [r7, #6]
  //QActive * const AO_LwipDriver;
  UNUSED(GPIO_Pin);
  //TextEvt *te = Q_NEW(TextEvt, LWIP_TX_SIG);
  //strcpy(te->text, "Butona Basildi\n");
  //QACTIVE_POST(AO_LwipDriver, (QEvt *)te, 0U);
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <UartDriver_ctor>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::UartDriver} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::UartDriver} ......................................................*/
/*.${AOs::UartDriver::ctor} ................................................*/
void UartDriver_ctor(UartDriver * const me) {
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&UartDriver_initial);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4908      	ldr	r1, [pc, #32]	; (8007c44 <UartDriver_ctor+0x2c>)
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fef9 	bl	8007a1c <QActive_ctor>
    QTimeEvt_ctorX(&me->te,&me->super,UART_PROCESS_SIG,0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	2300      	movs	r3, #0
 8007c34:	2207      	movs	r2, #7
 8007c36:	f7ff ff33 	bl	8007aa0 <QTimeEvt_ctorX>
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	08007c49 	.word	0x08007c49

08007c48 <UartDriver_initial>:

/*.${AOs::UartDriver::SM} ..................................................*/
QState UartDriver_initial(UartDriver * const me, void const * const par) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
    /*.${AOs::UartDriver::SM::initial} */
    QActive_subscribe((QActive *)me, UART_TX_SIG);
 8007c52:	2109      	movs	r1, #9
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff fe9d 	bl	8007994 <QActive_subscribe>
    QActive_subscribe((QActive *)me, UART_RX_SIG);
 8007c5a:	2108      	movs	r1, #8
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fe99 	bl	8007994 <QActive_subscribe>

    return Q_TRAN(&UartDriver_UartMngr);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a03      	ldr	r2, [pc, #12]	; (8007c74 <UartDriver_initial+0x2c>)
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	2308      	movs	r3, #8
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	08007c79 	.word	0x08007c79

08007c78 <UartDriver_UartMngr>:
/*.${AOs::UartDriver::SM::UartMngr} ........................................*/
QState UartDriver_UartMngr(UartDriver * const me, QEvt const * const e) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007c84:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8007c88:	6018      	str	r0, [r3, #0]
 8007c8a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007c8e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007c92:	6019      	str	r1, [r3, #0]
    QState status_;
    switch (e->sig) {
 8007c94:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007c98:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d869      	bhi.n	8007d7a <UartDriver_UartMngr+0x102>
 8007ca6:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <UartDriver_UartMngr+0x34>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cef 	.word	0x08007cef
 8007cb4:	08007d7b 	.word	0x08007d7b
 8007cb8:	08007d7b 	.word	0x08007d7b
 8007cbc:	08007d7b 	.word	0x08007d7b
 8007cc0:	08007d7b 	.word	0x08007d7b
 8007cc4:	08007d09 	.word	0x08007d09
 8007cc8:	08007d13 	.word	0x08007d13
 8007ccc:	08007d4d 	.word	0x08007d4d
        /*.${AOs::UartDriver::SM::UartMngr} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);
 8007cd0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007cd4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3374      	adds	r3, #116	; 0x74
 8007cdc:	2201      	movs	r2, #1
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff ff0d 	bl	8007b00 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8007cec:	e050      	b.n	8007d90 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr} */
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->te);
 8007cee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007cf2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3374      	adds	r3, #116	; 0x74
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ff56 	bl	8007bac <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 8007d00:	2303      	movs	r3, #3
 8007d02:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8007d06:	e043      	b.n	8007d90 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_PROCESS} */
        case UART_PROCESS_SIG: {
            __NOP();
 8007d08:	bf00      	nop
            status_ = Q_HANDLED();
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8007d10:	e03e      	b.n	8007d90 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_RX} */
        case UART_RX_SIG: {
            static uint16_t receive_num=0;
            receive_num++;
 8007d12:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <UartDriver_UartMngr+0x128>)
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	3301      	adds	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	4b21      	ldr	r3, [pc, #132]	; (8007da0 <UartDriver_UartMngr+0x128>)
 8007d1c:	801a      	strh	r2, [r3, #0]
            char temptext[20];
            strncpy(temptext, ((TextEvt const *)e)->text,Q_DIM(temptext));
 8007d1e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007d22:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	1d19      	adds	r1, r3, #4
 8007d2a:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8007d2e:	2214      	movs	r2, #20
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fa29 	bl	8008188 <strncpy>
            HAL_UART_Transmit(&huart3,(uint8_t *)temptext,sizeof(temptext),10);
 8007d36:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 8007d3a:	230a      	movs	r3, #10
 8007d3c:	2214      	movs	r2, #20
 8007d3e:	4819      	ldr	r0, [pc, #100]	; (8007da4 <UartDriver_UartMngr+0x12c>)
 8007d40:	f7fb ffd3 	bl	8003cea <HAL_UART_Transmit>
            status_ = Q_HANDLED();
 8007d44:	2303      	movs	r3, #3
 8007d46:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8007d4a:	e021      	b.n	8007d90 <UartDriver_UartMngr+0x118>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_TX} */
        case UART_TX_SIG: {
            char temptext[MAX_TEXT_LEN];
            uint16_t size=0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
            size = sprintf(temptext,((TextEvt const *)e)->text);
 8007d52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007d56:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	1d1a      	adds	r2, r3, #4
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f9ef 	bl	8008148 <siprintf>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
            __NOP();
 8007d70:	bf00      	nop
            status_ = Q_HANDLED();
 8007d72:	2303      	movs	r3, #3
 8007d74:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8007d78:	e00a      	b.n	8007d90 <UartDriver_UartMngr+0x118>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8007d7a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007d7e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <UartDriver_UartMngr+0x130>)
 8007d86:	609a      	str	r2, [r3, #8]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            break;
 8007d8e:	bf00      	nop
        }
    }
    return status_;
 8007d90:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20003528 	.word	0x20003528
 8007da4:	20000334 	.word	0x20000334
 8007da8:	0800683d 	.word	0x0800683d

08007dac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

 // QActive * const AO_UartDriver;
  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8007db4:	2101      	movs	r1, #1
 8007db6:	4819      	ldr	r0, [pc, #100]	; (8007e1c <HAL_UART_RxCpltCallback+0x70>)
 8007db8:	f7fa facf 	bl	800235a <HAL_GPIO_TogglePin>

  BaseType_t UartRxWoken = pdFALSE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60bb      	str	r3, [r7, #8]
  static uint8_t const l_TickHook = 0U;
  static uint16_t receive_num=0;
  receive_num++;
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <HAL_UART_RxCpltCallback+0x74>)
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <HAL_UART_RxCpltCallback+0x74>)
 8007dca:	801a      	strh	r2, [r3, #0]

  TextEvt *te = Q_NEW_FROM_ISR(TextEvt, UART_RX_SIG);
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007dd2:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8007dd6:	f7ff fc51 	bl	800767c <QF_newXFromISR_>
 8007dda:	60f8      	str	r0, [r7, #12]
  strncpy(te->text,(char *)huart->pRxBuffPtr,Q_DIM(te->text));
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	1d18      	adds	r0, r3, #4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007de8:	4619      	mov	r1, r3
 8007dea:	f000 f9cd 	bl	8008188 <strncpy>

  QF_PUBLISH_FROM_ISR((QEvt *)te,&UartRxWoken,0U);
 8007dee:	f107 0308 	add.w	r3, r7, #8
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff fb0d 	bl	8007414 <QF_publishFromISR_>

  portEND_SWITCHING_ISR(UartRxWoken);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d007      	beq.n	8007e10 <HAL_UART_RxCpltCallback+0x64>
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HAL_UART_RxCpltCallback+0x78>)
 8007e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	f3bf 8f6f 	isb	sy

  __NOP();
 8007e10:	bf00      	nop
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40020400 	.word	0x40020400
 8007e20:	2000352a 	.word	0x2000352a
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <__libc_init_array>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	4d0d      	ldr	r5, [pc, #52]	; (8007e60 <__libc_init_array+0x38>)
 8007e2c:	4c0d      	ldr	r4, [pc, #52]	; (8007e64 <__libc_init_array+0x3c>)
 8007e2e:	1b64      	subs	r4, r4, r5
 8007e30:	10a4      	asrs	r4, r4, #2
 8007e32:	2600      	movs	r6, #0
 8007e34:	42a6      	cmp	r6, r4
 8007e36:	d109      	bne.n	8007e4c <__libc_init_array+0x24>
 8007e38:	4d0b      	ldr	r5, [pc, #44]	; (8007e68 <__libc_init_array+0x40>)
 8007e3a:	4c0c      	ldr	r4, [pc, #48]	; (8007e6c <__libc_init_array+0x44>)
 8007e3c:	f001 f970 	bl	8009120 <_init>
 8007e40:	1b64      	subs	r4, r4, r5
 8007e42:	10a4      	asrs	r4, r4, #2
 8007e44:	2600      	movs	r6, #0
 8007e46:	42a6      	cmp	r6, r4
 8007e48:	d105      	bne.n	8007e56 <__libc_init_array+0x2e>
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e50:	4798      	blx	r3
 8007e52:	3601      	adds	r6, #1
 8007e54:	e7ee      	b.n	8007e34 <__libc_init_array+0xc>
 8007e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5a:	4798      	blx	r3
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	e7f2      	b.n	8007e46 <__libc_init_array+0x1e>
 8007e60:	080092a8 	.word	0x080092a8
 8007e64:	080092a8 	.word	0x080092a8
 8007e68:	080092a8 	.word	0x080092a8
 8007e6c:	080092ac 	.word	0x080092ac

08007e70 <memcpy>:
 8007e70:	440a      	add	r2, r1
 8007e72:	4291      	cmp	r1, r2
 8007e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e78:	d100      	bne.n	8007e7c <memcpy+0xc>
 8007e7a:	4770      	bx	lr
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e86:	4291      	cmp	r1, r2
 8007e88:	d1f9      	bne.n	8007e7e <memcpy+0xe>
 8007e8a:	bd10      	pop	{r4, pc}

08007e8c <memmove>:
 8007e8c:	4288      	cmp	r0, r1
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	eb01 0402 	add.w	r4, r1, r2
 8007e94:	d902      	bls.n	8007e9c <memmove+0x10>
 8007e96:	4284      	cmp	r4, r0
 8007e98:	4623      	mov	r3, r4
 8007e9a:	d807      	bhi.n	8007eac <memmove+0x20>
 8007e9c:	1e43      	subs	r3, r0, #1
 8007e9e:	42a1      	cmp	r1, r4
 8007ea0:	d008      	beq.n	8007eb4 <memmove+0x28>
 8007ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eaa:	e7f8      	b.n	8007e9e <memmove+0x12>
 8007eac:	4402      	add	r2, r0
 8007eae:	4601      	mov	r1, r0
 8007eb0:	428a      	cmp	r2, r1
 8007eb2:	d100      	bne.n	8007eb6 <memmove+0x2a>
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ebe:	e7f7      	b.n	8007eb0 <memmove+0x24>

08007ec0 <memset>:
 8007ec0:	4402      	add	r2, r0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d100      	bne.n	8007eca <memset+0xa>
 8007ec8:	4770      	bx	lr
 8007eca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ece:	e7f9      	b.n	8007ec4 <memset+0x4>

08007ed0 <_puts_r>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	460e      	mov	r6, r1
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b118      	cbz	r0, 8007ee0 <_puts_r+0x10>
 8007ed8:	6983      	ldr	r3, [r0, #24]
 8007eda:	b90b      	cbnz	r3, 8007ee0 <_puts_r+0x10>
 8007edc:	f000 fb42 	bl	8008564 <__sinit>
 8007ee0:	69ab      	ldr	r3, [r5, #24]
 8007ee2:	68ac      	ldr	r4, [r5, #8]
 8007ee4:	b913      	cbnz	r3, 8007eec <_puts_r+0x1c>
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 fb3c 	bl	8008564 <__sinit>
 8007eec:	4b2c      	ldr	r3, [pc, #176]	; (8007fa0 <_puts_r+0xd0>)
 8007eee:	429c      	cmp	r4, r3
 8007ef0:	d120      	bne.n	8007f34 <_puts_r+0x64>
 8007ef2:	686c      	ldr	r4, [r5, #4]
 8007ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef6:	07db      	lsls	r3, r3, #31
 8007ef8:	d405      	bmi.n	8007f06 <_puts_r+0x36>
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	0598      	lsls	r0, r3, #22
 8007efe:	d402      	bmi.n	8007f06 <_puts_r+0x36>
 8007f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f02:	f000 fbcd 	bl	80086a0 <__retarget_lock_acquire_recursive>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	0719      	lsls	r1, r3, #28
 8007f0a:	d51d      	bpl.n	8007f48 <_puts_r+0x78>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	b1db      	cbz	r3, 8007f48 <_puts_r+0x78>
 8007f10:	3e01      	subs	r6, #1
 8007f12:	68a3      	ldr	r3, [r4, #8]
 8007f14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	60a3      	str	r3, [r4, #8]
 8007f1c:	bb39      	cbnz	r1, 8007f6e <_puts_r+0x9e>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da38      	bge.n	8007f94 <_puts_r+0xc4>
 8007f22:	4622      	mov	r2, r4
 8007f24:	210a      	movs	r1, #10
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 f942 	bl	80081b0 <__swbuf_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d011      	beq.n	8007f54 <_puts_r+0x84>
 8007f30:	250a      	movs	r5, #10
 8007f32:	e011      	b.n	8007f58 <_puts_r+0x88>
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <_puts_r+0xd4>)
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d101      	bne.n	8007f3e <_puts_r+0x6e>
 8007f3a:	68ac      	ldr	r4, [r5, #8]
 8007f3c:	e7da      	b.n	8007ef4 <_puts_r+0x24>
 8007f3e:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <_puts_r+0xd8>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	bf08      	it	eq
 8007f44:	68ec      	ldreq	r4, [r5, #12]
 8007f46:	e7d5      	b.n	8007ef4 <_puts_r+0x24>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 f982 	bl	8008254 <__swsetup_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d0dd      	beq.n	8007f10 <_puts_r+0x40>
 8007f54:	f04f 35ff 	mov.w	r5, #4294967295
 8007f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f5a:	07da      	lsls	r2, r3, #31
 8007f5c:	d405      	bmi.n	8007f6a <_puts_r+0x9a>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	059b      	lsls	r3, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_puts_r+0x9a>
 8007f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f66:	f000 fb9c 	bl	80086a2 <__retarget_lock_release_recursive>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	bd70      	pop	{r4, r5, r6, pc}
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	da04      	bge.n	8007f7c <_puts_r+0xac>
 8007f72:	69a2      	ldr	r2, [r4, #24]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	dc06      	bgt.n	8007f86 <_puts_r+0xb6>
 8007f78:	290a      	cmp	r1, #10
 8007f7a:	d004      	beq.n	8007f86 <_puts_r+0xb6>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	7019      	strb	r1, [r3, #0]
 8007f84:	e7c5      	b.n	8007f12 <_puts_r+0x42>
 8007f86:	4622      	mov	r2, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 f911 	bl	80081b0 <__swbuf_r>
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d1bf      	bne.n	8007f12 <_puts_r+0x42>
 8007f92:	e7df      	b.n	8007f54 <_puts_r+0x84>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	250a      	movs	r5, #10
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	6022      	str	r2, [r4, #0]
 8007f9c:	701d      	strb	r5, [r3, #0]
 8007f9e:	e7db      	b.n	8007f58 <_puts_r+0x88>
 8007fa0:	0800922c 	.word	0x0800922c
 8007fa4:	0800924c 	.word	0x0800924c
 8007fa8:	0800920c 	.word	0x0800920c

08007fac <puts>:
 8007fac:	4b02      	ldr	r3, [pc, #8]	; (8007fb8 <puts+0xc>)
 8007fae:	4601      	mov	r1, r0
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f7ff bf8d 	b.w	8007ed0 <_puts_r>
 8007fb6:	bf00      	nop
 8007fb8:	20000014 	.word	0x20000014

08007fbc <setvbuf>:
 8007fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	461d      	mov	r5, r3
 8007fc2:	4b5d      	ldr	r3, [pc, #372]	; (8008138 <setvbuf+0x17c>)
 8007fc4:	681f      	ldr	r7, [r3, #0]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460e      	mov	r6, r1
 8007fca:	4690      	mov	r8, r2
 8007fcc:	b127      	cbz	r7, 8007fd8 <setvbuf+0x1c>
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	b913      	cbnz	r3, 8007fd8 <setvbuf+0x1c>
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f000 fac6 	bl	8008564 <__sinit>
 8007fd8:	4b58      	ldr	r3, [pc, #352]	; (800813c <setvbuf+0x180>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d167      	bne.n	80080ae <setvbuf+0xf2>
 8007fde:	687c      	ldr	r4, [r7, #4]
 8007fe0:	f1b8 0f02 	cmp.w	r8, #2
 8007fe4:	d006      	beq.n	8007ff4 <setvbuf+0x38>
 8007fe6:	f1b8 0f01 	cmp.w	r8, #1
 8007fea:	f200 809f 	bhi.w	800812c <setvbuf+0x170>
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	f2c0 809c 	blt.w	800812c <setvbuf+0x170>
 8007ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff6:	07db      	lsls	r3, r3, #31
 8007ff8:	d405      	bmi.n	8008006 <setvbuf+0x4a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	0598      	lsls	r0, r3, #22
 8007ffe:	d402      	bmi.n	8008006 <setvbuf+0x4a>
 8008000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008002:	f000 fb4d 	bl	80086a0 <__retarget_lock_acquire_recursive>
 8008006:	4621      	mov	r1, r4
 8008008:	4638      	mov	r0, r7
 800800a:	f000 fa17 	bl	800843c <_fflush_r>
 800800e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008010:	b141      	cbz	r1, 8008024 <setvbuf+0x68>
 8008012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008016:	4299      	cmp	r1, r3
 8008018:	d002      	beq.n	8008020 <setvbuf+0x64>
 800801a:	4638      	mov	r0, r7
 800801c:	f000 fbb0 	bl	8008780 <_free_r>
 8008020:	2300      	movs	r3, #0
 8008022:	6363      	str	r3, [r4, #52]	; 0x34
 8008024:	2300      	movs	r3, #0
 8008026:	61a3      	str	r3, [r4, #24]
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	0619      	lsls	r1, r3, #24
 800802e:	d503      	bpl.n	8008038 <setvbuf+0x7c>
 8008030:	6921      	ldr	r1, [r4, #16]
 8008032:	4638      	mov	r0, r7
 8008034:	f000 fba4 	bl	8008780 <_free_r>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800803e:	f023 0303 	bic.w	r3, r3, #3
 8008042:	f1b8 0f02 	cmp.w	r8, #2
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	d06c      	beq.n	8008124 <setvbuf+0x168>
 800804a:	ab01      	add	r3, sp, #4
 800804c:	466a      	mov	r2, sp
 800804e:	4621      	mov	r1, r4
 8008050:	4638      	mov	r0, r7
 8008052:	f000 fb27 	bl	80086a4 <__swhatbuf_r>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	4318      	orrs	r0, r3
 800805a:	81a0      	strh	r0, [r4, #12]
 800805c:	2d00      	cmp	r5, #0
 800805e:	d130      	bne.n	80080c2 <setvbuf+0x106>
 8008060:	9d00      	ldr	r5, [sp, #0]
 8008062:	4628      	mov	r0, r5
 8008064:	f000 fb84 	bl	8008770 <malloc>
 8008068:	4606      	mov	r6, r0
 800806a:	2800      	cmp	r0, #0
 800806c:	d155      	bne.n	800811a <setvbuf+0x15e>
 800806e:	f8dd 9000 	ldr.w	r9, [sp]
 8008072:	45a9      	cmp	r9, r5
 8008074:	d14a      	bne.n	800810c <setvbuf+0x150>
 8008076:	f04f 35ff 	mov.w	r5, #4294967295
 800807a:	2200      	movs	r2, #0
 800807c:	60a2      	str	r2, [r4, #8]
 800807e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008082:	6022      	str	r2, [r4, #0]
 8008084:	6122      	str	r2, [r4, #16]
 8008086:	2201      	movs	r2, #1
 8008088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808c:	6162      	str	r2, [r4, #20]
 800808e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008090:	f043 0302 	orr.w	r3, r3, #2
 8008094:	07d2      	lsls	r2, r2, #31
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	d405      	bmi.n	80080a6 <setvbuf+0xea>
 800809a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800809e:	d102      	bne.n	80080a6 <setvbuf+0xea>
 80080a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a2:	f000 fafe 	bl	80086a2 <__retarget_lock_release_recursive>
 80080a6:	4628      	mov	r0, r5
 80080a8:	b003      	add	sp, #12
 80080aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <setvbuf+0x184>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	d101      	bne.n	80080b8 <setvbuf+0xfc>
 80080b4:	68bc      	ldr	r4, [r7, #8]
 80080b6:	e793      	b.n	8007fe0 <setvbuf+0x24>
 80080b8:	4b22      	ldr	r3, [pc, #136]	; (8008144 <setvbuf+0x188>)
 80080ba:	429c      	cmp	r4, r3
 80080bc:	bf08      	it	eq
 80080be:	68fc      	ldreq	r4, [r7, #12]
 80080c0:	e78e      	b.n	8007fe0 <setvbuf+0x24>
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	d0cd      	beq.n	8008062 <setvbuf+0xa6>
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	b913      	cbnz	r3, 80080d0 <setvbuf+0x114>
 80080ca:	4638      	mov	r0, r7
 80080cc:	f000 fa4a 	bl	8008564 <__sinit>
 80080d0:	f1b8 0f01 	cmp.w	r8, #1
 80080d4:	bf08      	it	eq
 80080d6:	89a3      	ldrheq	r3, [r4, #12]
 80080d8:	6026      	str	r6, [r4, #0]
 80080da:	bf04      	itt	eq
 80080dc:	f043 0301 	orreq.w	r3, r3, #1
 80080e0:	81a3      	strheq	r3, [r4, #12]
 80080e2:	89a2      	ldrh	r2, [r4, #12]
 80080e4:	f012 0308 	ands.w	r3, r2, #8
 80080e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80080ec:	d01c      	beq.n	8008128 <setvbuf+0x16c>
 80080ee:	07d3      	lsls	r3, r2, #31
 80080f0:	bf41      	itttt	mi
 80080f2:	2300      	movmi	r3, #0
 80080f4:	426d      	negmi	r5, r5
 80080f6:	60a3      	strmi	r3, [r4, #8]
 80080f8:	61a5      	strmi	r5, [r4, #24]
 80080fa:	bf58      	it	pl
 80080fc:	60a5      	strpl	r5, [r4, #8]
 80080fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008100:	f015 0501 	ands.w	r5, r5, #1
 8008104:	d115      	bne.n	8008132 <setvbuf+0x176>
 8008106:	f412 7f00 	tst.w	r2, #512	; 0x200
 800810a:	e7c8      	b.n	800809e <setvbuf+0xe2>
 800810c:	4648      	mov	r0, r9
 800810e:	f000 fb2f 	bl	8008770 <malloc>
 8008112:	4606      	mov	r6, r0
 8008114:	2800      	cmp	r0, #0
 8008116:	d0ae      	beq.n	8008076 <setvbuf+0xba>
 8008118:	464d      	mov	r5, r9
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e7d0      	b.n	80080c6 <setvbuf+0x10a>
 8008124:	2500      	movs	r5, #0
 8008126:	e7a8      	b.n	800807a <setvbuf+0xbe>
 8008128:	60a3      	str	r3, [r4, #8]
 800812a:	e7e8      	b.n	80080fe <setvbuf+0x142>
 800812c:	f04f 35ff 	mov.w	r5, #4294967295
 8008130:	e7b9      	b.n	80080a6 <setvbuf+0xea>
 8008132:	2500      	movs	r5, #0
 8008134:	e7b7      	b.n	80080a6 <setvbuf+0xea>
 8008136:	bf00      	nop
 8008138:	20000014 	.word	0x20000014
 800813c:	0800922c 	.word	0x0800922c
 8008140:	0800924c 	.word	0x0800924c
 8008144:	0800920c 	.word	0x0800920c

08008148 <siprintf>:
 8008148:	b40e      	push	{r1, r2, r3}
 800814a:	b500      	push	{lr}
 800814c:	b09c      	sub	sp, #112	; 0x70
 800814e:	ab1d      	add	r3, sp, #116	; 0x74
 8008150:	9002      	str	r0, [sp, #8]
 8008152:	9006      	str	r0, [sp, #24]
 8008154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008158:	4809      	ldr	r0, [pc, #36]	; (8008180 <siprintf+0x38>)
 800815a:	9107      	str	r1, [sp, #28]
 800815c:	9104      	str	r1, [sp, #16]
 800815e:	4909      	ldr	r1, [pc, #36]	; (8008184 <siprintf+0x3c>)
 8008160:	f853 2b04 	ldr.w	r2, [r3], #4
 8008164:	9105      	str	r1, [sp, #20]
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	a902      	add	r1, sp, #8
 800816c:	f000 fc44 	bl	80089f8 <_svfiprintf_r>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	b01c      	add	sp, #112	; 0x70
 8008178:	f85d eb04 	ldr.w	lr, [sp], #4
 800817c:	b003      	add	sp, #12
 800817e:	4770      	bx	lr
 8008180:	20000014 	.word	0x20000014
 8008184:	ffff0208 	.word	0xffff0208

08008188 <strncpy>:
 8008188:	b510      	push	{r4, lr}
 800818a:	3901      	subs	r1, #1
 800818c:	4603      	mov	r3, r0
 800818e:	b132      	cbz	r2, 800819e <strncpy+0x16>
 8008190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008194:	f803 4b01 	strb.w	r4, [r3], #1
 8008198:	3a01      	subs	r2, #1
 800819a:	2c00      	cmp	r4, #0
 800819c:	d1f7      	bne.n	800818e <strncpy+0x6>
 800819e:	441a      	add	r2, r3
 80081a0:	2100      	movs	r1, #0
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d100      	bne.n	80081a8 <strncpy+0x20>
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	f803 1b01 	strb.w	r1, [r3], #1
 80081ac:	e7f9      	b.n	80081a2 <strncpy+0x1a>
	...

080081b0 <__swbuf_r>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	460e      	mov	r6, r1
 80081b4:	4614      	mov	r4, r2
 80081b6:	4605      	mov	r5, r0
 80081b8:	b118      	cbz	r0, 80081c2 <__swbuf_r+0x12>
 80081ba:	6983      	ldr	r3, [r0, #24]
 80081bc:	b90b      	cbnz	r3, 80081c2 <__swbuf_r+0x12>
 80081be:	f000 f9d1 	bl	8008564 <__sinit>
 80081c2:	4b21      	ldr	r3, [pc, #132]	; (8008248 <__swbuf_r+0x98>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d12b      	bne.n	8008220 <__swbuf_r+0x70>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	69a3      	ldr	r3, [r4, #24]
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	071a      	lsls	r2, r3, #28
 80081d2:	d52f      	bpl.n	8008234 <__swbuf_r+0x84>
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	b36b      	cbz	r3, 8008234 <__swbuf_r+0x84>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	6820      	ldr	r0, [r4, #0]
 80081dc:	1ac0      	subs	r0, r0, r3
 80081de:	6963      	ldr	r3, [r4, #20]
 80081e0:	b2f6      	uxtb	r6, r6
 80081e2:	4283      	cmp	r3, r0
 80081e4:	4637      	mov	r7, r6
 80081e6:	dc04      	bgt.n	80081f2 <__swbuf_r+0x42>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f926 	bl	800843c <_fflush_r>
 80081f0:	bb30      	cbnz	r0, 8008240 <__swbuf_r+0x90>
 80081f2:	68a3      	ldr	r3, [r4, #8]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	60a3      	str	r3, [r4, #8]
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	701e      	strb	r6, [r3, #0]
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	3001      	adds	r0, #1
 8008204:	4283      	cmp	r3, r0
 8008206:	d004      	beq.n	8008212 <__swbuf_r+0x62>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d506      	bpl.n	800821c <__swbuf_r+0x6c>
 800820e:	2e0a      	cmp	r6, #10
 8008210:	d104      	bne.n	800821c <__swbuf_r+0x6c>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f911 	bl	800843c <_fflush_r>
 800821a:	b988      	cbnz	r0, 8008240 <__swbuf_r+0x90>
 800821c:	4638      	mov	r0, r7
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <__swbuf_r+0x9c>)
 8008222:	429c      	cmp	r4, r3
 8008224:	d101      	bne.n	800822a <__swbuf_r+0x7a>
 8008226:	68ac      	ldr	r4, [r5, #8]
 8008228:	e7cf      	b.n	80081ca <__swbuf_r+0x1a>
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <__swbuf_r+0xa0>)
 800822c:	429c      	cmp	r4, r3
 800822e:	bf08      	it	eq
 8008230:	68ec      	ldreq	r4, [r5, #12]
 8008232:	e7ca      	b.n	80081ca <__swbuf_r+0x1a>
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f80c 	bl	8008254 <__swsetup_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	d0cb      	beq.n	80081d8 <__swbuf_r+0x28>
 8008240:	f04f 37ff 	mov.w	r7, #4294967295
 8008244:	e7ea      	b.n	800821c <__swbuf_r+0x6c>
 8008246:	bf00      	nop
 8008248:	0800922c 	.word	0x0800922c
 800824c:	0800924c 	.word	0x0800924c
 8008250:	0800920c 	.word	0x0800920c

08008254 <__swsetup_r>:
 8008254:	4b32      	ldr	r3, [pc, #200]	; (8008320 <__swsetup_r+0xcc>)
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	681d      	ldr	r5, [r3, #0]
 800825a:	4606      	mov	r6, r0
 800825c:	460c      	mov	r4, r1
 800825e:	b125      	cbz	r5, 800826a <__swsetup_r+0x16>
 8008260:	69ab      	ldr	r3, [r5, #24]
 8008262:	b913      	cbnz	r3, 800826a <__swsetup_r+0x16>
 8008264:	4628      	mov	r0, r5
 8008266:	f000 f97d 	bl	8008564 <__sinit>
 800826a:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <__swsetup_r+0xd0>)
 800826c:	429c      	cmp	r4, r3
 800826e:	d10f      	bne.n	8008290 <__swsetup_r+0x3c>
 8008270:	686c      	ldr	r4, [r5, #4]
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008278:	0719      	lsls	r1, r3, #28
 800827a:	d42c      	bmi.n	80082d6 <__swsetup_r+0x82>
 800827c:	06dd      	lsls	r5, r3, #27
 800827e:	d411      	bmi.n	80082a4 <__swsetup_r+0x50>
 8008280:	2309      	movs	r3, #9
 8008282:	6033      	str	r3, [r6, #0]
 8008284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	e03e      	b.n	800830e <__swsetup_r+0xba>
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <__swsetup_r+0xd4>)
 8008292:	429c      	cmp	r4, r3
 8008294:	d101      	bne.n	800829a <__swsetup_r+0x46>
 8008296:	68ac      	ldr	r4, [r5, #8]
 8008298:	e7eb      	b.n	8008272 <__swsetup_r+0x1e>
 800829a:	4b24      	ldr	r3, [pc, #144]	; (800832c <__swsetup_r+0xd8>)
 800829c:	429c      	cmp	r4, r3
 800829e:	bf08      	it	eq
 80082a0:	68ec      	ldreq	r4, [r5, #12]
 80082a2:	e7e6      	b.n	8008272 <__swsetup_r+0x1e>
 80082a4:	0758      	lsls	r0, r3, #29
 80082a6:	d512      	bpl.n	80082ce <__swsetup_r+0x7a>
 80082a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082aa:	b141      	cbz	r1, 80082be <__swsetup_r+0x6a>
 80082ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d002      	beq.n	80082ba <__swsetup_r+0x66>
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 fa63 	bl	8008780 <_free_r>
 80082ba:	2300      	movs	r3, #0
 80082bc:	6363      	str	r3, [r4, #52]	; 0x34
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	2300      	movs	r3, #0
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	f043 0308 	orr.w	r3, r3, #8
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	b94b      	cbnz	r3, 80082ee <__swsetup_r+0x9a>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e4:	d003      	beq.n	80082ee <__swsetup_r+0x9a>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 fa01 	bl	80086f0 <__smakebuf_r>
 80082ee:	89a0      	ldrh	r0, [r4, #12]
 80082f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082f4:	f010 0301 	ands.w	r3, r0, #1
 80082f8:	d00a      	beq.n	8008310 <__swsetup_r+0xbc>
 80082fa:	2300      	movs	r3, #0
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	425b      	negs	r3, r3
 8008302:	61a3      	str	r3, [r4, #24]
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b943      	cbnz	r3, 800831a <__swsetup_r+0xc6>
 8008308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800830c:	d1ba      	bne.n	8008284 <__swsetup_r+0x30>
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	0781      	lsls	r1, r0, #30
 8008312:	bf58      	it	pl
 8008314:	6963      	ldrpl	r3, [r4, #20]
 8008316:	60a3      	str	r3, [r4, #8]
 8008318:	e7f4      	b.n	8008304 <__swsetup_r+0xb0>
 800831a:	2000      	movs	r0, #0
 800831c:	e7f7      	b.n	800830e <__swsetup_r+0xba>
 800831e:	bf00      	nop
 8008320:	20000014 	.word	0x20000014
 8008324:	0800922c 	.word	0x0800922c
 8008328:	0800924c 	.word	0x0800924c
 800832c:	0800920c 	.word	0x0800920c

08008330 <__sflush_r>:
 8008330:	898a      	ldrh	r2, [r1, #12]
 8008332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008336:	4605      	mov	r5, r0
 8008338:	0710      	lsls	r0, r2, #28
 800833a:	460c      	mov	r4, r1
 800833c:	d458      	bmi.n	80083f0 <__sflush_r+0xc0>
 800833e:	684b      	ldr	r3, [r1, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dc05      	bgt.n	8008350 <__sflush_r+0x20>
 8008344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	dc02      	bgt.n	8008350 <__sflush_r+0x20>
 800834a:	2000      	movs	r0, #0
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008352:	2e00      	cmp	r6, #0
 8008354:	d0f9      	beq.n	800834a <__sflush_r+0x1a>
 8008356:	2300      	movs	r3, #0
 8008358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800835c:	682f      	ldr	r7, [r5, #0]
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	d032      	beq.n	80083c8 <__sflush_r+0x98>
 8008362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	075a      	lsls	r2, r3, #29
 8008368:	d505      	bpl.n	8008376 <__sflush_r+0x46>
 800836a:	6863      	ldr	r3, [r4, #4]
 800836c:	1ac0      	subs	r0, r0, r3
 800836e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008370:	b10b      	cbz	r3, 8008376 <__sflush_r+0x46>
 8008372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008374:	1ac0      	subs	r0, r0, r3
 8008376:	2300      	movs	r3, #0
 8008378:	4602      	mov	r2, r0
 800837a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800837c:	6a21      	ldr	r1, [r4, #32]
 800837e:	4628      	mov	r0, r5
 8008380:	47b0      	blx	r6
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	d106      	bne.n	8008396 <__sflush_r+0x66>
 8008388:	6829      	ldr	r1, [r5, #0]
 800838a:	291d      	cmp	r1, #29
 800838c:	d82c      	bhi.n	80083e8 <__sflush_r+0xb8>
 800838e:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <__sflush_r+0x108>)
 8008390:	40ca      	lsrs	r2, r1
 8008392:	07d6      	lsls	r6, r2, #31
 8008394:	d528      	bpl.n	80083e8 <__sflush_r+0xb8>
 8008396:	2200      	movs	r2, #0
 8008398:	6062      	str	r2, [r4, #4]
 800839a:	04d9      	lsls	r1, r3, #19
 800839c:	6922      	ldr	r2, [r4, #16]
 800839e:	6022      	str	r2, [r4, #0]
 80083a0:	d504      	bpl.n	80083ac <__sflush_r+0x7c>
 80083a2:	1c42      	adds	r2, r0, #1
 80083a4:	d101      	bne.n	80083aa <__sflush_r+0x7a>
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	b903      	cbnz	r3, 80083ac <__sflush_r+0x7c>
 80083aa:	6560      	str	r0, [r4, #84]	; 0x54
 80083ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ae:	602f      	str	r7, [r5, #0]
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d0ca      	beq.n	800834a <__sflush_r+0x1a>
 80083b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083b8:	4299      	cmp	r1, r3
 80083ba:	d002      	beq.n	80083c2 <__sflush_r+0x92>
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 f9df 	bl	8008780 <_free_r>
 80083c2:	2000      	movs	r0, #0
 80083c4:	6360      	str	r0, [r4, #52]	; 0x34
 80083c6:	e7c1      	b.n	800834c <__sflush_r+0x1c>
 80083c8:	6a21      	ldr	r1, [r4, #32]
 80083ca:	2301      	movs	r3, #1
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b0      	blx	r6
 80083d0:	1c41      	adds	r1, r0, #1
 80083d2:	d1c7      	bne.n	8008364 <__sflush_r+0x34>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0c4      	beq.n	8008364 <__sflush_r+0x34>
 80083da:	2b1d      	cmp	r3, #29
 80083dc:	d001      	beq.n	80083e2 <__sflush_r+0xb2>
 80083de:	2b16      	cmp	r3, #22
 80083e0:	d101      	bne.n	80083e6 <__sflush_r+0xb6>
 80083e2:	602f      	str	r7, [r5, #0]
 80083e4:	e7b1      	b.n	800834a <__sflush_r+0x1a>
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	e7ad      	b.n	800834c <__sflush_r+0x1c>
 80083f0:	690f      	ldr	r7, [r1, #16]
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	d0a9      	beq.n	800834a <__sflush_r+0x1a>
 80083f6:	0793      	lsls	r3, r2, #30
 80083f8:	680e      	ldr	r6, [r1, #0]
 80083fa:	bf08      	it	eq
 80083fc:	694b      	ldreq	r3, [r1, #20]
 80083fe:	600f      	str	r7, [r1, #0]
 8008400:	bf18      	it	ne
 8008402:	2300      	movne	r3, #0
 8008404:	eba6 0807 	sub.w	r8, r6, r7
 8008408:	608b      	str	r3, [r1, #8]
 800840a:	f1b8 0f00 	cmp.w	r8, #0
 800840e:	dd9c      	ble.n	800834a <__sflush_r+0x1a>
 8008410:	6a21      	ldr	r1, [r4, #32]
 8008412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008414:	4643      	mov	r3, r8
 8008416:	463a      	mov	r2, r7
 8008418:	4628      	mov	r0, r5
 800841a:	47b0      	blx	r6
 800841c:	2800      	cmp	r0, #0
 800841e:	dc06      	bgt.n	800842e <__sflush_r+0xfe>
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008426:	81a3      	strh	r3, [r4, #12]
 8008428:	f04f 30ff 	mov.w	r0, #4294967295
 800842c:	e78e      	b.n	800834c <__sflush_r+0x1c>
 800842e:	4407      	add	r7, r0
 8008430:	eba8 0800 	sub.w	r8, r8, r0
 8008434:	e7e9      	b.n	800840a <__sflush_r+0xda>
 8008436:	bf00      	nop
 8008438:	20400001 	.word	0x20400001

0800843c <_fflush_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	4605      	mov	r5, r0
 8008442:	460c      	mov	r4, r1
 8008444:	b913      	cbnz	r3, 800844c <_fflush_r+0x10>
 8008446:	2500      	movs	r5, #0
 8008448:	4628      	mov	r0, r5
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	b118      	cbz	r0, 8008456 <_fflush_r+0x1a>
 800844e:	6983      	ldr	r3, [r0, #24]
 8008450:	b90b      	cbnz	r3, 8008456 <_fflush_r+0x1a>
 8008452:	f000 f887 	bl	8008564 <__sinit>
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <_fflush_r+0x6c>)
 8008458:	429c      	cmp	r4, r3
 800845a:	d11b      	bne.n	8008494 <_fflush_r+0x58>
 800845c:	686c      	ldr	r4, [r5, #4]
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0ef      	beq.n	8008446 <_fflush_r+0xa>
 8008466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008468:	07d0      	lsls	r0, r2, #31
 800846a:	d404      	bmi.n	8008476 <_fflush_r+0x3a>
 800846c:	0599      	lsls	r1, r3, #22
 800846e:	d402      	bmi.n	8008476 <_fflush_r+0x3a>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f000 f915 	bl	80086a0 <__retarget_lock_acquire_recursive>
 8008476:	4628      	mov	r0, r5
 8008478:	4621      	mov	r1, r4
 800847a:	f7ff ff59 	bl	8008330 <__sflush_r>
 800847e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008480:	07da      	lsls	r2, r3, #31
 8008482:	4605      	mov	r5, r0
 8008484:	d4e0      	bmi.n	8008448 <_fflush_r+0xc>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	059b      	lsls	r3, r3, #22
 800848a:	d4dd      	bmi.n	8008448 <_fflush_r+0xc>
 800848c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848e:	f000 f908 	bl	80086a2 <__retarget_lock_release_recursive>
 8008492:	e7d9      	b.n	8008448 <_fflush_r+0xc>
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <_fflush_r+0x70>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d101      	bne.n	800849e <_fflush_r+0x62>
 800849a:	68ac      	ldr	r4, [r5, #8]
 800849c:	e7df      	b.n	800845e <_fflush_r+0x22>
 800849e:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <_fflush_r+0x74>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	bf08      	it	eq
 80084a4:	68ec      	ldreq	r4, [r5, #12]
 80084a6:	e7da      	b.n	800845e <_fflush_r+0x22>
 80084a8:	0800922c 	.word	0x0800922c
 80084ac:	0800924c 	.word	0x0800924c
 80084b0:	0800920c 	.word	0x0800920c

080084b4 <std>:
 80084b4:	2300      	movs	r3, #0
 80084b6:	b510      	push	{r4, lr}
 80084b8:	4604      	mov	r4, r0
 80084ba:	e9c0 3300 	strd	r3, r3, [r0]
 80084be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084c2:	6083      	str	r3, [r0, #8]
 80084c4:	8181      	strh	r1, [r0, #12]
 80084c6:	6643      	str	r3, [r0, #100]	; 0x64
 80084c8:	81c2      	strh	r2, [r0, #14]
 80084ca:	6183      	str	r3, [r0, #24]
 80084cc:	4619      	mov	r1, r3
 80084ce:	2208      	movs	r2, #8
 80084d0:	305c      	adds	r0, #92	; 0x5c
 80084d2:	f7ff fcf5 	bl	8007ec0 <memset>
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <std+0x38>)
 80084d8:	6263      	str	r3, [r4, #36]	; 0x24
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <std+0x3c>)
 80084dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <std+0x40>)
 80084e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <std+0x44>)
 80084e4:	6224      	str	r4, [r4, #32]
 80084e6:	6323      	str	r3, [r4, #48]	; 0x30
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	08008f41 	.word	0x08008f41
 80084f0:	08008f63 	.word	0x08008f63
 80084f4:	08008f9b 	.word	0x08008f9b
 80084f8:	08008fbf 	.word	0x08008fbf

080084fc <_cleanup_r>:
 80084fc:	4901      	ldr	r1, [pc, #4]	; (8008504 <_cleanup_r+0x8>)
 80084fe:	f000 b8af 	b.w	8008660 <_fwalk_reent>
 8008502:	bf00      	nop
 8008504:	0800843d 	.word	0x0800843d

08008508 <__sfmoreglue>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	2268      	movs	r2, #104	; 0x68
 800850c:	1e4d      	subs	r5, r1, #1
 800850e:	4355      	muls	r5, r2
 8008510:	460e      	mov	r6, r1
 8008512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008516:	f000 f99f 	bl	8008858 <_malloc_r>
 800851a:	4604      	mov	r4, r0
 800851c:	b140      	cbz	r0, 8008530 <__sfmoreglue+0x28>
 800851e:	2100      	movs	r1, #0
 8008520:	e9c0 1600 	strd	r1, r6, [r0]
 8008524:	300c      	adds	r0, #12
 8008526:	60a0      	str	r0, [r4, #8]
 8008528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800852c:	f7ff fcc8 	bl	8007ec0 <memset>
 8008530:	4620      	mov	r0, r4
 8008532:	bd70      	pop	{r4, r5, r6, pc}

08008534 <__sfp_lock_acquire>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__sfp_lock_acquire+0x8>)
 8008536:	f000 b8b3 	b.w	80086a0 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	2000352d 	.word	0x2000352d

08008540 <__sfp_lock_release>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__sfp_lock_release+0x8>)
 8008542:	f000 b8ae 	b.w	80086a2 <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	2000352d 	.word	0x2000352d

0800854c <__sinit_lock_acquire>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__sinit_lock_acquire+0x8>)
 800854e:	f000 b8a7 	b.w	80086a0 <__retarget_lock_acquire_recursive>
 8008552:	bf00      	nop
 8008554:	2000352e 	.word	0x2000352e

08008558 <__sinit_lock_release>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__sinit_lock_release+0x8>)
 800855a:	f000 b8a2 	b.w	80086a2 <__retarget_lock_release_recursive>
 800855e:	bf00      	nop
 8008560:	2000352e 	.word	0x2000352e

08008564 <__sinit>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4604      	mov	r4, r0
 8008568:	f7ff fff0 	bl	800854c <__sinit_lock_acquire>
 800856c:	69a3      	ldr	r3, [r4, #24]
 800856e:	b11b      	cbz	r3, 8008578 <__sinit+0x14>
 8008570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008574:	f7ff bff0 	b.w	8008558 <__sinit_lock_release>
 8008578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800857c:	6523      	str	r3, [r4, #80]	; 0x50
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <__sinit+0x68>)
 8008580:	4a13      	ldr	r2, [pc, #76]	; (80085d0 <__sinit+0x6c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	62a2      	str	r2, [r4, #40]	; 0x28
 8008586:	42a3      	cmp	r3, r4
 8008588:	bf04      	itt	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	61a3      	streq	r3, [r4, #24]
 800858e:	4620      	mov	r0, r4
 8008590:	f000 f820 	bl	80085d4 <__sfp>
 8008594:	6060      	str	r0, [r4, #4]
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f81c 	bl	80085d4 <__sfp>
 800859c:	60a0      	str	r0, [r4, #8]
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 f818 	bl	80085d4 <__sfp>
 80085a4:	2200      	movs	r2, #0
 80085a6:	60e0      	str	r0, [r4, #12]
 80085a8:	2104      	movs	r1, #4
 80085aa:	6860      	ldr	r0, [r4, #4]
 80085ac:	f7ff ff82 	bl	80084b4 <std>
 80085b0:	68a0      	ldr	r0, [r4, #8]
 80085b2:	2201      	movs	r2, #1
 80085b4:	2109      	movs	r1, #9
 80085b6:	f7ff ff7d 	bl	80084b4 <std>
 80085ba:	68e0      	ldr	r0, [r4, #12]
 80085bc:	2202      	movs	r2, #2
 80085be:	2112      	movs	r1, #18
 80085c0:	f7ff ff78 	bl	80084b4 <std>
 80085c4:	2301      	movs	r3, #1
 80085c6:	61a3      	str	r3, [r4, #24]
 80085c8:	e7d2      	b.n	8008570 <__sinit+0xc>
 80085ca:	bf00      	nop
 80085cc:	08009208 	.word	0x08009208
 80085d0:	080084fd 	.word	0x080084fd

080085d4 <__sfp>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	4607      	mov	r7, r0
 80085d8:	f7ff ffac 	bl	8008534 <__sfp_lock_acquire>
 80085dc:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <__sfp+0x84>)
 80085de:	681e      	ldr	r6, [r3, #0]
 80085e0:	69b3      	ldr	r3, [r6, #24]
 80085e2:	b913      	cbnz	r3, 80085ea <__sfp+0x16>
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7ff ffbd 	bl	8008564 <__sinit>
 80085ea:	3648      	adds	r6, #72	; 0x48
 80085ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	d503      	bpl.n	80085fc <__sfp+0x28>
 80085f4:	6833      	ldr	r3, [r6, #0]
 80085f6:	b30b      	cbz	r3, 800863c <__sfp+0x68>
 80085f8:	6836      	ldr	r6, [r6, #0]
 80085fa:	e7f7      	b.n	80085ec <__sfp+0x18>
 80085fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008600:	b9d5      	cbnz	r5, 8008638 <__sfp+0x64>
 8008602:	4b16      	ldr	r3, [pc, #88]	; (800865c <__sfp+0x88>)
 8008604:	60e3      	str	r3, [r4, #12]
 8008606:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800860a:	6665      	str	r5, [r4, #100]	; 0x64
 800860c:	f000 f847 	bl	800869e <__retarget_lock_init_recursive>
 8008610:	f7ff ff96 	bl	8008540 <__sfp_lock_release>
 8008614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800861c:	6025      	str	r5, [r4, #0]
 800861e:	61a5      	str	r5, [r4, #24]
 8008620:	2208      	movs	r2, #8
 8008622:	4629      	mov	r1, r5
 8008624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008628:	f7ff fc4a 	bl	8007ec0 <memset>
 800862c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008634:	4620      	mov	r0, r4
 8008636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008638:	3468      	adds	r4, #104	; 0x68
 800863a:	e7d9      	b.n	80085f0 <__sfp+0x1c>
 800863c:	2104      	movs	r1, #4
 800863e:	4638      	mov	r0, r7
 8008640:	f7ff ff62 	bl	8008508 <__sfmoreglue>
 8008644:	4604      	mov	r4, r0
 8008646:	6030      	str	r0, [r6, #0]
 8008648:	2800      	cmp	r0, #0
 800864a:	d1d5      	bne.n	80085f8 <__sfp+0x24>
 800864c:	f7ff ff78 	bl	8008540 <__sfp_lock_release>
 8008650:	230c      	movs	r3, #12
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	e7ee      	b.n	8008634 <__sfp+0x60>
 8008656:	bf00      	nop
 8008658:	08009208 	.word	0x08009208
 800865c:	ffff0001 	.word	0xffff0001

08008660 <_fwalk_reent>:
 8008660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008664:	4606      	mov	r6, r0
 8008666:	4688      	mov	r8, r1
 8008668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800866c:	2700      	movs	r7, #0
 800866e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008672:	f1b9 0901 	subs.w	r9, r9, #1
 8008676:	d505      	bpl.n	8008684 <_fwalk_reent+0x24>
 8008678:	6824      	ldr	r4, [r4, #0]
 800867a:	2c00      	cmp	r4, #0
 800867c:	d1f7      	bne.n	800866e <_fwalk_reent+0xe>
 800867e:	4638      	mov	r0, r7
 8008680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008684:	89ab      	ldrh	r3, [r5, #12]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d907      	bls.n	800869a <_fwalk_reent+0x3a>
 800868a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800868e:	3301      	adds	r3, #1
 8008690:	d003      	beq.n	800869a <_fwalk_reent+0x3a>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	47c0      	blx	r8
 8008698:	4307      	orrs	r7, r0
 800869a:	3568      	adds	r5, #104	; 0x68
 800869c:	e7e9      	b.n	8008672 <_fwalk_reent+0x12>

0800869e <__retarget_lock_init_recursive>:
 800869e:	4770      	bx	lr

080086a0 <__retarget_lock_acquire_recursive>:
 80086a0:	4770      	bx	lr

080086a2 <__retarget_lock_release_recursive>:
 80086a2:	4770      	bx	lr

080086a4 <__swhatbuf_r>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	460e      	mov	r6, r1
 80086a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ac:	2900      	cmp	r1, #0
 80086ae:	b096      	sub	sp, #88	; 0x58
 80086b0:	4614      	mov	r4, r2
 80086b2:	461d      	mov	r5, r3
 80086b4:	da08      	bge.n	80086c8 <__swhatbuf_r+0x24>
 80086b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	061a      	lsls	r2, r3, #24
 80086c0:	d410      	bmi.n	80086e4 <__swhatbuf_r+0x40>
 80086c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c6:	e00e      	b.n	80086e6 <__swhatbuf_r+0x42>
 80086c8:	466a      	mov	r2, sp
 80086ca:	f000 fc9f 	bl	800900c <_fstat_r>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	dbf1      	blt.n	80086b6 <__swhatbuf_r+0x12>
 80086d2:	9a01      	ldr	r2, [sp, #4]
 80086d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086dc:	425a      	negs	r2, r3
 80086de:	415a      	adcs	r2, r3
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	e7ee      	b.n	80086c2 <__swhatbuf_r+0x1e>
 80086e4:	2340      	movs	r3, #64	; 0x40
 80086e6:	2000      	movs	r0, #0
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	b016      	add	sp, #88	; 0x58
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080086f0 <__smakebuf_r>:
 80086f0:	898b      	ldrh	r3, [r1, #12]
 80086f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086f4:	079d      	lsls	r5, r3, #30
 80086f6:	4606      	mov	r6, r0
 80086f8:	460c      	mov	r4, r1
 80086fa:	d507      	bpl.n	800870c <__smakebuf_r+0x1c>
 80086fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	2301      	movs	r3, #1
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	b002      	add	sp, #8
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	ab01      	add	r3, sp, #4
 800870e:	466a      	mov	r2, sp
 8008710:	f7ff ffc8 	bl	80086a4 <__swhatbuf_r>
 8008714:	9900      	ldr	r1, [sp, #0]
 8008716:	4605      	mov	r5, r0
 8008718:	4630      	mov	r0, r6
 800871a:	f000 f89d 	bl	8008858 <_malloc_r>
 800871e:	b948      	cbnz	r0, 8008734 <__smakebuf_r+0x44>
 8008720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008724:	059a      	lsls	r2, r3, #22
 8008726:	d4ef      	bmi.n	8008708 <__smakebuf_r+0x18>
 8008728:	f023 0303 	bic.w	r3, r3, #3
 800872c:	f043 0302 	orr.w	r3, r3, #2
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	e7e3      	b.n	80086fc <__smakebuf_r+0xc>
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <__smakebuf_r+0x7c>)
 8008736:	62b3      	str	r3, [r6, #40]	; 0x28
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	6020      	str	r0, [r4, #0]
 800873c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	6163      	str	r3, [r4, #20]
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	6120      	str	r0, [r4, #16]
 800874a:	b15b      	cbz	r3, 8008764 <__smakebuf_r+0x74>
 800874c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008750:	4630      	mov	r0, r6
 8008752:	f000 fc6d 	bl	8009030 <_isatty_r>
 8008756:	b128      	cbz	r0, 8008764 <__smakebuf_r+0x74>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	89a0      	ldrh	r0, [r4, #12]
 8008766:	4305      	orrs	r5, r0
 8008768:	81a5      	strh	r5, [r4, #12]
 800876a:	e7cd      	b.n	8008708 <__smakebuf_r+0x18>
 800876c:	080084fd 	.word	0x080084fd

08008770 <malloc>:
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <malloc+0xc>)
 8008772:	4601      	mov	r1, r0
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f000 b86f 	b.w	8008858 <_malloc_r>
 800877a:	bf00      	nop
 800877c:	20000014 	.word	0x20000014

08008780 <_free_r>:
 8008780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008782:	2900      	cmp	r1, #0
 8008784:	d044      	beq.n	8008810 <_free_r+0x90>
 8008786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878a:	9001      	str	r0, [sp, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f1a1 0404 	sub.w	r4, r1, #4
 8008792:	bfb8      	it	lt
 8008794:	18e4      	addlt	r4, r4, r3
 8008796:	f000 fc6d 	bl	8009074 <__malloc_lock>
 800879a:	4a1e      	ldr	r2, [pc, #120]	; (8008814 <_free_r+0x94>)
 800879c:	9801      	ldr	r0, [sp, #4]
 800879e:	6813      	ldr	r3, [r2, #0]
 80087a0:	b933      	cbnz	r3, 80087b0 <_free_r+0x30>
 80087a2:	6063      	str	r3, [r4, #4]
 80087a4:	6014      	str	r4, [r2, #0]
 80087a6:	b003      	add	sp, #12
 80087a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087ac:	f000 bc68 	b.w	8009080 <__malloc_unlock>
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	d908      	bls.n	80087c6 <_free_r+0x46>
 80087b4:	6825      	ldr	r5, [r4, #0]
 80087b6:	1961      	adds	r1, r4, r5
 80087b8:	428b      	cmp	r3, r1
 80087ba:	bf01      	itttt	eq
 80087bc:	6819      	ldreq	r1, [r3, #0]
 80087be:	685b      	ldreq	r3, [r3, #4]
 80087c0:	1949      	addeq	r1, r1, r5
 80087c2:	6021      	streq	r1, [r4, #0]
 80087c4:	e7ed      	b.n	80087a2 <_free_r+0x22>
 80087c6:	461a      	mov	r2, r3
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	b10b      	cbz	r3, 80087d0 <_free_r+0x50>
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d9fa      	bls.n	80087c6 <_free_r+0x46>
 80087d0:	6811      	ldr	r1, [r2, #0]
 80087d2:	1855      	adds	r5, r2, r1
 80087d4:	42a5      	cmp	r5, r4
 80087d6:	d10b      	bne.n	80087f0 <_free_r+0x70>
 80087d8:	6824      	ldr	r4, [r4, #0]
 80087da:	4421      	add	r1, r4
 80087dc:	1854      	adds	r4, r2, r1
 80087de:	42a3      	cmp	r3, r4
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	d1e0      	bne.n	80087a6 <_free_r+0x26>
 80087e4:	681c      	ldr	r4, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	6053      	str	r3, [r2, #4]
 80087ea:	4421      	add	r1, r4
 80087ec:	6011      	str	r1, [r2, #0]
 80087ee:	e7da      	b.n	80087a6 <_free_r+0x26>
 80087f0:	d902      	bls.n	80087f8 <_free_r+0x78>
 80087f2:	230c      	movs	r3, #12
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	e7d6      	b.n	80087a6 <_free_r+0x26>
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	1961      	adds	r1, r4, r5
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf04      	itt	eq
 8008800:	6819      	ldreq	r1, [r3, #0]
 8008802:	685b      	ldreq	r3, [r3, #4]
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	bf04      	itt	eq
 8008808:	1949      	addeq	r1, r1, r5
 800880a:	6021      	streq	r1, [r4, #0]
 800880c:	6054      	str	r4, [r2, #4]
 800880e:	e7ca      	b.n	80087a6 <_free_r+0x26>
 8008810:	b003      	add	sp, #12
 8008812:	bd30      	pop	{r4, r5, pc}
 8008814:	20003530 	.word	0x20003530

08008818 <sbrk_aligned>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	4e0e      	ldr	r6, [pc, #56]	; (8008854 <sbrk_aligned+0x3c>)
 800881c:	460c      	mov	r4, r1
 800881e:	6831      	ldr	r1, [r6, #0]
 8008820:	4605      	mov	r5, r0
 8008822:	b911      	cbnz	r1, 800882a <sbrk_aligned+0x12>
 8008824:	f000 fb7c 	bl	8008f20 <_sbrk_r>
 8008828:	6030      	str	r0, [r6, #0]
 800882a:	4621      	mov	r1, r4
 800882c:	4628      	mov	r0, r5
 800882e:	f000 fb77 	bl	8008f20 <_sbrk_r>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	d00a      	beq.n	800884c <sbrk_aligned+0x34>
 8008836:	1cc4      	adds	r4, r0, #3
 8008838:	f024 0403 	bic.w	r4, r4, #3
 800883c:	42a0      	cmp	r0, r4
 800883e:	d007      	beq.n	8008850 <sbrk_aligned+0x38>
 8008840:	1a21      	subs	r1, r4, r0
 8008842:	4628      	mov	r0, r5
 8008844:	f000 fb6c 	bl	8008f20 <_sbrk_r>
 8008848:	3001      	adds	r0, #1
 800884a:	d101      	bne.n	8008850 <sbrk_aligned+0x38>
 800884c:	f04f 34ff 	mov.w	r4, #4294967295
 8008850:	4620      	mov	r0, r4
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	20003534 	.word	0x20003534

08008858 <_malloc_r>:
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	1ccd      	adds	r5, r1, #3
 800885e:	f025 0503 	bic.w	r5, r5, #3
 8008862:	3508      	adds	r5, #8
 8008864:	2d0c      	cmp	r5, #12
 8008866:	bf38      	it	cc
 8008868:	250c      	movcc	r5, #12
 800886a:	2d00      	cmp	r5, #0
 800886c:	4607      	mov	r7, r0
 800886e:	db01      	blt.n	8008874 <_malloc_r+0x1c>
 8008870:	42a9      	cmp	r1, r5
 8008872:	d905      	bls.n	8008880 <_malloc_r+0x28>
 8008874:	230c      	movs	r3, #12
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	2600      	movs	r6, #0
 800887a:	4630      	mov	r0, r6
 800887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008880:	4e2e      	ldr	r6, [pc, #184]	; (800893c <_malloc_r+0xe4>)
 8008882:	f000 fbf7 	bl	8009074 <__malloc_lock>
 8008886:	6833      	ldr	r3, [r6, #0]
 8008888:	461c      	mov	r4, r3
 800888a:	bb34      	cbnz	r4, 80088da <_malloc_r+0x82>
 800888c:	4629      	mov	r1, r5
 800888e:	4638      	mov	r0, r7
 8008890:	f7ff ffc2 	bl	8008818 <sbrk_aligned>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	4604      	mov	r4, r0
 8008898:	d14d      	bne.n	8008936 <_malloc_r+0xde>
 800889a:	6834      	ldr	r4, [r6, #0]
 800889c:	4626      	mov	r6, r4
 800889e:	2e00      	cmp	r6, #0
 80088a0:	d140      	bne.n	8008924 <_malloc_r+0xcc>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	4631      	mov	r1, r6
 80088a6:	4638      	mov	r0, r7
 80088a8:	eb04 0803 	add.w	r8, r4, r3
 80088ac:	f000 fb38 	bl	8008f20 <_sbrk_r>
 80088b0:	4580      	cmp	r8, r0
 80088b2:	d13a      	bne.n	800892a <_malloc_r+0xd2>
 80088b4:	6821      	ldr	r1, [r4, #0]
 80088b6:	3503      	adds	r5, #3
 80088b8:	1a6d      	subs	r5, r5, r1
 80088ba:	f025 0503 	bic.w	r5, r5, #3
 80088be:	3508      	adds	r5, #8
 80088c0:	2d0c      	cmp	r5, #12
 80088c2:	bf38      	it	cc
 80088c4:	250c      	movcc	r5, #12
 80088c6:	4629      	mov	r1, r5
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff ffa5 	bl	8008818 <sbrk_aligned>
 80088ce:	3001      	adds	r0, #1
 80088d0:	d02b      	beq.n	800892a <_malloc_r+0xd2>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	442b      	add	r3, r5
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	e00e      	b.n	80088f8 <_malloc_r+0xa0>
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	1b52      	subs	r2, r2, r5
 80088de:	d41e      	bmi.n	800891e <_malloc_r+0xc6>
 80088e0:	2a0b      	cmp	r2, #11
 80088e2:	d916      	bls.n	8008912 <_malloc_r+0xba>
 80088e4:	1961      	adds	r1, r4, r5
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	6025      	str	r5, [r4, #0]
 80088ea:	bf18      	it	ne
 80088ec:	6059      	strne	r1, [r3, #4]
 80088ee:	6863      	ldr	r3, [r4, #4]
 80088f0:	bf08      	it	eq
 80088f2:	6031      	streq	r1, [r6, #0]
 80088f4:	5162      	str	r2, [r4, r5]
 80088f6:	604b      	str	r3, [r1, #4]
 80088f8:	4638      	mov	r0, r7
 80088fa:	f104 060b 	add.w	r6, r4, #11
 80088fe:	f000 fbbf 	bl	8009080 <__malloc_unlock>
 8008902:	f026 0607 	bic.w	r6, r6, #7
 8008906:	1d23      	adds	r3, r4, #4
 8008908:	1af2      	subs	r2, r6, r3
 800890a:	d0b6      	beq.n	800887a <_malloc_r+0x22>
 800890c:	1b9b      	subs	r3, r3, r6
 800890e:	50a3      	str	r3, [r4, r2]
 8008910:	e7b3      	b.n	800887a <_malloc_r+0x22>
 8008912:	6862      	ldr	r2, [r4, #4]
 8008914:	42a3      	cmp	r3, r4
 8008916:	bf0c      	ite	eq
 8008918:	6032      	streq	r2, [r6, #0]
 800891a:	605a      	strne	r2, [r3, #4]
 800891c:	e7ec      	b.n	80088f8 <_malloc_r+0xa0>
 800891e:	4623      	mov	r3, r4
 8008920:	6864      	ldr	r4, [r4, #4]
 8008922:	e7b2      	b.n	800888a <_malloc_r+0x32>
 8008924:	4634      	mov	r4, r6
 8008926:	6876      	ldr	r6, [r6, #4]
 8008928:	e7b9      	b.n	800889e <_malloc_r+0x46>
 800892a:	230c      	movs	r3, #12
 800892c:	603b      	str	r3, [r7, #0]
 800892e:	4638      	mov	r0, r7
 8008930:	f000 fba6 	bl	8009080 <__malloc_unlock>
 8008934:	e7a1      	b.n	800887a <_malloc_r+0x22>
 8008936:	6025      	str	r5, [r4, #0]
 8008938:	e7de      	b.n	80088f8 <_malloc_r+0xa0>
 800893a:	bf00      	nop
 800893c:	20003530 	.word	0x20003530

08008940 <__ssputs_r>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	688e      	ldr	r6, [r1, #8]
 8008946:	429e      	cmp	r6, r3
 8008948:	4682      	mov	sl, r0
 800894a:	460c      	mov	r4, r1
 800894c:	4690      	mov	r8, r2
 800894e:	461f      	mov	r7, r3
 8008950:	d838      	bhi.n	80089c4 <__ssputs_r+0x84>
 8008952:	898a      	ldrh	r2, [r1, #12]
 8008954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008958:	d032      	beq.n	80089c0 <__ssputs_r+0x80>
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	6909      	ldr	r1, [r1, #16]
 800895e:	eba5 0901 	sub.w	r9, r5, r1
 8008962:	6965      	ldr	r5, [r4, #20]
 8008964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800896c:	3301      	adds	r3, #1
 800896e:	444b      	add	r3, r9
 8008970:	106d      	asrs	r5, r5, #1
 8008972:	429d      	cmp	r5, r3
 8008974:	bf38      	it	cc
 8008976:	461d      	movcc	r5, r3
 8008978:	0553      	lsls	r3, r2, #21
 800897a:	d531      	bpl.n	80089e0 <__ssputs_r+0xa0>
 800897c:	4629      	mov	r1, r5
 800897e:	f7ff ff6b 	bl	8008858 <_malloc_r>
 8008982:	4606      	mov	r6, r0
 8008984:	b950      	cbnz	r0, 800899c <__ssputs_r+0x5c>
 8008986:	230c      	movs	r3, #12
 8008988:	f8ca 3000 	str.w	r3, [sl]
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899c:	6921      	ldr	r1, [r4, #16]
 800899e:	464a      	mov	r2, r9
 80089a0:	f7ff fa66 	bl	8007e70 <memcpy>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	6126      	str	r6, [r4, #16]
 80089b2:	6165      	str	r5, [r4, #20]
 80089b4:	444e      	add	r6, r9
 80089b6:	eba5 0509 	sub.w	r5, r5, r9
 80089ba:	6026      	str	r6, [r4, #0]
 80089bc:	60a5      	str	r5, [r4, #8]
 80089be:	463e      	mov	r6, r7
 80089c0:	42be      	cmp	r6, r7
 80089c2:	d900      	bls.n	80089c6 <__ssputs_r+0x86>
 80089c4:	463e      	mov	r6, r7
 80089c6:	6820      	ldr	r0, [r4, #0]
 80089c8:	4632      	mov	r2, r6
 80089ca:	4641      	mov	r1, r8
 80089cc:	f7ff fa5e 	bl	8007e8c <memmove>
 80089d0:	68a3      	ldr	r3, [r4, #8]
 80089d2:	1b9b      	subs	r3, r3, r6
 80089d4:	60a3      	str	r3, [r4, #8]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	4433      	add	r3, r6
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	2000      	movs	r0, #0
 80089de:	e7db      	b.n	8008998 <__ssputs_r+0x58>
 80089e0:	462a      	mov	r2, r5
 80089e2:	f000 fb53 	bl	800908c <_realloc_r>
 80089e6:	4606      	mov	r6, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d1e1      	bne.n	80089b0 <__ssputs_r+0x70>
 80089ec:	6921      	ldr	r1, [r4, #16]
 80089ee:	4650      	mov	r0, sl
 80089f0:	f7ff fec6 	bl	8008780 <_free_r>
 80089f4:	e7c7      	b.n	8008986 <__ssputs_r+0x46>
	...

080089f8 <_svfiprintf_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	4698      	mov	r8, r3
 80089fe:	898b      	ldrh	r3, [r1, #12]
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	b09d      	sub	sp, #116	; 0x74
 8008a04:	4607      	mov	r7, r0
 8008a06:	460d      	mov	r5, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	d50e      	bpl.n	8008a2a <_svfiprintf_r+0x32>
 8008a0c:	690b      	ldr	r3, [r1, #16]
 8008a0e:	b963      	cbnz	r3, 8008a2a <_svfiprintf_r+0x32>
 8008a10:	2140      	movs	r1, #64	; 0x40
 8008a12:	f7ff ff21 	bl	8008858 <_malloc_r>
 8008a16:	6028      	str	r0, [r5, #0]
 8008a18:	6128      	str	r0, [r5, #16]
 8008a1a:	b920      	cbnz	r0, 8008a26 <_svfiprintf_r+0x2e>
 8008a1c:	230c      	movs	r3, #12
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e0d1      	b.n	8008bca <_svfiprintf_r+0x1d2>
 8008a26:	2340      	movs	r3, #64	; 0x40
 8008a28:	616b      	str	r3, [r5, #20]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2e:	2320      	movs	r3, #32
 8008a30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a38:	2330      	movs	r3, #48	; 0x30
 8008a3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008be4 <_svfiprintf_r+0x1ec>
 8008a3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a42:	f04f 0901 	mov.w	r9, #1
 8008a46:	4623      	mov	r3, r4
 8008a48:	469a      	mov	sl, r3
 8008a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a4e:	b10a      	cbz	r2, 8008a54 <_svfiprintf_r+0x5c>
 8008a50:	2a25      	cmp	r2, #37	; 0x25
 8008a52:	d1f9      	bne.n	8008a48 <_svfiprintf_r+0x50>
 8008a54:	ebba 0b04 	subs.w	fp, sl, r4
 8008a58:	d00b      	beq.n	8008a72 <_svfiprintf_r+0x7a>
 8008a5a:	465b      	mov	r3, fp
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	4629      	mov	r1, r5
 8008a60:	4638      	mov	r0, r7
 8008a62:	f7ff ff6d 	bl	8008940 <__ssputs_r>
 8008a66:	3001      	adds	r0, #1
 8008a68:	f000 80aa 	beq.w	8008bc0 <_svfiprintf_r+0x1c8>
 8008a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a6e:	445a      	add	r2, fp
 8008a70:	9209      	str	r2, [sp, #36]	; 0x24
 8008a72:	f89a 3000 	ldrb.w	r3, [sl]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 80a2 	beq.w	8008bc0 <_svfiprintf_r+0x1c8>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a86:	f10a 0a01 	add.w	sl, sl, #1
 8008a8a:	9304      	str	r3, [sp, #16]
 8008a8c:	9307      	str	r3, [sp, #28]
 8008a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a92:	931a      	str	r3, [sp, #104]	; 0x68
 8008a94:	4654      	mov	r4, sl
 8008a96:	2205      	movs	r2, #5
 8008a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9c:	4851      	ldr	r0, [pc, #324]	; (8008be4 <_svfiprintf_r+0x1ec>)
 8008a9e:	f7f7 fbb7 	bl	8000210 <memchr>
 8008aa2:	9a04      	ldr	r2, [sp, #16]
 8008aa4:	b9d8      	cbnz	r0, 8008ade <_svfiprintf_r+0xe6>
 8008aa6:	06d0      	lsls	r0, r2, #27
 8008aa8:	bf44      	itt	mi
 8008aaa:	2320      	movmi	r3, #32
 8008aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ab0:	0711      	lsls	r1, r2, #28
 8008ab2:	bf44      	itt	mi
 8008ab4:	232b      	movmi	r3, #43	; 0x2b
 8008ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aba:	f89a 3000 	ldrb.w	r3, [sl]
 8008abe:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac0:	d015      	beq.n	8008aee <_svfiprintf_r+0xf6>
 8008ac2:	9a07      	ldr	r2, [sp, #28]
 8008ac4:	4654      	mov	r4, sl
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f04f 0c0a 	mov.w	ip, #10
 8008acc:	4621      	mov	r1, r4
 8008ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ad2:	3b30      	subs	r3, #48	; 0x30
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d94e      	bls.n	8008b76 <_svfiprintf_r+0x17e>
 8008ad8:	b1b0      	cbz	r0, 8008b08 <_svfiprintf_r+0x110>
 8008ada:	9207      	str	r2, [sp, #28]
 8008adc:	e014      	b.n	8008b08 <_svfiprintf_r+0x110>
 8008ade:	eba0 0308 	sub.w	r3, r0, r8
 8008ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	46a2      	mov	sl, r4
 8008aec:	e7d2      	b.n	8008a94 <_svfiprintf_r+0x9c>
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	1d19      	adds	r1, r3, #4
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	9103      	str	r1, [sp, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bfbb      	ittet	lt
 8008afa:	425b      	neglt	r3, r3
 8008afc:	f042 0202 	orrlt.w	r2, r2, #2
 8008b00:	9307      	strge	r3, [sp, #28]
 8008b02:	9307      	strlt	r3, [sp, #28]
 8008b04:	bfb8      	it	lt
 8008b06:	9204      	strlt	r2, [sp, #16]
 8008b08:	7823      	ldrb	r3, [r4, #0]
 8008b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b0c:	d10c      	bne.n	8008b28 <_svfiprintf_r+0x130>
 8008b0e:	7863      	ldrb	r3, [r4, #1]
 8008b10:	2b2a      	cmp	r3, #42	; 0x2a
 8008b12:	d135      	bne.n	8008b80 <_svfiprintf_r+0x188>
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	9203      	str	r2, [sp, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfb8      	it	lt
 8008b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b24:	3402      	adds	r4, #2
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bf4 <_svfiprintf_r+0x1fc>
 8008b2c:	7821      	ldrb	r1, [r4, #0]
 8008b2e:	2203      	movs	r2, #3
 8008b30:	4650      	mov	r0, sl
 8008b32:	f7f7 fb6d 	bl	8000210 <memchr>
 8008b36:	b140      	cbz	r0, 8008b4a <_svfiprintf_r+0x152>
 8008b38:	2340      	movs	r3, #64	; 0x40
 8008b3a:	eba0 000a 	sub.w	r0, r0, sl
 8008b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	4303      	orrs	r3, r0
 8008b46:	3401      	adds	r4, #1
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4e:	4826      	ldr	r0, [pc, #152]	; (8008be8 <_svfiprintf_r+0x1f0>)
 8008b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b54:	2206      	movs	r2, #6
 8008b56:	f7f7 fb5b 	bl	8000210 <memchr>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d038      	beq.n	8008bd0 <_svfiprintf_r+0x1d8>
 8008b5e:	4b23      	ldr	r3, [pc, #140]	; (8008bec <_svfiprintf_r+0x1f4>)
 8008b60:	bb1b      	cbnz	r3, 8008baa <_svfiprintf_r+0x1b2>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	3307      	adds	r3, #7
 8008b66:	f023 0307 	bic.w	r3, r3, #7
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	9303      	str	r3, [sp, #12]
 8008b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b70:	4433      	add	r3, r6
 8008b72:	9309      	str	r3, [sp, #36]	; 0x24
 8008b74:	e767      	b.n	8008a46 <_svfiprintf_r+0x4e>
 8008b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	e7a5      	b.n	8008acc <_svfiprintf_r+0xd4>
 8008b80:	2300      	movs	r3, #0
 8008b82:	3401      	adds	r4, #1
 8008b84:	9305      	str	r3, [sp, #20]
 8008b86:	4619      	mov	r1, r3
 8008b88:	f04f 0c0a 	mov.w	ip, #10
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b92:	3a30      	subs	r2, #48	; 0x30
 8008b94:	2a09      	cmp	r2, #9
 8008b96:	d903      	bls.n	8008ba0 <_svfiprintf_r+0x1a8>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0c5      	beq.n	8008b28 <_svfiprintf_r+0x130>
 8008b9c:	9105      	str	r1, [sp, #20]
 8008b9e:	e7c3      	b.n	8008b28 <_svfiprintf_r+0x130>
 8008ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e7f0      	b.n	8008b8c <_svfiprintf_r+0x194>
 8008baa:	ab03      	add	r3, sp, #12
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <_svfiprintf_r+0x1f8>)
 8008bb2:	a904      	add	r1, sp, #16
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f3af 8000 	nop.w
 8008bba:	1c42      	adds	r2, r0, #1
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	d1d6      	bne.n	8008b6e <_svfiprintf_r+0x176>
 8008bc0:	89ab      	ldrh	r3, [r5, #12]
 8008bc2:	065b      	lsls	r3, r3, #25
 8008bc4:	f53f af2c 	bmi.w	8008a20 <_svfiprintf_r+0x28>
 8008bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bca:	b01d      	add	sp, #116	; 0x74
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	ab03      	add	r3, sp, #12
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <_svfiprintf_r+0x1f8>)
 8008bd8:	a904      	add	r1, sp, #16
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f000 f87a 	bl	8008cd4 <_printf_i>
 8008be0:	e7eb      	b.n	8008bba <_svfiprintf_r+0x1c2>
 8008be2:	bf00      	nop
 8008be4:	0800926c 	.word	0x0800926c
 8008be8:	08009276 	.word	0x08009276
 8008bec:	00000000 	.word	0x00000000
 8008bf0:	08008941 	.word	0x08008941
 8008bf4:	08009272 	.word	0x08009272

08008bf8 <_printf_common>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	4616      	mov	r6, r2
 8008bfe:	4699      	mov	r9, r3
 8008c00:	688a      	ldr	r2, [r1, #8]
 8008c02:	690b      	ldr	r3, [r1, #16]
 8008c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	bfb8      	it	lt
 8008c0c:	4613      	movlt	r3, r2
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c14:	4607      	mov	r7, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	b10a      	cbz	r2, 8008c1e <_printf_common+0x26>
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	0699      	lsls	r1, r3, #26
 8008c22:	bf42      	ittt	mi
 8008c24:	6833      	ldrmi	r3, [r6, #0]
 8008c26:	3302      	addmi	r3, #2
 8008c28:	6033      	strmi	r3, [r6, #0]
 8008c2a:	6825      	ldr	r5, [r4, #0]
 8008c2c:	f015 0506 	ands.w	r5, r5, #6
 8008c30:	d106      	bne.n	8008c40 <_printf_common+0x48>
 8008c32:	f104 0a19 	add.w	sl, r4, #25
 8008c36:	68e3      	ldr	r3, [r4, #12]
 8008c38:	6832      	ldr	r2, [r6, #0]
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	dc26      	bgt.n	8008c8e <_printf_common+0x96>
 8008c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c44:	1e13      	subs	r3, r2, #0
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	bf18      	it	ne
 8008c4a:	2301      	movne	r3, #1
 8008c4c:	0692      	lsls	r2, r2, #26
 8008c4e:	d42b      	bmi.n	8008ca8 <_printf_common+0xb0>
 8008c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c54:	4649      	mov	r1, r9
 8008c56:	4638      	mov	r0, r7
 8008c58:	47c0      	blx	r8
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d01e      	beq.n	8008c9c <_printf_common+0xa4>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	68e5      	ldr	r5, [r4, #12]
 8008c62:	6832      	ldr	r2, [r6, #0]
 8008c64:	f003 0306 	and.w	r3, r3, #6
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	bf08      	it	eq
 8008c6c:	1aad      	subeq	r5, r5, r2
 8008c6e:	68a3      	ldr	r3, [r4, #8]
 8008c70:	6922      	ldr	r2, [r4, #16]
 8008c72:	bf0c      	ite	eq
 8008c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c78:	2500      	movne	r5, #0
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	bfc4      	itt	gt
 8008c7e:	1a9b      	subgt	r3, r3, r2
 8008c80:	18ed      	addgt	r5, r5, r3
 8008c82:	2600      	movs	r6, #0
 8008c84:	341a      	adds	r4, #26
 8008c86:	42b5      	cmp	r5, r6
 8008c88:	d11a      	bne.n	8008cc0 <_printf_common+0xc8>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e008      	b.n	8008ca0 <_printf_common+0xa8>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4652      	mov	r2, sl
 8008c92:	4649      	mov	r1, r9
 8008c94:	4638      	mov	r0, r7
 8008c96:	47c0      	blx	r8
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d103      	bne.n	8008ca4 <_printf_common+0xac>
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca4:	3501      	adds	r5, #1
 8008ca6:	e7c6      	b.n	8008c36 <_printf_common+0x3e>
 8008ca8:	18e1      	adds	r1, r4, r3
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	2030      	movs	r0, #48	; 0x30
 8008cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cb2:	4422      	add	r2, r4
 8008cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	e7c7      	b.n	8008c50 <_printf_common+0x58>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	47c0      	blx	r8
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d0e6      	beq.n	8008c9c <_printf_common+0xa4>
 8008cce:	3601      	adds	r6, #1
 8008cd0:	e7d9      	b.n	8008c86 <_printf_common+0x8e>
	...

08008cd4 <_printf_i>:
 8008cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd8:	7e0f      	ldrb	r7, [r1, #24]
 8008cda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cdc:	2f78      	cmp	r7, #120	; 0x78
 8008cde:	4691      	mov	r9, r2
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	469a      	mov	sl, r3
 8008ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cea:	d807      	bhi.n	8008cfc <_printf_i+0x28>
 8008cec:	2f62      	cmp	r7, #98	; 0x62
 8008cee:	d80a      	bhi.n	8008d06 <_printf_i+0x32>
 8008cf0:	2f00      	cmp	r7, #0
 8008cf2:	f000 80d8 	beq.w	8008ea6 <_printf_i+0x1d2>
 8008cf6:	2f58      	cmp	r7, #88	; 0x58
 8008cf8:	f000 80a3 	beq.w	8008e42 <_printf_i+0x16e>
 8008cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d04:	e03a      	b.n	8008d7c <_printf_i+0xa8>
 8008d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d0a:	2b15      	cmp	r3, #21
 8008d0c:	d8f6      	bhi.n	8008cfc <_printf_i+0x28>
 8008d0e:	a101      	add	r1, pc, #4	; (adr r1, 8008d14 <_printf_i+0x40>)
 8008d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d81 	.word	0x08008d81
 8008d1c:	08008cfd 	.word	0x08008cfd
 8008d20:	08008cfd 	.word	0x08008cfd
 8008d24:	08008cfd 	.word	0x08008cfd
 8008d28:	08008cfd 	.word	0x08008cfd
 8008d2c:	08008d81 	.word	0x08008d81
 8008d30:	08008cfd 	.word	0x08008cfd
 8008d34:	08008cfd 	.word	0x08008cfd
 8008d38:	08008cfd 	.word	0x08008cfd
 8008d3c:	08008cfd 	.word	0x08008cfd
 8008d40:	08008e8d 	.word	0x08008e8d
 8008d44:	08008db1 	.word	0x08008db1
 8008d48:	08008e6f 	.word	0x08008e6f
 8008d4c:	08008cfd 	.word	0x08008cfd
 8008d50:	08008cfd 	.word	0x08008cfd
 8008d54:	08008eaf 	.word	0x08008eaf
 8008d58:	08008cfd 	.word	0x08008cfd
 8008d5c:	08008db1 	.word	0x08008db1
 8008d60:	08008cfd 	.word	0x08008cfd
 8008d64:	08008cfd 	.word	0x08008cfd
 8008d68:	08008e77 	.word	0x08008e77
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	1d1a      	adds	r2, r3, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	602a      	str	r2, [r5, #0]
 8008d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0a3      	b.n	8008ec8 <_printf_i+0x1f4>
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	6829      	ldr	r1, [r5, #0]
 8008d84:	0606      	lsls	r6, r0, #24
 8008d86:	f101 0304 	add.w	r3, r1, #4
 8008d8a:	d50a      	bpl.n	8008da2 <_printf_i+0xce>
 8008d8c:	680e      	ldr	r6, [r1, #0]
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	da03      	bge.n	8008d9c <_printf_i+0xc8>
 8008d94:	232d      	movs	r3, #45	; 0x2d
 8008d96:	4276      	negs	r6, r6
 8008d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9c:	485e      	ldr	r0, [pc, #376]	; (8008f18 <_printf_i+0x244>)
 8008d9e:	230a      	movs	r3, #10
 8008da0:	e019      	b.n	8008dd6 <_printf_i+0x102>
 8008da2:	680e      	ldr	r6, [r1, #0]
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008daa:	bf18      	it	ne
 8008dac:	b236      	sxthne	r6, r6
 8008dae:	e7ef      	b.n	8008d90 <_printf_i+0xbc>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	6029      	str	r1, [r5, #0]
 8008db8:	0601      	lsls	r1, r0, #24
 8008dba:	d501      	bpl.n	8008dc0 <_printf_i+0xec>
 8008dbc:	681e      	ldr	r6, [r3, #0]
 8008dbe:	e002      	b.n	8008dc6 <_printf_i+0xf2>
 8008dc0:	0646      	lsls	r6, r0, #25
 8008dc2:	d5fb      	bpl.n	8008dbc <_printf_i+0xe8>
 8008dc4:	881e      	ldrh	r6, [r3, #0]
 8008dc6:	4854      	ldr	r0, [pc, #336]	; (8008f18 <_printf_i+0x244>)
 8008dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dca:	bf0c      	ite	eq
 8008dcc:	2308      	moveq	r3, #8
 8008dce:	230a      	movne	r3, #10
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dd6:	6865      	ldr	r5, [r4, #4]
 8008dd8:	60a5      	str	r5, [r4, #8]
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	bfa2      	ittt	ge
 8008dde:	6821      	ldrge	r1, [r4, #0]
 8008de0:	f021 0104 	bicge.w	r1, r1, #4
 8008de4:	6021      	strge	r1, [r4, #0]
 8008de6:	b90e      	cbnz	r6, 8008dec <_printf_i+0x118>
 8008de8:	2d00      	cmp	r5, #0
 8008dea:	d04d      	beq.n	8008e88 <_printf_i+0x1b4>
 8008dec:	4615      	mov	r5, r2
 8008dee:	fbb6 f1f3 	udiv	r1, r6, r3
 8008df2:	fb03 6711 	mls	r7, r3, r1, r6
 8008df6:	5dc7      	ldrb	r7, [r0, r7]
 8008df8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dfc:	4637      	mov	r7, r6
 8008dfe:	42bb      	cmp	r3, r7
 8008e00:	460e      	mov	r6, r1
 8008e02:	d9f4      	bls.n	8008dee <_printf_i+0x11a>
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d10b      	bne.n	8008e20 <_printf_i+0x14c>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	07de      	lsls	r6, r3, #31
 8008e0c:	d508      	bpl.n	8008e20 <_printf_i+0x14c>
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	6861      	ldr	r1, [r4, #4]
 8008e12:	4299      	cmp	r1, r3
 8008e14:	bfde      	ittt	le
 8008e16:	2330      	movle	r3, #48	; 0x30
 8008e18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e20:	1b52      	subs	r2, r2, r5
 8008e22:	6122      	str	r2, [r4, #16]
 8008e24:	f8cd a000 	str.w	sl, [sp]
 8008e28:	464b      	mov	r3, r9
 8008e2a:	aa03      	add	r2, sp, #12
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4640      	mov	r0, r8
 8008e30:	f7ff fee2 	bl	8008bf8 <_printf_common>
 8008e34:	3001      	adds	r0, #1
 8008e36:	d14c      	bne.n	8008ed2 <_printf_i+0x1fe>
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	b004      	add	sp, #16
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	4835      	ldr	r0, [pc, #212]	; (8008f18 <_printf_i+0x244>)
 8008e44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e48:	6829      	ldr	r1, [r5, #0]
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e50:	6029      	str	r1, [r5, #0]
 8008e52:	061d      	lsls	r5, r3, #24
 8008e54:	d514      	bpl.n	8008e80 <_printf_i+0x1ac>
 8008e56:	07df      	lsls	r7, r3, #31
 8008e58:	bf44      	itt	mi
 8008e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e5e:	6023      	strmi	r3, [r4, #0]
 8008e60:	b91e      	cbnz	r6, 8008e6a <_printf_i+0x196>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	f023 0320 	bic.w	r3, r3, #32
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	2310      	movs	r3, #16
 8008e6c:	e7b0      	b.n	8008dd0 <_printf_i+0xfc>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	f043 0320 	orr.w	r3, r3, #32
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	2378      	movs	r3, #120	; 0x78
 8008e78:	4828      	ldr	r0, [pc, #160]	; (8008f1c <_printf_i+0x248>)
 8008e7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e7e:	e7e3      	b.n	8008e48 <_printf_i+0x174>
 8008e80:	0659      	lsls	r1, r3, #25
 8008e82:	bf48      	it	mi
 8008e84:	b2b6      	uxthmi	r6, r6
 8008e86:	e7e6      	b.n	8008e56 <_printf_i+0x182>
 8008e88:	4615      	mov	r5, r2
 8008e8a:	e7bb      	b.n	8008e04 <_printf_i+0x130>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	6826      	ldr	r6, [r4, #0]
 8008e90:	6961      	ldr	r1, [r4, #20]
 8008e92:	1d18      	adds	r0, r3, #4
 8008e94:	6028      	str	r0, [r5, #0]
 8008e96:	0635      	lsls	r5, r6, #24
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	d501      	bpl.n	8008ea0 <_printf_i+0x1cc>
 8008e9c:	6019      	str	r1, [r3, #0]
 8008e9e:	e002      	b.n	8008ea6 <_printf_i+0x1d2>
 8008ea0:	0670      	lsls	r0, r6, #25
 8008ea2:	d5fb      	bpl.n	8008e9c <_printf_i+0x1c8>
 8008ea4:	8019      	strh	r1, [r3, #0]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	4615      	mov	r5, r2
 8008eac:	e7ba      	b.n	8008e24 <_printf_i+0x150>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	1d1a      	adds	r2, r3, #4
 8008eb2:	602a      	str	r2, [r5, #0]
 8008eb4:	681d      	ldr	r5, [r3, #0]
 8008eb6:	6862      	ldr	r2, [r4, #4]
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7f7 f9a8 	bl	8000210 <memchr>
 8008ec0:	b108      	cbz	r0, 8008ec6 <_printf_i+0x1f2>
 8008ec2:	1b40      	subs	r0, r0, r5
 8008ec4:	6060      	str	r0, [r4, #4]
 8008ec6:	6863      	ldr	r3, [r4, #4]
 8008ec8:	6123      	str	r3, [r4, #16]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed0:	e7a8      	b.n	8008e24 <_printf_i+0x150>
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	47d0      	blx	sl
 8008edc:	3001      	adds	r0, #1
 8008ede:	d0ab      	beq.n	8008e38 <_printf_i+0x164>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	079b      	lsls	r3, r3, #30
 8008ee4:	d413      	bmi.n	8008f0e <_printf_i+0x23a>
 8008ee6:	68e0      	ldr	r0, [r4, #12]
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	4298      	cmp	r0, r3
 8008eec:	bfb8      	it	lt
 8008eee:	4618      	movlt	r0, r3
 8008ef0:	e7a4      	b.n	8008e3c <_printf_i+0x168>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	47d0      	blx	sl
 8008efc:	3001      	adds	r0, #1
 8008efe:	d09b      	beq.n	8008e38 <_printf_i+0x164>
 8008f00:	3501      	adds	r5, #1
 8008f02:	68e3      	ldr	r3, [r4, #12]
 8008f04:	9903      	ldr	r1, [sp, #12]
 8008f06:	1a5b      	subs	r3, r3, r1
 8008f08:	42ab      	cmp	r3, r5
 8008f0a:	dcf2      	bgt.n	8008ef2 <_printf_i+0x21e>
 8008f0c:	e7eb      	b.n	8008ee6 <_printf_i+0x212>
 8008f0e:	2500      	movs	r5, #0
 8008f10:	f104 0619 	add.w	r6, r4, #25
 8008f14:	e7f5      	b.n	8008f02 <_printf_i+0x22e>
 8008f16:	bf00      	nop
 8008f18:	0800927d 	.word	0x0800927d
 8008f1c:	0800928e 	.word	0x0800928e

08008f20 <_sbrk_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d06      	ldr	r5, [pc, #24]	; (8008f3c <_sbrk_r+0x1c>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7f8 f860 	bl	8000ff0 <_sbrk>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_sbrk_r+0x1a>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_sbrk_r+0x1a>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20003448 	.word	0x20003448

08008f40 <__sread>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	460c      	mov	r4, r1
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	f000 f8d0 	bl	80090ec <_read_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	bfab      	itete	ge
 8008f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f52:	89a3      	ldrhlt	r3, [r4, #12]
 8008f54:	181b      	addge	r3, r3, r0
 8008f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f5a:	bfac      	ite	ge
 8008f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f5e:	81a3      	strhlt	r3, [r4, #12]
 8008f60:	bd10      	pop	{r4, pc}

08008f62 <__swrite>:
 8008f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f66:	461f      	mov	r7, r3
 8008f68:	898b      	ldrh	r3, [r1, #12]
 8008f6a:	05db      	lsls	r3, r3, #23
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	4616      	mov	r6, r2
 8008f72:	d505      	bpl.n	8008f80 <__swrite+0x1e>
 8008f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f78:	2302      	movs	r3, #2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f000 f868 	bl	8009050 <_lseek_r>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	4632      	mov	r2, r6
 8008f8e:	463b      	mov	r3, r7
 8008f90:	4628      	mov	r0, r5
 8008f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f96:	f000 b817 	b.w	8008fc8 <_write_r>

08008f9a <__sseek>:
 8008f9a:	b510      	push	{r4, lr}
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa2:	f000 f855 	bl	8009050 <_lseek_r>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	bf15      	itete	ne
 8008fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fb6:	81a3      	strheq	r3, [r4, #12]
 8008fb8:	bf18      	it	ne
 8008fba:	81a3      	strhne	r3, [r4, #12]
 8008fbc:	bd10      	pop	{r4, pc}

08008fbe <__sclose>:
 8008fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc2:	f000 b813 	b.w	8008fec <_close_r>
	...

08008fc8 <_write_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d07      	ldr	r5, [pc, #28]	; (8008fe8 <_write_r+0x20>)
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f7 fdaa 	bl	8000b30 <_write>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_write_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_write_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20003448 	.word	0x20003448

08008fec <_close_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4d06      	ldr	r5, [pc, #24]	; (8009008 <_close_r+0x1c>)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	602b      	str	r3, [r5, #0]
 8008ff8:	f7f7 fdc6 	bl	8000b88 <_close>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_close_r+0x1a>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	b103      	cbz	r3, 8009006 <_close_r+0x1a>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	20003448 	.word	0x20003448

0800900c <_fstat_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	; (800902c <_fstat_r+0x20>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	f7f7 fe0b 	bl	8000c34 <_fstat>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d102      	bne.n	8009028 <_fstat_r+0x1c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b103      	cbz	r3, 8009028 <_fstat_r+0x1c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	20003448 	.word	0x20003448

08009030 <_isatty_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	; (800904c <_isatty_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f7 fd60 	bl	8000b00 <_isatty>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_isatty_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_isatty_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	20003448 	.word	0x20003448

08009050 <_lseek_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d07      	ldr	r5, [pc, #28]	; (8009070 <_lseek_r+0x20>)
 8009054:	4604      	mov	r4, r0
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	2200      	movs	r2, #0
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	f7f7 fdac 	bl	8000bbc <_lseek>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_lseek_r+0x1e>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_lseek_r+0x1e>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20003448 	.word	0x20003448

08009074 <__malloc_lock>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__malloc_lock+0x8>)
 8009076:	f7ff bb13 	b.w	80086a0 <__retarget_lock_acquire_recursive>
 800907a:	bf00      	nop
 800907c:	2000352c 	.word	0x2000352c

08009080 <__malloc_unlock>:
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <__malloc_unlock+0x8>)
 8009082:	f7ff bb0e 	b.w	80086a2 <__retarget_lock_release_recursive>
 8009086:	bf00      	nop
 8009088:	2000352c 	.word	0x2000352c

0800908c <_realloc_r>:
 800908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009090:	4680      	mov	r8, r0
 8009092:	4614      	mov	r4, r2
 8009094:	460e      	mov	r6, r1
 8009096:	b921      	cbnz	r1, 80090a2 <_realloc_r+0x16>
 8009098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909c:	4611      	mov	r1, r2
 800909e:	f7ff bbdb 	b.w	8008858 <_malloc_r>
 80090a2:	b92a      	cbnz	r2, 80090b0 <_realloc_r+0x24>
 80090a4:	f7ff fb6c 	bl	8008780 <_free_r>
 80090a8:	4625      	mov	r5, r4
 80090aa:	4628      	mov	r0, r5
 80090ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b0:	f000 f82e 	bl	8009110 <_malloc_usable_size_r>
 80090b4:	4284      	cmp	r4, r0
 80090b6:	4607      	mov	r7, r0
 80090b8:	d802      	bhi.n	80090c0 <_realloc_r+0x34>
 80090ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090be:	d812      	bhi.n	80090e6 <_realloc_r+0x5a>
 80090c0:	4621      	mov	r1, r4
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7ff fbc8 	bl	8008858 <_malloc_r>
 80090c8:	4605      	mov	r5, r0
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0ed      	beq.n	80090aa <_realloc_r+0x1e>
 80090ce:	42bc      	cmp	r4, r7
 80090d0:	4622      	mov	r2, r4
 80090d2:	4631      	mov	r1, r6
 80090d4:	bf28      	it	cs
 80090d6:	463a      	movcs	r2, r7
 80090d8:	f7fe feca 	bl	8007e70 <memcpy>
 80090dc:	4631      	mov	r1, r6
 80090de:	4640      	mov	r0, r8
 80090e0:	f7ff fb4e 	bl	8008780 <_free_r>
 80090e4:	e7e1      	b.n	80090aa <_realloc_r+0x1e>
 80090e6:	4635      	mov	r5, r6
 80090e8:	e7df      	b.n	80090aa <_realloc_r+0x1e>
	...

080090ec <_read_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_read_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f7 fd72 	bl	8000be4 <_read>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_read_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_read_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20003448 	.word	0x20003448

08009110 <_malloc_usable_size_r>:
 8009110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009114:	1f18      	subs	r0, r3, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfbc      	itt	lt
 800911a:	580b      	ldrlt	r3, [r1, r0]
 800911c:	18c0      	addlt	r0, r0, r3
 800911e:	4770      	bx	lr

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
