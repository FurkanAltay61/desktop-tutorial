
BlinkyButton_AO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066bc  080066bc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c4  080066c4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004670  20000078  08006744  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046e8  08006744  000246e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cec1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2c  00000000  00000000  0003cf69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00040b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00042090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b17d  00000000  00000000  00043400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a65e  00000000  00000000  0006e57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001064e8  00000000  00000000  00088bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f0c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd4  00000000  00000000  0018f114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065b8 	.word	0x080065b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080065b8 	.word	0x080065b8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Active_ctor>:
#include "uc_ao.h" /* uC/AO interface */

static char const this_module[] = "uc_ao"; /* this module name for Q_ASSERT() */

/*..........................................................................*/
void Active_ctor(Active * const me, DispatchHandler dispatch) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    me->dispatch = dispatch; /* attach the dispatch handler for the "me" AO */
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	609a      	str	r2, [r3, #8]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <Active_eventLoop>:

/*..........................................................................*/
/* Thread function for all Active Objects (uC/OS-II task signature) */
static void Active_eventLoop(void *pdata) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    Active *me = (Active *)pdata; /* the AO instance "me" */
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	60fb      	str	r3, [r7, #12]

    /* initialize the AO */
    static Event const initEvt = { INIT_SIG };
    (*me->dispatch)(me, &initEvt);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	490a      	ldr	r1, [pc, #40]	; (800056c <Active_eventLoop+0x3c>)
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	4798      	blx	r3
    /* event loop ("message pump") */
    while (1) {
        Event *e; /* pointer to event object ("message") */

        /*new*/
        if(xQueueReceive(me->queue,(void *)&e,(TickType_t)10) == pdPASS){
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	f107 0108 	add.w	r1, r7, #8
 800054e:	220a      	movs	r2, #10
 8000550:	4618      	mov	r0, r3
 8000552:	f003 fccb 	bl	8003eec <xQueueReceive>
 8000556:	4603      	mov	r3, r0
 8000558:	2b01      	cmp	r3, #1
 800055a:	d1f4      	bne.n	8000546 <Active_eventLoop+0x16>
			/* dispatch event to the active object 'me' */
			(*me->dispatch)(me, e); /* NO BLOCKING! */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	4611      	mov	r1, r2
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	4798      	blx	r3
    while (1) {
 8000568:	e7ed      	b.n	8000546 <Active_eventLoop+0x16>
 800056a:	bf00      	nop
 800056c:	08006634 	.word	0x08006634

08000570 <Active_start>:
				  UBaseType_t uxPriority,
				  StackType_t * const puxStackBuffer,
				  StaticTask_t * const pxTaskBuffer,
				  Event **queueSto,
				  const UBaseType_t uxQueueLength)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af04      	add	r7, sp, #16
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]

    /* precondition */
    Q_ASSERT(me /* AO instance must be provided (cannot be NULL) */
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d005      	beq.n	8000590 <Active_start+0x20>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <Active_start+0x20>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0c      	cmp	r3, #12
 800058e:	d903      	bls.n	8000598 <Active_start+0x28>
 8000590:	213e      	movs	r1, #62	; 0x3e
 8000592:	4816      	ldr	r0, [pc, #88]	; (80005ec <Active_start+0x7c>)
 8000594:	f000 fab2 	bl	8000afc <Q_onAssert>
             && (0 < uxPriority) && (uxPriority < configLIBRARY_LOWEST_INTERRUPT_PRIORITY - 2U));

    me->queue = xQueueCreate(uxQueueLength,sizeof((void**)queueSto));
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	6a38      	ldr	r0, [r7, #32]
 800059e:	f003 fb9f 	bl	8003ce0 <xQueueGenericCreate>
 80005a2:	4602      	mov	r2, r0
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	605a      	str	r2, [r3, #4]
    Q_ASSERT(me->queue); /* queue must be created */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d103      	bne.n	80005b8 <Active_start+0x48>
 80005b0:	2142      	movs	r1, #66	; 0x42
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <Active_start+0x7c>)
 80005b4:	f000 faa2 	bl	8000afc <Q_onAssert>

    me->thread = configLIBRARY_LOWEST_INTERRUPT_PRIORITY - 2U - uxPriority; /* uC/OS-II priority */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f1c3 030d 	rsb	r3, r3, #13
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	701a      	strb	r2, [r3, #0]

   xTaskCreateStatic(Active_eventLoop,"x", ulStackDepth,(void *)me, me->thread, puxStackBuffer, pxTaskBuffer);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <Active_start+0x80>)
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <Active_start+0x84>)
 80005de:	f003 fe63 	bl	80042a8 <xTaskCreateStatic>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	0800662c 	.word	0x0800662c
 80005f0:	080065d0 	.word	0x080065d0
 80005f4:	08000531 	.word	0x08000531

080005f8 <Active_post>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	BaseType_t xQueueWoken = pdFALSE;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(me->queue, (void *)&e,&xQueueWoken);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6858      	ldr	r0, [r3, #4]
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	4639      	mov	r1, r7
 8000610:	2300      	movs	r3, #0
 8000612:	f003 fbca 	bl	8003daa <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xQueueWoken);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d007      	beq.n	800062c <Active_post+0x34>
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Active_post+0x3c>)
 800061e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	e000ed04 	.word	0xe000ed04

08000638 <TimeEvent_ctor>:

static TimeEvent *l_tevt[10]; /* all TimeEvents in the application */
static uint_fast8_t l_tevtNum; /* current number of TimeEvents */

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	460b      	mov	r3, r1
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	817b      	strh	r3, [r7, #10]
#endif

    /* no critical section because it is presumed that all TimeEvents
    * are created *before* multitasking has started.
    */
    me->super.sig = sig;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	897a      	ldrh	r2, [r7, #10]
 800064a:	801a      	strh	r2, [r3, #0]
    me->act = act;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	605a      	str	r2, [r3, #4]
    me->timeout = 0U;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
    me->interval = 0U;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]

    /* register one more TimeEvent instance */
    taskENTER_CRITICAL();
 800065e:	f004 fead 	bl	80053bc <vPortEnterCritical>
    Q_ASSERT(l_tevtNum < sizeof(l_tevt)/sizeof(l_tevt[0]));
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <TimeEvent_ctor+0x5c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b09      	cmp	r3, #9
 8000668:	d903      	bls.n	8000672 <TimeEvent_ctor+0x3a>
 800066a:	2166      	movs	r1, #102	; 0x66
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <TimeEvent_ctor+0x60>)
 800066e:	f000 fa45 	bl	8000afc <Q_onAssert>
    l_tevt[l_tevtNum] = me;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <TimeEvent_ctor+0x5c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <TimeEvent_ctor+0x64>)
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ++l_tevtNum;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <TimeEvent_ctor+0x5c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <TimeEvent_ctor+0x5c>)
 8000686:	6013      	str	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8000688:	f004 fecc 	bl	8005424 <vPortExitCritical>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000bc 	.word	0x200000bc
 8000698:	0800662c 	.word	0x0800662c
 800069c:	20000094 	.word	0x20000094

080006a0 <TimeEvent_arm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t timeout, uint32_t interval) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
    taskENTER_CRITICAL();
 80006ac:	f004 fe86 	bl	80053bc <vPortEnterCritical>
    me->timeout = timeout;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	609a      	str	r2, [r3, #8]
    me->interval = interval;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
    taskEXIT_CRITICAL();
 80006bc:	f004 feb2 	bl	8005424 <vPortExitCritical>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <TimeEvent_tick>:
    me->timeout = 0U;
    taskEXIT_CRITICAL();
}

/*..........................................................................*/
void TimeEvent_tick(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
    uint_fast8_t i;
    for (i = 0U; i < l_tevtNum; ++i) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e026      	b.n	8000722 <TimeEvent_tick+0x5a>
        TimeEvent * const t = l_tevt[i];
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <TimeEvent_tick+0x70>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006dc:	603b      	str	r3, [r7, #0]
        Q_ASSERT(t); /* TimeEvent instance must be registered */
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d103      	bne.n	80006ec <TimeEvent_tick+0x24>
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4815      	ldr	r0, [pc, #84]	; (800073c <TimeEvent_tick+0x74>)
 80006e8:	f000 fa08 	bl	8000afc <Q_onAssert>
        if (t->timeout > 0U) { /* is this TimeEvent armed? */
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d013      	beq.n	800071c <TimeEvent_tick+0x54>
            if (--t->timeout == 0U) { /* is it expiring now? */
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10a      	bne.n	800071c <TimeEvent_tick+0x54>
                Active_post(t->act, &t->super);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff72 	bl	80005f8 <Active_post>
                t->timeout = t->interval; /* rearm or disarm (one-shot) */
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	609a      	str	r2, [r3, #8]
    for (i = 0U; i < l_tevtNum; ++i) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <TimeEvent_tick+0x78>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3d3      	bcc.n	80006d4 <TimeEvent_tick+0xc>
           }
        }
    }
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094
 800073c:	0800662c 	.word	0x0800662c
 8000740:	200000bc 	.word	0x200000bc

08000744 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <vApplicationGetIdleTaskMemory+0x2c>)
 8000780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200000c0 	.word	0x200000c0
 80007a0:	20000180 	.word	0x20000180

080007a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a8:	f3bf 8f4f 	dsb	sy
}
 80007ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <__NVIC_SystemReset+0x24>)
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007b6:	4904      	ldr	r1, [pc, #16]	; (80007c8 <__NVIC_SystemReset+0x24>)
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_SystemReset+0x28>)
 80007ba:	4313      	orrs	r3, r2
 80007bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007be:	f3bf 8f4f 	dsb	sy
}
 80007c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <__NVIC_SystemReset+0x20>
 80007c8:	e000ed00 	.word	0xe000ed00
 80007cc:	05fa0004 	.word	0x05fa0004

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fbfa 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f83b 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 f8d7 	bl	8000990 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007e2:	f000 f8a5 	bl	8000930 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80007e6:	4813      	ldr	r0, [pc, #76]	; (8000834 <main+0x64>)
 80007e8:	f000 f9ca 	bl	8000b80 <RetargetInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <main+0x68>)
 80007ee:	1d3c      	adds	r4, r7, #4
 80007f0:	461d      	mov	r5, r3
 80007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 f8ee 	bl	80039e4 <osThreadCreate>
 8000808:	4603      	mov	r3, r0
 800080a:	4a0c      	ldr	r2, [pc, #48]	; (800083c <main+0x6c>)
 800080c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  BlinkyButton_ctor(&blinkybutton);
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <main+0x70>)
 8000810:	f005 f8ea 	bl	80059e8 <BlinkyButton_ctor>
  Active_start(AO_BlinkyButton,
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <main+0x74>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	230a      	movs	r3, #10
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <main+0x78>)
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <main+0x7c>)
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <main+0x80>)
 8000826:	2201      	movs	r2, #1
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	f7ff fea1 	bl	8000570 <Active_start>
			  BlinkyButton_queue,
			  sizeof(BlinkyButton_queue)/sizeof(BlinkyButton_queue[0]));
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800082e:	f003 f8d2 	bl	80039d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000832:	e7fe      	b.n	8000832 <main+0x62>
 8000834:	2000089c 	.word	0x2000089c
 8000838:	080065e0 	.word	0x080065e0
 800083c:	20000920 	.word	0x20000920
 8000840:	20000878 	.word	0x20000878
 8000844:	20000000 	.word	0x20000000
 8000848:	20000850 	.word	0x20000850
 800084c:	20000790 	.word	0x20000790
 8000850:	20000380 	.word	0x20000380

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fae7 	bl	8005e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000878:	f000 feba 	bl	80015f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <SystemClock_Config+0xd4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a29      	ldr	r2, [pc, #164]	; (8000928 <SystemClock_Config+0xd4>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <SystemClock_Config+0xd4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <SystemClock_Config+0xd8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a24      	ldr	r2, [pc, #144]	; (800092c <SystemClock_Config+0xd8>)
 800089a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <SystemClock_Config+0xd8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008c4:	23d8      	movs	r3, #216	; 0xd8
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008cc:	2309      	movs	r3, #9
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 feeb 	bl	80016b0 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008e0:	f000 f948 	bl	8000b74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e4:	f000 fe94 	bl	8001610 <HAL_PWREx_EnableOverDrive>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ee:	f000 f941 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2302      	movs	r3, #2
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2107      	movs	r1, #7
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f971 	bl	8001bf8 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800091c:	f000 f92a 	bl	8000b74 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3750      	adds	r7, #80	; 0x50
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000974:	f002 fa68 	bl	8002e48 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f8f9 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000089c 	.word	0x2000089c
 800098c:	40004800 	.word	0x40004800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b51      	ldr	r3, [pc, #324]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a50      	ldr	r2, [pc, #320]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b48      	ldr	r3, [pc, #288]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_GPIO_Init+0x15c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a38      	ldr	r2, [pc, #224]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a32      	ldr	r2, [pc, #200]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a3c:	482c      	ldr	r0, [pc, #176]	; (8000af0 <MX_GPIO_Init+0x160>)
 8000a3e:	f000 fd99 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	482b      	ldr	r0, [pc, #172]	; (8000af4 <MX_GPIO_Init+0x164>)
 8000a48:	f000 fd94 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a52:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4825      	ldr	r0, [pc, #148]	; (8000af8 <MX_GPIO_Init+0x168>)
 8000a64:	f000 fbc2 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a68:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <MX_GPIO_Init+0x160>)
 8000a82:	f000 fbb3 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4815      	ldr	r0, [pc, #84]	; (8000af4 <MX_GPIO_Init+0x164>)
 8000a9e:	f000 fba5 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480f      	ldr	r0, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x164>)
 8000ab6:	f000 fb99 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 8000aba:	2330      	movs	r3, #48	; 0x30
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_GPIO_Init+0x160>)
 8000ace:	f000 fb8d 	bl	80011ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	2028      	movs	r0, #40	; 0x28
 8000ad8:	f000 fb5e 	bl	8001198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000adc:	2028      	movs	r0, #40	; 0x28
 8000ade:	f000 fb77 	bl	80011d0 <HAL_NVIC_EnableIRQ>

}
 8000ae2:	bf00      	nop
 8000ae4:	3730      	adds	r7, #48	; 0x30
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40020800 	.word	0x40020800

08000afc <Q_onAssert>:

/* USER CODE BEGIN 4 */

void Q_onAssert(char const *module, int loc) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000b06:	f7ff fe4d 	bl	80007a4 <__NVIC_SystemReset>

08000b0a <vApplicationStackOverflowHook>:
}


void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName ){
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	__NOP();
 8000b14:	bf00      	nop
	Error_Handler();
 8000b16:	f000 f82d 	bl	8000b74 <Error_Handler>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <vApplicationTickHook>:


void vApplicationTickHook( void ){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
	App_TimeTickHook();
 8000b26:	f004 ffdb 	bl	8005ae0 <App_TimeTickHook>
	__NOP();
 8000b2a:	bf00      	nop
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook( void ){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	__NOP();
 8000b34:	bf00      	nop
	Error_Handler();
 8000b36:	f000 f81d 	bl	8000b74 <Error_Handler>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f002 ff98 	bl	8003a7c <osDelay>
 8000b4c:	e7fb      	b.n	8000b46 <StartDefaultTask+0x8>
	...

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fa41 	bl	8000fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <RetargetInit+0x28>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <RetargetInit+0x2c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6898      	ldr	r0, [r3, #8]
 8000b94:	2300      	movs	r3, #0
 8000b96:	2202      	movs	r2, #2
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f005 fa63 	bl	8006064 <setvbuf>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000924 	.word	0x20000924
 8000bac:	20000014 	.word	0x20000014

08000bb0 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d002      	beq.n	8000bc8 <_write+0x18>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d111      	bne.n	8000bec <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <_write+0x54>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	f002 f985 	bl	8002ee4 <HAL_UART_Transmit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <_write+0x38>
      return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	e008      	b.n	8000bfa <_write+0x4a>
    else
      return EIO;
 8000be8:	2305      	movs	r3, #5
 8000bea:	e006      	b.n	8000bfa <_write+0x4a>
  }
  errno = EBADF;
 8000bec:	f004 fff2 	bl	8005bd4 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2209      	movs	r2, #9
 8000bf4:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000924 	.word	0x20000924

08000c08 <_close>:

int _close(int fd) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db04      	blt.n	8000c20 <_close+0x18>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dc01      	bgt.n	8000c20 <_close+0x18>
    return 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e006      	b.n	8000c2e <_close+0x26>

  errno = EBADF;
 8000c20:	f004 ffd8 	bl	8005bd4 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2209      	movs	r2, #9
 8000c28:	601a      	str	r2, [r3, #0]
  return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c42:	f004 ffc7 	bl	8005bd4 <__errno>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2209      	movs	r2, #9
 8000c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d110      	bne.n	8000c8c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <_read+0x4c>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	2201      	movs	r2, #1
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	f002 f9c8 	bl	800300a <HAL_UART_Receive>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <_read+0x30>
      return 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e008      	b.n	8000c9a <_read+0x42>
    else
      return EIO;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	e006      	b.n	8000c9a <_read+0x42>
  }
  errno = EBADF;
 8000c8c:	f004 ffa2 	bl	8005bd4 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2209      	movs	r2, #9
 8000c94:	601a      	str	r2, [r3, #0]
  return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000924 	.word	0x20000924

08000ca8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db08      	blt.n	8000cca <_fstat+0x22>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	dc05      	bgt.n	8000cca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc4:	605a      	str	r2, [r3, #4]
    return 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e005      	b.n	8000cd6 <_fstat+0x2e>
  }

  errno = EBADF;
 8000cca:	f004 ff83 	bl	8005bd4 <__errno>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2209      	movs	r2, #9
 8000cd2:	601a      	str	r2, [r3, #0]
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fa3b 	bl	8001198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0aa      	sub	sp, #168	; 0xa8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2284      	movs	r2, #132	; 0x84
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 f870 	bl	8005e36 <memset>
  if(huart->Instance==USART3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13c      	bne.n	8000dda <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 f99a 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff fefb 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0xbc>)
 8000dd6:	f000 fa09 	bl	80011ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	37a8      	adds	r7, #168	; 0xa8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	2019      	movs	r0, #25
 8000e06:	f000 f9c7 	bl	8001198 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f000 f9e0 	bl	80011d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_InitTick+0x9c>)
 8000e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_InitTick+0x9c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_InitTick+0x9c>)
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e28:	f107 0210 	add.w	r2, r7, #16
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f906 	bl	8002044 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e38:	f001 f8f0 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8000e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e40:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <HAL_InitTick+0xa0>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	0c9b      	lsrs	r3, r3, #18
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <HAL_InitTick+0xa8>)
 8000e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e6e:	f001 fd0b 	bl	8002888 <HAL_TIM_Base_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <HAL_InitTick+0xa4>)
 8000e7a:	f001 fd67 	bl	800294c <HAL_TIM_Base_Start_IT>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3730      	adds	r7, #48	; 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	20000928 	.word	0x20000928
 8000e98:	40010000 	.word	0x40010000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ece:	f001 fdb5 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000928 	.word	0x20000928

08000edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ee4:	f000 fb60 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f004 fe5a 	bl	8005bd4 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20050000 	.word	0x20050000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	20000974 	.word	0x20000974
 8000f54:	200046e8 	.word	0x200046e8

08000f58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x12>
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1a>)
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1e>)
 8000f86:	2300      	movs	r3, #0
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:
 8000f8a:	58d4      	ldr	r4, [r2, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:
 8000f90:	18c4      	adds	r4, r0, r3
 8000f92:	428c      	cmp	r4, r1
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x22>)
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x26>)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:
 8000fa2:	42a2      	cmp	r2, r4
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
 8000faa:	f004 ff0f 	bl	8005dcc <__libc_init_array>
 8000fae:	f7ff fc0f 	bl	80007d0 <main>
 8000fb2:	4770      	bx	lr
 8000fb4:	20050000 	.word	0x20050000
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000078 	.word	0x20000078
 8000fc0:	080066cc 	.word	0x080066cc
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	200046e8 	.word	0x200046e8

08000fcc <ADC_IRQHandler>:
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f8d5 	bl	8001182 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd8:	200f      	movs	r0, #15
 8000fda:	f7ff ff09 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fde:	f7ff fe7f 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000978 	.word	0x20000978

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000978 	.word	0x20000978

08001028 <__NVIC_SetPriorityGrouping>:
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	4313      	orrs	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	05fa0000 	.word	0x05fa0000

08001070 <__NVIC_GetPriorityGrouping>:
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff4c 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011aa:	f7ff ff61 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	6978      	ldr	r0, [r7, #20]
 80011b6:	f7ff ffb1 	bl	800111c <NVIC_EncodePriority>
 80011ba:	4602      	mov	r2, r0
 80011bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff80 	bl	80010c8 <__NVIC_SetPriority>
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff54 	bl	800108c <__NVIC_EnableIRQ>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e175      	b.n	80014f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8164 	bne.w	80014f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d005      	beq.n	8001242 <HAL_GPIO_Init+0x56>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d130      	bne.n	80012a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0201 	and.w	r2, r3, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d017      	beq.n	80012e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d123      	bne.n	8001334 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80be 	beq.w	80014f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_GPIO_Init+0x324>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800138e:	4a61      	ldr	r2, [pc, #388]	; (8001514 <HAL_GPIO_Init+0x328>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d037      	beq.n	800142a <HAL_GPIO_Init+0x23e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d031      	beq.n	8001426 <HAL_GPIO_Init+0x23a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x334>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x236>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_GPIO_Init+0x338>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x232>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x33c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x22e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <HAL_GPIO_Init+0x340>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x22a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x344>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x348>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a50      	ldr	r2, [pc, #320]	; (8001538 <HAL_GPIO_Init+0x34c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_GPIO_Init+0x350>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x21a>
 8001402:	2309      	movs	r3, #9
 8001404:	e012      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001406:	230a      	movs	r3, #10
 8001408:	e010      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140a:	2308      	movs	r3, #8
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140e:	2307      	movs	r3, #7
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x240>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x328>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_GPIO_Init+0x354>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_GPIO_Init+0x354>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_GPIO_Init+0x354>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_GPIO_Init+0x354>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae86 	bls.w	800120c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40021400 	.word	0x40021400
 8001530:	40021800 	.word	0x40021800
 8001534:	40021c00 	.word	0x40021c00
 8001538:	40022000 	.word	0x40022000
 800153c:	40022400 	.word	0x40022400
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f806 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40007000 	.word	0x40007000

08001610 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163e:	f7ff fce7 	bl	8001010 <HAL_GetTick>
 8001642:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001644:	e009      	b.n	800165a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001646:	f7ff fce3 	bl	8001010 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001654:	d901      	bls.n	800165a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e022      	b.n	80016a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d1ee      	bne.n	8001646 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001672:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff fccc 	bl	8001010 <HAL_GetTick>
 8001678:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800167a:	e009      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800167c:	f7ff fcc8 	bl	8001010 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168a:	d901      	bls.n	8001690 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e007      	b.n	80016a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800169c:	d1ee      	bne.n	800167c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e291      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d4:	4b96      	ldr	r3, [pc, #600]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d00c      	beq.n	80016fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e0:	4b93      	ldr	r3, [pc, #588]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d112      	bne.n	8001712 <HAL_RCC_OscConfig+0x62>
 80016ec:	4b90      	ldr	r3, [pc, #576]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	4b8d      	ldr	r3, [pc, #564]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x130>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d168      	bne.n	80017e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e26b      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x7a>
 800171c:	4b84      	ldr	r3, [pc, #528]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a83      	ldr	r2, [pc, #524]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e02e      	b.n	8001788 <HAL_RCC_OscConfig+0xd8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x9c>
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7e      	ldr	r2, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7b      	ldr	r2, [pc, #492]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xd8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0xc0>
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a75      	ldr	r2, [pc, #468]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a72      	ldr	r2, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xd8>
 8001770:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6b      	ldr	r2, [pc, #428]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fc3e 	bl	8001010 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fc3a 	bl	8001010 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e21f      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xe8>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc2a 	bl	8001010 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fc26 	bl	8001010 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e20b      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b57      	ldr	r3, [pc, #348]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x110>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d069      	beq.n	80018c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x190>
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x17a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1df      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	493d      	ldr	r1, [pc, #244]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e040      	b.n	80018c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a38      	ldr	r2, [pc, #224]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fbdc 	bl	8001010 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff fbd8 	bl	8001010 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e1bd      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4929      	ldr	r1, [pc, #164]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
 800188e:	e018      	b.n	80018c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fbb8 	bl	8001010 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fbb4 	bl	8001010 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e199      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d038      	beq.n	8001940 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d019      	beq.n	800190a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb95 	bl	8001010 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fb91 	bl	8001010 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e176      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 80018fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x23a>
 8001908:	e01a      	b.n	8001940 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 800190c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_RCC_OscConfig+0x280>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fb7b 	bl	8001010 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff fb77 	bl	8001010 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d903      	bls.n	8001934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e15c      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
 8001930:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	4b91      	ldr	r3, [pc, #580]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ee      	bne.n	800191e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a4 	beq.w	8001a96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b85      	ldr	r3, [pc, #532]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	4b82      	ldr	r3, [pc, #520]	; (8001b80 <HAL_RCC_OscConfig+0x4d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x4d0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7e      	ldr	r2, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff fb3f 	bl	8001010 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff fb3b 	bl	8001010 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e120      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4d0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x31a>
 80019bc:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a6e      	ldr	r2, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x376>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x33c>
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a69      	ldr	r2, [pc, #420]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a66      	ldr	r2, [pc, #408]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x376>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x35e>
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a60      	ldr	r2, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x376>
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff faef 	bl	8001010 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff faeb 	bl	8001010 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ce      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x386>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fad9 	bl	8001010 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fad5 	bl	8001010 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a4 	beq.w	8001be8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d06b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d149      	bne.n	8001b48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff faa6 	bl	8001010 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff faa2 	bl	8001010 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e087      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fa76 	bl	8001010 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff fa72 	bl	8001010 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e057      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x478>
 8001b46:	e04f      	b.n	8001be8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fa5c 	bl	8001010 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff fa58 	bl	8001010 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e03d      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_OscConfig+0x4cc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4ac>
 8001b7a:	e035      	b.n	8001be8 <HAL_RCC_OscConfig+0x538>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x544>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d028      	beq.n	8001be4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d121      	bne.n	8001be4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d11a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 020f 	bic.w	r2, r3, #15
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cec:	f7ff f990 	bl	8001010 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff f98c 	bl	8001010 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 020f 	bic.w	r2, r3, #15
 8001d32:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f820 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08006638 	.word	0x08006638
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd4:	b094      	sub	sp, #80	; 0x50
 8001dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	647b      	str	r3, [r7, #68]	; 0x44
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de0:	2300      	movs	r3, #0
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de8:	4b79      	ldr	r3, [pc, #484]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d00d      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	f200 80e1 	bhi.w	8001fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e02:	e0db      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e08:	e0db      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0a:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e0e:	e0d8      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e10:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e26:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e42:	4622      	mov	r2, r4
 8001e44:	462b      	mov	r3, r5
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	0159      	lsls	r1, r3, #5
 8001e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e54:	0150      	lsls	r0, r2, #5
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	1a51      	subs	r1, r2, r1
 8001e5e:	6139      	str	r1, [r7, #16]
 8001e60:	4629      	mov	r1, r5
 8001e62:	eb63 0301 	sbc.w	r3, r3, r1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e74:	4659      	mov	r1, fp
 8001e76:	018b      	lsls	r3, r1, #6
 8001e78:	4651      	mov	r1, sl
 8001e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e7e:	4651      	mov	r1, sl
 8001e80:	018a      	lsls	r2, r1, #6
 8001e82:	4651      	mov	r1, sl
 8001e84:	ebb2 0801 	subs.w	r8, r2, r1
 8001e88:	4659      	mov	r1, fp
 8001e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ea2:	4690      	mov	r8, r2
 8001ea4:	4699      	mov	r9, r3
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	eb18 0303 	adds.w	r3, r8, r3
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	462b      	mov	r3, r5
 8001eb0:	eb49 0303 	adc.w	r3, r9, r3
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	024b      	lsls	r3, r1, #9
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ecc:	4621      	mov	r1, r4
 8001ece:	024a      	lsls	r2, r1, #9
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee0:	f7fe f996 	bl	8000210 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eec:	e058      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	099b      	lsrs	r3, r3, #6
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	4611      	mov	r1, r2
 8001efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f08:	4642      	mov	r2, r8
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	f04f 0000 	mov.w	r0, #0
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	0159      	lsls	r1, r3, #5
 8001f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f1a:	0150      	lsls	r0, r2, #5
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4641      	mov	r1, r8
 8001f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f26:	4649      	mov	r1, r9
 8001f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f40:	ebb2 040a 	subs.w	r4, r2, sl
 8001f44:	eb63 050b 	sbc.w	r5, r3, fp
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	00eb      	lsls	r3, r5, #3
 8001f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f56:	00e2      	lsls	r2, r4, #3
 8001f58:	4614      	mov	r4, r2
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	4643      	mov	r3, r8
 8001f5e:	18e3      	adds	r3, r4, r3
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	464b      	mov	r3, r9
 8001f64:	eb45 0303 	adc.w	r3, r5, r3
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f76:	4629      	mov	r1, r5
 8001f78:	028b      	lsls	r3, r1, #10
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f80:	4621      	mov	r1, r4
 8001f82:	028a      	lsls	r2, r1, #10
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	61fa      	str	r2, [r7, #28]
 8001f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f94:	f7fe f93c 	bl	8000210 <__aeabi_uldivmod>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3750      	adds	r7, #80	; 0x50
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	08006648 	.word	0x08006648

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002020:	f7ff ffdc 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0b5b      	lsrs	r3, r3, #13
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	08006648 	.word	0x08006648

08002044 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	220f      	movs	r2, #15
 8002052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_RCC_GetClockConfig+0x5c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_GetClockConfig+0x5c>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_RCC_GetClockConfig+0x60>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	4964      	ldr	r1, [pc, #400]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d017      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	4959      	ldr	r1, [pc, #356]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002120:	d101      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d017      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	494a      	ldr	r1, [pc, #296]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 808b 	beq.w	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a39      	ldr	r2, [pc, #228]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a34      	ldr	r2, [pc, #208]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7fe ff2e 	bl	8001010 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe ff2a 	bl	8001010 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e357      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d035      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d02e      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002216:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d114      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fef2 	bl	8001010 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe feee 	bl	8001010 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e319      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ee      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800225e:	d111      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800226e:	400b      	ands	r3, r1
 8002270:	4901      	ldr	r1, [pc, #4]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
 8002276:	e00b      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
 8002280:	0ffffcff 	.word	0x0ffffcff
 8002284:	4baa      	ldr	r3, [pc, #680]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4aa9      	ldr	r2, [pc, #676]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	4ba7      	ldr	r3, [pc, #668]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	49a4      	ldr	r1, [pc, #656]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ae:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b4:	4a9e      	ldr	r2, [pc, #632]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022be:	4b9c      	ldr	r3, [pc, #624]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	4999      	ldr	r1, [pc, #612]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022dc:	4b94      	ldr	r3, [pc, #592]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ea:	4991      	ldr	r1, [pc, #580]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fe:	4b8c      	ldr	r3, [pc, #560]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800230c:	4988      	ldr	r1, [pc, #544]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002320:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232e:	4980      	ldr	r1, [pc, #512]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002342:	4b7b      	ldr	r3, [pc, #492]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	4977      	ldr	r1, [pc, #476]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002364:	4b72      	ldr	r3, [pc, #456]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	496f      	ldr	r1, [pc, #444]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f023 020c 	bic.w	r2, r3, #12
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	4966      	ldr	r1, [pc, #408]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	495e      	ldr	r1, [pc, #376]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ca:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	4955      	ldr	r1, [pc, #340]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800240e:	4b48      	ldr	r3, [pc, #288]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	4944      	ldr	r1, [pc, #272]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	493c      	ldr	r1, [pc, #240]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	4933      	ldr	r1, [pc, #204]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d011      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a4:	4922      	ldr	r1, [pc, #136]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e4:	4912      	ldr	r1, [pc, #72]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002508:	4909      	ldr	r1, [pc, #36]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d006      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80d9 	beq.w	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002524:	4b02      	ldr	r3, [pc, #8]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a01      	ldr	r2, [pc, #4]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800252e:	e001      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002530:	40023800 	.word	0x40023800
 8002534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002536:	f7fe fd6b 	bl	8001010 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800253e:	f7fe fd67 	bl	8001010 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e194      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002550:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d021      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11d      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002576:	0c1b      	lsrs	r3, r3, #16
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800257e:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002584:	0e1b      	lsrs	r3, r3, #24
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	019a      	lsls	r2, r3, #6
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	071b      	lsls	r3, r3, #28
 80025a4:	4957      	ldr	r1, [pc, #348]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02e      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d6:	d129      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025d8:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025de:	0c1b      	lsrs	r3, r3, #16
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ec:	0f1b      	lsrs	r3, r3, #28
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	019a      	lsls	r2, r3, #6
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	071b      	lsls	r3, r3, #28
 800260c:	493d      	ldr	r1, [pc, #244]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002614:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261a:	f023 021f 	bic.w	r2, r3, #31
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	3b01      	subs	r3, #1
 8002624:	4937      	ldr	r1, [pc, #220]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01d      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263e:	0e1b      	lsrs	r3, r3, #24
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264c:	0f1b      	lsrs	r3, r3, #28
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	019a      	lsls	r2, r3, #6
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	431a      	orrs	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	431a      	orrs	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	071b      	lsls	r3, r3, #28
 800266c:	4925      	ldr	r1, [pc, #148]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d011      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	019a      	lsls	r2, r3, #6
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	4919      	ldr	r1, [pc, #100]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a16      	ldr	r2, [pc, #88]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fcae 	bl	8001010 <HAL_GetTick>
 80026b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026b8:	f7fe fcaa 	bl	8001010 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0d7      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f040 80cd 	bne.w	8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ea:	f7fe fc91 	bl	8001010 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f2:	f7fe fc8d 	bl	8001010 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d903      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0ba      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002704:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d0ed      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02e      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	0f1b      	lsrs	r3, r3, #28
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4944      	ldr	r1, [pc, #272]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	493d      	ldr	r1, [pc, #244]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d022      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a8:	d11d      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	0f1b      	lsrs	r3, r3, #28
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	019a      	lsls	r2, r3, #6
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4929      	ldr	r1, [pc, #164]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	0e1b      	lsrs	r3, r3, #24
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4911      	ldr	r1, [pc, #68]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe fbde 	bl	8001010 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002858:	f7fe fbda 	bl	8001010 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e007      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002876:	d1ef      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e049      	b.n	800292e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f841 	bl	8002936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 fa00 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d001      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e054      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_TIM_Base_Start_IT+0xd0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298e:	d01d      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <HAL_TIM_Base_Start_IT+0xd4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_TIM_Base_Start_IT+0xe0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_TIM_Base_Start_IT+0xe4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x80>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <HAL_TIM_Base_Start_IT+0xe8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d115      	bne.n	80029f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_TIM_Base_Start_IT+0xec>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d015      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0xbe>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d011      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	e008      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e000      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40001800 	.word	0x40001800
 8002a38:	00010007 	.word	0x00010007

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f905 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8f7 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f908 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0204 	mvn.w	r2, #4
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8db 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8cd 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8de 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0208 	mvn.w	r2, #8
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8b1 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8a3 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8b4 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0210 	mvn.w	r2, #16
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f887 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f879 	bl	8002c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f88a 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0201 	mvn.w	r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd ffc8 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f91a 	bl	8002e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d10e      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f90d 	bl	8002e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d10e      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f838 	bl	8002cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d10e      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0220 	mvn.w	r2, #32
 8002c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8cd 	bl	8002e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a40      	ldr	r2, [pc, #256]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d00f      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3d      	ldr	r2, [pc, #244]	; (8002de4 <TIM_Base_SetConfig+0x118>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <TIM_Base_SetConfig+0x11c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <TIM_Base_SetConfig+0x120>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <TIM_Base_SetConfig+0x124>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d108      	bne.n	8002d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d027      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <TIM_Base_SetConfig+0x118>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d023      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <TIM_Base_SetConfig+0x11c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <TIM_Base_SetConfig+0x120>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <TIM_Base_SetConfig+0x124>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <TIM_Base_SetConfig+0x128>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <TIM_Base_SetConfig+0x12c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <TIM_Base_SetConfig+0x130>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <TIM_Base_SetConfig+0x134>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <TIM_Base_SetConfig+0x138>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <TIM_Base_SetConfig+0x13c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <TIM_Base_SetConfig+0x114>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0xf8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <TIM_Base_SetConfig+0x124>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40010400 	.word	0x40010400
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800
 8002e00:	40001800 	.word	0x40001800
 8002e04:	40001c00 	.word	0x40001c00
 8002e08:	40002000 	.word	0x40002000

08002e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e040      	b.n	8002edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd ff60 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f990 	bl	80031ac <UART_SetConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fbe8 	bl	8003674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fc6f 	bl	80037b8 <UART_CheckIdleState>
 8002eda:	4603      	mov	r3, r0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	f040 8081 	bne.w	8003000 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_UART_Transmit+0x26>
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e079      	b.n	8003002 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Transmit+0x38>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e072      	b.n	8003002 <HAL_UART_Transmit+0x11e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2221      	movs	r2, #33	; 0x21
 8002f30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f32:	f7fe f86d 	bl	8001010 <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d108      	bne.n	8002f64 <HAL_UART_Transmit+0x80>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e003      	b.n	8002f6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f74:	e02c      	b.n	8002fd0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2180      	movs	r1, #128	; 0x80
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fc4c 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e038      	b.n	8003002 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e007      	b.n	8002fbe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1cc      	bne.n	8002f76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fc19 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e005      	b.n	8003002 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b08a      	sub	sp, #40	; 0x28
 800300e:	af02      	add	r7, sp, #8
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301e:	2b20      	cmp	r3, #32
 8003020:	f040 80be 	bne.w	80031a0 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_UART_Receive+0x26>
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b6      	b.n	80031a2 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Receive+0x38>
 800303e:	2302      	movs	r3, #2
 8003040:	e0af      	b.n	80031a2 <HAL_UART_Receive+0x198>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2222      	movs	r2, #34	; 0x22
 8003056:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305e:	f7fd ffd7 	bl	8001010 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d10e      	bne.n	800309c <HAL_UART_Receive+0x92>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_UART_Receive+0x88>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f240 12ff 	movw	r2, #511	; 0x1ff
 800308c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003090:	e02d      	b.n	80030ee <HAL_UART_Receive+0xe4>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800309a:	e028      	b.n	80030ee <HAL_UART_Receive+0xe4>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_UART_Receive+0xb6>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <HAL_UART_Receive+0xac>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030b4:	e01b      	b.n	80030ee <HAL_UART_Receive+0xe4>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	227f      	movs	r2, #127	; 0x7f
 80030ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030be:	e016      	b.n	80030ee <HAL_UART_Receive+0xe4>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c8:	d10d      	bne.n	80030e6 <HAL_UART_Receive+0xdc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_UART_Receive+0xd2>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	227f      	movs	r2, #127	; 0x7f
 80030d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030da:	e008      	b.n	80030ee <HAL_UART_Receive+0xe4>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	223f      	movs	r2, #63	; 0x3f
 80030e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030e4:	e003      	b.n	80030ee <HAL_UART_Receive+0xe4>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d108      	bne.n	8003112 <HAL_UART_Receive+0x108>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e003      	b.n	800311a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003122:	e032      	b.n	800318a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2200      	movs	r2, #0
 800312c:	2120      	movs	r1, #32
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fb75 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e031      	b.n	80031a2 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10c      	bne.n	800315e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	b29a      	uxth	r2, r3
 800314c:	8a7b      	ldrh	r3, [r7, #18]
 800314e:	4013      	ands	r3, r2
 8003150:	b29a      	uxth	r2, r3
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	3302      	adds	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e00c      	b.n	8003178 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2da      	uxtb	r2, r3
 8003166:	8a7b      	ldrh	r3, [r7, #18]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4013      	ands	r3, r2
 800316c:	b2da      	uxtb	r2, r3
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1c6      	bne.n	8003124 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4ba6      	ldr	r3, [pc, #664]	; (8003470 <UART_SetConfig+0x2c4>)
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a94      	ldr	r2, [pc, #592]	; (8003474 <UART_SetConfig+0x2c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d120      	bne.n	800326a <UART_SetConfig+0xbe>
 8003228:	4b93      	ldr	r3, [pc, #588]	; (8003478 <UART_SetConfig+0x2cc>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b03      	cmp	r3, #3
 8003234:	d816      	bhi.n	8003264 <UART_SetConfig+0xb8>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <UART_SetConfig+0x90>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	0800324d 	.word	0x0800324d
 8003240:	08003259 	.word	0x08003259
 8003244:	08003253 	.word	0x08003253
 8003248:	0800325f 	.word	0x0800325f
 800324c:	2301      	movs	r3, #1
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e150      	b.n	80034f4 <UART_SetConfig+0x348>
 8003252:	2302      	movs	r3, #2
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e14d      	b.n	80034f4 <UART_SetConfig+0x348>
 8003258:	2304      	movs	r3, #4
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e14a      	b.n	80034f4 <UART_SetConfig+0x348>
 800325e:	2308      	movs	r3, #8
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e147      	b.n	80034f4 <UART_SetConfig+0x348>
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e144      	b.n	80034f4 <UART_SetConfig+0x348>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a83      	ldr	r2, [pc, #524]	; (800347c <UART_SetConfig+0x2d0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d132      	bne.n	80032da <UART_SetConfig+0x12e>
 8003274:	4b80      	ldr	r3, [pc, #512]	; (8003478 <UART_SetConfig+0x2cc>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d828      	bhi.n	80032d4 <UART_SetConfig+0x128>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0xdc>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	080032bd 	.word	0x080032bd
 800328c:	080032d5 	.word	0x080032d5
 8003290:	080032d5 	.word	0x080032d5
 8003294:	080032d5 	.word	0x080032d5
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032d5 	.word	0x080032d5
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032d5 	.word	0x080032d5
 80032a8:	080032c3 	.word	0x080032c3
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032d5 	.word	0x080032d5
 80032b8:	080032cf 	.word	0x080032cf
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e118      	b.n	80034f4 <UART_SetConfig+0x348>
 80032c2:	2302      	movs	r3, #2
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e115      	b.n	80034f4 <UART_SetConfig+0x348>
 80032c8:	2304      	movs	r3, #4
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e112      	b.n	80034f4 <UART_SetConfig+0x348>
 80032ce:	2308      	movs	r3, #8
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e10f      	b.n	80034f4 <UART_SetConfig+0x348>
 80032d4:	2310      	movs	r3, #16
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e10c      	b.n	80034f4 <UART_SetConfig+0x348>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a68      	ldr	r2, [pc, #416]	; (8003480 <UART_SetConfig+0x2d4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d120      	bne.n	8003326 <UART_SetConfig+0x17a>
 80032e4:	4b64      	ldr	r3, [pc, #400]	; (8003478 <UART_SetConfig+0x2cc>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ee:	2b30      	cmp	r3, #48	; 0x30
 80032f0:	d013      	beq.n	800331a <UART_SetConfig+0x16e>
 80032f2:	2b30      	cmp	r3, #48	; 0x30
 80032f4:	d814      	bhi.n	8003320 <UART_SetConfig+0x174>
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d009      	beq.n	800330e <UART_SetConfig+0x162>
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d810      	bhi.n	8003320 <UART_SetConfig+0x174>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <UART_SetConfig+0x15c>
 8003302:	2b10      	cmp	r3, #16
 8003304:	d006      	beq.n	8003314 <UART_SetConfig+0x168>
 8003306:	e00b      	b.n	8003320 <UART_SetConfig+0x174>
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e0f2      	b.n	80034f4 <UART_SetConfig+0x348>
 800330e:	2302      	movs	r3, #2
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e0ef      	b.n	80034f4 <UART_SetConfig+0x348>
 8003314:	2304      	movs	r3, #4
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0ec      	b.n	80034f4 <UART_SetConfig+0x348>
 800331a:	2308      	movs	r3, #8
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e0e9      	b.n	80034f4 <UART_SetConfig+0x348>
 8003320:	2310      	movs	r3, #16
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0e6      	b.n	80034f4 <UART_SetConfig+0x348>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a56      	ldr	r2, [pc, #344]	; (8003484 <UART_SetConfig+0x2d8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d120      	bne.n	8003372 <UART_SetConfig+0x1c6>
 8003330:	4b51      	ldr	r3, [pc, #324]	; (8003478 <UART_SetConfig+0x2cc>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800333a:	2bc0      	cmp	r3, #192	; 0xc0
 800333c:	d013      	beq.n	8003366 <UART_SetConfig+0x1ba>
 800333e:	2bc0      	cmp	r3, #192	; 0xc0
 8003340:	d814      	bhi.n	800336c <UART_SetConfig+0x1c0>
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d009      	beq.n	800335a <UART_SetConfig+0x1ae>
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d810      	bhi.n	800336c <UART_SetConfig+0x1c0>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <UART_SetConfig+0x1a8>
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d006      	beq.n	8003360 <UART_SetConfig+0x1b4>
 8003352:	e00b      	b.n	800336c <UART_SetConfig+0x1c0>
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0cc      	b.n	80034f4 <UART_SetConfig+0x348>
 800335a:	2302      	movs	r3, #2
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0c9      	b.n	80034f4 <UART_SetConfig+0x348>
 8003360:	2304      	movs	r3, #4
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e0c6      	b.n	80034f4 <UART_SetConfig+0x348>
 8003366:	2308      	movs	r3, #8
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e0c3      	b.n	80034f4 <UART_SetConfig+0x348>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e0c0      	b.n	80034f4 <UART_SetConfig+0x348>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a44      	ldr	r2, [pc, #272]	; (8003488 <UART_SetConfig+0x2dc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d125      	bne.n	80033c8 <UART_SetConfig+0x21c>
 800337c:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <UART_SetConfig+0x2cc>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338a:	d017      	beq.n	80033bc <UART_SetConfig+0x210>
 800338c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003390:	d817      	bhi.n	80033c2 <UART_SetConfig+0x216>
 8003392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003396:	d00b      	beq.n	80033b0 <UART_SetConfig+0x204>
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d811      	bhi.n	80033c2 <UART_SetConfig+0x216>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <UART_SetConfig+0x1fe>
 80033a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a6:	d006      	beq.n	80033b6 <UART_SetConfig+0x20a>
 80033a8:	e00b      	b.n	80033c2 <UART_SetConfig+0x216>
 80033aa:	2300      	movs	r3, #0
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e0a1      	b.n	80034f4 <UART_SetConfig+0x348>
 80033b0:	2302      	movs	r3, #2
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e09e      	b.n	80034f4 <UART_SetConfig+0x348>
 80033b6:	2304      	movs	r3, #4
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e09b      	b.n	80034f4 <UART_SetConfig+0x348>
 80033bc:	2308      	movs	r3, #8
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e098      	b.n	80034f4 <UART_SetConfig+0x348>
 80033c2:	2310      	movs	r3, #16
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e095      	b.n	80034f4 <UART_SetConfig+0x348>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <UART_SetConfig+0x2e0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d125      	bne.n	800341e <UART_SetConfig+0x272>
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <UART_SetConfig+0x2cc>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e0:	d017      	beq.n	8003412 <UART_SetConfig+0x266>
 80033e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e6:	d817      	bhi.n	8003418 <UART_SetConfig+0x26c>
 80033e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ec:	d00b      	beq.n	8003406 <UART_SetConfig+0x25a>
 80033ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f2:	d811      	bhi.n	8003418 <UART_SetConfig+0x26c>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <UART_SetConfig+0x254>
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d006      	beq.n	800340c <UART_SetConfig+0x260>
 80033fe:	e00b      	b.n	8003418 <UART_SetConfig+0x26c>
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e076      	b.n	80034f4 <UART_SetConfig+0x348>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e073      	b.n	80034f4 <UART_SetConfig+0x348>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e070      	b.n	80034f4 <UART_SetConfig+0x348>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e06d      	b.n	80034f4 <UART_SetConfig+0x348>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e06a      	b.n	80034f4 <UART_SetConfig+0x348>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <UART_SetConfig+0x2e4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d138      	bne.n	800349a <UART_SetConfig+0x2ee>
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <UART_SetConfig+0x2cc>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003432:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003436:	d017      	beq.n	8003468 <UART_SetConfig+0x2bc>
 8003438:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800343c:	d82a      	bhi.n	8003494 <UART_SetConfig+0x2e8>
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d00b      	beq.n	800345c <UART_SetConfig+0x2b0>
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d824      	bhi.n	8003494 <UART_SetConfig+0x2e8>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <UART_SetConfig+0x2aa>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d006      	beq.n	8003462 <UART_SetConfig+0x2b6>
 8003454:	e01e      	b.n	8003494 <UART_SetConfig+0x2e8>
 8003456:	2300      	movs	r3, #0
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e04b      	b.n	80034f4 <UART_SetConfig+0x348>
 800345c:	2302      	movs	r3, #2
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e048      	b.n	80034f4 <UART_SetConfig+0x348>
 8003462:	2304      	movs	r3, #4
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e045      	b.n	80034f4 <UART_SetConfig+0x348>
 8003468:	2308      	movs	r3, #8
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e042      	b.n	80034f4 <UART_SetConfig+0x348>
 800346e:	bf00      	nop
 8003470:	efff69f3 	.word	0xefff69f3
 8003474:	40011000 	.word	0x40011000
 8003478:	40023800 	.word	0x40023800
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	40004c00 	.word	0x40004c00
 8003488:	40005000 	.word	0x40005000
 800348c:	40011400 	.word	0x40011400
 8003490:	40007800 	.word	0x40007800
 8003494:	2310      	movs	r3, #16
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e02c      	b.n	80034f4 <UART_SetConfig+0x348>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <UART_SetConfig+0x4bc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d125      	bne.n	80034f0 <UART_SetConfig+0x344>
 80034a4:	4b71      	ldr	r3, [pc, #452]	; (800366c <UART_SetConfig+0x4c0>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034b2:	d017      	beq.n	80034e4 <UART_SetConfig+0x338>
 80034b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034b8:	d817      	bhi.n	80034ea <UART_SetConfig+0x33e>
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034be:	d00b      	beq.n	80034d8 <UART_SetConfig+0x32c>
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d811      	bhi.n	80034ea <UART_SetConfig+0x33e>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <UART_SetConfig+0x326>
 80034ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ce:	d006      	beq.n	80034de <UART_SetConfig+0x332>
 80034d0:	e00b      	b.n	80034ea <UART_SetConfig+0x33e>
 80034d2:	2300      	movs	r3, #0
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e00d      	b.n	80034f4 <UART_SetConfig+0x348>
 80034d8:	2302      	movs	r3, #2
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e00a      	b.n	80034f4 <UART_SetConfig+0x348>
 80034de:	2304      	movs	r3, #4
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e007      	b.n	80034f4 <UART_SetConfig+0x348>
 80034e4:	2308      	movs	r3, #8
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e004      	b.n	80034f4 <UART_SetConfig+0x348>
 80034ea:	2310      	movs	r3, #16
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e001      	b.n	80034f4 <UART_SetConfig+0x348>
 80034f0:	2310      	movs	r3, #16
 80034f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d15b      	bne.n	80035b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034fe:	7ffb      	ldrb	r3, [r7, #31]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d828      	bhi.n	8003556 <UART_SetConfig+0x3aa>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <UART_SetConfig+0x360>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003531 	.word	0x08003531
 8003510:	08003539 	.word	0x08003539
 8003514:	08003541 	.word	0x08003541
 8003518:	08003557 	.word	0x08003557
 800351c:	08003547 	.word	0x08003547
 8003520:	08003557 	.word	0x08003557
 8003524:	08003557 	.word	0x08003557
 8003528:	08003557 	.word	0x08003557
 800352c:	0800354f 	.word	0x0800354f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7fe fd60 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003534:	61b8      	str	r0, [r7, #24]
        break;
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7fe fd70 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 800353c:	61b8      	str	r0, [r7, #24]
        break;
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <UART_SetConfig+0x4c4>)
 8003542:	61bb      	str	r3, [r7, #24]
        break;
 8003544:	e00c      	b.n	8003560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7fe fc43 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800354a:	61b8      	str	r0, [r7, #24]
        break;
 800354c:	e008      	b.n	8003560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	61bb      	str	r3, [r7, #24]
        break;
 8003554:	e004      	b.n	8003560 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77bb      	strb	r3, [r7, #30]
        break;
 800355e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d074      	beq.n	8003650 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	005a      	lsls	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	441a      	add	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d916      	bls.n	80035b0 <UART_SetConfig+0x404>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d212      	bcs.n	80035b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f023 030f 	bic.w	r3, r3, #15
 8003592:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	b29b      	uxth	r3, r3
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	b29a      	uxth	r2, r3
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	89fa      	ldrh	r2, [r7, #14]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e04f      	b.n	8003650 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	77bb      	strb	r3, [r7, #30]
 80035b4:	e04c      	b.n	8003650 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d828      	bhi.n	800360e <UART_SetConfig+0x462>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x418>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	080035f1 	.word	0x080035f1
 80035cc:	080035f9 	.word	0x080035f9
 80035d0:	0800360f 	.word	0x0800360f
 80035d4:	080035ff 	.word	0x080035ff
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	0800360f 	.word	0x0800360f
 80035e0:	0800360f 	.word	0x0800360f
 80035e4:	08003607 	.word	0x08003607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7fe fd04 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 80035ec:	61b8      	str	r0, [r7, #24]
        break;
 80035ee:	e013      	b.n	8003618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f0:	f7fe fd14 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 80035f4:	61b8      	str	r0, [r7, #24]
        break;
 80035f6:	e00f      	b.n	8003618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <UART_SetConfig+0x4c4>)
 80035fa:	61bb      	str	r3, [r7, #24]
        break;
 80035fc:	e00c      	b.n	8003618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe fbe7 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8003602:	61b8      	str	r0, [r7, #24]
        break;
 8003604:	e008      	b.n	8003618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	61bb      	str	r3, [r7, #24]
        break;
 800360c:	e004      	b.n	8003618 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	77bb      	strb	r3, [r7, #30]
        break;
 8003616:	bf00      	nop
    }

    if (pclk != 0U)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	085a      	lsrs	r2, r3, #1
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b0f      	cmp	r3, #15
 8003636:	d909      	bls.n	800364c <UART_SetConfig+0x4a0>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363e:	d205      	bcs.n	800364c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	e001      	b.n	8003650 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800365c:	7fbb      	ldrb	r3, [r7, #30]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40007c00 	.word	0x40007c00
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400

08003674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01a      	beq.n	800378a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003772:	d10a      	bne.n	800378a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c8:	f7fd fc22 	bl	8001010 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d10e      	bne.n	80037fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f817 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e00d      	b.n	8003816 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b09c      	sub	sp, #112	; 0x70
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	4613      	mov	r3, r2
 800382c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	e0a5      	b.n	800397c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	f000 80a1 	beq.w	800397c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fd fbe9 	bl	8001010 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <UART_WaitOnFlagUntilTimeout+0x32>
 800384a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384c:	2b00      	cmp	r3, #0
 800384e:	d13e      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800385e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003860:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003864:	667b      	str	r3, [r7, #100]	; 0x64
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800386e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003870:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800387c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e6      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	663b      	str	r3, [r7, #96]	; 0x60
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e067      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d04f      	beq.n	800397c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ea:	d147      	bne.n	800397c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800390a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
 8003916:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	613b      	str	r3, [r7, #16]
   return(result);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003948:	623a      	str	r2, [r7, #32]
 800394a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	61bb      	str	r3, [r7, #24]
   return(result);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e010      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	429a      	cmp	r2, r3
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	429a      	cmp	r2, r3
 8003998:	f43f af4a 	beq.w	8003830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3770      	adds	r7, #112	; 0x70
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b8:	2b84      	cmp	r3, #132	; 0x84
 80039ba:	d005      	beq.n	80039c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	3303      	adds	r3, #3
 80039c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80039c8:	68fb      	ldr	r3, [r7, #12]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80039da:	f000 fe5d 	bl	8004698 <vTaskStartScheduler>
  
  return osOK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af04      	add	r7, sp, #16
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <osThreadCreate+0x54>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01c      	beq.n	8003a38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685c      	ldr	r4, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681d      	ldr	r5, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691e      	ldr	r6, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ffc8 	bl	80039a6 <makeFreeRtosPriority>
 8003a16:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a20:	9202      	str	r2, [sp, #8]
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	9100      	str	r1, [sp, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	4632      	mov	r2, r6
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f000 fc3b 	bl	80042a8 <xTaskCreateStatic>
 8003a32:	4603      	mov	r3, r0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e01c      	b.n	8003a72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685c      	ldr	r4, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a44:	b29e      	uxth	r6, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ffaa 	bl	80039a6 <makeFreeRtosPriority>
 8003a52:	4602      	mov	r2, r0
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	9200      	str	r2, [sp, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4632      	mov	r2, r6
 8003a60:	4629      	mov	r1, r5
 8003a62:	4620      	mov	r0, r4
 8003a64:	f000 fc83 	bl	800436e <xTaskCreate>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <osDelay+0x16>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	e000      	b.n	8003a94 <osDelay+0x18>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fdc9 	bl	800462c <vTaskDelay>
  
  return osOK;
 8003a9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0208 	add.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f103 0208 	add.w	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f103 0208 	add.w	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d103      	bne.n	8003b66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e00c      	b.n	8003b80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <vListInsert+0x2e>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d2f6      	bcs.n	8003b6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6852      	ldr	r2, [r2, #4]
 8003bd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d103      	bne.n	8003bec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1e5a      	subs	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10c      	bne.n	8003c3a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	b672      	cpsid	i
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	b662      	cpsie	i
 8003c34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003c3a:	f001 fbbf 	bl	80053bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	441a      	add	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	441a      	add	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	22ff      	movs	r2, #255	; 0xff
 8003c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d114      	bne.n	8003cba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01a      	beq.n	8003cce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 ffa5 	bl	8004bec <xTaskRemoveFromEventList>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <xQueueGenericReset+0xd0>)
 8003caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	e009      	b.n	8003cce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fef0 	bl	8003aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3324      	adds	r3, #36	; 0x24
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff feeb 	bl	8003aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f001 fba9 	bl	8005424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cd2:	2301      	movs	r3, #1
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10c      	bne.n	8003d0e <xQueueGenericCreate+0x2e>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	b672      	cpsid	i
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	b662      	cpsie	i
 8003d08:	613b      	str	r3, [r7, #16]
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	e004      	b.n	8003d24 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	3350      	adds	r3, #80	; 0x50
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fc73 	bl	8005614 <pvPortMalloc>
 8003d2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3350      	adds	r3, #80	; 0x50
 8003d3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d48:	79fa      	ldrb	r2, [r7, #7]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f805 	bl	8003d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d92:	2101      	movs	r1, #1
 8003d94:	69b8      	ldr	r0, [r7, #24]
 8003d96:	f7ff ff39 	bl	8003c0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08e      	sub	sp, #56	; 0x38
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	b672      	cpsid	i
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	b662      	cpsie	i
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <xQueueGenericSendFromISR+0x40>
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <xQueueGenericSendFromISR+0x44>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <xQueueGenericSendFromISR+0x46>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10c      	bne.n	8003e0e <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	b672      	cpsid	i
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	b662      	cpsie	i
 8003e08:	623b      	str	r3, [r7, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d103      	bne.n	8003e1c <xQueueGenericSendFromISR+0x72>
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <xQueueGenericSendFromISR+0x76>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <xQueueGenericSendFromISR+0x78>
 8003e20:	2300      	movs	r3, #0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	b672      	cpsid	i
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	b662      	cpsie	i
 8003e3a:	61fb      	str	r3, [r7, #28]
}
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e40:	f001 fba4 	bl	800558c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e44:	f3ef 8211 	mrs	r2, BASEPRI
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	b672      	cpsid	i
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	b662      	cpsie	i
 8003e5c:	61ba      	str	r2, [r7, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d302      	bcc.n	8003e76 <xQueueGenericSendFromISR+0xcc>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d12c      	bne.n	8003ed0 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e86:	f000 f917 	bl	80040b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d112      	bne.n	8003eba <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d016      	beq.n	8003eca <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fea3 	bl	8004bec <xTaskRemoveFromEventList>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00e      	beq.n	8003eca <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e007      	b.n	8003eca <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	b25a      	sxtb	r2, r3
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ece:	e001      	b.n	8003ed4 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ede:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3738      	adds	r7, #56	; 0x38
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	; 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <xQueueReceive+0x34>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	b672      	cpsid	i
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	b662      	cpsie	i
 8003f1a:	623b      	str	r3, [r7, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <xQueueReceive+0x42>
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueReceive+0x46>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueReceive+0x48>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10c      	bne.n	8003f52 <xQueueReceive+0x66>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	b672      	cpsid	i
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	b662      	cpsie	i
 8003f4c:	61fb      	str	r3, [r7, #28]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f52:	f001 f815 	bl	8004f80 <xTaskGetSchedulerState>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <xQueueReceive+0x76>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <xQueueReceive+0x7a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <xQueueReceive+0x7c>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10c      	bne.n	8003f86 <xQueueReceive+0x9a>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	b672      	cpsid	i
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	b662      	cpsie	i
 8003f80:	61bb      	str	r3, [r7, #24]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f86:	f001 fa19 	bl	80053bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01f      	beq.n	8003fd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9a:	f000 f8f7 	bl	800418c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00f      	beq.n	8003fce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe1a 	bl	8004bec <xTaskRemoveFromEventList>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fbe:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <xQueueReceive+0x1c8>)
 8003fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fce:	f001 fa29 	bl	8005424 <vPortExitCritical>
				return pdPASS;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e069      	b.n	80040aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fdc:	f001 fa22 	bl	8005424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e062      	b.n	80040aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fea:	f107 0310 	add.w	r3, r7, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fe60 	bl	8004cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ff8:	f001 fa14 	bl	8005424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ffc:	f000 fbbc 	bl	8004778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004000:	f001 f9dc 	bl	80053bc <vPortEnterCritical>
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d103      	bne.n	800401a <xQueueReceive+0x12e>
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004020:	b25b      	sxtb	r3, r3
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d103      	bne.n	8004030 <xQueueReceive+0x144>
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004030:	f001 f9f8 	bl	8005424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004034:	1d3a      	adds	r2, r7, #4
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fe4f 	bl	8004ce0 <xTaskCheckForTimeOut>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d123      	bne.n	8004090 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404a:	f000 f917 	bl	800427c <prvIsQueueEmpty>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d017      	beq.n	8004084 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fd9f 	bl	8004ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004064:	f000 f8b8 	bl	80041d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004068:	f000 fb94 	bl	8004794 <xTaskResumeAll>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d189      	bne.n	8003f86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <xQueueReceive+0x1c8>)
 8004074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	e780      	b.n	8003f86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004086:	f000 f8a7 	bl	80041d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800408a:	f000 fb83 	bl	8004794 <xTaskResumeAll>
 800408e:	e77a      	b.n	8003f86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004092:	f000 f8a1 	bl	80041d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004096:	f000 fb7d 	bl	8004794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800409a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800409c:	f000 f8ee 	bl	800427c <prvIsQueueEmpty>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f43f af6f 	beq.w	8003f86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3730      	adds	r7, #48	; 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d14d      	bne.n	800417a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 ff6a 	bl	8004fbc <xTaskPriorityDisinherit>
 80040e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	e043      	b.n	800417a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d119      	bne.n	800412c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6858      	ldr	r0, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	461a      	mov	r2, r3
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	f001 fe89 	bl	8005e1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	441a      	add	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d32b      	bcc.n	800417a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	e026      	b.n	800417a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68d8      	ldr	r0, [r3, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	461a      	mov	r2, r3
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	f001 fe6f 	bl	8005e1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	425b      	negs	r3, r3
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d207      	bcs.n	8004168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	425b      	negs	r3, r3
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d105      	bne.n	800417a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3b01      	subs	r3, #1
 8004178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004182:	697b      	ldr	r3, [r7, #20]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d018      	beq.n	80041d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	441a      	add	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d303      	bcc.n	80041c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68d9      	ldr	r1, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	461a      	mov	r2, r3
 80041ca:	6838      	ldr	r0, [r7, #0]
 80041cc:	f001 fe25 	bl	8005e1a <memcpy>
	}
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041e0:	f001 f8ec 	bl	80053bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ec:	e011      	b.n	8004212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3324      	adds	r3, #36	; 0x24
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fcf6 	bl	8004bec <xTaskRemoveFromEventList>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004206:	f000 fdd1 	bl	8004dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	3b01      	subs	r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	dce9      	bgt.n	80041ee <prvUnlockQueue+0x16>
 800421a:	e000      	b.n	800421e <prvUnlockQueue+0x46>
					break;
 800421c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004226:	f001 f8fd 	bl	8005424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800422a:	f001 f8c7 	bl	80053bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004236:	e011      	b.n	800425c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d012      	beq.n	8004266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3310      	adds	r3, #16
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fcd1 	bl	8004bec <xTaskRemoveFromEventList>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004250:	f000 fdac 	bl	8004dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3b01      	subs	r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800425c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004260:	2b00      	cmp	r3, #0
 8004262:	dce9      	bgt.n	8004238 <prvUnlockQueue+0x60>
 8004264:	e000      	b.n	8004268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004270:	f001 f8d8 	bl	8005424 <vPortExitCritical>
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004284:	f001 f89a 	bl	80053bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004290:	2301      	movs	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e001      	b.n	800429a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800429a:	f001 f8c3 	bl	8005424 <vPortExitCritical>

	return xReturn;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08e      	sub	sp, #56	; 0x38
 80042ac:	af04      	add	r7, sp, #16
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10c      	bne.n	80042d6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	b672      	cpsid	i
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	b662      	cpsie	i
 80042d0:	623b      	str	r3, [r7, #32]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10c      	bne.n	80042f6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	b672      	cpsid	i
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	b662      	cpsie	i
 80042f0:	61fb      	str	r3, [r7, #28]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042f6:	23c0      	movs	r3, #192	; 0xc0
 80042f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2bc0      	cmp	r3, #192	; 0xc0
 80042fe:	d00c      	beq.n	800431a <xTaskCreateStatic+0x72>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	b672      	cpsid	i
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	b662      	cpsie	i
 8004314:	61bb      	str	r3, [r7, #24]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800431a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01e      	beq.n	8004360 <xTaskCreateStatic+0xb8>
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004330:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	2202      	movs	r2, #2
 8004336:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800433a:	2300      	movs	r3, #0
 800433c:	9303      	str	r3, [sp, #12]
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	9302      	str	r3, [sp, #8]
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f850 	bl	80043f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800435a:	f000 f8f9 	bl	8004550 <prvAddNewTaskToReadyList>
 800435e:	e001      	b.n	8004364 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004364:	697b      	ldr	r3, [r7, #20]
	}
 8004366:	4618      	mov	r0, r3
 8004368:	3728      	adds	r7, #40	; 0x28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800436e:	b580      	push	{r7, lr}
 8004370:	b08c      	sub	sp, #48	; 0x30
 8004372:	af04      	add	r7, sp, #16
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f946 	bl	8005614 <pvPortMalloc>
 8004388:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00e      	beq.n	80043ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004390:	20c0      	movs	r0, #192	; 0xc0
 8004392:	f001 f93f 	bl	8005614 <pvPortMalloc>
 8004396:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
 80043a4:	e005      	b.n	80043b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043a6:	6978      	ldr	r0, [r7, #20]
 80043a8:	f001 fa04 	bl	80057b4 <vPortFree>
 80043ac:	e001      	b.n	80043b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	2300      	movs	r3, #0
 80043c4:	9303      	str	r3, [sp, #12]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f80e 	bl	80043f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043dc:	69f8      	ldr	r0, [r7, #28]
 80043de:	f000 f8b7 	bl	8004550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e002      	b.n	80043ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ee:	69bb      	ldr	r3, [r7, #24]
	}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	461a      	mov	r2, r3
 8004410:	21a5      	movs	r1, #165	; 0xa5
 8004412:	f001 fd10 	bl	8005e36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004420:	440b      	add	r3, r1
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	b672      	cpsid	i
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	b662      	cpsie	i
 800444e:	617b      	str	r3, [r7, #20]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01f      	beq.n	800449a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e012      	b.n	8004486 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	7819      	ldrb	r1, [r3, #0]
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	3334      	adds	r3, #52	; 0x34
 8004470:	460a      	mov	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d9e9      	bls.n	8004460 <prvInitialiseNewTask+0x68>
 800448c:	e000      	b.n	8004490 <prvInitialiseNewTask+0x98>
			{
				break;
 800448e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	e003      	b.n	80044a2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d901      	bls.n	80044ac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a8:	2306      	movs	r3, #6
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fb0e 	bl	8003ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	3318      	adds	r3, #24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fb09 	bl	8003ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f1c3 0207 	rsb	r2, r3, #7
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2200      	movs	r2, #0
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	3358      	adds	r3, #88	; 0x58
 8004502:	2260      	movs	r2, #96	; 0x60
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fc95 	bl	8005e36 <memset>
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <prvInitialiseNewTask+0x14c>)
 8004510:	65da      	str	r2, [r3, #92]	; 0x5c
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <prvInitialiseNewTask+0x150>)
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	4a0c      	ldr	r2, [pc, #48]	; (800454c <prvInitialiseNewTask+0x154>)
 800451c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	69b8      	ldr	r0, [r7, #24]
 8004524:	f000 fe3a 	bl	800519c <pxPortInitialiseStack>
 8004528:	4602      	mov	r2, r0
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	08006678 	.word	0x08006678
 8004548:	08006698 	.word	0x08006698
 800454c:	08006658 	.word	0x08006658

08004550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004558:	f000 ff30 	bl	80053bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800455c:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <prvAddNewTaskToReadyList+0xc0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <prvAddNewTaskToReadyList+0xc0>)
 8004564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800456e:	4a29      	ldr	r2, [pc, #164]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004574:	4b26      	ldr	r3, [pc, #152]	; (8004610 <prvAddNewTaskToReadyList+0xc0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800457c:	f000 fc3c 	bl	8004df8 <prvInitialiseTaskLists>
 8004580:	e00d      	b.n	800459e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004582:	4b25      	ldr	r3, [pc, #148]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d802      	bhi.n	800459e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a8:	4b1c      	ldr	r3, [pc, #112]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7ff fa90 	bl	8003afe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045de:	f000 ff21 	bl	8005424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d207      	bcs.n	8004608 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <prvAddNewTaskToReadyList+0xd8>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000a7c 	.word	0x20000a7c
 8004614:	2000097c 	.word	0x2000097c
 8004618:	20000a88 	.word	0x20000a88
 800461c:	20000a98 	.word	0x20000a98
 8004620:	20000a84 	.word	0x20000a84
 8004624:	20000980 	.word	0x20000980
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d019      	beq.n	8004672 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <vTaskDelay+0x64>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <vTaskDelay+0x34>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	b672      	cpsid	i
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	b662      	cpsie	i
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004660:	f000 f88a 	bl	8004778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004664:	2100      	movs	r1, #0
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fd32 	bl	80050d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800466c:	f000 f892 	bl	8004794 <xTaskResumeAll>
 8004670:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <vTaskDelay+0x68>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000aa4 	.word	0x20000aa4
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a6:	463a      	mov	r2, r7
 80046a8:	1d39      	adds	r1, r7, #4
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fc f85e 	bl	8000770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	9202      	str	r2, [sp, #8]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	460a      	mov	r2, r1
 80046c6:	4924      	ldr	r1, [pc, #144]	; (8004758 <vTaskStartScheduler+0xc0>)
 80046c8:	4824      	ldr	r0, [pc, #144]	; (800475c <vTaskStartScheduler+0xc4>)
 80046ca:	f7ff fded 	bl	80042a8 <xTaskCreateStatic>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4a23      	ldr	r2, [pc, #140]	; (8004760 <vTaskStartScheduler+0xc8>)
 80046d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d4:	4b22      	ldr	r3, [pc, #136]	; (8004760 <vTaskStartScheduler+0xc8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046dc:	2301      	movs	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e001      	b.n	80046e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d11f      	bne.n	800472c <vTaskStartScheduler+0x94>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	b672      	cpsid	i
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	b662      	cpsie	i
 8004700:	613b      	str	r3, [r7, #16]
}
 8004702:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <vTaskStartScheduler+0xcc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3358      	adds	r3, #88	; 0x58
 800470a:	4a17      	ldr	r2, [pc, #92]	; (8004768 <vTaskStartScheduler+0xd0>)
 800470c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <vTaskStartScheduler+0xd4>)
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004716:	4b16      	ldr	r3, [pc, #88]	; (8004770 <vTaskStartScheduler+0xd8>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800471c:	4b15      	ldr	r3, [pc, #84]	; (8004774 <vTaskStartScheduler+0xdc>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004722:	f7fc f80f 	bl	8000744 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004726:	f000 fdcb 	bl	80052c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800472a:	e010      	b.n	800474e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d10c      	bne.n	800474e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	b672      	cpsid	i
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	b662      	cpsie	i
 8004748:	60fb      	str	r3, [r7, #12]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <vTaskStartScheduler+0xb4>
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	080065fc 	.word	0x080065fc
 800475c:	08004dc5 	.word	0x08004dc5
 8004760:	20000aa0 	.word	0x20000aa0
 8004764:	2000097c 	.word	0x2000097c
 8004768:	20000014 	.word	0x20000014
 800476c:	20000a9c 	.word	0x20000a9c
 8004770:	20000a88 	.word	0x20000a88
 8004774:	20000a80 	.word	0x20000a80

08004778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vTaskSuspendAll+0x18>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a03      	ldr	r2, [pc, #12]	; (8004790 <vTaskSuspendAll+0x18>)
 8004784:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000aa4 	.word	0x20000aa4

08004794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047a2:	4b42      	ldr	r3, [pc, #264]	; (80048ac <xTaskResumeAll+0x118>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <xTaskResumeAll+0x30>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	b672      	cpsid	i
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	b662      	cpsie	i
 80047be:	603b      	str	r3, [r7, #0]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047c4:	f000 fdfa 	bl	80053bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047c8:	4b38      	ldr	r3, [pc, #224]	; (80048ac <xTaskResumeAll+0x118>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	4a37      	ldr	r2, [pc, #220]	; (80048ac <xTaskResumeAll+0x118>)
 80047d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <xTaskResumeAll+0x118>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d161      	bne.n	800489e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047da:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <xTaskResumeAll+0x11c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d05d      	beq.n	800489e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e2:	e02e      	b.n	8004842 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e4:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <xTaskResumeAll+0x120>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff f9e1 	bl	8003bb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f9dc 	bl	8003bb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <xTaskResumeAll+0x124>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <xTaskResumeAll+0x124>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a27      	ldr	r2, [pc, #156]	; (80048bc <xTaskResumeAll+0x128>)
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f7ff f968 	bl	8003afe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <xTaskResumeAll+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <xTaskResumeAll+0x130>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <xTaskResumeAll+0x120>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1cc      	bne.n	80047e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004850:	f000 fb76 	bl	8004f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <xTaskResumeAll+0x134>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d010      	beq.n	8004882 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004860:	f000 f836 	bl	80048d0 <xTaskIncrementTick>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <xTaskResumeAll+0x130>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f1      	bne.n	8004860 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800487c:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <xTaskResumeAll+0x134>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <xTaskResumeAll+0x130>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800488a:	2301      	movs	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <xTaskResumeAll+0x138>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800489e:	f000 fdc1 	bl	8005424 <vPortExitCritical>

	return xAlreadyYielded;
 80048a2:	68bb      	ldr	r3, [r7, #8]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000aa4 	.word	0x20000aa4
 80048b0:	20000a7c 	.word	0x20000a7c
 80048b4:	20000a3c 	.word	0x20000a3c
 80048b8:	20000a84 	.word	0x20000a84
 80048bc:	20000980 	.word	0x20000980
 80048c0:	2000097c 	.word	0x2000097c
 80048c4:	20000a90 	.word	0x20000a90
 80048c8:	20000a8c 	.word	0x20000a8c
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048da:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <xTaskIncrementTick+0x158>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 8090 	bne.w	8004a04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048e4:	4b51      	ldr	r3, [pc, #324]	; (8004a2c <xTaskIncrementTick+0x15c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048ec:	4a4f      	ldr	r2, [pc, #316]	; (8004a2c <xTaskIncrementTick+0x15c>)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d122      	bne.n	800493e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80048f8:	4b4d      	ldr	r3, [pc, #308]	; (8004a30 <xTaskIncrementTick+0x160>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	b672      	cpsid	i
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	b662      	cpsie	i
 8004916:	603b      	str	r3, [r7, #0]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <xTaskIncrementTick+0x4a>
 800491c:	4b44      	ldr	r3, [pc, #272]	; (8004a30 <xTaskIncrementTick+0x160>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <xTaskIncrementTick+0x164>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a42      	ldr	r2, [pc, #264]	; (8004a30 <xTaskIncrementTick+0x160>)
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	4a42      	ldr	r2, [pc, #264]	; (8004a34 <xTaskIncrementTick+0x164>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <xTaskIncrementTick+0x168>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	4a40      	ldr	r2, [pc, #256]	; (8004a38 <xTaskIncrementTick+0x168>)
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	f000 fb01 	bl	8004f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800493e:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <xTaskIncrementTick+0x16c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	429a      	cmp	r2, r3
 8004946:	d348      	bcc.n	80049da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004948:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <xTaskIncrementTick+0x160>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004952:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <xTaskIncrementTick+0x16c>)
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	601a      	str	r2, [r3, #0]
					break;
 800495a:	e03e      	b.n	80049da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495c:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <xTaskIncrementTick+0x160>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d203      	bcs.n	800497c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004974:	4a31      	ldr	r2, [pc, #196]	; (8004a3c <xTaskIncrementTick+0x16c>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800497a:	e02e      	b.n	80049da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3304      	adds	r3, #4
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f919 	bl	8003bb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3318      	adds	r3, #24
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f910 	bl	8003bb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2201      	movs	r2, #1
 800499e:	409a      	lsls	r2, r3
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <xTaskIncrementTick+0x170>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <xTaskIncrementTick+0x170>)
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <xTaskIncrementTick+0x174>)
 80049b8:	441a      	add	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7ff f89c 	bl	8003afe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ca:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <xTaskIncrementTick+0x178>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3b9      	bcc.n	8004948 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d8:	e7b6      	b.n	8004948 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <xTaskIncrementTick+0x178>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	4918      	ldr	r1, [pc, #96]	; (8004a44 <xTaskIncrementTick+0x174>)
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d901      	bls.n	80049f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <xTaskIncrementTick+0x17c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 80049fe:	f7fc f890 	bl	8000b22 <vApplicationTickHook>
 8004a02:	e006      	b.n	8004a12 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a04:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <xTaskIncrementTick+0x17c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <xTaskIncrementTick+0x17c>)
 8004a0c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004a0e:	f7fc f888 	bl	8000b22 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <xTaskIncrementTick+0x180>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000aa4 	.word	0x20000aa4
 8004a2c:	20000a80 	.word	0x20000a80
 8004a30:	20000a34 	.word	0x20000a34
 8004a34:	20000a38 	.word	0x20000a38
 8004a38:	20000a94 	.word	0x20000a94
 8004a3c:	20000a9c 	.word	0x20000a9c
 8004a40:	20000a84 	.word	0x20000a84
 8004a44:	20000980 	.word	0x20000980
 8004a48:	2000097c 	.word	0x2000097c
 8004a4c:	20000a8c 	.word	0x20000a8c
 8004a50:	20000a90 	.word	0x20000a90

08004a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a5a:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <vTaskSwitchContext+0x12c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a62:	4b48      	ldr	r3, [pc, #288]	; (8004b84 <vTaskSwitchContext+0x130>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a68:	e086      	b.n	8004b78 <vTaskSwitchContext+0x124>
		xYieldPending = pdFALSE;
 8004a6a:	4b46      	ldr	r3, [pc, #280]	; (8004b84 <vTaskSwitchContext+0x130>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004a70:	f7fb fe6f 	bl	8000752 <getRunTimeCounterValue>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4a44      	ldr	r2, [pc, #272]	; (8004b88 <vTaskSwitchContext+0x134>)
 8004a78:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004a7a:	4b43      	ldr	r3, [pc, #268]	; (8004b88 <vTaskSwitchContext+0x134>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <vTaskSwitchContext+0x138>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d909      	bls.n	8004a9a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004a86:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <vTaskSwitchContext+0x13c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a8c:	4a3e      	ldr	r2, [pc, #248]	; (8004b88 <vTaskSwitchContext+0x134>)
 8004a8e:	6810      	ldr	r0, [r2, #0]
 8004a90:	4a3e      	ldr	r2, [pc, #248]	; (8004b8c <vTaskSwitchContext+0x138>)
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	1a82      	subs	r2, r0, r2
 8004a96:	440a      	add	r2, r1
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <vTaskSwitchContext+0x134>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3b      	ldr	r2, [pc, #236]	; (8004b8c <vTaskSwitchContext+0x138>)
 8004aa0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <vTaskSwitchContext+0x13c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d111      	bne.n	8004ade <vTaskSwitchContext+0x8a>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3304      	adds	r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d10b      	bne.n	8004ade <vTaskSwitchContext+0x8a>
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d105      	bne.n	8004ade <vTaskSwitchContext+0x8a>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d008      	beq.n	8004af0 <vTaskSwitchContext+0x9c>
 8004ade:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <vTaskSwitchContext+0x13c>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <vTaskSwitchContext+0x13c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3334      	adds	r3, #52	; 0x34
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f7fc f80d 	bl	8000b0a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <vTaskSwitchContext+0x140>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004afe:	7afb      	ldrb	r3, [r7, #11]
 8004b00:	f1c3 031f 	rsb	r3, r3, #31
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	4924      	ldr	r1, [pc, #144]	; (8004b98 <vTaskSwitchContext+0x144>)
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <vTaskSwitchContext+0xe0>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	b672      	cpsid	i
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	b662      	cpsie	i
 8004b2e:	607b      	str	r3, [r7, #4]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <vTaskSwitchContext+0xde>
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <vTaskSwitchContext+0x144>)
 8004b40:	4413      	add	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3308      	adds	r3, #8
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d104      	bne.n	8004b64 <vTaskSwitchContext+0x110>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <vTaskSwitchContext+0x13c>)
 8004b6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <vTaskSwitchContext+0x13c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3358      	adds	r3, #88	; 0x58
 8004b74:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <vTaskSwitchContext+0x148>)
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000aa4 	.word	0x20000aa4
 8004b84:	20000a90 	.word	0x20000a90
 8004b88:	20000aac 	.word	0x20000aac
 8004b8c:	20000aa8 	.word	0x20000aa8
 8004b90:	2000097c 	.word	0x2000097c
 8004b94:	20000a84 	.word	0x20000a84
 8004b98:	20000980 	.word	0x20000980
 8004b9c:	20000014 	.word	0x20000014

08004ba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10c      	bne.n	8004bca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	b672      	cpsid	i
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	b662      	cpsie	i
 8004bc4:	60fb      	str	r3, [r7, #12]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <vTaskPlaceOnEventList+0x48>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe ffb7 	bl	8003b46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bd8:	2101      	movs	r1, #1
 8004bda:	6838      	ldr	r0, [r7, #0]
 8004bdc:	f000 fa78 	bl	80050d0 <prvAddCurrentTaskToDelayedList>
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	2000097c 	.word	0x2000097c

08004bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	b672      	cpsid	i
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	b662      	cpsie	i
 8004c16:	60fb      	str	r3, [r7, #12]
}
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	3318      	adds	r3, #24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe ffc9 	bl	8003bb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <xTaskRemoveFromEventList+0xb0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11c      	bne.n	8004c68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe ffc0 	bl	8003bb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <xTaskRemoveFromEventList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <xTaskRemoveFromEventList+0xb4>)
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <xTaskRemoveFromEventList+0xb8>)
 8004c58:	441a      	add	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe ff4c 	bl	8003afe <vListInsertEnd>
 8004c66:	e005      	b.n	8004c74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	480e      	ldr	r0, [pc, #56]	; (8004ca8 <xTaskRemoveFromEventList+0xbc>)
 8004c70:	f7fe ff45 	bl	8003afe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <xTaskRemoveFromEventList+0xc0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d905      	bls.n	8004c8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <xTaskRemoveFromEventList+0xc4>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e001      	b.n	8004c92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000aa4 	.word	0x20000aa4
 8004ca0:	20000a84 	.word	0x20000a84
 8004ca4:	20000980 	.word	0x20000980
 8004ca8:	20000a3c 	.word	0x20000a3c
 8004cac:	2000097c 	.word	0x2000097c
 8004cb0:	20000a90 	.word	0x20000a90

08004cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <vTaskInternalSetTimeOutState+0x24>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <vTaskInternalSetTimeOutState+0x28>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000a94 	.word	0x20000a94
 8004cdc:	20000a80 	.word	0x20000a80

08004ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10c      	bne.n	8004d0a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	b672      	cpsid	i
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	b662      	cpsie	i
 8004d04:	613b      	str	r3, [r7, #16]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10c      	bne.n	8004d2a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	b672      	cpsid	i
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	b662      	cpsie	i
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004d2a:	f000 fb47 	bl	80053bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <xTaskCheckForTimeOut+0xc4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d102      	bne.n	8004d4e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e023      	b.n	8004d96 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <xTaskCheckForTimeOut+0xc8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d007      	beq.n	8004d6a <xTaskCheckForTimeOut+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e015      	b.n	8004d96 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d20b      	bcs.n	8004d8c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff97 	bl	8004cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e004      	b.n	8004d96 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d96:	f000 fb45 	bl	8005424 <vPortExitCritical>

	return xReturn;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000a80 	.word	0x20000a80
 8004da8:	20000a94 	.word	0x20000a94

08004dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <vTaskMissedYield+0x14>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	20000a90 	.word	0x20000a90

08004dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dcc:	f000 f854 	bl	8004e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvIdleTask+0x2c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d907      	bls.n	8004de8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <prvIdleTask+0x30>)
 8004dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004de8:	f7fb fcbb 	bl	8000762 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004dec:	e7ee      	b.n	8004dcc <prvIdleTask+0x8>
 8004dee:	bf00      	nop
 8004df0:	20000980 	.word	0x20000980
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	e00c      	b.n	8004e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <prvInitialiseTaskLists+0x60>)
 8004e10:	4413      	add	r3, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fe46 	bl	8003aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d9ef      	bls.n	8004e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e24:	480d      	ldr	r0, [pc, #52]	; (8004e5c <prvInitialiseTaskLists+0x64>)
 8004e26:	f7fe fe3d 	bl	8003aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e2a:	480d      	ldr	r0, [pc, #52]	; (8004e60 <prvInitialiseTaskLists+0x68>)
 8004e2c:	f7fe fe3a 	bl	8003aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e30:	480c      	ldr	r0, [pc, #48]	; (8004e64 <prvInitialiseTaskLists+0x6c>)
 8004e32:	f7fe fe37 	bl	8003aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e36:	480c      	ldr	r0, [pc, #48]	; (8004e68 <prvInitialiseTaskLists+0x70>)
 8004e38:	f7fe fe34 	bl	8003aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e3c:	480b      	ldr	r0, [pc, #44]	; (8004e6c <prvInitialiseTaskLists+0x74>)
 8004e3e:	f7fe fe31 	bl	8003aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <prvInitialiseTaskLists+0x78>)
 8004e44:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <prvInitialiseTaskLists+0x64>)
 8004e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <prvInitialiseTaskLists+0x7c>)
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <prvInitialiseTaskLists+0x68>)
 8004e4c:	601a      	str	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000980 	.word	0x20000980
 8004e5c:	20000a0c 	.word	0x20000a0c
 8004e60:	20000a20 	.word	0x20000a20
 8004e64:	20000a3c 	.word	0x20000a3c
 8004e68:	20000a50 	.word	0x20000a50
 8004e6c:	20000a68 	.word	0x20000a68
 8004e70:	20000a34 	.word	0x20000a34
 8004e74:	20000a38 	.word	0x20000a38

08004e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e7e:	e019      	b.n	8004eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e80:	f000 fa9c 	bl	80053bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <prvCheckTasksWaitingTermination+0x50>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fe91 	bl	8003bb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <prvCheckTasksWaitingTermination+0x58>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <prvCheckTasksWaitingTermination+0x58>)
 8004ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eaa:	f000 fabb 	bl	8005424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f810 	bl	8004ed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e1      	bne.n	8004e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000a50 	.word	0x20000a50
 8004ecc:	20000a7c 	.word	0x20000a7c
 8004ed0:	20000a64 	.word	0x20000a64

08004ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3358      	adds	r3, #88	; 0x58
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 f853 	bl	8005f8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fc5d 	bl	80057b4 <vPortFree>
				vPortFree( pxTCB );
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fc5a 	bl	80057b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f00:	e01a      	b.n	8004f38 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d103      	bne.n	8004f14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fc51 	bl	80057b4 <vPortFree>
	}
 8004f12:	e011      	b.n	8004f38 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d00c      	beq.n	8004f38 <prvDeleteTCB+0x64>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	b672      	cpsid	i
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	b662      	cpsie	i
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <prvDeleteTCB+0x62>
	}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <prvResetNextTaskUnblockTime+0x38>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <prvResetNextTaskUnblockTime+0x3c>)
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295
 8004f56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f58:	e008      	b.n	8004f6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <prvResetNextTaskUnblockTime+0x38>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <prvResetNextTaskUnblockTime+0x3c>)
 8004f6a:	6013      	str	r3, [r2, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	20000a34 	.word	0x20000a34
 8004f7c:	20000a9c 	.word	0x20000a9c

08004f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <xTaskGetSchedulerState+0x34>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	e008      	b.n	8004fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <xTaskGetSchedulerState+0x38>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	e001      	b.n	8004fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fa6:	687b      	ldr	r3, [r7, #4]
	}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000a88 	.word	0x20000a88
 8004fb8:	20000aa4 	.word	0x20000aa4

08004fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d072      	beq.n	80050b8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fd2:	4b3c      	ldr	r3, [pc, #240]	; (80050c4 <xTaskPriorityDisinherit+0x108>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d00c      	beq.n	8004ff6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	b672      	cpsid	i
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	b662      	cpsie	i
 8004ff0:	60fb      	str	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	b672      	cpsid	i
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	b662      	cpsie	i
 8005012:	60bb      	str	r3, [r7, #8]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	429a      	cmp	r2, r3
 800502c:	d044      	beq.n	80050b8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d140      	bne.n	80050b8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3304      	adds	r3, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fdbc 	bl	8003bb8 <uxListRemove>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d115      	bne.n	8005072 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504a:	491f      	ldr	r1, [pc, #124]	; (80050c8 <xTaskPriorityDisinherit+0x10c>)
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xTaskPriorityDisinherit+0xb6>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	2201      	movs	r2, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43da      	mvns	r2, r3
 8005068:	4b18      	ldr	r3, [pc, #96]	; (80050cc <xTaskPriorityDisinherit+0x110>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4013      	ands	r3, r2
 800506e:	4a17      	ldr	r2, [pc, #92]	; (80050cc <xTaskPriorityDisinherit+0x110>)
 8005070:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f1c3 0207 	rsb	r2, r3, #7
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	2201      	movs	r2, #1
 800508c:	409a      	lsls	r2, r3
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <xTaskPriorityDisinherit+0x110>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <xTaskPriorityDisinherit+0x110>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <xTaskPriorityDisinherit+0x10c>)
 80050a6:	441a      	add	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe fd25 	bl	8003afe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050b8:	697b      	ldr	r3, [r7, #20]
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	2000097c 	.word	0x2000097c
 80050c8:	20000980 	.word	0x20000980
 80050cc:	20000a84 	.word	0x20000a84

080050d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050da:	4b29      	ldr	r3, [pc, #164]	; (8005180 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e0:	4b28      	ldr	r3, [pc, #160]	; (8005184 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fd66 	bl	8003bb8 <uxListRemove>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	2201      	movs	r2, #1
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43da      	mvns	r2, r3
 8005100:	4b21      	ldr	r3, [pc, #132]	; (8005188 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4013      	ands	r3, r2
 8005106:	4a20      	ldr	r2, [pc, #128]	; (8005188 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005108:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d10a      	bne.n	8005128 <prvAddCurrentTaskToDelayedList+0x58>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	481a      	ldr	r0, [pc, #104]	; (800518c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005122:	f7fe fcec 	bl	8003afe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005126:	e026      	b.n	8005176 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	429a      	cmp	r2, r3
 800513e:	d209      	bcs.n	8005154 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005140:	4b13      	ldr	r3, [pc, #76]	; (8005190 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3304      	adds	r3, #4
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7fe fcfa 	bl	8003b46 <vListInsert>
}
 8005152:	e010      	b.n	8005176 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fe fcf0 	bl	8003b46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	429a      	cmp	r2, r3
 800516e:	d202      	bcs.n	8005176 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000a80 	.word	0x20000a80
 8005184:	2000097c 	.word	0x2000097c
 8005188:	20000a84 	.word	0x20000a84
 800518c:	20000a68 	.word	0x20000a68
 8005190:	20000a38 	.word	0x20000a38
 8005194:	20000a34 	.word	0x20000a34
 8005198:	20000a9c 	.word	0x20000a9c

0800519c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3b04      	subs	r3, #4
 80051ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b04      	subs	r3, #4
 80051ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051cc:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <pxPortInitialiseStack+0x64>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b14      	subs	r3, #20
 80051d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b04      	subs	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f06f 0202 	mvn.w	r2, #2
 80051ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b20      	subs	r3, #32
 80051f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	08005205 	.word	0x08005205

08005204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <prvTaskExitError+0x5c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d00c      	beq.n	8005232 <prvTaskExitError+0x2e>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	b672      	cpsid	i
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	b662      	cpsie	i
 800522c:	60fb      	str	r3, [r7, #12]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <prvTaskExitError+0x2c>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	60bb      	str	r3, [r7, #8]
}
 8005248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800524a:	bf00      	nop
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0fc      	beq.n	800524c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000010 	.word	0x20000010
	...

08005270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <pxCurrentTCBConst2>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	f380 8809 	msr	PSP, r0
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	4770      	bx	lr
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst2>:
 8005290:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005298:	4808      	ldr	r0, [pc, #32]	; (80052bc <prvPortStartFirstTask+0x24>)
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f380 8808 	msr	MSP, r0
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8814 	msr	CONTROL, r0
 80052aa:	b662      	cpsie	i
 80052ac:	b661      	cpsie	f
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	df00      	svc	0
 80052b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ba:	bf00      	nop
 80052bc:	e000ed08 	.word	0xe000ed08

080052c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052c6:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <xPortStartScheduler+0xe4>)
 80052c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	22ff      	movs	r2, #255	; 0xff
 80052d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <xPortStartScheduler+0xe8>)
 80052ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <xPortStartScheduler+0xec>)
 80052f0:	2207      	movs	r2, #7
 80052f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f4:	e009      	b.n	800530a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <xPortStartScheduler+0xec>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <xPortStartScheduler+0xec>)
 80052fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	b2db      	uxtb	r3, r3
 8005308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d0ef      	beq.n	80052f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005316:	4b25      	ldr	r3, [pc, #148]	; (80053ac <xPortStartScheduler+0xec>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1c3 0307 	rsb	r3, r3, #7
 800531e:	2b04      	cmp	r3, #4
 8005320:	d00c      	beq.n	800533c <xPortStartScheduler+0x7c>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	b672      	cpsid	i
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	b662      	cpsie	i
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <xPortStartScheduler+0xec>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <xPortStartScheduler+0xec>)
 8005344:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005346:	4b19      	ldr	r3, [pc, #100]	; (80053ac <xPortStartScheduler+0xec>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <xPortStartScheduler+0xec>)
 8005350:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <xPortStartScheduler+0xf0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <xPortStartScheduler+0xf0>)
 8005360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005364:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <xPortStartScheduler+0xf0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <xPortStartScheduler+0xf0>)
 800536c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005370:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005372:	f000 f8dd 	bl	8005530 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <xPortStartScheduler+0xf4>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800537c:	f000 f8fc 	bl	8005578 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <xPortStartScheduler+0xf8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <xPortStartScheduler+0xf8>)
 8005386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800538a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800538c:	f7ff ff84 	bl	8005298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005390:	f7ff fb60 	bl	8004a54 <vTaskSwitchContext>
	prvTaskExitError();
 8005394:	f7ff ff36 	bl	8005204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e400 	.word	0xe000e400
 80053a8:	20000ab0 	.word	0x20000ab0
 80053ac:	20000ab4 	.word	0x20000ab4
 80053b0:	e000ed20 	.word	0xe000ed20
 80053b4:	20000010 	.word	0x20000010
 80053b8:	e000ef34 	.word	0xe000ef34

080053bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	b672      	cpsid	i
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	b662      	cpsie	i
 80053d6:	607b      	str	r3, [r7, #4]
}
 80053d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <vPortEnterCritical+0x60>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	4a0e      	ldr	r2, [pc, #56]	; (800541c <vPortEnterCritical+0x60>)
 80053e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <vPortEnterCritical+0x60>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d111      	bne.n	8005410 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <vPortEnterCritical+0x64>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <vPortEnterCritical+0x54>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	b672      	cpsid	i
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	b662      	cpsie	i
 800540a:	603b      	str	r3, [r7, #0]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <vPortEnterCritical+0x52>
	}
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20000010 	.word	0x20000010
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <vPortExitCritical+0x54>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10c      	bne.n	800544c <vPortExitCritical+0x28>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	b672      	cpsid	i
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	b662      	cpsie	i
 8005446:	607b      	str	r3, [r7, #4]
}
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <vPortExitCritical+0x54>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3b01      	subs	r3, #1
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <vPortExitCritical+0x54>)
 8005454:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <vPortExitCritical+0x54>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <vPortExitCritical+0x46>
 800545e:	2300      	movs	r3, #0
 8005460:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f383 8811 	msr	BASEPRI, r3
}
 8005468:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000010 	.word	0x20000010
 800547c:	00000000 	.word	0x00000000

08005480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005480:	f3ef 8009 	mrs	r0, PSP
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <pxCurrentTCBConst>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f01e 0f10 	tst.w	lr, #16
 8005490:	bf08      	it	eq
 8005492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054a4:	b672      	cpsid	i
 80054a6:	f380 8811 	msr	BASEPRI, r0
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	b662      	cpsie	i
 80054b4:	f7ff face 	bl	8004a54 <vTaskSwitchContext>
 80054b8:	f04f 0000 	mov.w	r0, #0
 80054bc:	f380 8811 	msr	BASEPRI, r0
 80054c0:	bc09      	pop	{r0, r3}
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	6808      	ldr	r0, [r1, #0]
 80054c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	f01e 0f10 	tst.w	lr, #16
 80054ce:	bf08      	it	eq
 80054d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054d4:	f380 8809 	msr	PSP, r0
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <pxCurrentTCBConst>:
 80054e0:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop

080054e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	b672      	cpsid	i
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	b662      	cpsie	i
 8005502:	607b      	str	r3, [r7, #4]
}
 8005504:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005506:	f7ff f9e3 	bl	80048d0 <xTaskIncrementTick>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <SysTick_Handler+0x44>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	2300      	movs	r3, #0
 800551a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f383 8811 	msr	BASEPRI, r3
}
 8005522:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <vPortSetupTimerInterrupt+0x34>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <vPortSetupTimerInterrupt+0x38>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <vPortSetupTimerInterrupt+0x3c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <vPortSetupTimerInterrupt+0x40>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <vPortSetupTimerInterrupt+0x44>)
 800554e:	3b01      	subs	r3, #1
 8005550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <vPortSetupTimerInterrupt+0x34>)
 8005554:	2207      	movs	r2, #7
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	e000e010 	.word	0xe000e010
 8005568:	e000e018 	.word	0xe000e018
 800556c:	20000004 	.word	0x20000004
 8005570:	10624dd3 	.word	0x10624dd3
 8005574:	e000e014 	.word	0xe000e014

08005578 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005578:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005588 <vPortEnableVFP+0x10>
 800557c:	6801      	ldr	r1, [r0, #0]
 800557e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005582:	6001      	str	r1, [r0, #0]
 8005584:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005586:	bf00      	nop
 8005588:	e000ed88 	.word	0xe000ed88

0800558c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005592:	f3ef 8305 	mrs	r3, IPSR
 8005596:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	d916      	bls.n	80055cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800559e:	4a19      	ldr	r2, [pc, #100]	; (8005604 <vPortValidateInterruptPriority+0x78>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <vPortValidateInterruptPriority+0x7c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	7afa      	ldrb	r2, [r7, #11]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d20c      	bcs.n	80055cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	b672      	cpsid	i
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	b662      	cpsie	i
 80055c6:	607b      	str	r3, [r7, #4]
}
 80055c8:	bf00      	nop
 80055ca:	e7fe      	b.n	80055ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <vPortValidateInterruptPriority+0x80>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <vPortValidateInterruptPriority+0x84>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d90c      	bls.n	80055f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	b672      	cpsid	i
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	b662      	cpsie	i
 80055f0:	603b      	str	r3, [r7, #0]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <vPortValidateInterruptPriority+0x68>
	}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000e3f0 	.word	0xe000e3f0
 8005608:	20000ab0 	.word	0x20000ab0
 800560c:	e000ed0c 	.word	0xe000ed0c
 8005610:	20000ab4 	.word	0x20000ab4

08005614 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	; 0x28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005620:	f7ff f8aa 	bl	8004778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005624:	4b5e      	ldr	r3, [pc, #376]	; (80057a0 <pvPortMalloc+0x18c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800562c:	f000 f920 	bl	8005870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005630:	4b5c      	ldr	r3, [pc, #368]	; (80057a4 <pvPortMalloc+0x190>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 8092 	bne.w	8005762 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01f      	beq.n	8005684 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005644:	2208      	movs	r2, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f023 0307 	bic.w	r3, r3, #7
 800565c:	3308      	adds	r3, #8
 800565e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <pvPortMalloc+0x70>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	b672      	cpsid	i
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	b662      	cpsie	i
 800567e:	617b      	str	r3, [r7, #20]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d06b      	beq.n	8005762 <pvPortMalloc+0x14e>
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <pvPortMalloc+0x194>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d866      	bhi.n	8005762 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005694:	4b45      	ldr	r3, [pc, #276]	; (80057ac <pvPortMalloc+0x198>)
 8005696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005698:	4b44      	ldr	r3, [pc, #272]	; (80057ac <pvPortMalloc+0x198>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800569e:	e004      	b.n	80056aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d903      	bls.n	80056bc <pvPortMalloc+0xa8>
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f1      	bne.n	80056a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056bc:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <pvPortMalloc+0x18c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d04d      	beq.n	8005762 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2208      	movs	r2, #8
 80056cc:	4413      	add	r3, r2
 80056ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	2308      	movs	r3, #8
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d921      	bls.n	800572c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <pvPortMalloc+0x100>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	b672      	cpsid	i
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	b662      	cpsie	i
 800570e:	613b      	str	r3, [r7, #16]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005726:	69b8      	ldr	r0, [r7, #24]
 8005728:	f000 f904 	bl	8005934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800572c:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <pvPortMalloc+0x194>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <pvPortMalloc+0x194>)
 8005738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <pvPortMalloc+0x194>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <pvPortMalloc+0x19c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d203      	bcs.n	800574e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <pvPortMalloc+0x194>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <pvPortMalloc+0x19c>)
 800574c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <pvPortMalloc+0x190>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	431a      	orrs	r2, r3
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005762:	f7ff f817 	bl	8004794 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800576c:	f7fb f9e0 	bl	8000b30 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <pvPortMalloc+0x180>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	b672      	cpsid	i
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	b662      	cpsie	i
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <pvPortMalloc+0x17e>
	return pvReturn;
 8005794:	69fb      	ldr	r3, [r7, #28]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3728      	adds	r7, #40	; 0x28
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200046c0 	.word	0x200046c0
 80057a4:	200046cc 	.word	0x200046cc
 80057a8:	200046c4 	.word	0x200046c4
 80057ac:	200046b8 	.word	0x200046b8
 80057b0:	200046c8 	.word	0x200046c8

080057b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04c      	beq.n	8005860 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057c6:	2308      	movs	r3, #8
 80057c8:	425b      	negs	r3, r3
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <vPortFree+0xb4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <vPortFree+0x48>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	b672      	cpsid	i
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	b662      	cpsie	i
 80057f6:	60fb      	str	r3, [r7, #12]
}
 80057f8:	bf00      	nop
 80057fa:	e7fe      	b.n	80057fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <vPortFree+0x6a>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	b672      	cpsid	i
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	b662      	cpsie	i
 8005818:	60bb      	str	r3, [r7, #8]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4b11      	ldr	r3, [pc, #68]	; (8005868 <vPortFree+0xb4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d115      	bne.n	8005860 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <vPortFree+0xb4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005844:	f7fe ff98 	bl	8004778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b07      	ldr	r3, [pc, #28]	; (800586c <vPortFree+0xb8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4413      	add	r3, r2
 8005852:	4a06      	ldr	r2, [pc, #24]	; (800586c <vPortFree+0xb8>)
 8005854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005856:	6938      	ldr	r0, [r7, #16]
 8005858:	f000 f86c 	bl	8005934 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800585c:	f7fe ff9a 	bl	8004794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005860:	bf00      	nop
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200046cc 	.word	0x200046cc
 800586c:	200046c4 	.word	0x200046c4

08005870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005876:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800587a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800587c:	4b27      	ldr	r3, [pc, #156]	; (800591c <prvHeapInit+0xac>)
 800587e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3307      	adds	r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0307 	bic.w	r3, r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	4a1f      	ldr	r2, [pc, #124]	; (800591c <prvHeapInit+0xac>)
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058a8:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <prvHeapInit+0xb0>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058ae:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <prvHeapInit+0xb0>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058bc:	2208      	movs	r2, #8
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0307 	bic.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <prvHeapInit+0xb4>)
 80058d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <prvHeapInit+0xb4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <prvHeapInit+0xb4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <prvHeapInit+0xb4>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <prvHeapInit+0xb8>)
 80058fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a09      	ldr	r2, [pc, #36]	; (800592c <prvHeapInit+0xbc>)
 8005906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <prvHeapInit+0xc0>)
 800590a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800590e:	601a      	str	r2, [r3, #0]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000ab8 	.word	0x20000ab8
 8005920:	200046b8 	.word	0x200046b8
 8005924:	200046c0 	.word	0x200046c0
 8005928:	200046c8 	.word	0x200046c8
 800592c:	200046c4 	.word	0x200046c4
 8005930:	200046cc 	.word	0x200046cc

08005934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800593c:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <prvInsertBlockIntoFreeList+0xac>)
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e002      	b.n	8005948 <prvInsertBlockIntoFreeList+0x14>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d8f7      	bhi.n	8005942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d108      	bne.n	8005976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	441a      	add	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	441a      	add	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d118      	bne.n	80059bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d00d      	beq.n	80059b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e008      	b.n	80059c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvInsertBlockIntoFreeList+0xb0>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e003      	b.n	80059c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d002      	beq.n	80059d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	200046b8 	.word	0x200046b8
 80059e4:	200046c0 	.word	0x200046c0

080059e8 <BlinkyButton_ctor>:


#include "BlinkyButton.h"
#include "Bsp.h"

void BlinkyButton_ctor(BlinkyButton * const me) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    Active_ctor(&me->super, (DispatchHandler)&BlinkyButton_dispatch);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	490a      	ldr	r1, [pc, #40]	; (8005a1c <BlinkyButton_ctor+0x34>)
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fa fd8d 	bl	8000514 <Active_ctor>
    TimeEvent_ctor(&me->te,TIMEOUT_SIG,&me->super);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	330c      	adds	r3, #12
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	2103      	movs	r1, #3
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fa fe18 	bl	8000638 <TimeEvent_ctor>
    me->isLedOn = false;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	771a      	strb	r2, [r3, #28]
    me->blink_time = INITIAL_BLINK_TIME;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	22fa      	movs	r2, #250	; 0xfa
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08005a21 	.word	0x08005a21

08005a20 <BlinkyButton_dispatch>:


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e){
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
	switch(e->sig){
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d84c      	bhi.n	8005acc <BlinkyButton_dispatch+0xac>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <BlinkyButton_dispatch+0x18>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a9d 	.word	0x08005a9d
 8005a40:	08005ac1 	.word	0x08005ac1
 8005a44:	08005a4d 	.word	0x08005a4d
		case INIT_SIG:{
			BspLedOff();
 8005a48:	f000 f8b8 	bl	8005bbc <BspLedOff>
		}
		case TIMEOUT_SIG:{
            if (!me->isLedOn) { /* LED not on */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7f1b      	ldrb	r3, [r3, #28]
 8005a50:	f083 0301 	eor.w	r3, r3, #1
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <BlinkyButton_dispatch+0x58>
            	BspLedOn();
 8005a5a:	f000 f8a3 	bl	8005ba4 <BspLedOn>
            	me->isLedOn = true;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	771a      	strb	r2, [r3, #28]
                TimeEvent_arm(&me->te, me->blink_time, 0U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f103 000c 	add.w	r0, r3, #12
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fa fe15 	bl	80006a0 <TimeEvent_arm>
            else {  /* LED is on */
            	BspLedOff();
            	me->isLedOn = false;
                TimeEvent_arm(&me->te, me->blink_time * 3U, 0U);
            }
			break;
 8005a76:	e02c      	b.n	8005ad2 <BlinkyButton_dispatch+0xb2>
            	BspLedOff();
 8005a78:	f000 f8a0 	bl	8005bbc <BspLedOff>
            	me->isLedOn = false;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
                TimeEvent_arm(&me->te, me->blink_time * 3U, 0U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f103 000c 	add.w	r0, r3, #12
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	2200      	movs	r2, #0
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fa fe03 	bl	80006a0 <TimeEvent_arm>
			break;
 8005a9a:	e01a      	b.n	8005ad2 <BlinkyButton_dispatch+0xb2>
		}
		case BUTTON_PRESSED_SIG:{
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	480e      	ldr	r0, [pc, #56]	; (8005adc <BlinkyButton_dispatch+0xbc>)
 8005aa2:	f7fb fd67 	bl	8001574 <HAL_GPIO_WritePin>

            me->blink_time >>= 1; /* shorten the blink time by factor of 2 */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	085a      	lsrs	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	621a      	str	r2, [r3, #32]
            if (me->blink_time == 0U) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <BlinkyButton_dispatch+0xb0>
                me->blink_time = INITIAL_BLINK_TIME;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	22fa      	movs	r2, #250	; 0xfa
 8005abc:	621a      	str	r2, [r3, #32]
            }
			break;
 8005abe:	e007      	b.n	8005ad0 <BlinkyButton_dispatch+0xb0>
		}
		case BUTTON_RELEASED_SIG:{
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4805      	ldr	r0, [pc, #20]	; (8005adc <BlinkyButton_dispatch+0xbc>)
 8005ac6:	f7fb fd55 	bl	8001574 <HAL_GPIO_WritePin>
			break;
 8005aca:	e002      	b.n	8005ad2 <BlinkyButton_dispatch+0xb2>
		}
		default: {
			break;
 8005acc:	bf00      	nop
 8005ace:	e000      	b.n	8005ad2 <BlinkyButton_dispatch+0xb2>
			break;
 8005ad0:	bf00      	nop
		}
	}
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40020400 	.word	0x40020400

08005ae0 <App_TimeTickHook>:


/* uCOS-II application hooks ===============================================*/
void App_TimeTickHook(void) {
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
        uint32_t previous;
    } buttons = { 0U, 0U };
    uint32_t current;
    uint32_t tmp;

    TimeEvent_tick(); /* process all uC/AO time events */
 8005ae6:	f7fa fdef 	bl	80006c8 <TimeEvent_tick>

    /* Perform the debouncing of buttons. The algorithm for debouncing
    * adapted from the book "Embedded Systems Dictionary" by Jack Ganssle
    * and Michael Barr, page 71.
    */
    current = BspGetButtonState(); /* read SW1 */
 8005aea:	f000 f849 	bl	8005b80 <BspGetButtonState>
 8005aee:	4603      	mov	r3, r0
 8005af0:	607b      	str	r3, [r7, #4]
    tmp = buttons.depressed; /* save the debounced depressed buttons */
 8005af2:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <App_TimeTickHook+0x90>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	603b      	str	r3, [r7, #0]
    buttons.depressed |= (buttons.previous & current); /* set depressed */
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <App_TimeTickHook+0x90>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <App_TimeTickHook+0x90>)
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	400b      	ands	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a1a      	ldr	r2, [pc, #104]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b08:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.previous | current); /* clear released */
 8005b0a:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	4013      	ands	r3, r2
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b1a:	6013      	str	r3, [r2, #0]
    buttons.previous   = current; /* update the history */
 8005b1c:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6053      	str	r3, [r2, #4]
    tmp ^= buttons.depressed;     /* changed debounced depressed */
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4053      	eors	r3, r2
 8005b2a:	603b      	str	r3, [r7, #0]

    if ((tmp & BspGetButtonState()) != 0U) {  /* debounced SW1 state changed? */
 8005b2c:	f000 f828 	bl	8005b80 <BspGetButtonState>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d014      	beq.n	8005b66 <App_TimeTickHook+0x86>
        if ((buttons.depressed & BspGetButtonState()) != 0U) { /* is SW1 depressed? */
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <App_TimeTickHook+0x90>)
 8005b3e:	681c      	ldr	r4, [r3, #0]
 8005b40:	f000 f81e 	bl	8005b80 <BspGetButtonState>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4023      	ands	r3, r4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d006      	beq.n	8005b5a <App_TimeTickHook+0x7a>
            /* post the "button-pressed" event from ISR */
            static Event const buttonPressedEvt = {BUTTON_PRESSED_SIG};
            Active_post(AO_BlinkyButton, &buttonPressedEvt);
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <App_TimeTickHook+0x94>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4909      	ldr	r1, [pc, #36]	; (8005b78 <App_TimeTickHook+0x98>)
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fa fd50 	bl	80005f8 <Active_post>
            /* post the "button-released" event from ISR */
            static Event const buttonReleasedEvt = {BUTTON_RELEASED_SIG};
            Active_post(AO_BlinkyButton, &buttonReleasedEvt);
        }
    }
}
 8005b58:	e005      	b.n	8005b66 <App_TimeTickHook+0x86>
            Active_post(AO_BlinkyButton, &buttonReleasedEvt);
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <App_TimeTickHook+0x94>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4907      	ldr	r1, [pc, #28]	; (8005b7c <App_TimeTickHook+0x9c>)
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fa fd49 	bl	80005f8 <Active_post>
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd90      	pop	{r4, r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200046d0 	.word	0x200046d0
 8005b74:	20000000 	.word	0x20000000
 8005b78:	08006650 	.word	0x08006650
 8005b7c:	08006654 	.word	0x08006654

08005b80 <BspGetButtonState>:

#include "Bsp.h"



_Bool BspGetButtonState(void){
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 8005b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b88:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <BspGetButtonState+0x20>)
 8005b8a:	f7fb fcdb 	bl	8001544 <HAL_GPIO_ReadPin>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bf14      	ite	ne
 8005b94:	2301      	movne	r3, #1
 8005b96:	2300      	moveq	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40020800 	.word	0x40020800

08005ba4 <BspLedOn>:

void BspLedOn(void){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8005ba8:	2201      	movs	r2, #1
 8005baa:	2101      	movs	r1, #1
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <BspLedOn+0x14>)
 8005bae:	f7fb fce1 	bl	8001574 <HAL_GPIO_WritePin>
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40020400 	.word	0x40020400

08005bbc <BspLedOff>:
void BspLedOff(void){
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <BspLedOff+0x14>)
 8005bc6:	f7fb fcd5 	bl	8001574 <HAL_GPIO_WritePin>
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40020400 	.word	0x40020400

08005bd4 <__errno>:
 8005bd4:	4b01      	ldr	r3, [pc, #4]	; (8005bdc <__errno+0x8>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000014 	.word	0x20000014

08005be0 <std>:
 8005be0:	2300      	movs	r3, #0
 8005be2:	b510      	push	{r4, lr}
 8005be4:	4604      	mov	r4, r0
 8005be6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bee:	6083      	str	r3, [r0, #8]
 8005bf0:	8181      	strh	r1, [r0, #12]
 8005bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8005bf4:	81c2      	strh	r2, [r0, #14]
 8005bf6:	6183      	str	r3, [r0, #24]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	305c      	adds	r0, #92	; 0x5c
 8005bfe:	f000 f91a 	bl	8005e36 <memset>
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <std+0x38>)
 8005c04:	6263      	str	r3, [r4, #36]	; 0x24
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <std+0x3c>)
 8005c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <std+0x40>)
 8005c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <std+0x44>)
 8005c10:	6224      	str	r4, [r4, #32]
 8005c12:	6323      	str	r3, [r4, #48]	; 0x30
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	bf00      	nop
 8005c18:	080061f1 	.word	0x080061f1
 8005c1c:	08006213 	.word	0x08006213
 8005c20:	0800624b 	.word	0x0800624b
 8005c24:	0800626f 	.word	0x0800626f

08005c28 <_cleanup_r>:
 8005c28:	4901      	ldr	r1, [pc, #4]	; (8005c30 <_cleanup_r+0x8>)
 8005c2a:	f000 b8af 	b.w	8005d8c <_fwalk_reent>
 8005c2e:	bf00      	nop
 8005c30:	080063c9 	.word	0x080063c9

08005c34 <__sfmoreglue>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	2268      	movs	r2, #104	; 0x68
 8005c38:	1e4d      	subs	r5, r1, #1
 8005c3a:	4355      	muls	r5, r2
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c42:	f000 f921 	bl	8005e88 <_malloc_r>
 8005c46:	4604      	mov	r4, r0
 8005c48:	b140      	cbz	r0, 8005c5c <__sfmoreglue+0x28>
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c50:	300c      	adds	r0, #12
 8005c52:	60a0      	str	r0, [r4, #8]
 8005c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c58:	f000 f8ed 	bl	8005e36 <memset>
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}

08005c60 <__sfp_lock_acquire>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__sfp_lock_acquire+0x8>)
 8005c62:	f000 b8d8 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	200046d9 	.word	0x200046d9

08005c6c <__sfp_lock_release>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__sfp_lock_release+0x8>)
 8005c6e:	f000 b8d3 	b.w	8005e18 <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	200046d9 	.word	0x200046d9

08005c78 <__sinit_lock_acquire>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__sinit_lock_acquire+0x8>)
 8005c7a:	f000 b8cc 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 8005c7e:	bf00      	nop
 8005c80:	200046da 	.word	0x200046da

08005c84 <__sinit_lock_release>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__sinit_lock_release+0x8>)
 8005c86:	f000 b8c7 	b.w	8005e18 <__retarget_lock_release_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	200046da 	.word	0x200046da

08005c90 <__sinit>:
 8005c90:	b510      	push	{r4, lr}
 8005c92:	4604      	mov	r4, r0
 8005c94:	f7ff fff0 	bl	8005c78 <__sinit_lock_acquire>
 8005c98:	69a3      	ldr	r3, [r4, #24]
 8005c9a:	b11b      	cbz	r3, 8005ca4 <__sinit+0x14>
 8005c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca0:	f7ff bff0 	b.w	8005c84 <__sinit_lock_release>
 8005ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <__sinit+0x68>)
 8005cac:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <__sinit+0x6c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	bf04      	itt	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	61a3      	streq	r3, [r4, #24]
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 f820 	bl	8005d00 <__sfp>
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 f81c 	bl	8005d00 <__sfp>
 8005cc8:	60a0      	str	r0, [r4, #8]
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 f818 	bl	8005d00 <__sfp>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	60e0      	str	r0, [r4, #12]
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	6860      	ldr	r0, [r4, #4]
 8005cd8:	f7ff ff82 	bl	8005be0 <std>
 8005cdc:	68a0      	ldr	r0, [r4, #8]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2109      	movs	r1, #9
 8005ce2:	f7ff ff7d 	bl	8005be0 <std>
 8005ce6:	68e0      	ldr	r0, [r4, #12]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	2112      	movs	r1, #18
 8005cec:	f7ff ff78 	bl	8005be0 <std>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	61a3      	str	r3, [r4, #24]
 8005cf4:	e7d2      	b.n	8005c9c <__sinit+0xc>
 8005cf6:	bf00      	nop
 8005cf8:	080066b8 	.word	0x080066b8
 8005cfc:	08005c29 	.word	0x08005c29

08005d00 <__sfp>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	4607      	mov	r7, r0
 8005d04:	f7ff ffac 	bl	8005c60 <__sfp_lock_acquire>
 8005d08:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <__sfp+0x84>)
 8005d0a:	681e      	ldr	r6, [r3, #0]
 8005d0c:	69b3      	ldr	r3, [r6, #24]
 8005d0e:	b913      	cbnz	r3, 8005d16 <__sfp+0x16>
 8005d10:	4630      	mov	r0, r6
 8005d12:	f7ff ffbd 	bl	8005c90 <__sinit>
 8005d16:	3648      	adds	r6, #72	; 0x48
 8005d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	d503      	bpl.n	8005d28 <__sfp+0x28>
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	b30b      	cbz	r3, 8005d68 <__sfp+0x68>
 8005d24:	6836      	ldr	r6, [r6, #0]
 8005d26:	e7f7      	b.n	8005d18 <__sfp+0x18>
 8005d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d2c:	b9d5      	cbnz	r5, 8005d64 <__sfp+0x64>
 8005d2e:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <__sfp+0x88>)
 8005d30:	60e3      	str	r3, [r4, #12]
 8005d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d36:	6665      	str	r5, [r4, #100]	; 0x64
 8005d38:	f000 f86c 	bl	8005e14 <__retarget_lock_init_recursive>
 8005d3c:	f7ff ff96 	bl	8005c6c <__sfp_lock_release>
 8005d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d48:	6025      	str	r5, [r4, #0]
 8005d4a:	61a5      	str	r5, [r4, #24]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d54:	f000 f86f 	bl	8005e36 <memset>
 8005d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d60:	4620      	mov	r0, r4
 8005d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d64:	3468      	adds	r4, #104	; 0x68
 8005d66:	e7d9      	b.n	8005d1c <__sfp+0x1c>
 8005d68:	2104      	movs	r1, #4
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ff62 	bl	8005c34 <__sfmoreglue>
 8005d70:	4604      	mov	r4, r0
 8005d72:	6030      	str	r0, [r6, #0]
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d1d5      	bne.n	8005d24 <__sfp+0x24>
 8005d78:	f7ff ff78 	bl	8005c6c <__sfp_lock_release>
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	e7ee      	b.n	8005d60 <__sfp+0x60>
 8005d82:	bf00      	nop
 8005d84:	080066b8 	.word	0x080066b8
 8005d88:	ffff0001 	.word	0xffff0001

08005d8c <_fwalk_reent>:
 8005d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d90:	4606      	mov	r6, r0
 8005d92:	4688      	mov	r8, r1
 8005d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d98:	2700      	movs	r7, #0
 8005d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8005da2:	d505      	bpl.n	8005db0 <_fwalk_reent+0x24>
 8005da4:	6824      	ldr	r4, [r4, #0]
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d1f7      	bne.n	8005d9a <_fwalk_reent+0xe>
 8005daa:	4638      	mov	r0, r7
 8005dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db0:	89ab      	ldrh	r3, [r5, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d907      	bls.n	8005dc6 <_fwalk_reent+0x3a>
 8005db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	d003      	beq.n	8005dc6 <_fwalk_reent+0x3a>
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	47c0      	blx	r8
 8005dc4:	4307      	orrs	r7, r0
 8005dc6:	3568      	adds	r5, #104	; 0x68
 8005dc8:	e7e9      	b.n	8005d9e <_fwalk_reent+0x12>
	...

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4d0b      	ldr	r5, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f000 fbea 	bl	80065b8 <_init>
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2600      	movs	r6, #0
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	080066c4 	.word	0x080066c4
 8005e08:	080066c4 	.word	0x080066c4
 8005e0c:	080066c4 	.word	0x080066c4
 8005e10:	080066c8 	.word	0x080066c8

08005e14 <__retarget_lock_init_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_acquire_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <__retarget_lock_release_recursive>:
 8005e18:	4770      	bx	lr

08005e1a <memcpy>:
 8005e1a:	440a      	add	r2, r1
 8005e1c:	4291      	cmp	r1, r2
 8005e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e22:	d100      	bne.n	8005e26 <memcpy+0xc>
 8005e24:	4770      	bx	lr
 8005e26:	b510      	push	{r4, lr}
 8005e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e30:	4291      	cmp	r1, r2
 8005e32:	d1f9      	bne.n	8005e28 <memcpy+0xe>
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <memset>:
 8005e36:	4402      	add	r2, r0
 8005e38:	4603      	mov	r3, r0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d100      	bne.n	8005e40 <memset+0xa>
 8005e3e:	4770      	bx	lr
 8005e40:	f803 1b01 	strb.w	r1, [r3], #1
 8005e44:	e7f9      	b.n	8005e3a <memset+0x4>
	...

08005e48 <sbrk_aligned>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0e      	ldr	r6, [pc, #56]	; (8005e84 <sbrk_aligned+0x3c>)
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6831      	ldr	r1, [r6, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	b911      	cbnz	r1, 8005e5a <sbrk_aligned+0x12>
 8005e54:	f000 f8f6 	bl	8006044 <_sbrk_r>
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f8f1 	bl	8006044 <_sbrk_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d00a      	beq.n	8005e7c <sbrk_aligned+0x34>
 8005e66:	1cc4      	adds	r4, r0, #3
 8005e68:	f024 0403 	bic.w	r4, r4, #3
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d007      	beq.n	8005e80 <sbrk_aligned+0x38>
 8005e70:	1a21      	subs	r1, r4, r0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f8e6 	bl	8006044 <_sbrk_r>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d101      	bne.n	8005e80 <sbrk_aligned+0x38>
 8005e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e80:	4620      	mov	r0, r4
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	200046e0 	.word	0x200046e0

08005e88 <_malloc_r>:
 8005e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8c:	1ccd      	adds	r5, r1, #3
 8005e8e:	f025 0503 	bic.w	r5, r5, #3
 8005e92:	3508      	adds	r5, #8
 8005e94:	2d0c      	cmp	r5, #12
 8005e96:	bf38      	it	cc
 8005e98:	250c      	movcc	r5, #12
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	db01      	blt.n	8005ea4 <_malloc_r+0x1c>
 8005ea0:	42a9      	cmp	r1, r5
 8005ea2:	d905      	bls.n	8005eb0 <_malloc_r+0x28>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	4e2e      	ldr	r6, [pc, #184]	; (8005f6c <_malloc_r+0xe4>)
 8005eb2:	f000 fb05 	bl	80064c0 <__malloc_lock>
 8005eb6:	6833      	ldr	r3, [r6, #0]
 8005eb8:	461c      	mov	r4, r3
 8005eba:	bb34      	cbnz	r4, 8005f0a <_malloc_r+0x82>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff ffc2 	bl	8005e48 <sbrk_aligned>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	d14d      	bne.n	8005f66 <_malloc_r+0xde>
 8005eca:	6834      	ldr	r4, [r6, #0]
 8005ecc:	4626      	mov	r6, r4
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d140      	bne.n	8005f54 <_malloc_r+0xcc>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	eb04 0803 	add.w	r8, r4, r3
 8005edc:	f000 f8b2 	bl	8006044 <_sbrk_r>
 8005ee0:	4580      	cmp	r8, r0
 8005ee2:	d13a      	bne.n	8005f5a <_malloc_r+0xd2>
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	3503      	adds	r5, #3
 8005ee8:	1a6d      	subs	r5, r5, r1
 8005eea:	f025 0503 	bic.w	r5, r5, #3
 8005eee:	3508      	adds	r5, #8
 8005ef0:	2d0c      	cmp	r5, #12
 8005ef2:	bf38      	it	cc
 8005ef4:	250c      	movcc	r5, #12
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff ffa5 	bl	8005e48 <sbrk_aligned>
 8005efe:	3001      	adds	r0, #1
 8005f00:	d02b      	beq.n	8005f5a <_malloc_r+0xd2>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	442b      	add	r3, r5
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	e00e      	b.n	8005f28 <_malloc_r+0xa0>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	1b52      	subs	r2, r2, r5
 8005f0e:	d41e      	bmi.n	8005f4e <_malloc_r+0xc6>
 8005f10:	2a0b      	cmp	r2, #11
 8005f12:	d916      	bls.n	8005f42 <_malloc_r+0xba>
 8005f14:	1961      	adds	r1, r4, r5
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	bf18      	it	ne
 8005f1c:	6059      	strne	r1, [r3, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	bf08      	it	eq
 8005f22:	6031      	streq	r1, [r6, #0]
 8005f24:	5162      	str	r2, [r4, r5]
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f104 060b 	add.w	r6, r4, #11
 8005f2e:	f000 facd 	bl	80064cc <__malloc_unlock>
 8005f32:	f026 0607 	bic.w	r6, r6, #7
 8005f36:	1d23      	adds	r3, r4, #4
 8005f38:	1af2      	subs	r2, r6, r3
 8005f3a:	d0b6      	beq.n	8005eaa <_malloc_r+0x22>
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	50a3      	str	r3, [r4, r2]
 8005f40:	e7b3      	b.n	8005eaa <_malloc_r+0x22>
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	bf0c      	ite	eq
 8005f48:	6032      	streq	r2, [r6, #0]
 8005f4a:	605a      	strne	r2, [r3, #4]
 8005f4c:	e7ec      	b.n	8005f28 <_malloc_r+0xa0>
 8005f4e:	4623      	mov	r3, r4
 8005f50:	6864      	ldr	r4, [r4, #4]
 8005f52:	e7b2      	b.n	8005eba <_malloc_r+0x32>
 8005f54:	4634      	mov	r4, r6
 8005f56:	6876      	ldr	r6, [r6, #4]
 8005f58:	e7b9      	b.n	8005ece <_malloc_r+0x46>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f000 fab4 	bl	80064cc <__malloc_unlock>
 8005f64:	e7a1      	b.n	8005eaa <_malloc_r+0x22>
 8005f66:	6025      	str	r5, [r4, #0]
 8005f68:	e7de      	b.n	8005f28 <_malloc_r+0xa0>
 8005f6a:	bf00      	nop
 8005f6c:	200046dc 	.word	0x200046dc

08005f70 <cleanup_glue>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	460c      	mov	r4, r1
 8005f74:	6809      	ldr	r1, [r1, #0]
 8005f76:	4605      	mov	r5, r0
 8005f78:	b109      	cbz	r1, 8005f7e <cleanup_glue+0xe>
 8005f7a:	f7ff fff9 	bl	8005f70 <cleanup_glue>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f86:	f000 baa7 	b.w	80064d8 <_free_r>
	...

08005f8c <_reclaim_reent>:
 8005f8c:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <_reclaim_reent+0xb4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4283      	cmp	r3, r0
 8005f92:	b570      	push	{r4, r5, r6, lr}
 8005f94:	4604      	mov	r4, r0
 8005f96:	d051      	beq.n	800603c <_reclaim_reent+0xb0>
 8005f98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f9a:	b143      	cbz	r3, 8005fae <_reclaim_reent+0x22>
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d14a      	bne.n	8006038 <_reclaim_reent+0xac>
 8005fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa4:	6819      	ldr	r1, [r3, #0]
 8005fa6:	b111      	cbz	r1, 8005fae <_reclaim_reent+0x22>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fa95 	bl	80064d8 <_free_r>
 8005fae:	6961      	ldr	r1, [r4, #20]
 8005fb0:	b111      	cbz	r1, 8005fb8 <_reclaim_reent+0x2c>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fa90 	bl	80064d8 <_free_r>
 8005fb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fba:	b111      	cbz	r1, 8005fc2 <_reclaim_reent+0x36>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 fa8b 	bl	80064d8 <_free_r>
 8005fc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fc4:	b111      	cbz	r1, 8005fcc <_reclaim_reent+0x40>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 fa86 	bl	80064d8 <_free_r>
 8005fcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005fce:	b111      	cbz	r1, 8005fd6 <_reclaim_reent+0x4a>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fa81 	bl	80064d8 <_free_r>
 8005fd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005fd8:	b111      	cbz	r1, 8005fe0 <_reclaim_reent+0x54>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fa7c 	bl	80064d8 <_free_r>
 8005fe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005fe2:	b111      	cbz	r1, 8005fea <_reclaim_reent+0x5e>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fa77 	bl	80064d8 <_free_r>
 8005fea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005fec:	b111      	cbz	r1, 8005ff4 <_reclaim_reent+0x68>
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 fa72 	bl	80064d8 <_free_r>
 8005ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff6:	b111      	cbz	r1, 8005ffe <_reclaim_reent+0x72>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fa6d 	bl	80064d8 <_free_r>
 8005ffe:	69a3      	ldr	r3, [r4, #24]
 8006000:	b1e3      	cbz	r3, 800603c <_reclaim_reent+0xb0>
 8006002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006004:	4620      	mov	r0, r4
 8006006:	4798      	blx	r3
 8006008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800600a:	b1b9      	cbz	r1, 800603c <_reclaim_reent+0xb0>
 800600c:	4620      	mov	r0, r4
 800600e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006012:	f7ff bfad 	b.w	8005f70 <cleanup_glue>
 8006016:	5949      	ldr	r1, [r1, r5]
 8006018:	b941      	cbnz	r1, 800602c <_reclaim_reent+0xa0>
 800601a:	3504      	adds	r5, #4
 800601c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601e:	2d80      	cmp	r5, #128	; 0x80
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	d1f8      	bne.n	8006016 <_reclaim_reent+0x8a>
 8006024:	4620      	mov	r0, r4
 8006026:	f000 fa57 	bl	80064d8 <_free_r>
 800602a:	e7ba      	b.n	8005fa2 <_reclaim_reent+0x16>
 800602c:	680e      	ldr	r6, [r1, #0]
 800602e:	4620      	mov	r0, r4
 8006030:	f000 fa52 	bl	80064d8 <_free_r>
 8006034:	4631      	mov	r1, r6
 8006036:	e7ef      	b.n	8006018 <_reclaim_reent+0x8c>
 8006038:	2500      	movs	r5, #0
 800603a:	e7ef      	b.n	800601c <_reclaim_reent+0x90>
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	bf00      	nop
 8006040:	20000014 	.word	0x20000014

08006044 <_sbrk_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_sbrk_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fa ff4c 	bl	8000eec <_sbrk>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_sbrk_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_sbrk_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	200046e4 	.word	0x200046e4

08006064 <setvbuf>:
 8006064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006068:	461d      	mov	r5, r3
 800606a:	4b5d      	ldr	r3, [pc, #372]	; (80061e0 <setvbuf+0x17c>)
 800606c:	681f      	ldr	r7, [r3, #0]
 800606e:	4604      	mov	r4, r0
 8006070:	460e      	mov	r6, r1
 8006072:	4690      	mov	r8, r2
 8006074:	b127      	cbz	r7, 8006080 <setvbuf+0x1c>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	b913      	cbnz	r3, 8006080 <setvbuf+0x1c>
 800607a:	4638      	mov	r0, r7
 800607c:	f7ff fe08 	bl	8005c90 <__sinit>
 8006080:	4b58      	ldr	r3, [pc, #352]	; (80061e4 <setvbuf+0x180>)
 8006082:	429c      	cmp	r4, r3
 8006084:	d167      	bne.n	8006156 <setvbuf+0xf2>
 8006086:	687c      	ldr	r4, [r7, #4]
 8006088:	f1b8 0f02 	cmp.w	r8, #2
 800608c:	d006      	beq.n	800609c <setvbuf+0x38>
 800608e:	f1b8 0f01 	cmp.w	r8, #1
 8006092:	f200 809f 	bhi.w	80061d4 <setvbuf+0x170>
 8006096:	2d00      	cmp	r5, #0
 8006098:	f2c0 809c 	blt.w	80061d4 <setvbuf+0x170>
 800609c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d405      	bmi.n	80060ae <setvbuf+0x4a>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	0598      	lsls	r0, r3, #22
 80060a6:	d402      	bmi.n	80060ae <setvbuf+0x4a>
 80060a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060aa:	f7ff feb4 	bl	8005e16 <__retarget_lock_acquire_recursive>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4638      	mov	r0, r7
 80060b2:	f000 f989 	bl	80063c8 <_fflush_r>
 80060b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b8:	b141      	cbz	r1, 80060cc <setvbuf+0x68>
 80060ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060be:	4299      	cmp	r1, r3
 80060c0:	d002      	beq.n	80060c8 <setvbuf+0x64>
 80060c2:	4638      	mov	r0, r7
 80060c4:	f000 fa08 	bl	80064d8 <_free_r>
 80060c8:	2300      	movs	r3, #0
 80060ca:	6363      	str	r3, [r4, #52]	; 0x34
 80060cc:	2300      	movs	r3, #0
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	0619      	lsls	r1, r3, #24
 80060d6:	d503      	bpl.n	80060e0 <setvbuf+0x7c>
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	4638      	mov	r0, r7
 80060dc:	f000 f9fc 	bl	80064d8 <_free_r>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	f1b8 0f02 	cmp.w	r8, #2
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	d06c      	beq.n	80061cc <setvbuf+0x168>
 80060f2:	ab01      	add	r3, sp, #4
 80060f4:	466a      	mov	r2, sp
 80060f6:	4621      	mov	r1, r4
 80060f8:	4638      	mov	r0, r7
 80060fa:	f000 f9b3 	bl	8006464 <__swhatbuf_r>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	4318      	orrs	r0, r3
 8006102:	81a0      	strh	r0, [r4, #12]
 8006104:	2d00      	cmp	r5, #0
 8006106:	d130      	bne.n	800616a <setvbuf+0x106>
 8006108:	9d00      	ldr	r5, [sp, #0]
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f9d0 	bl	80064b0 <malloc>
 8006110:	4606      	mov	r6, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d155      	bne.n	80061c2 <setvbuf+0x15e>
 8006116:	f8dd 9000 	ldr.w	r9, [sp]
 800611a:	45a9      	cmp	r9, r5
 800611c:	d14a      	bne.n	80061b4 <setvbuf+0x150>
 800611e:	f04f 35ff 	mov.w	r5, #4294967295
 8006122:	2200      	movs	r2, #0
 8006124:	60a2      	str	r2, [r4, #8]
 8006126:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800612a:	6022      	str	r2, [r4, #0]
 800612c:	6122      	str	r2, [r4, #16]
 800612e:	2201      	movs	r2, #1
 8006130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006134:	6162      	str	r2, [r4, #20]
 8006136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	07d2      	lsls	r2, r2, #31
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	d405      	bmi.n	800614e <setvbuf+0xea>
 8006142:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006146:	d102      	bne.n	800614e <setvbuf+0xea>
 8006148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800614a:	f7ff fe65 	bl	8005e18 <__retarget_lock_release_recursive>
 800614e:	4628      	mov	r0, r5
 8006150:	b003      	add	sp, #12
 8006152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <setvbuf+0x184>)
 8006158:	429c      	cmp	r4, r3
 800615a:	d101      	bne.n	8006160 <setvbuf+0xfc>
 800615c:	68bc      	ldr	r4, [r7, #8]
 800615e:	e793      	b.n	8006088 <setvbuf+0x24>
 8006160:	4b22      	ldr	r3, [pc, #136]	; (80061ec <setvbuf+0x188>)
 8006162:	429c      	cmp	r4, r3
 8006164:	bf08      	it	eq
 8006166:	68fc      	ldreq	r4, [r7, #12]
 8006168:	e78e      	b.n	8006088 <setvbuf+0x24>
 800616a:	2e00      	cmp	r6, #0
 800616c:	d0cd      	beq.n	800610a <setvbuf+0xa6>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	b913      	cbnz	r3, 8006178 <setvbuf+0x114>
 8006172:	4638      	mov	r0, r7
 8006174:	f7ff fd8c 	bl	8005c90 <__sinit>
 8006178:	f1b8 0f01 	cmp.w	r8, #1
 800617c:	bf08      	it	eq
 800617e:	89a3      	ldrheq	r3, [r4, #12]
 8006180:	6026      	str	r6, [r4, #0]
 8006182:	bf04      	itt	eq
 8006184:	f043 0301 	orreq.w	r3, r3, #1
 8006188:	81a3      	strheq	r3, [r4, #12]
 800618a:	89a2      	ldrh	r2, [r4, #12]
 800618c:	f012 0308 	ands.w	r3, r2, #8
 8006190:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006194:	d01c      	beq.n	80061d0 <setvbuf+0x16c>
 8006196:	07d3      	lsls	r3, r2, #31
 8006198:	bf41      	itttt	mi
 800619a:	2300      	movmi	r3, #0
 800619c:	426d      	negmi	r5, r5
 800619e:	60a3      	strmi	r3, [r4, #8]
 80061a0:	61a5      	strmi	r5, [r4, #24]
 80061a2:	bf58      	it	pl
 80061a4:	60a5      	strpl	r5, [r4, #8]
 80061a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80061a8:	f015 0501 	ands.w	r5, r5, #1
 80061ac:	d115      	bne.n	80061da <setvbuf+0x176>
 80061ae:	f412 7f00 	tst.w	r2, #512	; 0x200
 80061b2:	e7c8      	b.n	8006146 <setvbuf+0xe2>
 80061b4:	4648      	mov	r0, r9
 80061b6:	f000 f97b 	bl	80064b0 <malloc>
 80061ba:	4606      	mov	r6, r0
 80061bc:	2800      	cmp	r0, #0
 80061be:	d0ae      	beq.n	800611e <setvbuf+0xba>
 80061c0:	464d      	mov	r5, r9
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	e7d0      	b.n	800616e <setvbuf+0x10a>
 80061cc:	2500      	movs	r5, #0
 80061ce:	e7a8      	b.n	8006122 <setvbuf+0xbe>
 80061d0:	60a3      	str	r3, [r4, #8]
 80061d2:	e7e8      	b.n	80061a6 <setvbuf+0x142>
 80061d4:	f04f 35ff 	mov.w	r5, #4294967295
 80061d8:	e7b9      	b.n	800614e <setvbuf+0xea>
 80061da:	2500      	movs	r5, #0
 80061dc:	e7b7      	b.n	800614e <setvbuf+0xea>
 80061de:	bf00      	nop
 80061e0:	20000014 	.word	0x20000014
 80061e4:	08006678 	.word	0x08006678
 80061e8:	08006698 	.word	0x08006698
 80061ec:	08006658 	.word	0x08006658

080061f0 <__sread>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	460c      	mov	r4, r1
 80061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f8:	f000 f9ba 	bl	8006570 <_read_r>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	bfab      	itete	ge
 8006200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006202:	89a3      	ldrhlt	r3, [r4, #12]
 8006204:	181b      	addge	r3, r3, r0
 8006206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800620a:	bfac      	ite	ge
 800620c:	6563      	strge	r3, [r4, #84]	; 0x54
 800620e:	81a3      	strhlt	r3, [r4, #12]
 8006210:	bd10      	pop	{r4, pc}

08006212 <__swrite>:
 8006212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	461f      	mov	r7, r3
 8006218:	898b      	ldrh	r3, [r1, #12]
 800621a:	05db      	lsls	r3, r3, #23
 800621c:	4605      	mov	r5, r0
 800621e:	460c      	mov	r4, r1
 8006220:	4616      	mov	r6, r2
 8006222:	d505      	bpl.n	8006230 <__swrite+0x1e>
 8006224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006228:	2302      	movs	r3, #2
 800622a:	2200      	movs	r2, #0
 800622c:	f000 f908 	bl	8006440 <_lseek_r>
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	4628      	mov	r0, r5
 8006242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	f000 b817 	b.w	8006278 <_write_r>

0800624a <__sseek>:
 800624a:	b510      	push	{r4, lr}
 800624c:	460c      	mov	r4, r1
 800624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006252:	f000 f8f5 	bl	8006440 <_lseek_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	bf15      	itete	ne
 800625c:	6560      	strne	r0, [r4, #84]	; 0x54
 800625e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006266:	81a3      	strheq	r3, [r4, #12]
 8006268:	bf18      	it	ne
 800626a:	81a3      	strhne	r3, [r4, #12]
 800626c:	bd10      	pop	{r4, pc}

0800626e <__sclose>:
 800626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006272:	f000 b813 	b.w	800629c <_close_r>
	...

08006278 <_write_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d07      	ldr	r5, [pc, #28]	; (8006298 <_write_r+0x20>)
 800627c:	4604      	mov	r4, r0
 800627e:	4608      	mov	r0, r1
 8006280:	4611      	mov	r1, r2
 8006282:	2200      	movs	r2, #0
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	f7fa fc92 	bl	8000bb0 <_write>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_write_r+0x1e>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_write_r+0x1e>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	200046e4 	.word	0x200046e4

0800629c <_close_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d06      	ldr	r5, [pc, #24]	; (80062b8 <_close_r+0x1c>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	f7fa fcae 	bl	8000c08 <_close>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_close_r+0x1a>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_close_r+0x1a>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	200046e4 	.word	0x200046e4

080062bc <__sflush_r>:
 80062bc:	898a      	ldrh	r2, [r1, #12]
 80062be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	4605      	mov	r5, r0
 80062c4:	0710      	lsls	r0, r2, #28
 80062c6:	460c      	mov	r4, r1
 80062c8:	d458      	bmi.n	800637c <__sflush_r+0xc0>
 80062ca:	684b      	ldr	r3, [r1, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dc05      	bgt.n	80062dc <__sflush_r+0x20>
 80062d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dc02      	bgt.n	80062dc <__sflush_r+0x20>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d0f9      	beq.n	80062d6 <__sflush_r+0x1a>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e8:	682f      	ldr	r7, [r5, #0]
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	d032      	beq.n	8006354 <__sflush_r+0x98>
 80062ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	075a      	lsls	r2, r3, #29
 80062f4:	d505      	bpl.n	8006302 <__sflush_r+0x46>
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	1ac0      	subs	r0, r0, r3
 80062fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062fc:	b10b      	cbz	r3, 8006302 <__sflush_r+0x46>
 80062fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006300:	1ac0      	subs	r0, r0, r3
 8006302:	2300      	movs	r3, #0
 8006304:	4602      	mov	r2, r0
 8006306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006308:	6a21      	ldr	r1, [r4, #32]
 800630a:	4628      	mov	r0, r5
 800630c:	47b0      	blx	r6
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	d106      	bne.n	8006322 <__sflush_r+0x66>
 8006314:	6829      	ldr	r1, [r5, #0]
 8006316:	291d      	cmp	r1, #29
 8006318:	d82c      	bhi.n	8006374 <__sflush_r+0xb8>
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <__sflush_r+0x108>)
 800631c:	40ca      	lsrs	r2, r1
 800631e:	07d6      	lsls	r6, r2, #31
 8006320:	d528      	bpl.n	8006374 <__sflush_r+0xb8>
 8006322:	2200      	movs	r2, #0
 8006324:	6062      	str	r2, [r4, #4]
 8006326:	04d9      	lsls	r1, r3, #19
 8006328:	6922      	ldr	r2, [r4, #16]
 800632a:	6022      	str	r2, [r4, #0]
 800632c:	d504      	bpl.n	8006338 <__sflush_r+0x7c>
 800632e:	1c42      	adds	r2, r0, #1
 8006330:	d101      	bne.n	8006336 <__sflush_r+0x7a>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	b903      	cbnz	r3, 8006338 <__sflush_r+0x7c>
 8006336:	6560      	str	r0, [r4, #84]	; 0x54
 8006338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800633a:	602f      	str	r7, [r5, #0]
 800633c:	2900      	cmp	r1, #0
 800633e:	d0ca      	beq.n	80062d6 <__sflush_r+0x1a>
 8006340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006344:	4299      	cmp	r1, r3
 8006346:	d002      	beq.n	800634e <__sflush_r+0x92>
 8006348:	4628      	mov	r0, r5
 800634a:	f000 f8c5 	bl	80064d8 <_free_r>
 800634e:	2000      	movs	r0, #0
 8006350:	6360      	str	r0, [r4, #52]	; 0x34
 8006352:	e7c1      	b.n	80062d8 <__sflush_r+0x1c>
 8006354:	6a21      	ldr	r1, [r4, #32]
 8006356:	2301      	movs	r3, #1
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	1c41      	adds	r1, r0, #1
 800635e:	d1c7      	bne.n	80062f0 <__sflush_r+0x34>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0c4      	beq.n	80062f0 <__sflush_r+0x34>
 8006366:	2b1d      	cmp	r3, #29
 8006368:	d001      	beq.n	800636e <__sflush_r+0xb2>
 800636a:	2b16      	cmp	r3, #22
 800636c:	d101      	bne.n	8006372 <__sflush_r+0xb6>
 800636e:	602f      	str	r7, [r5, #0]
 8006370:	e7b1      	b.n	80062d6 <__sflush_r+0x1a>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	e7ad      	b.n	80062d8 <__sflush_r+0x1c>
 800637c:	690f      	ldr	r7, [r1, #16]
 800637e:	2f00      	cmp	r7, #0
 8006380:	d0a9      	beq.n	80062d6 <__sflush_r+0x1a>
 8006382:	0793      	lsls	r3, r2, #30
 8006384:	680e      	ldr	r6, [r1, #0]
 8006386:	bf08      	it	eq
 8006388:	694b      	ldreq	r3, [r1, #20]
 800638a:	600f      	str	r7, [r1, #0]
 800638c:	bf18      	it	ne
 800638e:	2300      	movne	r3, #0
 8006390:	eba6 0807 	sub.w	r8, r6, r7
 8006394:	608b      	str	r3, [r1, #8]
 8006396:	f1b8 0f00 	cmp.w	r8, #0
 800639a:	dd9c      	ble.n	80062d6 <__sflush_r+0x1a>
 800639c:	6a21      	ldr	r1, [r4, #32]
 800639e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063a0:	4643      	mov	r3, r8
 80063a2:	463a      	mov	r2, r7
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b0      	blx	r6
 80063a8:	2800      	cmp	r0, #0
 80063aa:	dc06      	bgt.n	80063ba <__sflush_r+0xfe>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295
 80063b8:	e78e      	b.n	80062d8 <__sflush_r+0x1c>
 80063ba:	4407      	add	r7, r0
 80063bc:	eba8 0800 	sub.w	r8, r8, r0
 80063c0:	e7e9      	b.n	8006396 <__sflush_r+0xda>
 80063c2:	bf00      	nop
 80063c4:	20400001 	.word	0x20400001

080063c8 <_fflush_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	690b      	ldr	r3, [r1, #16]
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	b913      	cbnz	r3, 80063d8 <_fflush_r+0x10>
 80063d2:	2500      	movs	r5, #0
 80063d4:	4628      	mov	r0, r5
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	b118      	cbz	r0, 80063e2 <_fflush_r+0x1a>
 80063da:	6983      	ldr	r3, [r0, #24]
 80063dc:	b90b      	cbnz	r3, 80063e2 <_fflush_r+0x1a>
 80063de:	f7ff fc57 	bl	8005c90 <__sinit>
 80063e2:	4b14      	ldr	r3, [pc, #80]	; (8006434 <_fflush_r+0x6c>)
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d11b      	bne.n	8006420 <_fflush_r+0x58>
 80063e8:	686c      	ldr	r4, [r5, #4]
 80063ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0ef      	beq.n	80063d2 <_fflush_r+0xa>
 80063f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063f4:	07d0      	lsls	r0, r2, #31
 80063f6:	d404      	bmi.n	8006402 <_fflush_r+0x3a>
 80063f8:	0599      	lsls	r1, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_fflush_r+0x3a>
 80063fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063fe:	f7ff fd0a 	bl	8005e16 <__retarget_lock_acquire_recursive>
 8006402:	4628      	mov	r0, r5
 8006404:	4621      	mov	r1, r4
 8006406:	f7ff ff59 	bl	80062bc <__sflush_r>
 800640a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800640c:	07da      	lsls	r2, r3, #31
 800640e:	4605      	mov	r5, r0
 8006410:	d4e0      	bmi.n	80063d4 <_fflush_r+0xc>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	059b      	lsls	r3, r3, #22
 8006416:	d4dd      	bmi.n	80063d4 <_fflush_r+0xc>
 8006418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641a:	f7ff fcfd 	bl	8005e18 <__retarget_lock_release_recursive>
 800641e:	e7d9      	b.n	80063d4 <_fflush_r+0xc>
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <_fflush_r+0x70>)
 8006422:	429c      	cmp	r4, r3
 8006424:	d101      	bne.n	800642a <_fflush_r+0x62>
 8006426:	68ac      	ldr	r4, [r5, #8]
 8006428:	e7df      	b.n	80063ea <_fflush_r+0x22>
 800642a:	4b04      	ldr	r3, [pc, #16]	; (800643c <_fflush_r+0x74>)
 800642c:	429c      	cmp	r4, r3
 800642e:	bf08      	it	eq
 8006430:	68ec      	ldreq	r4, [r5, #12]
 8006432:	e7da      	b.n	80063ea <_fflush_r+0x22>
 8006434:	08006678 	.word	0x08006678
 8006438:	08006698 	.word	0x08006698
 800643c:	08006658 	.word	0x08006658

08006440 <_lseek_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_lseek_r+0x20>)
 8006444:	4604      	mov	r4, r0
 8006446:	4608      	mov	r0, r1
 8006448:	4611      	mov	r1, r2
 800644a:	2200      	movs	r2, #0
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fa fbf1 	bl	8000c36 <_lseek>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_lseek_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_lseek_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	200046e4 	.word	0x200046e4

08006464 <__swhatbuf_r>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	460e      	mov	r6, r1
 8006468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646c:	2900      	cmp	r1, #0
 800646e:	b096      	sub	sp, #88	; 0x58
 8006470:	4614      	mov	r4, r2
 8006472:	461d      	mov	r5, r3
 8006474:	da08      	bge.n	8006488 <__swhatbuf_r+0x24>
 8006476:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	061a      	lsls	r2, r3, #24
 8006480:	d410      	bmi.n	80064a4 <__swhatbuf_r+0x40>
 8006482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006486:	e00e      	b.n	80064a6 <__swhatbuf_r+0x42>
 8006488:	466a      	mov	r2, sp
 800648a:	f000 f883 	bl	8006594 <_fstat_r>
 800648e:	2800      	cmp	r0, #0
 8006490:	dbf1      	blt.n	8006476 <__swhatbuf_r+0x12>
 8006492:	9a01      	ldr	r2, [sp, #4]
 8006494:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006498:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800649c:	425a      	negs	r2, r3
 800649e:	415a      	adcs	r2, r3
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	e7ee      	b.n	8006482 <__swhatbuf_r+0x1e>
 80064a4:	2340      	movs	r3, #64	; 0x40
 80064a6:	2000      	movs	r0, #0
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	b016      	add	sp, #88	; 0x58
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080064b0 <malloc>:
 80064b0:	4b02      	ldr	r3, [pc, #8]	; (80064bc <malloc+0xc>)
 80064b2:	4601      	mov	r1, r0
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	f7ff bce7 	b.w	8005e88 <_malloc_r>
 80064ba:	bf00      	nop
 80064bc:	20000014 	.word	0x20000014

080064c0 <__malloc_lock>:
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <__malloc_lock+0x8>)
 80064c2:	f7ff bca8 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	200046d8 	.word	0x200046d8

080064cc <__malloc_unlock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <__malloc_unlock+0x8>)
 80064ce:	f7ff bca3 	b.w	8005e18 <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	200046d8 	.word	0x200046d8

080064d8 <_free_r>:
 80064d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064da:	2900      	cmp	r1, #0
 80064dc:	d044      	beq.n	8006568 <_free_r+0x90>
 80064de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e2:	9001      	str	r0, [sp, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f1a1 0404 	sub.w	r4, r1, #4
 80064ea:	bfb8      	it	lt
 80064ec:	18e4      	addlt	r4, r4, r3
 80064ee:	f7ff ffe7 	bl	80064c0 <__malloc_lock>
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <_free_r+0x94>)
 80064f4:	9801      	ldr	r0, [sp, #4]
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	b933      	cbnz	r3, 8006508 <_free_r+0x30>
 80064fa:	6063      	str	r3, [r4, #4]
 80064fc:	6014      	str	r4, [r2, #0]
 80064fe:	b003      	add	sp, #12
 8006500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006504:	f7ff bfe2 	b.w	80064cc <__malloc_unlock>
 8006508:	42a3      	cmp	r3, r4
 800650a:	d908      	bls.n	800651e <_free_r+0x46>
 800650c:	6825      	ldr	r5, [r4, #0]
 800650e:	1961      	adds	r1, r4, r5
 8006510:	428b      	cmp	r3, r1
 8006512:	bf01      	itttt	eq
 8006514:	6819      	ldreq	r1, [r3, #0]
 8006516:	685b      	ldreq	r3, [r3, #4]
 8006518:	1949      	addeq	r1, r1, r5
 800651a:	6021      	streq	r1, [r4, #0]
 800651c:	e7ed      	b.n	80064fa <_free_r+0x22>
 800651e:	461a      	mov	r2, r3
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	b10b      	cbz	r3, 8006528 <_free_r+0x50>
 8006524:	42a3      	cmp	r3, r4
 8006526:	d9fa      	bls.n	800651e <_free_r+0x46>
 8006528:	6811      	ldr	r1, [r2, #0]
 800652a:	1855      	adds	r5, r2, r1
 800652c:	42a5      	cmp	r5, r4
 800652e:	d10b      	bne.n	8006548 <_free_r+0x70>
 8006530:	6824      	ldr	r4, [r4, #0]
 8006532:	4421      	add	r1, r4
 8006534:	1854      	adds	r4, r2, r1
 8006536:	42a3      	cmp	r3, r4
 8006538:	6011      	str	r1, [r2, #0]
 800653a:	d1e0      	bne.n	80064fe <_free_r+0x26>
 800653c:	681c      	ldr	r4, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	6053      	str	r3, [r2, #4]
 8006542:	4421      	add	r1, r4
 8006544:	6011      	str	r1, [r2, #0]
 8006546:	e7da      	b.n	80064fe <_free_r+0x26>
 8006548:	d902      	bls.n	8006550 <_free_r+0x78>
 800654a:	230c      	movs	r3, #12
 800654c:	6003      	str	r3, [r0, #0]
 800654e:	e7d6      	b.n	80064fe <_free_r+0x26>
 8006550:	6825      	ldr	r5, [r4, #0]
 8006552:	1961      	adds	r1, r4, r5
 8006554:	428b      	cmp	r3, r1
 8006556:	bf04      	itt	eq
 8006558:	6819      	ldreq	r1, [r3, #0]
 800655a:	685b      	ldreq	r3, [r3, #4]
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	bf04      	itt	eq
 8006560:	1949      	addeq	r1, r1, r5
 8006562:	6021      	streq	r1, [r4, #0]
 8006564:	6054      	str	r4, [r2, #4]
 8006566:	e7ca      	b.n	80064fe <_free_r+0x26>
 8006568:	b003      	add	sp, #12
 800656a:	bd30      	pop	{r4, r5, pc}
 800656c:	200046dc 	.word	0x200046dc

08006570 <_read_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	; (8006590 <_read_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fa fb6a 	bl	8000c58 <_read>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_read_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_read_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200046e4 	.word	0x200046e4

08006594 <_fstat_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4d07      	ldr	r5, [pc, #28]	; (80065b4 <_fstat_r+0x20>)
 8006598:	2300      	movs	r3, #0
 800659a:	4604      	mov	r4, r0
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	f7fa fb81 	bl	8000ca8 <_fstat>
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	d102      	bne.n	80065b0 <_fstat_r+0x1c>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	b103      	cbz	r3, 80065b0 <_fstat_r+0x1c>
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	bd38      	pop	{r3, r4, r5, pc}
 80065b2:	bf00      	nop
 80065b4:	200046e4 	.word	0x200046e4

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
