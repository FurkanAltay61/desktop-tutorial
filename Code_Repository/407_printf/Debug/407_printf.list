
407_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000084  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008df7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aec  00000000  00000000  00028e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e0  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213fa  00000000  00000000  0002b620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ccd  00000000  00000000  0004ca1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3cda  00000000  00000000  000556e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001193c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fb4  00000000  00000000  00119414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030ec 	.word	0x080030ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080030ec 	.word	0x080030ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <xITM_SendChar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2S3_Init(void);
/* USER CODE BEGIN PFP */
void xITM_SendChar(uint8_t ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <xITM_SendChar+0x48>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <xITM_SendChar+0x48>)
 80004d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <xITM_SendChar+0x4c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a0c      	ldr	r2, [pc, #48]	; (800050c <xITM_SendChar+0x4c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004e2:	bf00      	nop
 80004e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f8      	beq.n	80004e4 <xITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	6013      	str	r3, [r2, #0]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000edfc 	.word	0xe000edfc
 800050c:	e0000e00 	.word	0xe0000e00

08000510 <_write>:

int _write(int file, char *ptr, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]

  for(i=0 ; i<len ; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e009      	b.n	800053a <_write+0x2a>
    xITM_SendChar((*ptr++));
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	60ba      	str	r2, [r7, #8]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ffc6 	bl	80004c0 <xITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	3301      	adds	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbf1      	blt.n	8000526 <_write+0x16>

  return len;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fb82 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f80e 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f8a6 	bl	80006a8 <MX_GPIO_Init>
  MX_I2S3_Init();
 800055c:	f000 f874 	bl	8000648 <MX_I2S3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Merhaba!Merhaba!Merhaba!Merhaba!Merhaba!Merhaba!Merhaba!\n");
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <main+0x24>)
 8000562:	f002 f96b 	bl	800283c <puts>
		HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fbe8 	bl	8000d3c <HAL_Delay>
		printf("Merhaba!Merhaba!Merhaba!Merhaba!Merhaba!Merhaba!Merhaba!\n");
 800056c:	e7f8      	b.n	8000560 <main+0x14>
 800056e:	bf00      	nop
 8000570:	08003104 	.word	0x08003104

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f8e4 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <SystemClock_Config+0xcc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xd0>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f2:	2307      	movs	r3, #7
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fafe 	bl	8001bfc <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000606:	f000 f98b 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2105      	movs	r1, #5
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fd5f 	bl	80020ec <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000634:	f000 f974 	bl	8000920 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	; 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2S3_Init+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <MX_I2S3_Init+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_I2S3_Init+0x54>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <MX_I2S3_Init+0x5c>)
 8000672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2S3_Init+0x54>)
 8000688:	f000 fe18 	bl	80012bc <HAL_I2S_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000692:	f000 f945 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000098 	.word	0x20000098
 80006a0:	40003c00 	.word	0x40003c00
 80006a4:	00017700 	.word	0x00017700

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4b91      	ldr	r3, [pc, #580]	; (8000908 <MX_GPIO_Init+0x260>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a90      	ldr	r2, [pc, #576]	; (8000908 <MX_GPIO_Init+0x260>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b8e      	ldr	r3, [pc, #568]	; (8000908 <MX_GPIO_Init+0x260>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b8a      	ldr	r3, [pc, #552]	; (8000908 <MX_GPIO_Init+0x260>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a89      	ldr	r2, [pc, #548]	; (8000908 <MX_GPIO_Init+0x260>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b87      	ldr	r3, [pc, #540]	; (8000908 <MX_GPIO_Init+0x260>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b83      	ldr	r3, [pc, #524]	; (8000908 <MX_GPIO_Init+0x260>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a82      	ldr	r2, [pc, #520]	; (8000908 <MX_GPIO_Init+0x260>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b80      	ldr	r3, [pc, #512]	; (8000908 <MX_GPIO_Init+0x260>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b7c      	ldr	r3, [pc, #496]	; (8000908 <MX_GPIO_Init+0x260>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a7b      	ldr	r2, [pc, #492]	; (8000908 <MX_GPIO_Init+0x260>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b79      	ldr	r3, [pc, #484]	; (8000908 <MX_GPIO_Init+0x260>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b75      	ldr	r3, [pc, #468]	; (8000908 <MX_GPIO_Init+0x260>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a74      	ldr	r2, [pc, #464]	; (8000908 <MX_GPIO_Init+0x260>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b72      	ldr	r3, [pc, #456]	; (8000908 <MX_GPIO_Init+0x260>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <MX_GPIO_Init+0x260>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a6d      	ldr	r2, [pc, #436]	; (8000908 <MX_GPIO_Init+0x260>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <MX_GPIO_Init+0x260>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4868      	ldr	r0, [pc, #416]	; (800090c <MX_GPIO_Init+0x264>)
 800076c:	f000 fd8c 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	4866      	ldr	r0, [pc, #408]	; (8000910 <MX_GPIO_Init+0x268>)
 8000776:	f000 fd87 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800077a:	2200      	movs	r2, #0
 800077c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000780:	4864      	ldr	r0, [pc, #400]	; (8000914 <MX_GPIO_Init+0x26c>)
 8000782:	f000 fd81 	bl	8001288 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000786:	2308      	movs	r3, #8
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	485b      	ldr	r0, [pc, #364]	; (800090c <MX_GPIO_Init+0x264>)
 800079e:	f000 fbd7 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4855      	ldr	r0, [pc, #340]	; (8000910 <MX_GPIO_Init+0x268>)
 80007ba:	f000 fbc9 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007be:	2308      	movs	r3, #8
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ce:	2305      	movs	r3, #5
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	484d      	ldr	r0, [pc, #308]	; (8000910 <MX_GPIO_Init+0x268>)
 80007da:	f000 fbb9 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4849      	ldr	r0, [pc, #292]	; (8000918 <MX_GPIO_Init+0x270>)
 80007f4:	f000 fbac 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007f8:	23e0      	movs	r3, #224	; 0xe0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000808:	2305      	movs	r3, #5
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4841      	ldr	r0, [pc, #260]	; (8000918 <MX_GPIO_Init+0x270>)
 8000814:	f000 fb9c 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000818:	2304      	movs	r3, #4
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	483c      	ldr	r0, [pc, #240]	; (800091c <MX_GPIO_Init+0x274>)
 800082c:	f000 fb90 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4833      	ldr	r0, [pc, #204]	; (800091c <MX_GPIO_Init+0x274>)
 800084e:	f000 fb7f 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000852:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000856:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	; (8000914 <MX_GPIO_Init+0x26c>)
 800086c:	f000 fb70 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <MX_GPIO_Init+0x270>)
 8000886:	f000 fb63 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800088a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800089c:	230a      	movs	r3, #10
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481c      	ldr	r0, [pc, #112]	; (8000918 <MX_GPIO_Init+0x270>)
 80008a8:	f000 fb52 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ac:	2320      	movs	r3, #32
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4815      	ldr	r0, [pc, #84]	; (8000914 <MX_GPIO_Init+0x26c>)
 80008c0:	f000 fb46 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008c4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ca:	2312      	movs	r3, #18
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d6:	2304      	movs	r3, #4
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_GPIO_Init+0x274>)
 80008e2:	f000 fb35 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0x264>)
 80008fc:	f000 fb28 	bl	8000f50 <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fabc 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <HAL_I2S_MspInit+0xf0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d15a      	bne.n	8000a62 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009b0:	23c0      	movs	r3, #192	; 0xc0
 80009b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fd5d 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80009c8:	f7ff ffaa 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a26      	ldr	r2, [pc, #152]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 80009d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_I2S_MspInit+0xf4>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a20:	2310      	movs	r3, #16
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a30:	2306      	movs	r3, #6
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <HAL_I2S_MspInit+0xf8>)
 8000a3c:	f000 fa88 	bl	8000f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a52:	2306      	movs	r3, #6
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <HAL_I2S_MspInit+0xfc>)
 8000a5e:	f000 fa77 	bl	8000f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3738      	adds	r7, #56	; 0x38
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40003c00 	.word	0x40003c00
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020800 	.word	0x40020800

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f918 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
	}

return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b32:	605a      	str	r2, [r3, #4]
	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_isatty>:

int _isatty(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return 1;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f001 fdaa 	bl	80026fc <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20020000 	.word	0x20020000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	2000008c 	.word	0x2000008c
 8000bdc:	200000f8 	.word	0x200000f8

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c20:	4c0b      	ldr	r4, [pc, #44]	; (8000c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2e:	f7ff ffd7 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f001 fd69 	bl	8002708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fc89 	bl	800054c <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c48:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 8000c4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c50:	200000f4 	.word	0x200000f4

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f931 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe4e 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f93b 	bl	8000f36 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f911 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000e0 	.word	0x200000e0

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200000e0 	.word	0x200000e0

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff47 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff5c 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffb0 	bl	8000ea4 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e16b      	b.n	8001244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 815a 	bne.w	800123e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80b4 	beq.w	800123e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b60      	ldr	r3, [pc, #384]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a5f      	ldr	r2, [pc, #380]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a5b      	ldr	r2, [pc, #364]	; (8001260 <HAL_GPIO_Init+0x310>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_GPIO_Init+0x314>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02b      	beq.n	8001176 <HAL_GPIO_Init+0x226>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x318>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x222>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_GPIO_Init+0x31c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x21e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x320>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x21a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x324>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x216>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x328>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x212>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x32c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x20e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x20a>
 8001156:	2307      	movs	r3, #7
 8001158:	e00e      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800115a:	2308      	movs	r3, #8
 800115c:	e00c      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800115e:	2306      	movs	r3, #6
 8001160:	e00a      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001162:	2305      	movs	r3, #5
 8001164:	e008      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001166:	2304      	movs	r3, #4
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800116a:	2303      	movs	r3, #3
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001176:	2300      	movs	r3, #0
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4093      	lsls	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x310>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_GPIO_Init+0x334>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ba:	4a32      	ldr	r2, [pc, #200]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e4:	4a27      	ldr	r2, [pc, #156]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_GPIO_Init+0x334>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_GPIO_Init+0x334>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_GPIO_Init+0x334>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	f67f ae90 	bls.w	8000f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40013800 	.word	0x40013800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40021400 	.word	0x40021400
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e128      	b.n	8001520 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_I2S_Init+0x26c>)
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fb47 	bl	800097c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001304:	f023 030f 	bic.w	r3, r3, #15
 8001308:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2202      	movs	r2, #2
 8001310:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d060      	beq.n	80013dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001322:	2310      	movs	r3, #16
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e001      	b.n	800132c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001328:	2320      	movs	r3, #32
 800132a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b20      	cmp	r3, #32
 8001332:	d802      	bhi.n	800133a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800133a:	2001      	movs	r0, #1
 800133c:	f001 f980 	bl	8002640 <HAL_RCCEx_GetPeriphCLKFreq>
 8001340:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134a:	d125      	bne.n	8001398 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d010      	beq.n	8001376 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	fbb2 f2f3 	udiv	r2, r2, r3
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	3305      	adds	r3, #5
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	e01f      	b.n	80013b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	3305      	adds	r3, #5
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	e00e      	b.n	80013b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fbb2 f2f3 	udiv	r2, r2, r3
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	3305      	adds	r3, #5
 80013b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4a5c      	ldr	r2, [pc, #368]	; (800152c <HAL_I2S_Init+0x270>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	e003      	b.n	80013e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80013dc:	2302      	movs	r3, #2
 80013de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d902      	bls.n	80013f0 <HAL_I2S_Init+0x134>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2bff      	cmp	r3, #255	; 0xff
 80013ee:	d907      	bls.n	8001400 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f043 0210 	orr.w	r2, r3, #16
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e08f      	b.n	8001520 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	ea42 0103 	orr.w	r1, r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	430a      	orrs	r2, r1
 8001412:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800141e:	f023 030f 	bic.w	r3, r3, #15
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6851      	ldr	r1, [r2, #4]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6892      	ldr	r2, [r2, #8]
 800142a:	4311      	orrs	r1, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68d2      	ldr	r2, [r2, #12]
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6992      	ldr	r2, [r2, #24]
 8001436:	430a      	orrs	r2, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001442:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d161      	bne.n	8001510 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <HAL_I2S_Init+0x274>)
 8001450:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a37      	ldr	r2, [pc, #220]	; (8001534 <HAL_I2S_Init+0x278>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_I2S_Init+0x1a4>
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_I2S_Init+0x27c>)
 800145e:	e001      	b.n	8001464 <HAL_I2S_Init+0x1a8>
 8001460:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4932      	ldr	r1, [pc, #200]	; (8001534 <HAL_I2S_Init+0x278>)
 800146c:	428a      	cmp	r2, r1
 800146e:	d101      	bne.n	8001474 <HAL_I2S_Init+0x1b8>
 8001470:	4a31      	ldr	r2, [pc, #196]	; (8001538 <HAL_I2S_Init+0x27c>)
 8001472:	e001      	b.n	8001478 <HAL_I2S_Init+0x1bc>
 8001474:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001478:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800147c:	f023 030f 	bic.w	r3, r3, #15
 8001480:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <HAL_I2S_Init+0x278>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d101      	bne.n	8001490 <HAL_I2S_Init+0x1d4>
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_I2S_Init+0x27c>)
 800148e:	e001      	b.n	8001494 <HAL_I2S_Init+0x1d8>
 8001490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001494:	2202      	movs	r2, #2
 8001496:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_I2S_Init+0x278>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_I2S_Init+0x1ea>
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_I2S_Init+0x27c>)
 80014a4:	e001      	b.n	80014aa <HAL_I2S_Init+0x1ee>
 80014a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b6:	d003      	beq.n	80014c0 <HAL_I2S_Init+0x204>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80014c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	e001      	b.n	80014cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	897b      	ldrh	r3, [r7, #10]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_I2S_Init+0x278>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_I2S_Init+0x24c>
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_I2S_Init+0x27c>)
 8001506:	e001      	b.n	800150c <HAL_I2S_Init+0x250>
 8001508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800150c:	897a      	ldrh	r2, [r7, #10]
 800150e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	08001633 	.word	0x08001633
 800152c:	cccccccd 	.word	0xcccccccd
 8001530:	08001749 	.word	0x08001749
 8001534:	40003800 	.word	0x40003800
 8001538:	40003400 	.word	0x40003400

0800153c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	1c9a      	adds	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10e      	bne.n	80015cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffb8 	bl	800153c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	b292      	uxth	r2, r2
 80015e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	1c9a      	adds	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10e      	bne.n	800162a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800161a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff93 	bl	8001550 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b04      	cmp	r3, #4
 800164c:	d13a      	bne.n	80016c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d109      	bne.n	800166c <I2S_IRQHandler+0x3a>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001662:	2b40      	cmp	r3, #64	; 0x40
 8001664:	d102      	bne.n	800166c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffb4 	bl	80015d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001672:	2b40      	cmp	r3, #64	; 0x40
 8001674:	d126      	bne.n	80016c4 <I2S_IRQHandler+0x92>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b20      	cmp	r3, #32
 8001682:	d11f      	bne.n	80016c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001692:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff50 	bl	8001564 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d136      	bne.n	800173e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d109      	bne.n	80016ee <I2S_IRQHandler+0xbc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e4:	2b80      	cmp	r3, #128	; 0x80
 80016e6:	d102      	bne.n	80016ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff45 	bl	8001578 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d122      	bne.n	800173e <I2S_IRQHandler+0x10c>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	2b20      	cmp	r3, #32
 8001704:	d11b      	bne.n	800173e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001714:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f043 0204 	orr.w	r2, r3, #4
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff13 	bl	8001564 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4aa2      	ldr	r2, [pc, #648]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001762:	4ba2      	ldr	r3, [pc, #648]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001764:	e001      	b.n	800176a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a9b      	ldr	r2, [pc, #620]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001780:	4b9a      	ldr	r3, [pc, #616]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001782:	e001      	b.n	8001788 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001794:	d004      	beq.n	80017a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 8099 	bne.w	80018d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f925 	bl	8001a04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f9c8 	bl	8001b64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	2b40      	cmp	r3, #64	; 0x40
 80017dc:	d13a      	bne.n	8001854 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d035      	beq.n	8001854 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80017f2:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80017f4:	e001      	b.n	80017fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80017f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4979      	ldr	r1, [pc, #484]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001802:	428b      	cmp	r3, r1
 8001804:	d101      	bne.n	800180a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001806:	4b79      	ldr	r3, [pc, #484]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001808:	e001      	b.n	800180e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800180a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800180e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001812:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001822:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f043 0202 	orr.w	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fe88 	bl	8001564 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b08      	cmp	r3, #8
 800185c:	f040 80be 	bne.w	80019dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b8 	beq.w	80019dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800187a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a59      	ldr	r2, [pc, #356]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001886:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001888:	e001      	b.n	800188e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800188a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4954      	ldr	r1, [pc, #336]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001896:	428b      	cmp	r3, r1
 8001898:	d101      	bne.n	800189e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800189c:	e001      	b.n	80018a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800189e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0204 	orr.w	r2, r3, #4
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fe4a 	bl	8001564 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80018d0:	e084      	b.n	80019dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d107      	bne.n	80018ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f8be 	bl	8001a68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f8fd 	bl	8001b00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	2b40      	cmp	r3, #64	; 0x40
 800190e:	d12f      	bne.n	8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02a      	beq.n	8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001928:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001936:	e001      	b.n	800193c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4929      	ldr	r1, [pc, #164]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001944:	428b      	cmp	r3, r1
 8001946:	d101      	bne.n	800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800194a:	e001      	b.n	8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800194c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001954:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0202 	orr.w	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fdfa 	bl	8001564 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b08      	cmp	r3, #8
 8001978:	d131      	bne.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d02c      	beq.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001990:	e001      	b.n	8001996 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4912      	ldr	r1, [pc, #72]	; (80019e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800199e:	428b      	cmp	r3, r1
 80019a0:	d101      	bne.n	80019a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80019a4:	e001      	b.n	80019aa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80019a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019be:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fdc5 	bl	8001564 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80019da:	e000      	b.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80019dc:	bf00      	nop
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40003800 	.word	0x40003800
 80019ec:	40003400 	.word	0x40003400

080019f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	1c99      	adds	r1, r3, #2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6251      	str	r1, [r2, #36]	; 0x24
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d113      	bne.n	8001a5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d106      	bne.n	8001a5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffc9 	bl	80019f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	1c99      	adds	r1, r3, #2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6251      	str	r1, [r2, #36]	; 0x24
 8001a7a:	8819      	ldrh	r1, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <I2SEx_TxISR_I2SExt+0x90>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <I2SEx_TxISR_I2SExt+0x22>
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <I2SEx_TxISR_I2SExt+0x94>)
 8001a88:	e001      	b.n	8001a8e <I2SEx_TxISR_I2SExt+0x26>
 8001a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a8e:	460a      	mov	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <I2SEx_TxISR_I2SExt+0x90>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <I2SEx_TxISR_I2SExt+0x50>
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <I2SEx_TxISR_I2SExt+0x94>)
 8001ab6:	e001      	b.n	8001abc <I2SEx_TxISR_I2SExt+0x54>
 8001ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <I2SEx_TxISR_I2SExt+0x90>)
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d101      	bne.n	8001acc <I2SEx_TxISR_I2SExt+0x64>
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <I2SEx_TxISR_I2SExt+0x94>)
 8001aca:	e001      	b.n	8001ad0 <I2SEx_TxISR_I2SExt+0x68>
 8001acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff81 	bl	80019f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40003800 	.word	0x40003800
 8001afc:	40003400 	.word	0x40003400

08001b00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68d8      	ldr	r0, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	1c99      	adds	r1, r3, #2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001b18:	b282      	uxth	r2, r0
 8001b1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d113      	bne.n	8001b5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ff4a 	bl	80019f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <I2SEx_RxISR_I2SExt+0x90>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <I2SEx_RxISR_I2SExt+0x16>
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <I2SEx_RxISR_I2SExt+0x94>)
 8001b78:	e001      	b.n	8001b7e <I2SEx_RxISR_I2SExt+0x1a>
 8001b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b7e:	68d8      	ldr	r0, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	1c99      	adds	r1, r3, #2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001b8a:	b282      	uxth	r2, r0
 8001b8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d121      	bne.n	8001bea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <I2SEx_RxISR_I2SExt+0x90>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <I2SEx_RxISR_I2SExt+0x50>
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <I2SEx_RxISR_I2SExt+0x94>)
 8001bb2:	e001      	b.n	8001bb8 <I2SEx_RxISR_I2SExt+0x54>
 8001bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <I2SEx_RxISR_I2SExt+0x90>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d101      	bne.n	8001bc8 <I2SEx_RxISR_I2SExt+0x64>
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <I2SEx_RxISR_I2SExt+0x94>)
 8001bc6:	e001      	b.n	8001bcc <I2SEx_RxISR_I2SExt+0x68>
 8001bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bd0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d106      	bne.n	8001bea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff03 	bl	80019f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40003800 	.word	0x40003800
 8001bf8:	40003400 	.word	0x40003400

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e264      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d075      	beq.n	8001d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1a:	4ba3      	ldr	r3, [pc, #652]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d00c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4ba0      	ldr	r3, [pc, #640]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d112      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4b9d      	ldr	r3, [pc, #628]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c3e:	d10b      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	4b99      	ldr	r3, [pc, #612]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d05b      	beq.n	8001d04 <HAL_RCC_OscConfig+0x108>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d157      	bne.n	8001d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e23f      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x74>
 8001c62:	4b91      	ldr	r3, [pc, #580]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a90      	ldr	r2, [pc, #576]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01d      	b.n	8001cac <HAL_RCC_OscConfig+0xb0>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x98>
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a87      	ldr	r2, [pc, #540]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xb0>
 8001c94:	4b84      	ldr	r3, [pc, #528]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a83      	ldr	r2, [pc, #524]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a80      	ldr	r2, [pc, #512]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f836 	bl	8000d24 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f832 	bl	8000d24 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e204      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xc0>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f822 	bl	8000d24 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f81e 	bl	8000d24 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1f0      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xe8>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d063      	beq.n	8001dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d12:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d11c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x152>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1c4      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4952      	ldr	r1, [pc, #328]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e03a      	b.n	8001dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <HAL_RCC_OscConfig+0x2b0>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7fe ffd7 	bl	8000d24 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7fe ffd3 	bl	8000d24 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1a5      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4940      	ldr	r1, [pc, #256]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0x2b0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe ffb6 	bl	8000d24 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7fe ffb2 	bl	8000d24 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e184      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d030      	beq.n	8001e48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x2b4>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ff96 	bl	8000d24 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ff92 	bl	8000d24 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e164      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x200>
 8001e1a:	e015      	b.n	8001e48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x2b4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe ff7f 	bl	8000d24 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7fe ff7b 	bl	8000d24 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e14d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a0 	beq.w	8001f96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d121      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_RCC_OscConfig+0x2b8>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe ff41 	bl	8000d24 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e011      	b.n	8001eca <HAL_RCC_OscConfig+0x2ce>
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	42470000 	.word	0x42470000
 8001eb0:	42470e80 	.word	0x42470e80
 8001eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7fe ff34 	bl	8000d24 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e106      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <HAL_RCC_OscConfig+0x4e4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x2f0>
 8001ede:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a80      	ldr	r2, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	e01c      	b.n	8001f26 <HAL_RCC_OscConfig+0x32a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x312>
 8001ef4:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
 8001f00:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0x32a>
 8001f0e:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a74      	ldr	r2, [pc, #464]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a71      	ldr	r2, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fef9 	bl	8000d24 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fef5 	bl	8000d24 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0c5      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RCC_OscConfig+0x33a>
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fee3 	bl	8000d24 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fedf 	bl	8000d24 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0af      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a55      	ldr	r2, [pc, #340]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 809b 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d05c      	beq.n	8002066 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d141      	bne.n	8002038 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <HAL_RCC_OscConfig+0x4ec>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe feb3 	bl	8000d24 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe feaf 	bl	8000d24 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e081      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	019b      	lsls	r3, r3, #6
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	061b      	lsls	r3, r3, #24
 8002004:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x4ec>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fe88 	bl	8000d24 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe fe84 	bl	8000d24 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e056      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x41c>
 8002036:	e04e      	b.n	80020d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x4ec>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe fe71 	bl	8000d24 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002046:	f7fe fe6d 	bl	8000d24 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e03f      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x44a>
 8002064:	e037      	b.n	80020d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e032      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_RCC_OscConfig+0x4e8>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d028      	beq.n	80020d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d11a      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d111      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	3b01      	subs	r3, #1
 80020bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40007000 	.word	0x40007000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	42470060 	.word	0x42470060

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0cc      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d90c      	bls.n	8002128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800214a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d044      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d119      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e067      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4934      	ldr	r1, [pc, #208]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fda2 	bl	8000d24 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fd9e 	bl	8000d24 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e04f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d20c      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fd02 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08003140 	.word	0x08003140
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	2300      	movs	r3, #0
 80022ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d0:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d00d      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x40>
 80022dc:	2b08      	cmp	r3, #8
 80022de:	f200 80bd 	bhi.w	800245c <HAL_RCC_GetSysClockFreq+0x1a4>
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x34>
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ea:	e0b7      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022ee:	60bb      	str	r3, [r7, #8]
       break;
 80022f0:	e0b7      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022f4:	60bb      	str	r3, [r7, #8]
      break;
 80022f6:	e0b4      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002300:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d04d      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	099b      	lsrs	r3, r3, #6
 8002314:	461a      	mov	r2, r3
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	ea02 0800 	and.w	r8, r2, r0
 8002326:	ea03 0901 	and.w	r9, r3, r1
 800232a:	4640      	mov	r0, r8
 800232c:	4649      	mov	r1, r9
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	014b      	lsls	r3, r1, #5
 8002338:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800233c:	0142      	lsls	r2, r0, #5
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	ebb0 0008 	subs.w	r0, r0, r8
 8002346:	eb61 0109 	sbc.w	r1, r1, r9
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	018b      	lsls	r3, r1, #6
 8002354:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002358:	0182      	lsls	r2, r0, #6
 800235a:	1a12      	subs	r2, r2, r0
 800235c:	eb63 0301 	sbc.w	r3, r3, r1
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	00d9      	lsls	r1, r3, #3
 800236a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800236e:	00d0      	lsls	r0, r2, #3
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	eb12 0208 	adds.w	r2, r2, r8
 8002378:	eb43 0309 	adc.w	r3, r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0259      	lsls	r1, r3, #9
 8002386:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800238a:	0250      	lsls	r0, r2, #9
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	461a      	mov	r2, r3
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	f7fd ff14 	bl	80001c8 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e04a      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	ea02 0400 	and.w	r4, r2, r0
 80023c2:	ea03 0501 	and.w	r5, r3, r1
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d8:	0142      	lsls	r2, r0, #5
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	1b00      	subs	r0, r0, r4
 80023e0:	eb61 0105 	sbc.w	r1, r1, r5
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	018b      	lsls	r3, r1, #6
 80023ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f2:	0182      	lsls	r2, r0, #6
 80023f4:	1a12      	subs	r2, r2, r0
 80023f6:	eb63 0301 	sbc.w	r3, r3, r1
 80023fa:	f04f 0000 	mov.w	r0, #0
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	00d9      	lsls	r1, r3, #3
 8002404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002408:	00d0      	lsls	r0, r2, #3
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	1912      	adds	r2, r2, r4
 8002410:	eb45 0303 	adc.w	r3, r5, r3
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	0299      	lsls	r1, r3, #10
 800241e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002422:	0290      	lsls	r0, r2, #10
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	f7fd fec8 	bl	80001c8 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	60bb      	str	r3, [r7, #8]
      break;
 800245a:	e002      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800245e:	60bb      	str	r3, [r7, #8]
      break;
 8002460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002462:	68bb      	ldr	r3, [r7, #8]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d035      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024a4:	4b62      	ldr	r3, [pc, #392]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024aa:	f7fe fc3b 	bl	8000d24 <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024b2:	f7fe fc37 	bl	8000d24 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0b0      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024c4:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	019a      	lsls	r2, r3, #6
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	071b      	lsls	r3, r3, #28
 80024dc:	4955      	ldr	r1, [pc, #340]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024e4:	4b52      	ldr	r3, [pc, #328]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ea:	f7fe fc1b 	bl	8000d24 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024f2:	f7fe fc17 	bl	8000d24 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e090      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8083 	beq.w	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a43      	ldr	r2, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800253a:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3e      	ldr	r2, [pc, #248]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002546:	f7fe fbed 	bl	8000d24 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7fe fbe9 	bl	8000d24 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e062      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002574:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02f      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	429a      	cmp	r2, r3
 8002588:	d028      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d114      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fbb7 	bl	8000d24 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fbb3 	bl	8000d24 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e02a      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ee      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e8:	d10d      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fe:	490d      	ldr	r1, [pc, #52]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
 8002604:	e005      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800260c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002610:	6093      	str	r3, [r2, #8]
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	4905      	ldr	r1, [pc, #20]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002620:	4313      	orrs	r3, r2
 8002622:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	42470068 	.word	0x42470068
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000
 800263c:	42470e40 	.word	0x42470e40

08002640 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d13e      	bne.n	80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d12f      	bne.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002676:	617b      	str	r3, [r7, #20]
          break;
 8002678:	e02f      	b.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002686:	d108      	bne.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002690:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e007      	b.n	80026aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80026ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	0f1b      	lsrs	r3, r3, #28
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
          break;
 80026d2:	e002      	b.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
          break;
 80026d8:	bf00      	nop
        }
      }
      break;
 80026da:	bf00      	nop
    }
  }
  return frequency;
 80026dc:	697b      	ldr	r3, [r7, #20]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00bb8000 	.word	0x00bb8000
 80026f4:	007a1200 	.word	0x007a1200
 80026f8:	00f42400 	.word	0x00f42400

080026fc <__errno>:
 80026fc:	4b01      	ldr	r3, [pc, #4]	; (8002704 <__errno+0x8>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000000c 	.word	0x2000000c

08002708 <__libc_init_array>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	4d0d      	ldr	r5, [pc, #52]	; (8002740 <__libc_init_array+0x38>)
 800270c:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <__libc_init_array+0x3c>)
 800270e:	1b64      	subs	r4, r4, r5
 8002710:	10a4      	asrs	r4, r4, #2
 8002712:	2600      	movs	r6, #0
 8002714:	42a6      	cmp	r6, r4
 8002716:	d109      	bne.n	800272c <__libc_init_array+0x24>
 8002718:	4d0b      	ldr	r5, [pc, #44]	; (8002748 <__libc_init_array+0x40>)
 800271a:	4c0c      	ldr	r4, [pc, #48]	; (800274c <__libc_init_array+0x44>)
 800271c:	f000 fce6 	bl	80030ec <_init>
 8002720:	1b64      	subs	r4, r4, r5
 8002722:	10a4      	asrs	r4, r4, #2
 8002724:	2600      	movs	r6, #0
 8002726:	42a6      	cmp	r6, r4
 8002728:	d105      	bne.n	8002736 <__libc_init_array+0x2e>
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002730:	4798      	blx	r3
 8002732:	3601      	adds	r6, #1
 8002734:	e7ee      	b.n	8002714 <__libc_init_array+0xc>
 8002736:	f855 3b04 	ldr.w	r3, [r5], #4
 800273a:	4798      	blx	r3
 800273c:	3601      	adds	r6, #1
 800273e:	e7f2      	b.n	8002726 <__libc_init_array+0x1e>
 8002740:	080031bc 	.word	0x080031bc
 8002744:	080031bc 	.word	0x080031bc
 8002748:	080031bc 	.word	0x080031bc
 800274c:	080031c0 	.word	0x080031c0

08002750 <memset>:
 8002750:	4402      	add	r2, r0
 8002752:	4603      	mov	r3, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <_puts_r>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	460e      	mov	r6, r1
 8002764:	4605      	mov	r5, r0
 8002766:	b118      	cbz	r0, 8002770 <_puts_r+0x10>
 8002768:	6983      	ldr	r3, [r0, #24]
 800276a:	b90b      	cbnz	r3, 8002770 <_puts_r+0x10>
 800276c:	f000 fa48 	bl	8002c00 <__sinit>
 8002770:	69ab      	ldr	r3, [r5, #24]
 8002772:	68ac      	ldr	r4, [r5, #8]
 8002774:	b913      	cbnz	r3, 800277c <_puts_r+0x1c>
 8002776:	4628      	mov	r0, r5
 8002778:	f000 fa42 	bl	8002c00 <__sinit>
 800277c:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <_puts_r+0xd0>)
 800277e:	429c      	cmp	r4, r3
 8002780:	d120      	bne.n	80027c4 <_puts_r+0x64>
 8002782:	686c      	ldr	r4, [r5, #4]
 8002784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002786:	07db      	lsls	r3, r3, #31
 8002788:	d405      	bmi.n	8002796 <_puts_r+0x36>
 800278a:	89a3      	ldrh	r3, [r4, #12]
 800278c:	0598      	lsls	r0, r3, #22
 800278e:	d402      	bmi.n	8002796 <_puts_r+0x36>
 8002790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002792:	f000 fad3 	bl	8002d3c <__retarget_lock_acquire_recursive>
 8002796:	89a3      	ldrh	r3, [r4, #12]
 8002798:	0719      	lsls	r1, r3, #28
 800279a:	d51d      	bpl.n	80027d8 <_puts_r+0x78>
 800279c:	6923      	ldr	r3, [r4, #16]
 800279e:	b1db      	cbz	r3, 80027d8 <_puts_r+0x78>
 80027a0:	3e01      	subs	r6, #1
 80027a2:	68a3      	ldr	r3, [r4, #8]
 80027a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	bb39      	cbnz	r1, 80027fe <_puts_r+0x9e>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da38      	bge.n	8002824 <_puts_r+0xc4>
 80027b2:	4622      	mov	r2, r4
 80027b4:	210a      	movs	r1, #10
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 f848 	bl	800284c <__swbuf_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	d011      	beq.n	80027e4 <_puts_r+0x84>
 80027c0:	250a      	movs	r5, #10
 80027c2:	e011      	b.n	80027e8 <_puts_r+0x88>
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <_puts_r+0xd4>)
 80027c6:	429c      	cmp	r4, r3
 80027c8:	d101      	bne.n	80027ce <_puts_r+0x6e>
 80027ca:	68ac      	ldr	r4, [r5, #8]
 80027cc:	e7da      	b.n	8002784 <_puts_r+0x24>
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <_puts_r+0xd8>)
 80027d0:	429c      	cmp	r4, r3
 80027d2:	bf08      	it	eq
 80027d4:	68ec      	ldreq	r4, [r5, #12]
 80027d6:	e7d5      	b.n	8002784 <_puts_r+0x24>
 80027d8:	4621      	mov	r1, r4
 80027da:	4628      	mov	r0, r5
 80027dc:	f000 f888 	bl	80028f0 <__swsetup_r>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d0dd      	beq.n	80027a0 <_puts_r+0x40>
 80027e4:	f04f 35ff 	mov.w	r5, #4294967295
 80027e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027ea:	07da      	lsls	r2, r3, #31
 80027ec:	d405      	bmi.n	80027fa <_puts_r+0x9a>
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	059b      	lsls	r3, r3, #22
 80027f2:	d402      	bmi.n	80027fa <_puts_r+0x9a>
 80027f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027f6:	f000 faa2 	bl	8002d3e <__retarget_lock_release_recursive>
 80027fa:	4628      	mov	r0, r5
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da04      	bge.n	800280c <_puts_r+0xac>
 8002802:	69a2      	ldr	r2, [r4, #24]
 8002804:	429a      	cmp	r2, r3
 8002806:	dc06      	bgt.n	8002816 <_puts_r+0xb6>
 8002808:	290a      	cmp	r1, #10
 800280a:	d004      	beq.n	8002816 <_puts_r+0xb6>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	6022      	str	r2, [r4, #0]
 8002812:	7019      	strb	r1, [r3, #0]
 8002814:	e7c5      	b.n	80027a2 <_puts_r+0x42>
 8002816:	4622      	mov	r2, r4
 8002818:	4628      	mov	r0, r5
 800281a:	f000 f817 	bl	800284c <__swbuf_r>
 800281e:	3001      	adds	r0, #1
 8002820:	d1bf      	bne.n	80027a2 <_puts_r+0x42>
 8002822:	e7df      	b.n	80027e4 <_puts_r+0x84>
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	250a      	movs	r5, #10
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	6022      	str	r2, [r4, #0]
 800282c:	701d      	strb	r5, [r3, #0]
 800282e:	e7db      	b.n	80027e8 <_puts_r+0x88>
 8002830:	08003174 	.word	0x08003174
 8002834:	08003194 	.word	0x08003194
 8002838:	08003154 	.word	0x08003154

0800283c <puts>:
 800283c:	4b02      	ldr	r3, [pc, #8]	; (8002848 <puts+0xc>)
 800283e:	4601      	mov	r1, r0
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	f7ff bf8d 	b.w	8002760 <_puts_r>
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c

0800284c <__swbuf_r>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	460e      	mov	r6, r1
 8002850:	4614      	mov	r4, r2
 8002852:	4605      	mov	r5, r0
 8002854:	b118      	cbz	r0, 800285e <__swbuf_r+0x12>
 8002856:	6983      	ldr	r3, [r0, #24]
 8002858:	b90b      	cbnz	r3, 800285e <__swbuf_r+0x12>
 800285a:	f000 f9d1 	bl	8002c00 <__sinit>
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <__swbuf_r+0x98>)
 8002860:	429c      	cmp	r4, r3
 8002862:	d12b      	bne.n	80028bc <__swbuf_r+0x70>
 8002864:	686c      	ldr	r4, [r5, #4]
 8002866:	69a3      	ldr	r3, [r4, #24]
 8002868:	60a3      	str	r3, [r4, #8]
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	071a      	lsls	r2, r3, #28
 800286e:	d52f      	bpl.n	80028d0 <__swbuf_r+0x84>
 8002870:	6923      	ldr	r3, [r4, #16]
 8002872:	b36b      	cbz	r3, 80028d0 <__swbuf_r+0x84>
 8002874:	6923      	ldr	r3, [r4, #16]
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	1ac0      	subs	r0, r0, r3
 800287a:	6963      	ldr	r3, [r4, #20]
 800287c:	b2f6      	uxtb	r6, r6
 800287e:	4283      	cmp	r3, r0
 8002880:	4637      	mov	r7, r6
 8002882:	dc04      	bgt.n	800288e <__swbuf_r+0x42>
 8002884:	4621      	mov	r1, r4
 8002886:	4628      	mov	r0, r5
 8002888:	f000 f926 	bl	8002ad8 <_fflush_r>
 800288c:	bb30      	cbnz	r0, 80028dc <__swbuf_r+0x90>
 800288e:	68a3      	ldr	r3, [r4, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60a3      	str	r3, [r4, #8]
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	6022      	str	r2, [r4, #0]
 800289a:	701e      	strb	r6, [r3, #0]
 800289c:	6963      	ldr	r3, [r4, #20]
 800289e:	3001      	adds	r0, #1
 80028a0:	4283      	cmp	r3, r0
 80028a2:	d004      	beq.n	80028ae <__swbuf_r+0x62>
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	07db      	lsls	r3, r3, #31
 80028a8:	d506      	bpl.n	80028b8 <__swbuf_r+0x6c>
 80028aa:	2e0a      	cmp	r6, #10
 80028ac:	d104      	bne.n	80028b8 <__swbuf_r+0x6c>
 80028ae:	4621      	mov	r1, r4
 80028b0:	4628      	mov	r0, r5
 80028b2:	f000 f911 	bl	8002ad8 <_fflush_r>
 80028b6:	b988      	cbnz	r0, 80028dc <__swbuf_r+0x90>
 80028b8:	4638      	mov	r0, r7
 80028ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <__swbuf_r+0x9c>)
 80028be:	429c      	cmp	r4, r3
 80028c0:	d101      	bne.n	80028c6 <__swbuf_r+0x7a>
 80028c2:	68ac      	ldr	r4, [r5, #8]
 80028c4:	e7cf      	b.n	8002866 <__swbuf_r+0x1a>
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <__swbuf_r+0xa0>)
 80028c8:	429c      	cmp	r4, r3
 80028ca:	bf08      	it	eq
 80028cc:	68ec      	ldreq	r4, [r5, #12]
 80028ce:	e7ca      	b.n	8002866 <__swbuf_r+0x1a>
 80028d0:	4621      	mov	r1, r4
 80028d2:	4628      	mov	r0, r5
 80028d4:	f000 f80c 	bl	80028f0 <__swsetup_r>
 80028d8:	2800      	cmp	r0, #0
 80028da:	d0cb      	beq.n	8002874 <__swbuf_r+0x28>
 80028dc:	f04f 37ff 	mov.w	r7, #4294967295
 80028e0:	e7ea      	b.n	80028b8 <__swbuf_r+0x6c>
 80028e2:	bf00      	nop
 80028e4:	08003174 	.word	0x08003174
 80028e8:	08003194 	.word	0x08003194
 80028ec:	08003154 	.word	0x08003154

080028f0 <__swsetup_r>:
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <__swsetup_r+0xcc>)
 80028f2:	b570      	push	{r4, r5, r6, lr}
 80028f4:	681d      	ldr	r5, [r3, #0]
 80028f6:	4606      	mov	r6, r0
 80028f8:	460c      	mov	r4, r1
 80028fa:	b125      	cbz	r5, 8002906 <__swsetup_r+0x16>
 80028fc:	69ab      	ldr	r3, [r5, #24]
 80028fe:	b913      	cbnz	r3, 8002906 <__swsetup_r+0x16>
 8002900:	4628      	mov	r0, r5
 8002902:	f000 f97d 	bl	8002c00 <__sinit>
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <__swsetup_r+0xd0>)
 8002908:	429c      	cmp	r4, r3
 800290a:	d10f      	bne.n	800292c <__swsetup_r+0x3c>
 800290c:	686c      	ldr	r4, [r5, #4]
 800290e:	89a3      	ldrh	r3, [r4, #12]
 8002910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002914:	0719      	lsls	r1, r3, #28
 8002916:	d42c      	bmi.n	8002972 <__swsetup_r+0x82>
 8002918:	06dd      	lsls	r5, r3, #27
 800291a:	d411      	bmi.n	8002940 <__swsetup_r+0x50>
 800291c:	2309      	movs	r3, #9
 800291e:	6033      	str	r3, [r6, #0]
 8002920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002924:	81a3      	strh	r3, [r4, #12]
 8002926:	f04f 30ff 	mov.w	r0, #4294967295
 800292a:	e03e      	b.n	80029aa <__swsetup_r+0xba>
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <__swsetup_r+0xd4>)
 800292e:	429c      	cmp	r4, r3
 8002930:	d101      	bne.n	8002936 <__swsetup_r+0x46>
 8002932:	68ac      	ldr	r4, [r5, #8]
 8002934:	e7eb      	b.n	800290e <__swsetup_r+0x1e>
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <__swsetup_r+0xd8>)
 8002938:	429c      	cmp	r4, r3
 800293a:	bf08      	it	eq
 800293c:	68ec      	ldreq	r4, [r5, #12]
 800293e:	e7e6      	b.n	800290e <__swsetup_r+0x1e>
 8002940:	0758      	lsls	r0, r3, #29
 8002942:	d512      	bpl.n	800296a <__swsetup_r+0x7a>
 8002944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002946:	b141      	cbz	r1, 800295a <__swsetup_r+0x6a>
 8002948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800294c:	4299      	cmp	r1, r3
 800294e:	d002      	beq.n	8002956 <__swsetup_r+0x66>
 8002950:	4630      	mov	r0, r6
 8002952:	f000 fa59 	bl	8002e08 <_free_r>
 8002956:	2300      	movs	r3, #0
 8002958:	6363      	str	r3, [r4, #52]	; 0x34
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002960:	81a3      	strh	r3, [r4, #12]
 8002962:	2300      	movs	r3, #0
 8002964:	6063      	str	r3, [r4, #4]
 8002966:	6923      	ldr	r3, [r4, #16]
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	81a3      	strh	r3, [r4, #12]
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	b94b      	cbnz	r3, 800298a <__swsetup_r+0x9a>
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800297c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002980:	d003      	beq.n	800298a <__swsetup_r+0x9a>
 8002982:	4621      	mov	r1, r4
 8002984:	4630      	mov	r0, r6
 8002986:	f000 f9ff 	bl	8002d88 <__smakebuf_r>
 800298a:	89a0      	ldrh	r0, [r4, #12]
 800298c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002990:	f010 0301 	ands.w	r3, r0, #1
 8002994:	d00a      	beq.n	80029ac <__swsetup_r+0xbc>
 8002996:	2300      	movs	r3, #0
 8002998:	60a3      	str	r3, [r4, #8]
 800299a:	6963      	ldr	r3, [r4, #20]
 800299c:	425b      	negs	r3, r3
 800299e:	61a3      	str	r3, [r4, #24]
 80029a0:	6923      	ldr	r3, [r4, #16]
 80029a2:	b943      	cbnz	r3, 80029b6 <__swsetup_r+0xc6>
 80029a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029a8:	d1ba      	bne.n	8002920 <__swsetup_r+0x30>
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	0781      	lsls	r1, r0, #30
 80029ae:	bf58      	it	pl
 80029b0:	6963      	ldrpl	r3, [r4, #20]
 80029b2:	60a3      	str	r3, [r4, #8]
 80029b4:	e7f4      	b.n	80029a0 <__swsetup_r+0xb0>
 80029b6:	2000      	movs	r0, #0
 80029b8:	e7f7      	b.n	80029aa <__swsetup_r+0xba>
 80029ba:	bf00      	nop
 80029bc:	2000000c 	.word	0x2000000c
 80029c0:	08003174 	.word	0x08003174
 80029c4:	08003194 	.word	0x08003194
 80029c8:	08003154 	.word	0x08003154

080029cc <__sflush_r>:
 80029cc:	898a      	ldrh	r2, [r1, #12]
 80029ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029d2:	4605      	mov	r5, r0
 80029d4:	0710      	lsls	r0, r2, #28
 80029d6:	460c      	mov	r4, r1
 80029d8:	d458      	bmi.n	8002a8c <__sflush_r+0xc0>
 80029da:	684b      	ldr	r3, [r1, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dc05      	bgt.n	80029ec <__sflush_r+0x20>
 80029e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dc02      	bgt.n	80029ec <__sflush_r+0x20>
 80029e6:	2000      	movs	r0, #0
 80029e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ee:	2e00      	cmp	r6, #0
 80029f0:	d0f9      	beq.n	80029e6 <__sflush_r+0x1a>
 80029f2:	2300      	movs	r3, #0
 80029f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029f8:	682f      	ldr	r7, [r5, #0]
 80029fa:	602b      	str	r3, [r5, #0]
 80029fc:	d032      	beq.n	8002a64 <__sflush_r+0x98>
 80029fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a00:	89a3      	ldrh	r3, [r4, #12]
 8002a02:	075a      	lsls	r2, r3, #29
 8002a04:	d505      	bpl.n	8002a12 <__sflush_r+0x46>
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	1ac0      	subs	r0, r0, r3
 8002a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a0c:	b10b      	cbz	r3, 8002a12 <__sflush_r+0x46>
 8002a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a10:	1ac0      	subs	r0, r0, r3
 8002a12:	2300      	movs	r3, #0
 8002a14:	4602      	mov	r2, r0
 8002a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a18:	6a21      	ldr	r1, [r4, #32]
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	47b0      	blx	r6
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	89a3      	ldrh	r3, [r4, #12]
 8002a22:	d106      	bne.n	8002a32 <__sflush_r+0x66>
 8002a24:	6829      	ldr	r1, [r5, #0]
 8002a26:	291d      	cmp	r1, #29
 8002a28:	d82c      	bhi.n	8002a84 <__sflush_r+0xb8>
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <__sflush_r+0x108>)
 8002a2c:	40ca      	lsrs	r2, r1
 8002a2e:	07d6      	lsls	r6, r2, #31
 8002a30:	d528      	bpl.n	8002a84 <__sflush_r+0xb8>
 8002a32:	2200      	movs	r2, #0
 8002a34:	6062      	str	r2, [r4, #4]
 8002a36:	04d9      	lsls	r1, r3, #19
 8002a38:	6922      	ldr	r2, [r4, #16]
 8002a3a:	6022      	str	r2, [r4, #0]
 8002a3c:	d504      	bpl.n	8002a48 <__sflush_r+0x7c>
 8002a3e:	1c42      	adds	r2, r0, #1
 8002a40:	d101      	bne.n	8002a46 <__sflush_r+0x7a>
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	b903      	cbnz	r3, 8002a48 <__sflush_r+0x7c>
 8002a46:	6560      	str	r0, [r4, #84]	; 0x54
 8002a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a4a:	602f      	str	r7, [r5, #0]
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d0ca      	beq.n	80029e6 <__sflush_r+0x1a>
 8002a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a54:	4299      	cmp	r1, r3
 8002a56:	d002      	beq.n	8002a5e <__sflush_r+0x92>
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f000 f9d5 	bl	8002e08 <_free_r>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	6360      	str	r0, [r4, #52]	; 0x34
 8002a62:	e7c1      	b.n	80029e8 <__sflush_r+0x1c>
 8002a64:	6a21      	ldr	r1, [r4, #32]
 8002a66:	2301      	movs	r3, #1
 8002a68:	4628      	mov	r0, r5
 8002a6a:	47b0      	blx	r6
 8002a6c:	1c41      	adds	r1, r0, #1
 8002a6e:	d1c7      	bne.n	8002a00 <__sflush_r+0x34>
 8002a70:	682b      	ldr	r3, [r5, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0c4      	beq.n	8002a00 <__sflush_r+0x34>
 8002a76:	2b1d      	cmp	r3, #29
 8002a78:	d001      	beq.n	8002a7e <__sflush_r+0xb2>
 8002a7a:	2b16      	cmp	r3, #22
 8002a7c:	d101      	bne.n	8002a82 <__sflush_r+0xb6>
 8002a7e:	602f      	str	r7, [r5, #0]
 8002a80:	e7b1      	b.n	80029e6 <__sflush_r+0x1a>
 8002a82:	89a3      	ldrh	r3, [r4, #12]
 8002a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a88:	81a3      	strh	r3, [r4, #12]
 8002a8a:	e7ad      	b.n	80029e8 <__sflush_r+0x1c>
 8002a8c:	690f      	ldr	r7, [r1, #16]
 8002a8e:	2f00      	cmp	r7, #0
 8002a90:	d0a9      	beq.n	80029e6 <__sflush_r+0x1a>
 8002a92:	0793      	lsls	r3, r2, #30
 8002a94:	680e      	ldr	r6, [r1, #0]
 8002a96:	bf08      	it	eq
 8002a98:	694b      	ldreq	r3, [r1, #20]
 8002a9a:	600f      	str	r7, [r1, #0]
 8002a9c:	bf18      	it	ne
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	eba6 0807 	sub.w	r8, r6, r7
 8002aa4:	608b      	str	r3, [r1, #8]
 8002aa6:	f1b8 0f00 	cmp.w	r8, #0
 8002aaa:	dd9c      	ble.n	80029e6 <__sflush_r+0x1a>
 8002aac:	6a21      	ldr	r1, [r4, #32]
 8002aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ab0:	4643      	mov	r3, r8
 8002ab2:	463a      	mov	r2, r7
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	47b0      	blx	r6
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	dc06      	bgt.n	8002aca <__sflush_r+0xfe>
 8002abc:	89a3      	ldrh	r3, [r4, #12]
 8002abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	e78e      	b.n	80029e8 <__sflush_r+0x1c>
 8002aca:	4407      	add	r7, r0
 8002acc:	eba8 0800 	sub.w	r8, r8, r0
 8002ad0:	e7e9      	b.n	8002aa6 <__sflush_r+0xda>
 8002ad2:	bf00      	nop
 8002ad4:	20400001 	.word	0x20400001

08002ad8 <_fflush_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	690b      	ldr	r3, [r1, #16]
 8002adc:	4605      	mov	r5, r0
 8002ade:	460c      	mov	r4, r1
 8002ae0:	b913      	cbnz	r3, 8002ae8 <_fflush_r+0x10>
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
 8002ae8:	b118      	cbz	r0, 8002af2 <_fflush_r+0x1a>
 8002aea:	6983      	ldr	r3, [r0, #24]
 8002aec:	b90b      	cbnz	r3, 8002af2 <_fflush_r+0x1a>
 8002aee:	f000 f887 	bl	8002c00 <__sinit>
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <_fflush_r+0x6c>)
 8002af4:	429c      	cmp	r4, r3
 8002af6:	d11b      	bne.n	8002b30 <_fflush_r+0x58>
 8002af8:	686c      	ldr	r4, [r5, #4]
 8002afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0ef      	beq.n	8002ae2 <_fflush_r+0xa>
 8002b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b04:	07d0      	lsls	r0, r2, #31
 8002b06:	d404      	bmi.n	8002b12 <_fflush_r+0x3a>
 8002b08:	0599      	lsls	r1, r3, #22
 8002b0a:	d402      	bmi.n	8002b12 <_fflush_r+0x3a>
 8002b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b0e:	f000 f915 	bl	8002d3c <__retarget_lock_acquire_recursive>
 8002b12:	4628      	mov	r0, r5
 8002b14:	4621      	mov	r1, r4
 8002b16:	f7ff ff59 	bl	80029cc <__sflush_r>
 8002b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b1c:	07da      	lsls	r2, r3, #31
 8002b1e:	4605      	mov	r5, r0
 8002b20:	d4e0      	bmi.n	8002ae4 <_fflush_r+0xc>
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	059b      	lsls	r3, r3, #22
 8002b26:	d4dd      	bmi.n	8002ae4 <_fflush_r+0xc>
 8002b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b2a:	f000 f908 	bl	8002d3e <__retarget_lock_release_recursive>
 8002b2e:	e7d9      	b.n	8002ae4 <_fflush_r+0xc>
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <_fflush_r+0x70>)
 8002b32:	429c      	cmp	r4, r3
 8002b34:	d101      	bne.n	8002b3a <_fflush_r+0x62>
 8002b36:	68ac      	ldr	r4, [r5, #8]
 8002b38:	e7df      	b.n	8002afa <_fflush_r+0x22>
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <_fflush_r+0x74>)
 8002b3c:	429c      	cmp	r4, r3
 8002b3e:	bf08      	it	eq
 8002b40:	68ec      	ldreq	r4, [r5, #12]
 8002b42:	e7da      	b.n	8002afa <_fflush_r+0x22>
 8002b44:	08003174 	.word	0x08003174
 8002b48:	08003194 	.word	0x08003194
 8002b4c:	08003154 	.word	0x08003154

08002b50 <std>:
 8002b50:	2300      	movs	r3, #0
 8002b52:	b510      	push	{r4, lr}
 8002b54:	4604      	mov	r4, r0
 8002b56:	e9c0 3300 	strd	r3, r3, [r0]
 8002b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b5e:	6083      	str	r3, [r0, #8]
 8002b60:	8181      	strh	r1, [r0, #12]
 8002b62:	6643      	str	r3, [r0, #100]	; 0x64
 8002b64:	81c2      	strh	r2, [r0, #14]
 8002b66:	6183      	str	r3, [r0, #24]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	305c      	adds	r0, #92	; 0x5c
 8002b6e:	f7ff fdef 	bl	8002750 <memset>
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <std+0x38>)
 8002b74:	6263      	str	r3, [r4, #36]	; 0x24
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <std+0x3c>)
 8002b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <std+0x40>)
 8002b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <std+0x44>)
 8002b80:	6224      	str	r4, [r4, #32]
 8002b82:	6323      	str	r3, [r4, #48]	; 0x30
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	bf00      	nop
 8002b88:	08002f7d 	.word	0x08002f7d
 8002b8c:	08002f9f 	.word	0x08002f9f
 8002b90:	08002fd7 	.word	0x08002fd7
 8002b94:	08002ffb 	.word	0x08002ffb

08002b98 <_cleanup_r>:
 8002b98:	4901      	ldr	r1, [pc, #4]	; (8002ba0 <_cleanup_r+0x8>)
 8002b9a:	f000 b8af 	b.w	8002cfc <_fwalk_reent>
 8002b9e:	bf00      	nop
 8002ba0:	08002ad9 	.word	0x08002ad9

08002ba4 <__sfmoreglue>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	1e4a      	subs	r2, r1, #1
 8002ba8:	2568      	movs	r5, #104	; 0x68
 8002baa:	4355      	muls	r5, r2
 8002bac:	460e      	mov	r6, r1
 8002bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002bb2:	f000 f979 	bl	8002ea8 <_malloc_r>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	b140      	cbz	r0, 8002bcc <__sfmoreglue+0x28>
 8002bba:	2100      	movs	r1, #0
 8002bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8002bc0:	300c      	adds	r0, #12
 8002bc2:	60a0      	str	r0, [r4, #8]
 8002bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002bc8:	f7ff fdc2 	bl	8002750 <memset>
 8002bcc:	4620      	mov	r0, r4
 8002bce:	bd70      	pop	{r4, r5, r6, pc}

08002bd0 <__sfp_lock_acquire>:
 8002bd0:	4801      	ldr	r0, [pc, #4]	; (8002bd8 <__sfp_lock_acquire+0x8>)
 8002bd2:	f000 b8b3 	b.w	8002d3c <__retarget_lock_acquire_recursive>
 8002bd6:	bf00      	nop
 8002bd8:	200000ec 	.word	0x200000ec

08002bdc <__sfp_lock_release>:
 8002bdc:	4801      	ldr	r0, [pc, #4]	; (8002be4 <__sfp_lock_release+0x8>)
 8002bde:	f000 b8ae 	b.w	8002d3e <__retarget_lock_release_recursive>
 8002be2:	bf00      	nop
 8002be4:	200000ec 	.word	0x200000ec

08002be8 <__sinit_lock_acquire>:
 8002be8:	4801      	ldr	r0, [pc, #4]	; (8002bf0 <__sinit_lock_acquire+0x8>)
 8002bea:	f000 b8a7 	b.w	8002d3c <__retarget_lock_acquire_recursive>
 8002bee:	bf00      	nop
 8002bf0:	200000e7 	.word	0x200000e7

08002bf4 <__sinit_lock_release>:
 8002bf4:	4801      	ldr	r0, [pc, #4]	; (8002bfc <__sinit_lock_release+0x8>)
 8002bf6:	f000 b8a2 	b.w	8002d3e <__retarget_lock_release_recursive>
 8002bfa:	bf00      	nop
 8002bfc:	200000e7 	.word	0x200000e7

08002c00 <__sinit>:
 8002c00:	b510      	push	{r4, lr}
 8002c02:	4604      	mov	r4, r0
 8002c04:	f7ff fff0 	bl	8002be8 <__sinit_lock_acquire>
 8002c08:	69a3      	ldr	r3, [r4, #24]
 8002c0a:	b11b      	cbz	r3, 8002c14 <__sinit+0x14>
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c10:	f7ff bff0 	b.w	8002bf4 <__sinit_lock_release>
 8002c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c18:	6523      	str	r3, [r4, #80]	; 0x50
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <__sinit+0x68>)
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <__sinit+0x6c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c22:	42a3      	cmp	r3, r4
 8002c24:	bf04      	itt	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	61a3      	streq	r3, [r4, #24]
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f000 f820 	bl	8002c70 <__sfp>
 8002c30:	6060      	str	r0, [r4, #4]
 8002c32:	4620      	mov	r0, r4
 8002c34:	f000 f81c 	bl	8002c70 <__sfp>
 8002c38:	60a0      	str	r0, [r4, #8]
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f000 f818 	bl	8002c70 <__sfp>
 8002c40:	2200      	movs	r2, #0
 8002c42:	60e0      	str	r0, [r4, #12]
 8002c44:	2104      	movs	r1, #4
 8002c46:	6860      	ldr	r0, [r4, #4]
 8002c48:	f7ff ff82 	bl	8002b50 <std>
 8002c4c:	68a0      	ldr	r0, [r4, #8]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2109      	movs	r1, #9
 8002c52:	f7ff ff7d 	bl	8002b50 <std>
 8002c56:	68e0      	ldr	r0, [r4, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	2112      	movs	r1, #18
 8002c5c:	f7ff ff78 	bl	8002b50 <std>
 8002c60:	2301      	movs	r3, #1
 8002c62:	61a3      	str	r3, [r4, #24]
 8002c64:	e7d2      	b.n	8002c0c <__sinit+0xc>
 8002c66:	bf00      	nop
 8002c68:	08003150 	.word	0x08003150
 8002c6c:	08002b99 	.word	0x08002b99

08002c70 <__sfp>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	4607      	mov	r7, r0
 8002c74:	f7ff ffac 	bl	8002bd0 <__sfp_lock_acquire>
 8002c78:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <__sfp+0x84>)
 8002c7a:	681e      	ldr	r6, [r3, #0]
 8002c7c:	69b3      	ldr	r3, [r6, #24]
 8002c7e:	b913      	cbnz	r3, 8002c86 <__sfp+0x16>
 8002c80:	4630      	mov	r0, r6
 8002c82:	f7ff ffbd 	bl	8002c00 <__sinit>
 8002c86:	3648      	adds	r6, #72	; 0x48
 8002c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	d503      	bpl.n	8002c98 <__sfp+0x28>
 8002c90:	6833      	ldr	r3, [r6, #0]
 8002c92:	b30b      	cbz	r3, 8002cd8 <__sfp+0x68>
 8002c94:	6836      	ldr	r6, [r6, #0]
 8002c96:	e7f7      	b.n	8002c88 <__sfp+0x18>
 8002c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c9c:	b9d5      	cbnz	r5, 8002cd4 <__sfp+0x64>
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <__sfp+0x88>)
 8002ca0:	60e3      	str	r3, [r4, #12]
 8002ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ca8:	f000 f847 	bl	8002d3a <__retarget_lock_init_recursive>
 8002cac:	f7ff ff96 	bl	8002bdc <__sfp_lock_release>
 8002cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002cb8:	6025      	str	r5, [r4, #0]
 8002cba:	61a5      	str	r5, [r4, #24]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002cc4:	f7ff fd44 	bl	8002750 <memset>
 8002cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd4:	3468      	adds	r4, #104	; 0x68
 8002cd6:	e7d9      	b.n	8002c8c <__sfp+0x1c>
 8002cd8:	2104      	movs	r1, #4
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f7ff ff62 	bl	8002ba4 <__sfmoreglue>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	6030      	str	r0, [r6, #0]
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d1d5      	bne.n	8002c94 <__sfp+0x24>
 8002ce8:	f7ff ff78 	bl	8002bdc <__sfp_lock_release>
 8002cec:	230c      	movs	r3, #12
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	e7ee      	b.n	8002cd0 <__sfp+0x60>
 8002cf2:	bf00      	nop
 8002cf4:	08003150 	.word	0x08003150
 8002cf8:	ffff0001 	.word	0xffff0001

08002cfc <_fwalk_reent>:
 8002cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d00:	4606      	mov	r6, r0
 8002d02:	4688      	mov	r8, r1
 8002d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d08:	2700      	movs	r7, #0
 8002d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002d12:	d505      	bpl.n	8002d20 <_fwalk_reent+0x24>
 8002d14:	6824      	ldr	r4, [r4, #0]
 8002d16:	2c00      	cmp	r4, #0
 8002d18:	d1f7      	bne.n	8002d0a <_fwalk_reent+0xe>
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d20:	89ab      	ldrh	r3, [r5, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d907      	bls.n	8002d36 <_fwalk_reent+0x3a>
 8002d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	d003      	beq.n	8002d36 <_fwalk_reent+0x3a>
 8002d2e:	4629      	mov	r1, r5
 8002d30:	4630      	mov	r0, r6
 8002d32:	47c0      	blx	r8
 8002d34:	4307      	orrs	r7, r0
 8002d36:	3568      	adds	r5, #104	; 0x68
 8002d38:	e7e9      	b.n	8002d0e <_fwalk_reent+0x12>

08002d3a <__retarget_lock_init_recursive>:
 8002d3a:	4770      	bx	lr

08002d3c <__retarget_lock_acquire_recursive>:
 8002d3c:	4770      	bx	lr

08002d3e <__retarget_lock_release_recursive>:
 8002d3e:	4770      	bx	lr

08002d40 <__swhatbuf_r>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	460e      	mov	r6, r1
 8002d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	b096      	sub	sp, #88	; 0x58
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	da07      	bge.n	8002d62 <__swhatbuf_r+0x22>
 8002d52:	2300      	movs	r3, #0
 8002d54:	602b      	str	r3, [r5, #0]
 8002d56:	89b3      	ldrh	r3, [r6, #12]
 8002d58:	061a      	lsls	r2, r3, #24
 8002d5a:	d410      	bmi.n	8002d7e <__swhatbuf_r+0x3e>
 8002d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d60:	e00e      	b.n	8002d80 <__swhatbuf_r+0x40>
 8002d62:	466a      	mov	r2, sp
 8002d64:	f000 f970 	bl	8003048 <_fstat_r>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	dbf2      	blt.n	8002d52 <__swhatbuf_r+0x12>
 8002d6c:	9a01      	ldr	r2, [sp, #4]
 8002d6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d76:	425a      	negs	r2, r3
 8002d78:	415a      	adcs	r2, r3
 8002d7a:	602a      	str	r2, [r5, #0]
 8002d7c:	e7ee      	b.n	8002d5c <__swhatbuf_r+0x1c>
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	2000      	movs	r0, #0
 8002d82:	6023      	str	r3, [r4, #0]
 8002d84:	b016      	add	sp, #88	; 0x58
 8002d86:	bd70      	pop	{r4, r5, r6, pc}

08002d88 <__smakebuf_r>:
 8002d88:	898b      	ldrh	r3, [r1, #12]
 8002d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d8c:	079d      	lsls	r5, r3, #30
 8002d8e:	4606      	mov	r6, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	d507      	bpl.n	8002da4 <__smakebuf_r+0x1c>
 8002d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	6123      	str	r3, [r4, #16]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	6163      	str	r3, [r4, #20]
 8002da0:	b002      	add	sp, #8
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	ab01      	add	r3, sp, #4
 8002da6:	466a      	mov	r2, sp
 8002da8:	f7ff ffca 	bl	8002d40 <__swhatbuf_r>
 8002dac:	9900      	ldr	r1, [sp, #0]
 8002dae:	4605      	mov	r5, r0
 8002db0:	4630      	mov	r0, r6
 8002db2:	f000 f879 	bl	8002ea8 <_malloc_r>
 8002db6:	b948      	cbnz	r0, 8002dcc <__smakebuf_r+0x44>
 8002db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dbc:	059a      	lsls	r2, r3, #22
 8002dbe:	d4ef      	bmi.n	8002da0 <__smakebuf_r+0x18>
 8002dc0:	f023 0303 	bic.w	r3, r3, #3
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	81a3      	strh	r3, [r4, #12]
 8002dca:	e7e3      	b.n	8002d94 <__smakebuf_r+0xc>
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <__smakebuf_r+0x7c>)
 8002dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	6020      	str	r0, [r4, #0]
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	81a3      	strh	r3, [r4, #12]
 8002dda:	9b00      	ldr	r3, [sp, #0]
 8002ddc:	6163      	str	r3, [r4, #20]
 8002dde:	9b01      	ldr	r3, [sp, #4]
 8002de0:	6120      	str	r0, [r4, #16]
 8002de2:	b15b      	cbz	r3, 8002dfc <__smakebuf_r+0x74>
 8002de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 f93f 	bl	800306c <_isatty_r>
 8002dee:	b128      	cbz	r0, 8002dfc <__smakebuf_r+0x74>
 8002df0:	89a3      	ldrh	r3, [r4, #12]
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	81a3      	strh	r3, [r4, #12]
 8002dfc:	89a0      	ldrh	r0, [r4, #12]
 8002dfe:	4305      	orrs	r5, r0
 8002e00:	81a5      	strh	r5, [r4, #12]
 8002e02:	e7cd      	b.n	8002da0 <__smakebuf_r+0x18>
 8002e04:	08002b99 	.word	0x08002b99

08002e08 <_free_r>:
 8002e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d048      	beq.n	8002ea0 <_free_r+0x98>
 8002e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e12:	9001      	str	r0, [sp, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f1a1 0404 	sub.w	r4, r1, #4
 8002e1a:	bfb8      	it	lt
 8002e1c:	18e4      	addlt	r4, r4, r3
 8002e1e:	f000 f947 	bl	80030b0 <__malloc_lock>
 8002e22:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <_free_r+0x9c>)
 8002e24:	9801      	ldr	r0, [sp, #4]
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	4615      	mov	r5, r2
 8002e2a:	b933      	cbnz	r3, 8002e3a <_free_r+0x32>
 8002e2c:	6063      	str	r3, [r4, #4]
 8002e2e:	6014      	str	r4, [r2, #0]
 8002e30:	b003      	add	sp, #12
 8002e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e36:	f000 b941 	b.w	80030bc <__malloc_unlock>
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	d90b      	bls.n	8002e56 <_free_r+0x4e>
 8002e3e:	6821      	ldr	r1, [r4, #0]
 8002e40:	1862      	adds	r2, r4, r1
 8002e42:	4293      	cmp	r3, r2
 8002e44:	bf04      	itt	eq
 8002e46:	681a      	ldreq	r2, [r3, #0]
 8002e48:	685b      	ldreq	r3, [r3, #4]
 8002e4a:	6063      	str	r3, [r4, #4]
 8002e4c:	bf04      	itt	eq
 8002e4e:	1852      	addeq	r2, r2, r1
 8002e50:	6022      	streq	r2, [r4, #0]
 8002e52:	602c      	str	r4, [r5, #0]
 8002e54:	e7ec      	b.n	8002e30 <_free_r+0x28>
 8002e56:	461a      	mov	r2, r3
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b10b      	cbz	r3, 8002e60 <_free_r+0x58>
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	d9fa      	bls.n	8002e56 <_free_r+0x4e>
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	1855      	adds	r5, r2, r1
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d10b      	bne.n	8002e80 <_free_r+0x78>
 8002e68:	6824      	ldr	r4, [r4, #0]
 8002e6a:	4421      	add	r1, r4
 8002e6c:	1854      	adds	r4, r2, r1
 8002e6e:	42a3      	cmp	r3, r4
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	d1dd      	bne.n	8002e30 <_free_r+0x28>
 8002e74:	681c      	ldr	r4, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	6053      	str	r3, [r2, #4]
 8002e7a:	4421      	add	r1, r4
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	e7d7      	b.n	8002e30 <_free_r+0x28>
 8002e80:	d902      	bls.n	8002e88 <_free_r+0x80>
 8002e82:	230c      	movs	r3, #12
 8002e84:	6003      	str	r3, [r0, #0]
 8002e86:	e7d3      	b.n	8002e30 <_free_r+0x28>
 8002e88:	6825      	ldr	r5, [r4, #0]
 8002e8a:	1961      	adds	r1, r4, r5
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	bf04      	itt	eq
 8002e90:	6819      	ldreq	r1, [r3, #0]
 8002e92:	685b      	ldreq	r3, [r3, #4]
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	bf04      	itt	eq
 8002e98:	1949      	addeq	r1, r1, r5
 8002e9a:	6021      	streq	r1, [r4, #0]
 8002e9c:	6054      	str	r4, [r2, #4]
 8002e9e:	e7c7      	b.n	8002e30 <_free_r+0x28>
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bd30      	pop	{r4, r5, pc}
 8002ea4:	20000090 	.word	0x20000090

08002ea8 <_malloc_r>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	1ccd      	adds	r5, r1, #3
 8002eac:	f025 0503 	bic.w	r5, r5, #3
 8002eb0:	3508      	adds	r5, #8
 8002eb2:	2d0c      	cmp	r5, #12
 8002eb4:	bf38      	it	cc
 8002eb6:	250c      	movcc	r5, #12
 8002eb8:	2d00      	cmp	r5, #0
 8002eba:	4606      	mov	r6, r0
 8002ebc:	db01      	blt.n	8002ec2 <_malloc_r+0x1a>
 8002ebe:	42a9      	cmp	r1, r5
 8002ec0:	d903      	bls.n	8002eca <_malloc_r+0x22>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	6033      	str	r3, [r6, #0]
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eca:	f000 f8f1 	bl	80030b0 <__malloc_lock>
 8002ece:	4921      	ldr	r1, [pc, #132]	; (8002f54 <_malloc_r+0xac>)
 8002ed0:	680a      	ldr	r2, [r1, #0]
 8002ed2:	4614      	mov	r4, r2
 8002ed4:	b99c      	cbnz	r4, 8002efe <_malloc_r+0x56>
 8002ed6:	4f20      	ldr	r7, [pc, #128]	; (8002f58 <_malloc_r+0xb0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	b923      	cbnz	r3, 8002ee6 <_malloc_r+0x3e>
 8002edc:	4621      	mov	r1, r4
 8002ede:	4630      	mov	r0, r6
 8002ee0:	f000 f83c 	bl	8002f5c <_sbrk_r>
 8002ee4:	6038      	str	r0, [r7, #0]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f000 f837 	bl	8002f5c <_sbrk_r>
 8002eee:	1c43      	adds	r3, r0, #1
 8002ef0:	d123      	bne.n	8002f3a <_malloc_r+0x92>
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	6033      	str	r3, [r6, #0]
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f000 f8e0 	bl	80030bc <__malloc_unlock>
 8002efc:	e7e3      	b.n	8002ec6 <_malloc_r+0x1e>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	1b5b      	subs	r3, r3, r5
 8002f02:	d417      	bmi.n	8002f34 <_malloc_r+0x8c>
 8002f04:	2b0b      	cmp	r3, #11
 8002f06:	d903      	bls.n	8002f10 <_malloc_r+0x68>
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	441c      	add	r4, r3
 8002f0c:	6025      	str	r5, [r4, #0]
 8002f0e:	e004      	b.n	8002f1a <_malloc_r+0x72>
 8002f10:	6863      	ldr	r3, [r4, #4]
 8002f12:	42a2      	cmp	r2, r4
 8002f14:	bf0c      	ite	eq
 8002f16:	600b      	streq	r3, [r1, #0]
 8002f18:	6053      	strne	r3, [r2, #4]
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f000 f8ce 	bl	80030bc <__malloc_unlock>
 8002f20:	f104 000b 	add.w	r0, r4, #11
 8002f24:	1d23      	adds	r3, r4, #4
 8002f26:	f020 0007 	bic.w	r0, r0, #7
 8002f2a:	1ac2      	subs	r2, r0, r3
 8002f2c:	d0cc      	beq.n	8002ec8 <_malloc_r+0x20>
 8002f2e:	1a1b      	subs	r3, r3, r0
 8002f30:	50a3      	str	r3, [r4, r2]
 8002f32:	e7c9      	b.n	8002ec8 <_malloc_r+0x20>
 8002f34:	4622      	mov	r2, r4
 8002f36:	6864      	ldr	r4, [r4, #4]
 8002f38:	e7cc      	b.n	8002ed4 <_malloc_r+0x2c>
 8002f3a:	1cc4      	adds	r4, r0, #3
 8002f3c:	f024 0403 	bic.w	r4, r4, #3
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	d0e3      	beq.n	8002f0c <_malloc_r+0x64>
 8002f44:	1a21      	subs	r1, r4, r0
 8002f46:	4630      	mov	r0, r6
 8002f48:	f000 f808 	bl	8002f5c <_sbrk_r>
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d1dd      	bne.n	8002f0c <_malloc_r+0x64>
 8002f50:	e7cf      	b.n	8002ef2 <_malloc_r+0x4a>
 8002f52:	bf00      	nop
 8002f54:	20000090 	.word	0x20000090
 8002f58:	20000094 	.word	0x20000094

08002f5c <_sbrk_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4d06      	ldr	r5, [pc, #24]	; (8002f78 <_sbrk_r+0x1c>)
 8002f60:	2300      	movs	r3, #0
 8002f62:	4604      	mov	r4, r0
 8002f64:	4608      	mov	r0, r1
 8002f66:	602b      	str	r3, [r5, #0]
 8002f68:	f7fd fe04 	bl	8000b74 <_sbrk>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d102      	bne.n	8002f76 <_sbrk_r+0x1a>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	b103      	cbz	r3, 8002f76 <_sbrk_r+0x1a>
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	bd38      	pop	{r3, r4, r5, pc}
 8002f78:	200000f0 	.word	0x200000f0

08002f7c <__sread>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	460c      	mov	r4, r1
 8002f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f84:	f000 f8a0 	bl	80030c8 <_read_r>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	bfab      	itete	ge
 8002f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f90:	181b      	addge	r3, r3, r0
 8002f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f96:	bfac      	ite	ge
 8002f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f9a:	81a3      	strhlt	r3, [r4, #12]
 8002f9c:	bd10      	pop	{r4, pc}

08002f9e <__swrite>:
 8002f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa2:	461f      	mov	r7, r3
 8002fa4:	898b      	ldrh	r3, [r1, #12]
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	4605      	mov	r5, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	4616      	mov	r6, r2
 8002fae:	d505      	bpl.n	8002fbc <__swrite+0x1e>
 8002fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f000 f868 	bl	800308c <_lseek_r>
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	4632      	mov	r2, r6
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4628      	mov	r0, r5
 8002fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd2:	f000 b817 	b.w	8003004 <_write_r>

08002fd6 <__sseek>:
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	460c      	mov	r4, r1
 8002fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fde:	f000 f855 	bl	800308c <_lseek_r>
 8002fe2:	1c43      	adds	r3, r0, #1
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	bf15      	itete	ne
 8002fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ff2:	81a3      	strheq	r3, [r4, #12]
 8002ff4:	bf18      	it	ne
 8002ff6:	81a3      	strhne	r3, [r4, #12]
 8002ff8:	bd10      	pop	{r4, pc}

08002ffa <__sclose>:
 8002ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffe:	f000 b813 	b.w	8003028 <_close_r>
	...

08003004 <_write_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	4d07      	ldr	r5, [pc, #28]	; (8003024 <_write_r+0x20>)
 8003008:	4604      	mov	r4, r0
 800300a:	4608      	mov	r0, r1
 800300c:	4611      	mov	r1, r2
 800300e:	2200      	movs	r2, #0
 8003010:	602a      	str	r2, [r5, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	f7fd fa7c 	bl	8000510 <_write>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_write_r+0x1e>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	b103      	cbz	r3, 8003022 <_write_r+0x1e>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	200000f0 	.word	0x200000f0

08003028 <_close_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4d06      	ldr	r5, [pc, #24]	; (8003044 <_close_r+0x1c>)
 800302c:	2300      	movs	r3, #0
 800302e:	4604      	mov	r4, r0
 8003030:	4608      	mov	r0, r1
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	f7fd fd69 	bl	8000b0a <_close>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d102      	bne.n	8003042 <_close_r+0x1a>
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	b103      	cbz	r3, 8003042 <_close_r+0x1a>
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	200000f0 	.word	0x200000f0

08003048 <_fstat_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4d07      	ldr	r5, [pc, #28]	; (8003068 <_fstat_r+0x20>)
 800304c:	2300      	movs	r3, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	602b      	str	r3, [r5, #0]
 8003056:	f7fd fd64 	bl	8000b22 <_fstat>
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	d102      	bne.n	8003064 <_fstat_r+0x1c>
 800305e:	682b      	ldr	r3, [r5, #0]
 8003060:	b103      	cbz	r3, 8003064 <_fstat_r+0x1c>
 8003062:	6023      	str	r3, [r4, #0]
 8003064:	bd38      	pop	{r3, r4, r5, pc}
 8003066:	bf00      	nop
 8003068:	200000f0 	.word	0x200000f0

0800306c <_isatty_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4d06      	ldr	r5, [pc, #24]	; (8003088 <_isatty_r+0x1c>)
 8003070:	2300      	movs	r3, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	f7fd fd63 	bl	8000b42 <_isatty>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_isatty_r+0x1a>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_isatty_r+0x1a>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	200000f0 	.word	0x200000f0

0800308c <_lseek_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d07      	ldr	r5, [pc, #28]	; (80030ac <_lseek_r+0x20>)
 8003090:	4604      	mov	r4, r0
 8003092:	4608      	mov	r0, r1
 8003094:	4611      	mov	r1, r2
 8003096:	2200      	movs	r2, #0
 8003098:	602a      	str	r2, [r5, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f7fd fd5c 	bl	8000b58 <_lseek>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_lseek_r+0x1e>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_lseek_r+0x1e>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	200000f0 	.word	0x200000f0

080030b0 <__malloc_lock>:
 80030b0:	4801      	ldr	r0, [pc, #4]	; (80030b8 <__malloc_lock+0x8>)
 80030b2:	f7ff be43 	b.w	8002d3c <__retarget_lock_acquire_recursive>
 80030b6:	bf00      	nop
 80030b8:	200000e8 	.word	0x200000e8

080030bc <__malloc_unlock>:
 80030bc:	4801      	ldr	r0, [pc, #4]	; (80030c4 <__malloc_unlock+0x8>)
 80030be:	f7ff be3e 	b.w	8002d3e <__retarget_lock_release_recursive>
 80030c2:	bf00      	nop
 80030c4:	200000e8 	.word	0x200000e8

080030c8 <_read_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4d07      	ldr	r5, [pc, #28]	; (80030e8 <_read_r+0x20>)
 80030cc:	4604      	mov	r4, r0
 80030ce:	4608      	mov	r0, r1
 80030d0:	4611      	mov	r1, r2
 80030d2:	2200      	movs	r2, #0
 80030d4:	602a      	str	r2, [r5, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f7fd fcfa 	bl	8000ad0 <_read>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d102      	bne.n	80030e6 <_read_r+0x1e>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	b103      	cbz	r3, 80030e6 <_read_r+0x1e>
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	200000f0 	.word	0x200000f0

080030ec <_init>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr

080030f8 <_fini>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr
