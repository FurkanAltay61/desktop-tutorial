<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.5" links="1">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler. Both of them will be available if you install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Keypad}-->
  <class name="Keypad" superclass="qpc::QActive">
   <!--${AOs::Keypad::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Keypad::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Keypad::SM::initial}-->
    <initial target="../1/0">
     <action>QTimeEvt_armX(&amp;me-&gt;timeEvt,BSP_TICKS_PER_SEC/2,1U);</action>
     <initial_glyph conn="51,8,5,1,21,17,-7">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Keypad::SM::System}-->
    <state name="System">
     <!--${AOs::Keypad::SM::System::Button}-->
     <state name="Button">
      <!--${AOs::Keypad::SM::System::Button::TIMEOUT}-->
      <tran trig="TIMEOUT">
       <action>
for(uint8_t i=0;i&lt;3;i++){
    HAL_GPIO_WritePin(GPIOB,ColArr[i], GPIO_PIN_SET);
    for(uint8_t j=0;j&lt;4;j++){
        if(HAL_GPIO_ReadPin(GPIOE,RowArr[j]) == GPIO_PIN_SET){
            if((HAL_GetTick() - prevTick[j][i]) &gt; 100 &amp;&amp; (LastButtonStateArr[j][i] == 0)){
                printf(&quot;Pressed key : %c\n&quot;,keypad[j][i]);
                PressedKey = keypad[j][i];
                LastButtonStateArr[j][i] = 1;
                static QEvt const buttonPressedEvt = {BUTTON_PRESSED_SIG};
                QACTIVE_POST(AO_Keypad, &amp;buttonPressedEvt,0U);
            }
        }else{
            prevTick[j][i] = HAL_GetTick();
            LastButtonStateArr[j][i] = 0;
        }
    }

    HAL_GPIO_WritePin(GPIOB,ColArr[i], GPIO_PIN_RESET);
}
</action>
       <tran_glyph conn="44,30,3,-1,11">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Keypad::SM::System::Button::BUTTON_PRESSED}-->
      <tran trig="BUTTON_PRESSED">
       <action>if(PressedKey == '*'){
    start = 1;
    chr = 0;
}else if(PressedKey != '*' &amp;&amp; PressedKey != '#'){
    if(start == 1){
        Str[chr == 30 ? chr = 0 : chr++] = PressedKey;
    }
}else if(PressedKey == '#'){
    if(start == 1 &amp;&amp; chr != 0){
        printf(&quot;String is : %s\n&quot;,Str);
    }
    start = 0;
    chr  = 0;
}
</action>
       <tran_glyph conn="44,37,3,-1,11">
        <action box="0,-2,16,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="44,21,21,21"/>
     </state>
     <state_glyph node="34,16,46,31"/>
    </state>
    <state_diagram size="105,80"/>
   </statechart>
  </class>
  <!--${AOs::Keypad_ctor}-->
  <operation name="Keypad_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Keypad *me = (Keypad *)AO_Keypad;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Keypad_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::bsp.h}-->
  <file name="bsp.h">
   <text>#ifndef BSP_H
#define BSP_H

#include &lt;stdio.h&gt;  /* for printf()/fprintf() */
#include &lt;stdlib.h&gt; /* for exit() */

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);
void BSP_ledOff(void);
void BSP_ledOn(void);

/* define the event signals used in the application ------------------------*/
enum KeypadSignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    BUTTON_PRESSED_SIG,
    IMU_READ_SIG,
    MAX_SIG /* keep last (the number of signals) */
};


/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_Keypad; /* opaque pointer to the Keypad AO */

$declare${AOs::Keypad_ctor}


#endif /* BSP_H */</text>
  </file>
  <!--${.::bsp.c}-->
  <file name="bsp.c">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

void BSP_init(void)   {
    printf(&quot;Simple Keypad example\n&quot;
           &quot;QP/C version: %s\n&quot;
           &quot;Press Ctrl-C to quit...\n&quot;,
           QP_VERSION_STR);
}
void BSP_ledOff(void) { printf(&quot;LED OFF\n&quot;); }
void BSP_ledOn(void)  { printf(&quot;LED ON\n&quot;);  }

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void Q_onAssert(char const * const module, int loc) {
    fprintf(stderr, &quot;Assertion failed in %s:%d&quot;, module, loc);
    exit(-1);
}

void QV_onIdle(void){
#ifndef NDEBUG
    QV_CPU_SLEEP();
#else
    QF_INT_ENABLE();
#endif
}
</text>
  </file>
  <!--${.::keypad.c}-->
  <file name="keypad.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;bsp.h&quot;
#include &quot;keypad.h&quot;
#include &quot;my_mpu6050.h&quot;

extern mpu6050 myMpu;
extern I2C_HandleTypeDef hi2c1;

static char keypad[4][3] = {
    {'1', '2', '3'},
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

static uint8_t  LastButtonStateArr[4][3]={0};
static uint32_t prevTick[4][3]= {0};
static uint16_t RowArr[4] = {GPIO_PIN_9,GPIO_PIN_11,GPIO_PIN_13,GPIO_PIN_15};
static uint16_t ColArr[3] = {GPIO_PIN_11,GPIO_PIN_13,GPIO_PIN_15};
static char Str[30]={0};
static uint8_t chr=0,start=0;
static char PressedKey;

$declare${AOs::Keypad}

/* instantiate the Blinky active object ------------------------------------*/
static Keypad l_keypad;
QActive * const AO_Keypad = &amp;l_keypad.super;

$define${AOs::Keypad_ctor}
$define${AOs::Keypad}</text>
  </file>
  <!--${.::keypad.h}-->
  <file name="keypad.h">
   <text>#include &quot;main.h&quot;</text>
  </file>
 </directory>
</model>
