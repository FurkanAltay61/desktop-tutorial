
printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  080090d8  080090d8  000190d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e4  080095e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095ec  080095ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080095f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200001e0  080097d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080097d4  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b02f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001897  00000000  00000000  0002b23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e72  00000000  00000000  0002d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a809  00000000  00000000  000537f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7de9  00000000  00000000  0005dffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145de4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  00145e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0014953c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00149578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080090c0 	.word	0x080090c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080090c0 	.word	0x080090c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fbae 	bl	800179e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f81d 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 f8d7 	bl	80011f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800104a:	f000 f8a5 	bl	8001198 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <main+0x38>)
 8001050:	f000 f9dc 	bl	800140c <RetargetInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  	ITM_Port32(31) = 2;
	    int testInteger;
	    printf("\r\nEnter an integer:");
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <main+0x3c>)
 8001056:	f003 fbd1 	bl	80047fc <iprintf>
	    scanf("%d", &testInteger);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <main+0x40>)
 8001060:	f003 fbe4 	bl	800482c <iscanf>
	    printf("\r\nNumber = %d",testInteger);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4619      	mov	r1, r3
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <main+0x44>)
 800106a:	f003 fbc7 	bl	80047fc <iprintf>
  {
 800106e:	e7f1      	b.n	8001054 <main+0x1c>
 8001070:	200001fc 	.word	0x200001fc
 8001074:	080090d8 	.word	0x080090d8
 8001078:	080090ec 	.word	0x080090ec
 800107c:	080090f0 	.word	0x080090f0

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b4      	sub	sp, #208	; 0xd0
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fd32 	bl	8003af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2284      	movs	r2, #132	; 0x84
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fd23 	bl	8003af8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b2:	f000 fe7d 	bl	8001db0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <SystemClock_Config+0x110>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a35      	ldr	r2, [pc, #212]	; (8001190 <SystemClock_Config+0x110>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <SystemClock_Config+0x110>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <SystemClock_Config+0x114>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <SystemClock_Config+0x114>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <SystemClock_Config+0x114>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001106:	2305      	movs	r3, #5
 8001108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 80;
 800110c:	2350      	movs	r3, #80	; 0x50
 800110e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fe54 	bl	8001dd0 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800112e:	f000 f967 	bl	8001400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001144:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001154:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f8dc 	bl	8002318 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001166:	f000 f94b 	bl	8001400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001170:	2300      	movs	r3, #0
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f001 faf3 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001184:	f000 f93c 	bl	8001400 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	37d0      	adds	r7, #208	; 0xd0
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_USART3_UART_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011dc:	f001 feb2 	bl	8002f44 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011e6:	f000 f90b 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001fc 	.word	0x200001fc
 80011f4:	40004800 	.word	0x40004800

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b77      	ldr	r3, [pc, #476]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a76      	ldr	r2, [pc, #472]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b74      	ldr	r3, [pc, #464]	; (80013ec <MX_GPIO_Init+0x1f4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b71      	ldr	r3, [pc, #452]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a70      	ldr	r2, [pc, #448]	; (80013ec <MX_GPIO_Init+0x1f4>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a6a      	ldr	r2, [pc, #424]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b68      	ldr	r3, [pc, #416]	; (80013ec <MX_GPIO_Init+0x1f4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a64      	ldr	r2, [pc, #400]	; (80013ec <MX_GPIO_Init+0x1f4>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a5e      	ldr	r2, [pc, #376]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <MX_GPIO_Init+0x1f4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a58      	ldr	r2, [pc, #352]	; (80013ec <MX_GPIO_Init+0x1f4>)
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <MX_GPIO_Init+0x1f4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80012a4:	4852      	ldr	r0, [pc, #328]	; (80013f0 <MX_GPIO_Init+0x1f8>)
 80012a6:	f000 fd69 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2140      	movs	r1, #64	; 0x40
 80012ae:	4851      	ldr	r0, [pc, #324]	; (80013f4 <MX_GPIO_Init+0x1fc>)
 80012b0:	f000 fd64 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	484b      	ldr	r0, [pc, #300]	; (80013f8 <MX_GPIO_Init+0x200>)
 80012cc:	f000 fbaa 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012d0:	2332      	movs	r3, #50	; 0x32
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4843      	ldr	r0, [pc, #268]	; (80013f8 <MX_GPIO_Init+0x200>)
 80012ec:	f000 fb9a 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012f0:	2386      	movs	r3, #134	; 0x86
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001300:	230b      	movs	r3, #11
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	483c      	ldr	r0, [pc, #240]	; (80013fc <MX_GPIO_Init+0x204>)
 800130c:	f000 fb8a 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001310:	f244 0381 	movw	r3, #16513	; 0x4081
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4831      	ldr	r0, [pc, #196]	; (80013f0 <MX_GPIO_Init+0x1f8>)
 800132a:	f000 fb7b 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001340:	230b      	movs	r3, #11
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4829      	ldr	r0, [pc, #164]	; (80013f0 <MX_GPIO_Init+0x1f8>)
 800134c:	f000 fb6a 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4823      	ldr	r0, [pc, #140]	; (80013f4 <MX_GPIO_Init+0x1fc>)
 8001368:	f000 fb5c 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	481d      	ldr	r0, [pc, #116]	; (80013f4 <MX_GPIO_Init+0x1fc>)
 8001380:	f000 fb50 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001384:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001396:	230a      	movs	r3, #10
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <MX_GPIO_Init+0x204>)
 80013a2:	f000 fb3f 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <MX_GPIO_Init+0x204>)
 80013bc:	f000 fb32 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d2:	230b      	movs	r3, #11
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_GPIO_Init+0x1fc>)
 80013de:	f000 fb21 	bl	8001a24 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020000 	.word	0x40020000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <RetargetInit+0x28>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <RetargetInit+0x2c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	2300      	movs	r3, #0
 8001422:	2202      	movs	r2, #2
 8001424:	2100      	movs	r1, #0
 8001426:	f003 fa19 	bl	800485c <setvbuf>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000280 	.word	0x20000280
 8001438:	2000000c 	.word	0x2000000c

0800143c <_isatty>:

int _isatty(int fd) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db04      	blt.n	8001454 <_isatty+0x18>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	dc01      	bgt.n	8001454 <_isatty+0x18>
    return 1;
 8001450:	2301      	movs	r3, #1
 8001452:	e005      	b.n	8001460 <_isatty+0x24>

  errno = EBADF;
 8001454:	f002 fb26 	bl	8003aa4 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	2209      	movs	r2, #9
 800145c:	601a      	str	r2, [r3, #0]
  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_write>:

int _write(int fd, char* ptr, int len) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d002      	beq.n	8001480 <_write+0x18>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d111      	bne.n	80014a4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <_write+0x54>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	b29a      	uxth	r2, r3
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	f001 fda7 	bl	8002fe0 <HAL_UART_Transmit>
 8001492:	4603      	mov	r3, r0
 8001494:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <_write+0x38>
      return len;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	e008      	b.n	80014b2 <_write+0x4a>
    else
      return EIO;
 80014a0:	2305      	movs	r3, #5
 80014a2:	e006      	b.n	80014b2 <_write+0x4a>
  }
  errno = EBADF;
 80014a4:	f002 fafe 	bl	8003aa4 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2209      	movs	r2, #9
 80014ac:	601a      	str	r2, [r3, #0]
  return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000280 	.word	0x20000280

080014c0 <_close>:

int _close(int fd) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db04      	blt.n	80014d8 <_close+0x18>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	dc01      	bgt.n	80014d8 <_close+0x18>
    return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e006      	b.n	80014e6 <_close+0x26>

  errno = EBADF;
 80014d8:	f002 fae4 	bl	8003aa4 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	2209      	movs	r2, #9
 80014e0:	601a      	str	r2, [r3, #0]
  return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80014fa:	f002 fad3 	bl	8003aa4 <__errno>
 80014fe:	4603      	mov	r3, r0
 8001500:	2209      	movs	r2, #9
 8001502:	601a      	str	r2, [r3, #0]
  return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_read>:

int _read(int fd, char* ptr, int len) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d110      	bne.n	8001544 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <_read+0x4c>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	2201      	movs	r2, #1
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	f001 fdea 	bl	8003106 <HAL_UART_Receive>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <_read+0x30>
      return 1;
 800153c:	2301      	movs	r3, #1
 800153e:	e008      	b.n	8001552 <_read+0x42>
    else
      return EIO;
 8001540:	2305      	movs	r3, #5
 8001542:	e006      	b.n	8001552 <_read+0x42>
  }
  errno = EBADF;
 8001544:	f002 faae 	bl	8003aa4 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	2209      	movs	r2, #9
 800154c:	601a      	str	r2, [r3, #0]
  return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000280 	.word	0x20000280

08001560 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db08      	blt.n	8001582 <_fstat+0x22>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	dc05      	bgt.n	8001582 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157c:	605a      	str	r2, [r3, #4]
    return 0;
 800157e:	2300      	movs	r3, #0
 8001580:	e005      	b.n	800158e <_fstat+0x2e>
  }

  errno = EBADF;
 8001582:	f002 fa8f 	bl	8003aa4 <__errno>
 8001586:	4603      	mov	r3, r0
 8001588:	2209      	movs	r2, #9
 800158a:	601a      	str	r2, [r3, #0]
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_MspInit+0x44>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_MspInit+0x44>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_MspInit+0x44>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x44>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x44>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x44>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_UART_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d128      	bne.n	8001654 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x80>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_UART_MspInit+0x80>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_MspInit+0x80>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0x80>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_UART_MspInit+0x80>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_UART_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0x84>)
 8001650:	f000 f9e8 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004800 	.word	0x40004800
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f8b0 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f002 f9da 	bl	8003aa4 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20050000 	.word	0x20050000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000284 	.word	0x20000284
 8001724:	200002a0 	.word	0x200002a0

08001728 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001768:	4c0b      	ldr	r4, [pc, #44]	; (8001798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001776:	f7ff ffd7 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177a:	f002 f999 	bl	8003ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff fc5b 	bl	8001038 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001790:	080095f4 	.word	0x080095f4
  ldr r2, =_sbss
 8001794:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001798:	2000029c 	.word	0x2000029c

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>

0800179e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 f90a 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 f805 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ae:	f7ff fef3 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f917 	bl	8001a0a <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f8ed 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000008 	.word	0x20000008
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008
 800183c:	20000288 	.word	0x20000288

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000288 	.word	0x20000288

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <__NVIC_SetPriorityGrouping+0x40>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	4313      	orrs	r3, r2
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x40>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00
 800189c:	05fa0000 	.word	0x05fa0000

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff47 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5c 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb0 	bl	8001978 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e175      	b.n	8001d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8164 	bne.w	8001d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x56>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80be 	beq.w	8001d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a65      	ldr	r2, [pc, #404]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bc6:	4a61      	ldr	r2, [pc, #388]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_GPIO_Init+0x32c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d037      	beq.n	8001c62 <HAL_GPIO_Init+0x23e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_GPIO_Init+0x23a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x334>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x236>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <HAL_GPIO_Init+0x338>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x232>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a54      	ldr	r2, [pc, #336]	; (8001d60 <HAL_GPIO_Init+0x33c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x22e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a53      	ldr	r2, [pc, #332]	; (8001d64 <HAL_GPIO_Init+0x340>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x22a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x344>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_GPIO_Init+0x348>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <HAL_GPIO_Init+0x34c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	e012      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e010      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae86 	bls.w	8001a44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40022400 	.word	0x40022400
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e291      	b.n	800230a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b96      	ldr	r3, [pc, #600]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e00:	4b93      	ldr	r3, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d112      	bne.n	8001e32 <HAL_RCC_OscConfig+0x62>
 8001e0c:	4b90      	ldr	r3, [pc, #576]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b8d      	ldr	r3, [pc, #564]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x130>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d168      	bne.n	8001f00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e26b      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x7a>
 8001e3c:	4b84      	ldr	r3, [pc, #528]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a83      	ldr	r2, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x9c>
 8001e52:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7e      	ldr	r2, [pc, #504]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7b      	ldr	r2, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0xc0>
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b73      	ldr	r3, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a72      	ldr	r2, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd8>
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6e      	ldr	r2, [pc, #440]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a6b      	ldr	r2, [pc, #428]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fcc6 	bl	8001840 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fcc2 	bl	8001840 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e21f      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b61      	ldr	r3, [pc, #388]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe8>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fcb2 	bl	8001840 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fcae 	bl	8001840 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e20b      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x110>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d069      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0e:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x190>
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1df      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	493d      	ldr	r1, [pc, #244]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e040      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d023      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a38      	ldr	r2, [pc, #224]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff fc64 	bl	8001840 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fc60 	bl	8001840 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1bd      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4929      	ldr	r1, [pc, #164]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
 8001fae:	e018      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fc40 	bl	8001840 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fc3c 	bl	8001840 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e199      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d038      	beq.n	8002060 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d019      	beq.n	800202a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff fc1d 	bl	8001840 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200a:	f7ff fc19 	bl	8001840 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e176      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 800201e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x23a>
 8002028:	e01a      	b.n	8002060 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 800202c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_RCC_OscConfig+0x280>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7ff fc03 	bl	8001840 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff fbff 	bl	8001840 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d903      	bls.n	8002054 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e15c      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
 8002050:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a4 	beq.w	80021b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10d      	bne.n	8002096 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a87      	ldr	r2, [pc, #540]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b85      	ldr	r3, [pc, #532]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002096:	4b82      	ldr	r3, [pc, #520]	; (80022a0 <HAL_RCC_OscConfig+0x4d0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7e      	ldr	r2, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fbc7 	bl	8001840 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7ff fbc3 	bl	8001840 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b64      	cmp	r3, #100	; 0x64
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e120      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x4d0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x31a>
 80020dc:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	e02d      	b.n	8002146 <HAL_RCC_OscConfig+0x376>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x33c>
 80020f2:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a69      	ldr	r2, [pc, #420]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a66      	ldr	r2, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
 800210a:	e01c      	b.n	8002146 <HAL_RCC_OscConfig+0x376>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d10c      	bne.n	800212e <HAL_RCC_OscConfig+0x35e>
 8002114:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a60      	ldr	r2, [pc, #384]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	4b5e      	ldr	r3, [pc, #376]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	4a5d      	ldr	r2, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
 800212c:	e00b      	b.n	8002146 <HAL_RCC_OscConfig+0x376>
 800212e:	4b5b      	ldr	r3, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a5a      	ldr	r2, [pc, #360]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	4b58      	ldr	r3, [pc, #352]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a57      	ldr	r2, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d015      	beq.n	800217a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff fb77 	bl	8001840 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff fb73 	bl	8001840 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e0ce      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ee      	beq.n	8002156 <HAL_RCC_OscConfig+0x386>
 8002178:	e014      	b.n	80021a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7ff fb61 	bl	8001840 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7ff fb5d 	bl	8001840 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0b8      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a3b      	ldr	r2, [pc, #236]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80a4 	beq.w	8002308 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d06b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d149      	bne.n	8002268 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff fb2e 	bl	8001840 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff fb2a 	bl	8001840 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e087      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	4313      	orrs	r3, r2
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800222e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002232:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fafe 	bl	8001840 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fafa 	bl	8001840 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e057      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x478>
 8002266:	e04f      	b.n	8002308 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 800226e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff fae4 	bl	8001840 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff fae0 	bl	8001840 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e03d      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x4cc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x4ac>
 800229a:	e035      	b.n	8002308 <HAL_RCC_OscConfig+0x538>
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x544>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d028      	beq.n	8002304 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d121      	bne.n	8002304 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11a      	bne.n	8002304 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022dc:	4293      	cmp	r3, r2
 80022de:	d111      	bne.n	8002304 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002382:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800239a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	494d      	ldr	r1, [pc, #308]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d040      	beq.n	800243c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e073      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4936      	ldr	r1, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7ff fa18 	bl	8001840 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff fa14 	bl	8001840 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e053      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d210      	bcs.n	800246c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 020f 	bic.w	r2, r3, #15
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1d4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f974 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00
 80024e0:	40023800 	.word	0x40023800
 80024e4:	0800910c 	.word	0x0800910c
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f4:	b094      	sub	sp, #80	; 0x50
 80024f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	647b      	str	r3, [r7, #68]	; 0x44
 80024fc:	2300      	movs	r3, #0
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002500:	2300      	movs	r3, #0
 8002502:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002508:	4b79      	ldr	r3, [pc, #484]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d00d      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x40>
 8002514:	2b08      	cmp	r3, #8
 8002516:	f200 80e1 	bhi.w	80026dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x34>
 800251e:	2b04      	cmp	r3, #4
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x3a>
 8002522:	e0db      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002528:	e0db      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252a:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800252c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800252e:	e0d8      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002538:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800253a:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	2200      	movs	r2, #0
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
 800255e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002562:	4622      	mov	r2, r4
 8002564:	462b      	mov	r3, r5
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	0159      	lsls	r1, r3, #5
 8002570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002574:	0150      	lsls	r0, r2, #5
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4621      	mov	r1, r4
 800257c:	1a51      	subs	r1, r2, r1
 800257e:	6139      	str	r1, [r7, #16]
 8002580:	4629      	mov	r1, r5
 8002582:	eb63 0301 	sbc.w	r3, r3, r1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002594:	4659      	mov	r1, fp
 8002596:	018b      	lsls	r3, r1, #6
 8002598:	4651      	mov	r1, sl
 800259a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259e:	4651      	mov	r1, sl
 80025a0:	018a      	lsls	r2, r1, #6
 80025a2:	4651      	mov	r1, sl
 80025a4:	ebb2 0801 	subs.w	r8, r2, r1
 80025a8:	4659      	mov	r1, fp
 80025aa:	eb63 0901 	sbc.w	r9, r3, r1
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c2:	4690      	mov	r8, r2
 80025c4:	4699      	mov	r9, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	eb18 0303 	adds.w	r3, r8, r3
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	462b      	mov	r3, r5
 80025d0:	eb49 0303 	adc.w	r3, r9, r3
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025e2:	4629      	mov	r1, r5
 80025e4:	024b      	lsls	r3, r1, #9
 80025e6:	4621      	mov	r1, r4
 80025e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ec:	4621      	mov	r1, r4
 80025ee:	024a      	lsls	r2, r1, #9
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f6:	2200      	movs	r2, #0
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002600:	f7fe fb62 	bl	8000cc8 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800260c:	e058      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	2200      	movs	r2, #0
 8002616:	4618      	mov	r0, r3
 8002618:	4611      	mov	r1, r2
 800261a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800261e:	623b      	str	r3, [r7, #32]
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002628:	4642      	mov	r2, r8
 800262a:	464b      	mov	r3, r9
 800262c:	f04f 0000 	mov.w	r0, #0
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	0159      	lsls	r1, r3, #5
 8002636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263a:	0150      	lsls	r0, r2, #5
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4641      	mov	r1, r8
 8002642:	ebb2 0a01 	subs.w	sl, r2, r1
 8002646:	4649      	mov	r1, r9
 8002648:	eb63 0b01 	sbc.w	fp, r3, r1
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800265c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002660:	ebb2 040a 	subs.w	r4, r2, sl
 8002664:	eb63 050b 	sbc.w	r5, r3, fp
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	00eb      	lsls	r3, r5, #3
 8002672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002676:	00e2      	lsls	r2, r4, #3
 8002678:	4614      	mov	r4, r2
 800267a:	461d      	mov	r5, r3
 800267c:	4643      	mov	r3, r8
 800267e:	18e3      	adds	r3, r4, r3
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	464b      	mov	r3, r9
 8002684:	eb45 0303 	adc.w	r3, r5, r3
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002696:	4629      	mov	r1, r5
 8002698:	028b      	lsls	r3, r1, #10
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a0:	4621      	mov	r1, r4
 80026a2:	028a      	lsls	r2, r1, #10
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	2200      	movs	r2, #0
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	61fa      	str	r2, [r7, #28]
 80026b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b4:	f7fe fb08 	bl	8000cc8 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3750      	adds	r7, #80	; 0x50
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff0 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a9b      	lsrs	r3, r3, #10
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	0800911c 	.word	0x0800911c

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002740:	f7ff ffdc 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0b5b      	lsrs	r3, r3, #13
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	0800911c 	.word	0x0800911c

08002764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800278c:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a68      	ldr	r2, [pc, #416]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	4b66      	ldr	r3, [pc, #408]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	4964      	ldr	r1, [pc, #400]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d017      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027be:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	4959      	ldr	r1, [pc, #356]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d017      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027fa:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	494a      	ldr	r1, [pc, #296]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002818:	d101      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 808b 	beq.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002860:	4b35      	ldr	r3, [pc, #212]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a34      	ldr	r2, [pc, #208]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe ffe8 	bl	8001840 <HAL_GetTick>
 8002870:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe ffe4 	bl	8001840 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e357      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d035      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d02e      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d114      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe ffac 	bl	8001840 <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe ffa8 	bl	8001840 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e319      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ee      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800291a:	d111      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800292a:	400b      	ands	r3, r1
 800292c:	4901      	ldr	r1, [pc, #4]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
 8002932:	e00b      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002934:	40023800 	.word	0x40023800
 8002938:	40007000 	.word	0x40007000
 800293c:	0ffffcff 	.word	0x0ffffcff
 8002940:	4baa      	ldr	r3, [pc, #680]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4aa9      	ldr	r2, [pc, #676]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002946:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800294a:	6093      	str	r3, [r2, #8]
 800294c:	4ba7      	ldr	r3, [pc, #668]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002958:	49a4      	ldr	r1, [pc, #656]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	4313      	orrs	r3, r2
 800295c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002970:	4a9e      	ldr	r2, [pc, #632]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800297a:	4b9c      	ldr	r3, [pc, #624]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	4999      	ldr	r1, [pc, #612]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002998:	4b94      	ldr	r3, [pc, #592]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a6:	4991      	ldr	r1, [pc, #580]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ba:	4b8c      	ldr	r3, [pc, #560]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c8:	4988      	ldr	r1, [pc, #544]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029dc:	4b83      	ldr	r3, [pc, #524]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ea:	4980      	ldr	r1, [pc, #512]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029fe:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4977      	ldr	r1, [pc, #476]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a20:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	496f      	ldr	r1, [pc, #444]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f023 020c 	bic.w	r2, r3, #12
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a50:	4966      	ldr	r1, [pc, #408]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a64:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	495e      	ldr	r1, [pc, #376]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a86:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a94:	4955      	ldr	r1, [pc, #340]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	494d      	ldr	r1, [pc, #308]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002aca:	4b48      	ldr	r3, [pc, #288]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	4944      	ldr	r1, [pc, #272]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002aec:	4b3f      	ldr	r3, [pc, #252]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	493c      	ldr	r1, [pc, #240]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1c:	4933      	ldr	r1, [pc, #204]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b30:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	492b      	ldr	r1, [pc, #172]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d011      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b60:	4922      	ldr	r1, [pc, #136]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	4912      	ldr	r1, [pc, #72]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc4:	4909      	ldr	r1, [pc, #36]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d006      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80d9 	beq.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a01      	ldr	r2, [pc, #4]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf2:	f7fe fe25 	bl	8001840 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bfa:	f7fe fe21 	bl	8001840 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e194      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c0c:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d021      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11d      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c2c:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c3a:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	0e1b      	lsrs	r3, r3, #24
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	019a      	lsls	r2, r3, #6
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	071b      	lsls	r3, r3, #28
 8002c60:	4957      	ldr	r1, [pc, #348]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02e      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c92:	d129      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca8:	0f1b      	lsrs	r3, r3, #28
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	019a      	lsls	r2, r3, #6
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	071b      	lsls	r3, r3, #28
 8002cc8:	493d      	ldr	r1, [pc, #244]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd6:	f023 021f 	bic.w	r2, r3, #31
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01d      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfa:	0e1b      	lsrs	r3, r3, #24
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d08:	0f1b      	lsrs	r3, r3, #28
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	019a      	lsls	r2, r3, #6
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	071b      	lsls	r3, r3, #28
 8002d28:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d011      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	019a      	lsls	r2, r3, #6
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	071b      	lsls	r3, r3, #28
 8002d58:	4919      	ldr	r1, [pc, #100]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fd68 	bl	8001840 <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d74:	f7fe fd64 	bl	8001840 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0d7      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 80cd 	bne.w	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da6:	f7fe fd4b 	bl	8001840 <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dae:	f7fe fd47 	bl	8001840 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d903      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ba      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002dc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd0:	d0ed      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d02e      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d12a      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	0f1b      	lsrs	r3, r3, #28
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	019a      	lsls	r2, r3, #6
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	071b      	lsls	r3, r3, #28
 8002e2e:	4944      	ldr	r1, [pc, #272]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e36:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	3b01      	subs	r3, #1
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	493d      	ldr	r1, [pc, #244]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e64:	d11d      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e74:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	0f1b      	lsrs	r3, r3, #28
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	019a      	lsls	r2, r3, #6
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	061b      	lsls	r3, r3, #24
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	071b      	lsls	r3, r3, #28
 8002e9a:	4929      	ldr	r1, [pc, #164]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d028      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	019a      	lsls	r2, r3, #6
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	4917      	ldr	r1, [pc, #92]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4911      	ldr	r1, [pc, #68]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0c:	f7fe fc98 	bl	8001840 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f14:	f7fe fc94 	bl	8001840 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e007      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f32:	d1ef      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e040      	b.n	8002fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe fb3a 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f990 	bl	80032a8 <UART_SetConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fbe8 	bl	8003770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fc6f 	bl	80038b4 <UART_CheckIdleState>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	f040 8081 	bne.w	80030fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_UART_Transmit+0x26>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e079      	b.n	80030fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x38>
 8003014:	2302      	movs	r3, #2
 8003016:	e072      	b.n	80030fe <HAL_UART_Transmit+0x11e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302e:	f7fe fc07 	bl	8001840 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x80>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003070:	e02c      	b.n	80030cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fc4c 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e038      	b.n	80030fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3302      	adds	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e007      	b.n	80030ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1cc      	bne.n	8003072 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fc19 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e005      	b.n	80030fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b08a      	sub	sp, #40	; 0x28
 800310a:	af02      	add	r7, sp, #8
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 80be 	bne.w	800329c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_UART_Receive+0x26>
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b6      	b.n	800329e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_UART_Receive+0x38>
 800313a:	2302      	movs	r3, #2
 800313c:	e0af      	b.n	800329e <HAL_UART_Receive+0x198>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2222      	movs	r2, #34	; 0x22
 8003152:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315a:	f7fe fb71 	bl	8001840 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d10e      	bne.n	8003198 <HAL_UART_Receive+0x92>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_UART_Receive+0x88>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800318c:	e02d      	b.n	80031ea <HAL_UART_Receive+0xe4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003196:	e028      	b.n	80031ea <HAL_UART_Receive+0xe4>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_UART_Receive+0xb6>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <HAL_UART_Receive+0xac>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b0:	e01b      	b.n	80031ea <HAL_UART_Receive+0xe4>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	227f      	movs	r2, #127	; 0x7f
 80031b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ba:	e016      	b.n	80031ea <HAL_UART_Receive+0xe4>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c4:	d10d      	bne.n	80031e2 <HAL_UART_Receive+0xdc>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <HAL_UART_Receive+0xd2>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	227f      	movs	r2, #127	; 0x7f
 80031d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031d6:	e008      	b.n	80031ea <HAL_UART_Receive+0xe4>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031e0:	e003      	b.n	80031ea <HAL_UART_Receive+0xe4>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	d108      	bne.n	800320e <HAL_UART_Receive+0x108>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e003      	b.n	8003216 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800321e:	e032      	b.n	8003286 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	2120      	movs	r1, #32
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fb75 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e031      	b.n	800329e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10c      	bne.n	800325a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	b29a      	uxth	r2, r3
 8003248:	8a7b      	ldrh	r3, [r7, #18]
 800324a:	4013      	ands	r3, r2
 800324c:	b29a      	uxth	r2, r3
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3302      	adds	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e00c      	b.n	8003274 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8a7b      	ldrh	r3, [r7, #18]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4013      	ands	r3, r2
 8003268:	b2da      	uxtb	r2, r3
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1c6      	bne.n	8003220 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4ba6      	ldr	r3, [pc, #664]	; (800356c <UART_SetConfig+0x2c4>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	6979      	ldr	r1, [r7, #20]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a94      	ldr	r2, [pc, #592]	; (8003570 <UART_SetConfig+0x2c8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d120      	bne.n	8003366 <UART_SetConfig+0xbe>
 8003324:	4b93      	ldr	r3, [pc, #588]	; (8003574 <UART_SetConfig+0x2cc>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b03      	cmp	r3, #3
 8003330:	d816      	bhi.n	8003360 <UART_SetConfig+0xb8>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x90>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	08003349 	.word	0x08003349
 800333c:	08003355 	.word	0x08003355
 8003340:	0800334f 	.word	0x0800334f
 8003344:	0800335b 	.word	0x0800335b
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e150      	b.n	80035f0 <UART_SetConfig+0x348>
 800334e:	2302      	movs	r3, #2
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e14d      	b.n	80035f0 <UART_SetConfig+0x348>
 8003354:	2304      	movs	r3, #4
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e14a      	b.n	80035f0 <UART_SetConfig+0x348>
 800335a:	2308      	movs	r3, #8
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e147      	b.n	80035f0 <UART_SetConfig+0x348>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e144      	b.n	80035f0 <UART_SetConfig+0x348>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a83      	ldr	r2, [pc, #524]	; (8003578 <UART_SetConfig+0x2d0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d132      	bne.n	80033d6 <UART_SetConfig+0x12e>
 8003370:	4b80      	ldr	r3, [pc, #512]	; (8003574 <UART_SetConfig+0x2cc>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d828      	bhi.n	80033d0 <UART_SetConfig+0x128>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <UART_SetConfig+0xdc>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033b9 	.word	0x080033b9
 8003388:	080033d1 	.word	0x080033d1
 800338c:	080033d1 	.word	0x080033d1
 8003390:	080033d1 	.word	0x080033d1
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033d1 	.word	0x080033d1
 800339c:	080033d1 	.word	0x080033d1
 80033a0:	080033d1 	.word	0x080033d1
 80033a4:	080033bf 	.word	0x080033bf
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d1 	.word	0x080033d1
 80033b4:	080033cb 	.word	0x080033cb
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e118      	b.n	80035f0 <UART_SetConfig+0x348>
 80033be:	2302      	movs	r3, #2
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e115      	b.n	80035f0 <UART_SetConfig+0x348>
 80033c4:	2304      	movs	r3, #4
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e112      	b.n	80035f0 <UART_SetConfig+0x348>
 80033ca:	2308      	movs	r3, #8
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e10f      	b.n	80035f0 <UART_SetConfig+0x348>
 80033d0:	2310      	movs	r3, #16
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e10c      	b.n	80035f0 <UART_SetConfig+0x348>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a68      	ldr	r2, [pc, #416]	; (800357c <UART_SetConfig+0x2d4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d120      	bne.n	8003422 <UART_SetConfig+0x17a>
 80033e0:	4b64      	ldr	r3, [pc, #400]	; (8003574 <UART_SetConfig+0x2cc>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	d013      	beq.n	8003416 <UART_SetConfig+0x16e>
 80033ee:	2b30      	cmp	r3, #48	; 0x30
 80033f0:	d814      	bhi.n	800341c <UART_SetConfig+0x174>
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d009      	beq.n	800340a <UART_SetConfig+0x162>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d810      	bhi.n	800341c <UART_SetConfig+0x174>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <UART_SetConfig+0x15c>
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d006      	beq.n	8003410 <UART_SetConfig+0x168>
 8003402:	e00b      	b.n	800341c <UART_SetConfig+0x174>
 8003404:	2300      	movs	r3, #0
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e0f2      	b.n	80035f0 <UART_SetConfig+0x348>
 800340a:	2302      	movs	r3, #2
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e0ef      	b.n	80035f0 <UART_SetConfig+0x348>
 8003410:	2304      	movs	r3, #4
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e0ec      	b.n	80035f0 <UART_SetConfig+0x348>
 8003416:	2308      	movs	r3, #8
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e0e9      	b.n	80035f0 <UART_SetConfig+0x348>
 800341c:	2310      	movs	r3, #16
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e0e6      	b.n	80035f0 <UART_SetConfig+0x348>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a56      	ldr	r2, [pc, #344]	; (8003580 <UART_SetConfig+0x2d8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d120      	bne.n	800346e <UART_SetConfig+0x1c6>
 800342c:	4b51      	ldr	r3, [pc, #324]	; (8003574 <UART_SetConfig+0x2cc>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003436:	2bc0      	cmp	r3, #192	; 0xc0
 8003438:	d013      	beq.n	8003462 <UART_SetConfig+0x1ba>
 800343a:	2bc0      	cmp	r3, #192	; 0xc0
 800343c:	d814      	bhi.n	8003468 <UART_SetConfig+0x1c0>
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d009      	beq.n	8003456 <UART_SetConfig+0x1ae>
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d810      	bhi.n	8003468 <UART_SetConfig+0x1c0>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <UART_SetConfig+0x1a8>
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d006      	beq.n	800345c <UART_SetConfig+0x1b4>
 800344e:	e00b      	b.n	8003468 <UART_SetConfig+0x1c0>
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e0cc      	b.n	80035f0 <UART_SetConfig+0x348>
 8003456:	2302      	movs	r3, #2
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e0c9      	b.n	80035f0 <UART_SetConfig+0x348>
 800345c:	2304      	movs	r3, #4
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e0c6      	b.n	80035f0 <UART_SetConfig+0x348>
 8003462:	2308      	movs	r3, #8
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e0c3      	b.n	80035f0 <UART_SetConfig+0x348>
 8003468:	2310      	movs	r3, #16
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e0c0      	b.n	80035f0 <UART_SetConfig+0x348>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a44      	ldr	r2, [pc, #272]	; (8003584 <UART_SetConfig+0x2dc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d125      	bne.n	80034c4 <UART_SetConfig+0x21c>
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <UART_SetConfig+0x2cc>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003486:	d017      	beq.n	80034b8 <UART_SetConfig+0x210>
 8003488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800348c:	d817      	bhi.n	80034be <UART_SetConfig+0x216>
 800348e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003492:	d00b      	beq.n	80034ac <UART_SetConfig+0x204>
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d811      	bhi.n	80034be <UART_SetConfig+0x216>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <UART_SetConfig+0x1fe>
 800349e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a2:	d006      	beq.n	80034b2 <UART_SetConfig+0x20a>
 80034a4:	e00b      	b.n	80034be <UART_SetConfig+0x216>
 80034a6:	2300      	movs	r3, #0
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e0a1      	b.n	80035f0 <UART_SetConfig+0x348>
 80034ac:	2302      	movs	r3, #2
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e09e      	b.n	80035f0 <UART_SetConfig+0x348>
 80034b2:	2304      	movs	r3, #4
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e09b      	b.n	80035f0 <UART_SetConfig+0x348>
 80034b8:	2308      	movs	r3, #8
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e098      	b.n	80035f0 <UART_SetConfig+0x348>
 80034be:	2310      	movs	r3, #16
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e095      	b.n	80035f0 <UART_SetConfig+0x348>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2f      	ldr	r2, [pc, #188]	; (8003588 <UART_SetConfig+0x2e0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d125      	bne.n	800351a <UART_SetConfig+0x272>
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <UART_SetConfig+0x2cc>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034dc:	d017      	beq.n	800350e <UART_SetConfig+0x266>
 80034de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034e2:	d817      	bhi.n	8003514 <UART_SetConfig+0x26c>
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d00b      	beq.n	8003502 <UART_SetConfig+0x25a>
 80034ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ee:	d811      	bhi.n	8003514 <UART_SetConfig+0x26c>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <UART_SetConfig+0x254>
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d006      	beq.n	8003508 <UART_SetConfig+0x260>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x26c>
 80034fc:	2301      	movs	r3, #1
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e076      	b.n	80035f0 <UART_SetConfig+0x348>
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e073      	b.n	80035f0 <UART_SetConfig+0x348>
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e070      	b.n	80035f0 <UART_SetConfig+0x348>
 800350e:	2308      	movs	r3, #8
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e06d      	b.n	80035f0 <UART_SetConfig+0x348>
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e06a      	b.n	80035f0 <UART_SetConfig+0x348>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <UART_SetConfig+0x2e4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d138      	bne.n	8003596 <UART_SetConfig+0x2ee>
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <UART_SetConfig+0x2cc>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800352e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003532:	d017      	beq.n	8003564 <UART_SetConfig+0x2bc>
 8003534:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003538:	d82a      	bhi.n	8003590 <UART_SetConfig+0x2e8>
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353e:	d00b      	beq.n	8003558 <UART_SetConfig+0x2b0>
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d824      	bhi.n	8003590 <UART_SetConfig+0x2e8>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <UART_SetConfig+0x2aa>
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d006      	beq.n	800355e <UART_SetConfig+0x2b6>
 8003550:	e01e      	b.n	8003590 <UART_SetConfig+0x2e8>
 8003552:	2300      	movs	r3, #0
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e04b      	b.n	80035f0 <UART_SetConfig+0x348>
 8003558:	2302      	movs	r3, #2
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e048      	b.n	80035f0 <UART_SetConfig+0x348>
 800355e:	2304      	movs	r3, #4
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e045      	b.n	80035f0 <UART_SetConfig+0x348>
 8003564:	2308      	movs	r3, #8
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e042      	b.n	80035f0 <UART_SetConfig+0x348>
 800356a:	bf00      	nop
 800356c:	efff69f3 	.word	0xefff69f3
 8003570:	40011000 	.word	0x40011000
 8003574:	40023800 	.word	0x40023800
 8003578:	40004400 	.word	0x40004400
 800357c:	40004800 	.word	0x40004800
 8003580:	40004c00 	.word	0x40004c00
 8003584:	40005000 	.word	0x40005000
 8003588:	40011400 	.word	0x40011400
 800358c:	40007800 	.word	0x40007800
 8003590:	2310      	movs	r3, #16
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e02c      	b.n	80035f0 <UART_SetConfig+0x348>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a72      	ldr	r2, [pc, #456]	; (8003764 <UART_SetConfig+0x4bc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d125      	bne.n	80035ec <UART_SetConfig+0x344>
 80035a0:	4b71      	ldr	r3, [pc, #452]	; (8003768 <UART_SetConfig+0x4c0>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035ae:	d017      	beq.n	80035e0 <UART_SetConfig+0x338>
 80035b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035b4:	d817      	bhi.n	80035e6 <UART_SetConfig+0x33e>
 80035b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ba:	d00b      	beq.n	80035d4 <UART_SetConfig+0x32c>
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c0:	d811      	bhi.n	80035e6 <UART_SetConfig+0x33e>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <UART_SetConfig+0x326>
 80035c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ca:	d006      	beq.n	80035da <UART_SetConfig+0x332>
 80035cc:	e00b      	b.n	80035e6 <UART_SetConfig+0x33e>
 80035ce:	2300      	movs	r3, #0
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e00d      	b.n	80035f0 <UART_SetConfig+0x348>
 80035d4:	2302      	movs	r3, #2
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e00a      	b.n	80035f0 <UART_SetConfig+0x348>
 80035da:	2304      	movs	r3, #4
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e007      	b.n	80035f0 <UART_SetConfig+0x348>
 80035e0:	2308      	movs	r3, #8
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e004      	b.n	80035f0 <UART_SetConfig+0x348>
 80035e6:	2310      	movs	r3, #16
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e001      	b.n	80035f0 <UART_SetConfig+0x348>
 80035ec:	2310      	movs	r3, #16
 80035ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f8:	d15b      	bne.n	80036b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d828      	bhi.n	8003652 <UART_SetConfig+0x3aa>
 8003600:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0x360>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	0800363d 	.word	0x0800363d
 8003614:	08003653 	.word	0x08003653
 8003618:	08003643 	.word	0x08003643
 800361c:	08003653 	.word	0x08003653
 8003620:	08003653 	.word	0x08003653
 8003624:	08003653 	.word	0x08003653
 8003628:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7ff f872 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003630:	61b8      	str	r0, [r7, #24]
        break;
 8003632:	e013      	b.n	800365c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7ff f882 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8003638:	61b8      	str	r0, [r7, #24]
        break;
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b4b      	ldr	r3, [pc, #300]	; (800376c <UART_SetConfig+0x4c4>)
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e00c      	b.n	800365c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7fe ff55 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8003646:	61b8      	str	r0, [r7, #24]
        break;
 8003648:	e008      	b.n	800365c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	61bb      	str	r3, [r7, #24]
        break;
 8003650:	e004      	b.n	800365c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	77bb      	strb	r3, [r7, #30]
        break;
 800365a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d074      	beq.n	800374c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	005a      	lsls	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	fbb2 f3f3 	udiv	r3, r2, r3
 8003676:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d916      	bls.n	80036ac <UART_SetConfig+0x404>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d212      	bcs.n	80036ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f023 030f 	bic.w	r3, r3, #15
 800368e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	b29a      	uxth	r2, r3
 800369c:	89fb      	ldrh	r3, [r7, #14]
 800369e:	4313      	orrs	r3, r2
 80036a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	89fa      	ldrh	r2, [r7, #14]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	e04f      	b.n	800374c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77bb      	strb	r3, [r7, #30]
 80036b0:	e04c      	b.n	800374c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d828      	bhi.n	800370a <UART_SetConfig+0x462>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x418>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7ff f816 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff f826 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <UART_SetConfig+0x4c4>)
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe fef9 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80036fe:	61b8      	str	r0, [r7, #24]
        break;
 8003700:	e008      	b.n	8003714 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	77bb      	strb	r3, [r7, #30]
        break;
 8003712:	bf00      	nop
    }

    if (pclk != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085a      	lsrs	r2, r3, #1
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	441a      	add	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d909      	bls.n	8003748 <UART_SetConfig+0x4a0>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d205      	bcs.n	8003748 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e001      	b.n	800374c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003758:	7fbb      	ldrb	r3, [r7, #30]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40007c00 	.word	0x40007c00
 8003768:	40023800 	.word	0x40023800
 800376c:	00f42400 	.word	0x00f42400

08003770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386e:	d10a      	bne.n	8003886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c4:	f7fd ffbc 	bl	8001840 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d10e      	bne.n	80038f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f817 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00d      	b.n	8003912 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b09c      	sub	sp, #112	; 0x70
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392a:	e0a5      	b.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	f000 80a1 	beq.w	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fd ff83 	bl	8001840 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <UART_WaitOnFlagUntilTimeout+0x32>
 8003946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003948:	2b00      	cmp	r3, #0
 800394a:	d13e      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003960:	667b      	str	r3, [r7, #100]	; 0x64
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800396a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800396c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e6      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	663b      	str	r3, [r7, #96]	; 0x60
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800399e:	64ba      	str	r2, [r7, #72]	; 0x48
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e067      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d04f      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e6:	d147      	bne.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
 8003a12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e6      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	613b      	str	r3, [r7, #16]
   return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a44:	623a      	str	r2, [r7, #32]
 8003a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e010      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	f43f af4a 	beq.w	800392c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3770      	adds	r7, #112	; 0x70
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <__errno>:
 8003aa4:	4b01      	ldr	r3, [pc, #4]	; (8003aac <__errno+0x8>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	2000000c 	.word	0x2000000c

08003ab0 <__libc_init_array>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4d0d      	ldr	r5, [pc, #52]	; (8003ae8 <__libc_init_array+0x38>)
 8003ab4:	4c0d      	ldr	r4, [pc, #52]	; (8003aec <__libc_init_array+0x3c>)
 8003ab6:	1b64      	subs	r4, r4, r5
 8003ab8:	10a4      	asrs	r4, r4, #2
 8003aba:	2600      	movs	r6, #0
 8003abc:	42a6      	cmp	r6, r4
 8003abe:	d109      	bne.n	8003ad4 <__libc_init_array+0x24>
 8003ac0:	4d0b      	ldr	r5, [pc, #44]	; (8003af0 <__libc_init_array+0x40>)
 8003ac2:	4c0c      	ldr	r4, [pc, #48]	; (8003af4 <__libc_init_array+0x44>)
 8003ac4:	f005 fafc 	bl	80090c0 <_init>
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	2600      	movs	r6, #0
 8003ace:	42a6      	cmp	r6, r4
 8003ad0:	d105      	bne.n	8003ade <__libc_init_array+0x2e>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad8:	4798      	blx	r3
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7ee      	b.n	8003abc <__libc_init_array+0xc>
 8003ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae2:	4798      	blx	r3
 8003ae4:	3601      	adds	r6, #1
 8003ae6:	e7f2      	b.n	8003ace <__libc_init_array+0x1e>
 8003ae8:	080095ec 	.word	0x080095ec
 8003aec:	080095ec 	.word	0x080095ec
 8003af0:	080095ec 	.word	0x080095ec
 8003af4:	080095f0 	.word	0x080095f0

08003af8 <memset>:
 8003af8:	4402      	add	r2, r0
 8003afa:	4603      	mov	r3, r0
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d100      	bne.n	8003b02 <memset+0xa>
 8003b00:	4770      	bx	lr
 8003b02:	f803 1b01 	strb.w	r1, [r3], #1
 8003b06:	e7f9      	b.n	8003afc <memset+0x4>

08003b08 <__cvt>:
 8003b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	ec55 4b10 	vmov	r4, r5, d0
 8003b10:	2d00      	cmp	r5, #0
 8003b12:	460e      	mov	r6, r1
 8003b14:	4619      	mov	r1, r3
 8003b16:	462b      	mov	r3, r5
 8003b18:	bfbb      	ittet	lt
 8003b1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b1e:	461d      	movlt	r5, r3
 8003b20:	2300      	movge	r3, #0
 8003b22:	232d      	movlt	r3, #45	; 0x2d
 8003b24:	700b      	strb	r3, [r1, #0]
 8003b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b2c:	4691      	mov	r9, r2
 8003b2e:	f023 0820 	bic.w	r8, r3, #32
 8003b32:	bfbc      	itt	lt
 8003b34:	4622      	movlt	r2, r4
 8003b36:	4614      	movlt	r4, r2
 8003b38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b3c:	d005      	beq.n	8003b4a <__cvt+0x42>
 8003b3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b42:	d100      	bne.n	8003b46 <__cvt+0x3e>
 8003b44:	3601      	adds	r6, #1
 8003b46:	2102      	movs	r1, #2
 8003b48:	e000      	b.n	8003b4c <__cvt+0x44>
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	ab03      	add	r3, sp, #12
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	ab02      	add	r3, sp, #8
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	ec45 4b10 	vmov	d0, r4, r5
 8003b58:	4653      	mov	r3, sl
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	f001 fea4 	bl	80058a8 <_dtoa_r>
 8003b60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b64:	4607      	mov	r7, r0
 8003b66:	d102      	bne.n	8003b6e <__cvt+0x66>
 8003b68:	f019 0f01 	tst.w	r9, #1
 8003b6c:	d022      	beq.n	8003bb4 <__cvt+0xac>
 8003b6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b72:	eb07 0906 	add.w	r9, r7, r6
 8003b76:	d110      	bne.n	8003b9a <__cvt+0x92>
 8003b78:	783b      	ldrb	r3, [r7, #0]
 8003b7a:	2b30      	cmp	r3, #48	; 0x30
 8003b7c:	d10a      	bne.n	8003b94 <__cvt+0x8c>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2300      	movs	r3, #0
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 8003b8a:	b918      	cbnz	r0, 8003b94 <__cvt+0x8c>
 8003b8c:	f1c6 0601 	rsb	r6, r6, #1
 8003b90:	f8ca 6000 	str.w	r6, [sl]
 8003b94:	f8da 3000 	ldr.w	r3, [sl]
 8003b98:	4499      	add	r9, r3
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f7fc ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 8003ba6:	b108      	cbz	r0, 8003bac <__cvt+0xa4>
 8003ba8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bac:	2230      	movs	r2, #48	; 0x30
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	454b      	cmp	r3, r9
 8003bb2:	d307      	bcc.n	8003bc4 <__cvt+0xbc>
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bb8:	1bdb      	subs	r3, r3, r7
 8003bba:	4638      	mov	r0, r7
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	b004      	add	sp, #16
 8003bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	9103      	str	r1, [sp, #12]
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e7f0      	b.n	8003bae <__cvt+0xa6>

08003bcc <__exponent>:
 8003bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	bfb8      	it	lt
 8003bd4:	4249      	neglt	r1, r1
 8003bd6:	f803 2b02 	strb.w	r2, [r3], #2
 8003bda:	bfb4      	ite	lt
 8003bdc:	222d      	movlt	r2, #45	; 0x2d
 8003bde:	222b      	movge	r2, #43	; 0x2b
 8003be0:	2909      	cmp	r1, #9
 8003be2:	7042      	strb	r2, [r0, #1]
 8003be4:	dd2a      	ble.n	8003c3c <__exponent+0x70>
 8003be6:	f10d 0407 	add.w	r4, sp, #7
 8003bea:	46a4      	mov	ip, r4
 8003bec:	270a      	movs	r7, #10
 8003bee:	46a6      	mov	lr, r4
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bf6:	fb07 1516 	mls	r5, r7, r6, r1
 8003bfa:	3530      	adds	r5, #48	; 0x30
 8003bfc:	2a63      	cmp	r2, #99	; 0x63
 8003bfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c06:	4631      	mov	r1, r6
 8003c08:	dcf1      	bgt.n	8003bee <__exponent+0x22>
 8003c0a:	3130      	adds	r1, #48	; 0x30
 8003c0c:	f1ae 0502 	sub.w	r5, lr, #2
 8003c10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c14:	1c44      	adds	r4, r0, #1
 8003c16:	4629      	mov	r1, r5
 8003c18:	4561      	cmp	r1, ip
 8003c1a:	d30a      	bcc.n	8003c32 <__exponent+0x66>
 8003c1c:	f10d 0209 	add.w	r2, sp, #9
 8003c20:	eba2 020e 	sub.w	r2, r2, lr
 8003c24:	4565      	cmp	r5, ip
 8003c26:	bf88      	it	hi
 8003c28:	2200      	movhi	r2, #0
 8003c2a:	4413      	add	r3, r2
 8003c2c:	1a18      	subs	r0, r3, r0
 8003c2e:	b003      	add	sp, #12
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c3a:	e7ed      	b.n	8003c18 <__exponent+0x4c>
 8003c3c:	2330      	movs	r3, #48	; 0x30
 8003c3e:	3130      	adds	r1, #48	; 0x30
 8003c40:	7083      	strb	r3, [r0, #2]
 8003c42:	70c1      	strb	r1, [r0, #3]
 8003c44:	1d03      	adds	r3, r0, #4
 8003c46:	e7f1      	b.n	8003c2c <__exponent+0x60>

08003c48 <_printf_float>:
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4c:	ed2d 8b02 	vpush	{d8}
 8003c50:	b08d      	sub	sp, #52	; 0x34
 8003c52:	460c      	mov	r4, r1
 8003c54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c58:	4616      	mov	r6, r2
 8003c5a:	461f      	mov	r7, r3
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	f003 f967 	bl	8006f30 <_localeconv_r>
 8003c62:	f8d0 a000 	ldr.w	sl, [r0]
 8003c66:	4650      	mov	r0, sl
 8003c68:	f7fc fad2 	bl	8000210 <strlen>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	9305      	str	r3, [sp, #20]
 8003c74:	f8d8 3000 	ldr.w	r3, [r8]
 8003c78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c7c:	3307      	adds	r3, #7
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	f103 0208 	add.w	r2, r3, #8
 8003c86:	f8c8 2000 	str.w	r2, [r8]
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c9a:	9307      	str	r3, [sp, #28]
 8003c9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ca0:	ee08 0a10 	vmov	s16, r0
 8003ca4:	4b9f      	ldr	r3, [pc, #636]	; (8003f24 <_printf_float+0x2dc>)
 8003ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	f7fc ff5d 	bl	8000b6c <__aeabi_dcmpun>
 8003cb2:	bb88      	cbnz	r0, 8003d18 <_printf_float+0xd0>
 8003cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cb8:	4b9a      	ldr	r3, [pc, #616]	; (8003f24 <_printf_float+0x2dc>)
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	f7fc ff37 	bl	8000b30 <__aeabi_dcmple>
 8003cc2:	bb48      	cbnz	r0, 8003d18 <_printf_float+0xd0>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4640      	mov	r0, r8
 8003cca:	4649      	mov	r1, r9
 8003ccc:	f7fc ff26 	bl	8000b1c <__aeabi_dcmplt>
 8003cd0:	b110      	cbz	r0, 8003cd8 <_printf_float+0x90>
 8003cd2:	232d      	movs	r3, #45	; 0x2d
 8003cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd8:	4b93      	ldr	r3, [pc, #588]	; (8003f28 <_printf_float+0x2e0>)
 8003cda:	4894      	ldr	r0, [pc, #592]	; (8003f2c <_printf_float+0x2e4>)
 8003cdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ce0:	bf94      	ite	ls
 8003ce2:	4698      	movls	r8, r3
 8003ce4:	4680      	movhi	r8, r0
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	6123      	str	r3, [r4, #16]
 8003cea:	9b05      	ldr	r3, [sp, #20]
 8003cec:	f023 0204 	bic.w	r2, r3, #4
 8003cf0:	6022      	str	r2, [r4, #0]
 8003cf2:	f04f 0900 	mov.w	r9, #0
 8003cf6:	9700      	str	r7, [sp, #0]
 8003cf8:	4633      	mov	r3, r6
 8003cfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 f9d8 	bl	80040b4 <_printf_common>
 8003d04:	3001      	adds	r0, #1
 8003d06:	f040 8090 	bne.w	8003e2a <_printf_float+0x1e2>
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	b00d      	add	sp, #52	; 0x34
 8003d10:	ecbd 8b02 	vpop	{d8}
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	4649      	mov	r1, r9
 8003d20:	f7fc ff24 	bl	8000b6c <__aeabi_dcmpun>
 8003d24:	b140      	cbz	r0, 8003d38 <_printf_float+0xf0>
 8003d26:	464b      	mov	r3, r9
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bfbc      	itt	lt
 8003d2c:	232d      	movlt	r3, #45	; 0x2d
 8003d2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d32:	487f      	ldr	r0, [pc, #508]	; (8003f30 <_printf_float+0x2e8>)
 8003d34:	4b7f      	ldr	r3, [pc, #508]	; (8003f34 <_printf_float+0x2ec>)
 8003d36:	e7d1      	b.n	8003cdc <_printf_float+0x94>
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d3e:	9206      	str	r2, [sp, #24]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	d13f      	bne.n	8003dc4 <_printf_float+0x17c>
 8003d44:	2306      	movs	r3, #6
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	9b05      	ldr	r3, [sp, #20]
 8003d4a:	6861      	ldr	r1, [r4, #4]
 8003d4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d50:	2300      	movs	r3, #0
 8003d52:	9303      	str	r3, [sp, #12]
 8003d54:	ab0a      	add	r3, sp, #40	; 0x28
 8003d56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d5a:	ab09      	add	r3, sp, #36	; 0x24
 8003d5c:	ec49 8b10 	vmov	d0, r8, r9
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff fecd 	bl	8003b08 <__cvt>
 8003d6e:	9b06      	ldr	r3, [sp, #24]
 8003d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d72:	2b47      	cmp	r3, #71	; 0x47
 8003d74:	4680      	mov	r8, r0
 8003d76:	d108      	bne.n	8003d8a <_printf_float+0x142>
 8003d78:	1cc8      	adds	r0, r1, #3
 8003d7a:	db02      	blt.n	8003d82 <_printf_float+0x13a>
 8003d7c:	6863      	ldr	r3, [r4, #4]
 8003d7e:	4299      	cmp	r1, r3
 8003d80:	dd41      	ble.n	8003e06 <_printf_float+0x1be>
 8003d82:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d86:	fa5f fb8b 	uxtb.w	fp, fp
 8003d8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d8e:	d820      	bhi.n	8003dd2 <_printf_float+0x18a>
 8003d90:	3901      	subs	r1, #1
 8003d92:	465a      	mov	r2, fp
 8003d94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d98:	9109      	str	r1, [sp, #36]	; 0x24
 8003d9a:	f7ff ff17 	bl	8003bcc <__exponent>
 8003d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003da0:	1813      	adds	r3, r2, r0
 8003da2:	2a01      	cmp	r2, #1
 8003da4:	4681      	mov	r9, r0
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	dc02      	bgt.n	8003db0 <_printf_float+0x168>
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	07d2      	lsls	r2, r2, #31
 8003dae:	d501      	bpl.n	8003db4 <_printf_float+0x16c>
 8003db0:	3301      	adds	r3, #1
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d09c      	beq.n	8003cf6 <_printf_float+0xae>
 8003dbc:	232d      	movs	r3, #45	; 0x2d
 8003dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc2:	e798      	b.n	8003cf6 <_printf_float+0xae>
 8003dc4:	9a06      	ldr	r2, [sp, #24]
 8003dc6:	2a47      	cmp	r2, #71	; 0x47
 8003dc8:	d1be      	bne.n	8003d48 <_printf_float+0x100>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1bc      	bne.n	8003d48 <_printf_float+0x100>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e7b9      	b.n	8003d46 <_printf_float+0xfe>
 8003dd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003dd6:	d118      	bne.n	8003e0a <_printf_float+0x1c2>
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	6863      	ldr	r3, [r4, #4]
 8003ddc:	dd0b      	ble.n	8003df6 <_printf_float+0x1ae>
 8003dde:	6121      	str	r1, [r4, #16]
 8003de0:	b913      	cbnz	r3, 8003de8 <_printf_float+0x1a0>
 8003de2:	6822      	ldr	r2, [r4, #0]
 8003de4:	07d0      	lsls	r0, r2, #31
 8003de6:	d502      	bpl.n	8003dee <_printf_float+0x1a6>
 8003de8:	3301      	adds	r3, #1
 8003dea:	440b      	add	r3, r1
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8003df0:	f04f 0900 	mov.w	r9, #0
 8003df4:	e7de      	b.n	8003db4 <_printf_float+0x16c>
 8003df6:	b913      	cbnz	r3, 8003dfe <_printf_float+0x1b6>
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	07d2      	lsls	r2, r2, #31
 8003dfc:	d501      	bpl.n	8003e02 <_printf_float+0x1ba>
 8003dfe:	3302      	adds	r3, #2
 8003e00:	e7f4      	b.n	8003dec <_printf_float+0x1a4>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e7f2      	b.n	8003dec <_printf_float+0x1a4>
 8003e06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e0c:	4299      	cmp	r1, r3
 8003e0e:	db05      	blt.n	8003e1c <_printf_float+0x1d4>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	6121      	str	r1, [r4, #16]
 8003e14:	07d8      	lsls	r0, r3, #31
 8003e16:	d5ea      	bpl.n	8003dee <_printf_float+0x1a6>
 8003e18:	1c4b      	adds	r3, r1, #1
 8003e1a:	e7e7      	b.n	8003dec <_printf_float+0x1a4>
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	bfd4      	ite	le
 8003e20:	f1c1 0202 	rsble	r2, r1, #2
 8003e24:	2201      	movgt	r2, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	e7e0      	b.n	8003dec <_printf_float+0x1a4>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	055a      	lsls	r2, r3, #21
 8003e2e:	d407      	bmi.n	8003e40 <_printf_float+0x1f8>
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	4642      	mov	r2, r8
 8003e34:	4631      	mov	r1, r6
 8003e36:	4628      	mov	r0, r5
 8003e38:	47b8      	blx	r7
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d12c      	bne.n	8003e98 <_printf_float+0x250>
 8003e3e:	e764      	b.n	8003d0a <_printf_float+0xc2>
 8003e40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e44:	f240 80e0 	bls.w	8004008 <_printf_float+0x3c0>
 8003e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f7fc fe5a 	bl	8000b08 <__aeabi_dcmpeq>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d034      	beq.n	8003ec2 <_printf_float+0x27a>
 8003e58:	4a37      	ldr	r2, [pc, #220]	; (8003f38 <_printf_float+0x2f0>)
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4628      	mov	r0, r5
 8003e60:	47b8      	blx	r7
 8003e62:	3001      	adds	r0, #1
 8003e64:	f43f af51 	beq.w	8003d0a <_printf_float+0xc2>
 8003e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	db02      	blt.n	8003e76 <_printf_float+0x22e>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	07d8      	lsls	r0, r3, #31
 8003e74:	d510      	bpl.n	8003e98 <_printf_float+0x250>
 8003e76:	ee18 3a10 	vmov	r3, s16
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	f43f af41 	beq.w	8003d0a <_printf_float+0xc2>
 8003e88:	f04f 0800 	mov.w	r8, #0
 8003e8c:	f104 091a 	add.w	r9, r4, #26
 8003e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4543      	cmp	r3, r8
 8003e96:	dc09      	bgt.n	8003eac <_printf_float+0x264>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	079b      	lsls	r3, r3, #30
 8003e9c:	f100 8105 	bmi.w	80040aa <_printf_float+0x462>
 8003ea0:	68e0      	ldr	r0, [r4, #12]
 8003ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ea4:	4298      	cmp	r0, r3
 8003ea6:	bfb8      	it	lt
 8003ea8:	4618      	movlt	r0, r3
 8003eaa:	e730      	b.n	8003d0e <_printf_float+0xc6>
 8003eac:	2301      	movs	r3, #1
 8003eae:	464a      	mov	r2, r9
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b8      	blx	r7
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	f43f af27 	beq.w	8003d0a <_printf_float+0xc2>
 8003ebc:	f108 0801 	add.w	r8, r8, #1
 8003ec0:	e7e6      	b.n	8003e90 <_printf_float+0x248>
 8003ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	dc39      	bgt.n	8003f3c <_printf_float+0x2f4>
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <_printf_float+0x2f0>)
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4628      	mov	r0, r5
 8003ed0:	47b8      	blx	r7
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	f43f af19 	beq.w	8003d0a <_printf_float+0xc2>
 8003ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d102      	bne.n	8003ee6 <_printf_float+0x29e>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	07d9      	lsls	r1, r3, #31
 8003ee4:	d5d8      	bpl.n	8003e98 <_printf_float+0x250>
 8003ee6:	ee18 3a10 	vmov	r3, s16
 8003eea:	4652      	mov	r2, sl
 8003eec:	4631      	mov	r1, r6
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f43f af09 	beq.w	8003d0a <_printf_float+0xc2>
 8003ef8:	f04f 0900 	mov.w	r9, #0
 8003efc:	f104 0a1a 	add.w	sl, r4, #26
 8003f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f02:	425b      	negs	r3, r3
 8003f04:	454b      	cmp	r3, r9
 8003f06:	dc01      	bgt.n	8003f0c <_printf_float+0x2c4>
 8003f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f0a:	e792      	b.n	8003e32 <_printf_float+0x1ea>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	4652      	mov	r2, sl
 8003f10:	4631      	mov	r1, r6
 8003f12:	4628      	mov	r0, r5
 8003f14:	47b8      	blx	r7
 8003f16:	3001      	adds	r0, #1
 8003f18:	f43f aef7 	beq.w	8003d0a <_printf_float+0xc2>
 8003f1c:	f109 0901 	add.w	r9, r9, #1
 8003f20:	e7ee      	b.n	8003f00 <_printf_float+0x2b8>
 8003f22:	bf00      	nop
 8003f24:	7fefffff 	.word	0x7fefffff
 8003f28:	08009128 	.word	0x08009128
 8003f2c:	0800912c 	.word	0x0800912c
 8003f30:	08009134 	.word	0x08009134
 8003f34:	08009130 	.word	0x08009130
 8003f38:	08009591 	.word	0x08009591
 8003f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f40:	429a      	cmp	r2, r3
 8003f42:	bfa8      	it	ge
 8003f44:	461a      	movge	r2, r3
 8003f46:	2a00      	cmp	r2, #0
 8003f48:	4691      	mov	r9, r2
 8003f4a:	dc37      	bgt.n	8003fbc <_printf_float+0x374>
 8003f4c:	f04f 0b00 	mov.w	fp, #0
 8003f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f54:	f104 021a 	add.w	r2, r4, #26
 8003f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	eba3 0309 	sub.w	r3, r3, r9
 8003f60:	455b      	cmp	r3, fp
 8003f62:	dc33      	bgt.n	8003fcc <_printf_float+0x384>
 8003f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	db3b      	blt.n	8003fe4 <_printf_float+0x39c>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	07da      	lsls	r2, r3, #31
 8003f70:	d438      	bmi.n	8003fe4 <_printf_float+0x39c>
 8003f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f74:	9a05      	ldr	r2, [sp, #20]
 8003f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f78:	1a9a      	subs	r2, r3, r2
 8003f7a:	eba3 0901 	sub.w	r9, r3, r1
 8003f7e:	4591      	cmp	r9, r2
 8003f80:	bfa8      	it	ge
 8003f82:	4691      	movge	r9, r2
 8003f84:	f1b9 0f00 	cmp.w	r9, #0
 8003f88:	dc35      	bgt.n	8003ff6 <_printf_float+0x3ae>
 8003f8a:	f04f 0800 	mov.w	r8, #0
 8003f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f92:	f104 0a1a 	add.w	sl, r4, #26
 8003f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	eba3 0309 	sub.w	r3, r3, r9
 8003fa0:	4543      	cmp	r3, r8
 8003fa2:	f77f af79 	ble.w	8003e98 <_printf_float+0x250>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4631      	mov	r1, r6
 8003fac:	4628      	mov	r0, r5
 8003fae:	47b8      	blx	r7
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	f43f aeaa 	beq.w	8003d0a <_printf_float+0xc2>
 8003fb6:	f108 0801 	add.w	r8, r8, #1
 8003fba:	e7ec      	b.n	8003f96 <_printf_float+0x34e>
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	47b8      	blx	r7
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d1c0      	bne.n	8003f4c <_printf_float+0x304>
 8003fca:	e69e      	b.n	8003d0a <_printf_float+0xc2>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	9205      	str	r2, [sp, #20]
 8003fd4:	47b8      	blx	r7
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	f43f ae97 	beq.w	8003d0a <_printf_float+0xc2>
 8003fdc:	9a05      	ldr	r2, [sp, #20]
 8003fde:	f10b 0b01 	add.w	fp, fp, #1
 8003fe2:	e7b9      	b.n	8003f58 <_printf_float+0x310>
 8003fe4:	ee18 3a10 	vmov	r3, s16
 8003fe8:	4652      	mov	r2, sl
 8003fea:	4631      	mov	r1, r6
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b8      	blx	r7
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d1be      	bne.n	8003f72 <_printf_float+0x32a>
 8003ff4:	e689      	b.n	8003d0a <_printf_float+0xc2>
 8003ff6:	9a05      	ldr	r2, [sp, #20]
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	4442      	add	r2, r8
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	d1c1      	bne.n	8003f8a <_printf_float+0x342>
 8004006:	e680      	b.n	8003d0a <_printf_float+0xc2>
 8004008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800400a:	2a01      	cmp	r2, #1
 800400c:	dc01      	bgt.n	8004012 <_printf_float+0x3ca>
 800400e:	07db      	lsls	r3, r3, #31
 8004010:	d538      	bpl.n	8004084 <_printf_float+0x43c>
 8004012:	2301      	movs	r3, #1
 8004014:	4642      	mov	r2, r8
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae74 	beq.w	8003d0a <_printf_float+0xc2>
 8004022:	ee18 3a10 	vmov	r3, s16
 8004026:	4652      	mov	r2, sl
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f ae6b 	beq.w	8003d0a <_printf_float+0xc2>
 8004034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004038:	2200      	movs	r2, #0
 800403a:	2300      	movs	r3, #0
 800403c:	f7fc fd64 	bl	8000b08 <__aeabi_dcmpeq>
 8004040:	b9d8      	cbnz	r0, 800407a <_printf_float+0x432>
 8004042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004044:	f108 0201 	add.w	r2, r8, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	d10e      	bne.n	8004072 <_printf_float+0x42a>
 8004054:	e659      	b.n	8003d0a <_printf_float+0xc2>
 8004056:	2301      	movs	r3, #1
 8004058:	4652      	mov	r2, sl
 800405a:	4631      	mov	r1, r6
 800405c:	4628      	mov	r0, r5
 800405e:	47b8      	blx	r7
 8004060:	3001      	adds	r0, #1
 8004062:	f43f ae52 	beq.w	8003d0a <_printf_float+0xc2>
 8004066:	f108 0801 	add.w	r8, r8, #1
 800406a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	4543      	cmp	r3, r8
 8004070:	dcf1      	bgt.n	8004056 <_printf_float+0x40e>
 8004072:	464b      	mov	r3, r9
 8004074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004078:	e6dc      	b.n	8003e34 <_printf_float+0x1ec>
 800407a:	f04f 0800 	mov.w	r8, #0
 800407e:	f104 0a1a 	add.w	sl, r4, #26
 8004082:	e7f2      	b.n	800406a <_printf_float+0x422>
 8004084:	2301      	movs	r3, #1
 8004086:	4642      	mov	r2, r8
 8004088:	e7df      	b.n	800404a <_printf_float+0x402>
 800408a:	2301      	movs	r3, #1
 800408c:	464a      	mov	r2, r9
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f ae38 	beq.w	8003d0a <_printf_float+0xc2>
 800409a:	f108 0801 	add.w	r8, r8, #1
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040a2:	1a5b      	subs	r3, r3, r1
 80040a4:	4543      	cmp	r3, r8
 80040a6:	dcf0      	bgt.n	800408a <_printf_float+0x442>
 80040a8:	e6fa      	b.n	8003ea0 <_printf_float+0x258>
 80040aa:	f04f 0800 	mov.w	r8, #0
 80040ae:	f104 0919 	add.w	r9, r4, #25
 80040b2:	e7f4      	b.n	800409e <_printf_float+0x456>

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4616      	mov	r6, r2
 80040ba:	4699      	mov	r9, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfb8      	it	lt
 80040c8:	4613      	movlt	r3, r2
 80040ca:	6033      	str	r3, [r6, #0]
 80040cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d0:	4607      	mov	r7, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	b10a      	cbz	r2, 80040da <_printf_common+0x26>
 80040d6:	3301      	adds	r3, #1
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	0699      	lsls	r1, r3, #26
 80040de:	bf42      	ittt	mi
 80040e0:	6833      	ldrmi	r3, [r6, #0]
 80040e2:	3302      	addmi	r3, #2
 80040e4:	6033      	strmi	r3, [r6, #0]
 80040e6:	6825      	ldr	r5, [r4, #0]
 80040e8:	f015 0506 	ands.w	r5, r5, #6
 80040ec:	d106      	bne.n	80040fc <_printf_common+0x48>
 80040ee:	f104 0a19 	add.w	sl, r4, #25
 80040f2:	68e3      	ldr	r3, [r4, #12]
 80040f4:	6832      	ldr	r2, [r6, #0]
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	dc26      	bgt.n	800414a <_printf_common+0x96>
 80040fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004100:	1e13      	subs	r3, r2, #0
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	bf18      	it	ne
 8004106:	2301      	movne	r3, #1
 8004108:	0692      	lsls	r2, r2, #26
 800410a:	d42b      	bmi.n	8004164 <_printf_common+0xb0>
 800410c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004110:	4649      	mov	r1, r9
 8004112:	4638      	mov	r0, r7
 8004114:	47c0      	blx	r8
 8004116:	3001      	adds	r0, #1
 8004118:	d01e      	beq.n	8004158 <_printf_common+0xa4>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	68e5      	ldr	r5, [r4, #12]
 800411e:	6832      	ldr	r2, [r6, #0]
 8004120:	f003 0306 	and.w	r3, r3, #6
 8004124:	2b04      	cmp	r3, #4
 8004126:	bf08      	it	eq
 8004128:	1aad      	subeq	r5, r5, r2
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	6922      	ldr	r2, [r4, #16]
 800412e:	bf0c      	ite	eq
 8004130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004134:	2500      	movne	r5, #0
 8004136:	4293      	cmp	r3, r2
 8004138:	bfc4      	itt	gt
 800413a:	1a9b      	subgt	r3, r3, r2
 800413c:	18ed      	addgt	r5, r5, r3
 800413e:	2600      	movs	r6, #0
 8004140:	341a      	adds	r4, #26
 8004142:	42b5      	cmp	r5, r6
 8004144:	d11a      	bne.n	800417c <_printf_common+0xc8>
 8004146:	2000      	movs	r0, #0
 8004148:	e008      	b.n	800415c <_printf_common+0xa8>
 800414a:	2301      	movs	r3, #1
 800414c:	4652      	mov	r2, sl
 800414e:	4649      	mov	r1, r9
 8004150:	4638      	mov	r0, r7
 8004152:	47c0      	blx	r8
 8004154:	3001      	adds	r0, #1
 8004156:	d103      	bne.n	8004160 <_printf_common+0xac>
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004160:	3501      	adds	r5, #1
 8004162:	e7c6      	b.n	80040f2 <_printf_common+0x3e>
 8004164:	18e1      	adds	r1, r4, r3
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	2030      	movs	r0, #48	; 0x30
 800416a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800416e:	4422      	add	r2, r4
 8004170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004178:	3302      	adds	r3, #2
 800417a:	e7c7      	b.n	800410c <_printf_common+0x58>
 800417c:	2301      	movs	r3, #1
 800417e:	4622      	mov	r2, r4
 8004180:	4649      	mov	r1, r9
 8004182:	4638      	mov	r0, r7
 8004184:	47c0      	blx	r8
 8004186:	3001      	adds	r0, #1
 8004188:	d0e6      	beq.n	8004158 <_printf_common+0xa4>
 800418a:	3601      	adds	r6, #1
 800418c:	e7d9      	b.n	8004142 <_printf_common+0x8e>
	...

08004190 <_printf_i>:
 8004190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	7e0f      	ldrb	r7, [r1, #24]
 8004196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004198:	2f78      	cmp	r7, #120	; 0x78
 800419a:	4691      	mov	r9, r2
 800419c:	4680      	mov	r8, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	469a      	mov	sl, r3
 80041a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041a6:	d807      	bhi.n	80041b8 <_printf_i+0x28>
 80041a8:	2f62      	cmp	r7, #98	; 0x62
 80041aa:	d80a      	bhi.n	80041c2 <_printf_i+0x32>
 80041ac:	2f00      	cmp	r7, #0
 80041ae:	f000 80d8 	beq.w	8004362 <_printf_i+0x1d2>
 80041b2:	2f58      	cmp	r7, #88	; 0x58
 80041b4:	f000 80a3 	beq.w	80042fe <_printf_i+0x16e>
 80041b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c0:	e03a      	b.n	8004238 <_printf_i+0xa8>
 80041c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041c6:	2b15      	cmp	r3, #21
 80041c8:	d8f6      	bhi.n	80041b8 <_printf_i+0x28>
 80041ca:	a101      	add	r1, pc, #4	; (adr r1, 80041d0 <_printf_i+0x40>)
 80041cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d0:	08004229 	.word	0x08004229
 80041d4:	0800423d 	.word	0x0800423d
 80041d8:	080041b9 	.word	0x080041b9
 80041dc:	080041b9 	.word	0x080041b9
 80041e0:	080041b9 	.word	0x080041b9
 80041e4:	080041b9 	.word	0x080041b9
 80041e8:	0800423d 	.word	0x0800423d
 80041ec:	080041b9 	.word	0x080041b9
 80041f0:	080041b9 	.word	0x080041b9
 80041f4:	080041b9 	.word	0x080041b9
 80041f8:	080041b9 	.word	0x080041b9
 80041fc:	08004349 	.word	0x08004349
 8004200:	0800426d 	.word	0x0800426d
 8004204:	0800432b 	.word	0x0800432b
 8004208:	080041b9 	.word	0x080041b9
 800420c:	080041b9 	.word	0x080041b9
 8004210:	0800436b 	.word	0x0800436b
 8004214:	080041b9 	.word	0x080041b9
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080041b9 	.word	0x080041b9
 8004220:	080041b9 	.word	0x080041b9
 8004224:	08004333 	.word	0x08004333
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	602a      	str	r2, [r5, #0]
 8004230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004238:	2301      	movs	r3, #1
 800423a:	e0a3      	b.n	8004384 <_printf_i+0x1f4>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	6829      	ldr	r1, [r5, #0]
 8004240:	0606      	lsls	r6, r0, #24
 8004242:	f101 0304 	add.w	r3, r1, #4
 8004246:	d50a      	bpl.n	800425e <_printf_i+0xce>
 8004248:	680e      	ldr	r6, [r1, #0]
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	2e00      	cmp	r6, #0
 800424e:	da03      	bge.n	8004258 <_printf_i+0xc8>
 8004250:	232d      	movs	r3, #45	; 0x2d
 8004252:	4276      	negs	r6, r6
 8004254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004258:	485e      	ldr	r0, [pc, #376]	; (80043d4 <_printf_i+0x244>)
 800425a:	230a      	movs	r3, #10
 800425c:	e019      	b.n	8004292 <_printf_i+0x102>
 800425e:	680e      	ldr	r6, [r1, #0]
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004266:	bf18      	it	ne
 8004268:	b236      	sxthne	r6, r6
 800426a:	e7ef      	b.n	800424c <_printf_i+0xbc>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	1d19      	adds	r1, r3, #4
 8004272:	6029      	str	r1, [r5, #0]
 8004274:	0601      	lsls	r1, r0, #24
 8004276:	d501      	bpl.n	800427c <_printf_i+0xec>
 8004278:	681e      	ldr	r6, [r3, #0]
 800427a:	e002      	b.n	8004282 <_printf_i+0xf2>
 800427c:	0646      	lsls	r6, r0, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0xe8>
 8004280:	881e      	ldrh	r6, [r3, #0]
 8004282:	4854      	ldr	r0, [pc, #336]	; (80043d4 <_printf_i+0x244>)
 8004284:	2f6f      	cmp	r7, #111	; 0x6f
 8004286:	bf0c      	ite	eq
 8004288:	2308      	moveq	r3, #8
 800428a:	230a      	movne	r3, #10
 800428c:	2100      	movs	r1, #0
 800428e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004292:	6865      	ldr	r5, [r4, #4]
 8004294:	60a5      	str	r5, [r4, #8]
 8004296:	2d00      	cmp	r5, #0
 8004298:	bfa2      	ittt	ge
 800429a:	6821      	ldrge	r1, [r4, #0]
 800429c:	f021 0104 	bicge.w	r1, r1, #4
 80042a0:	6021      	strge	r1, [r4, #0]
 80042a2:	b90e      	cbnz	r6, 80042a8 <_printf_i+0x118>
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	d04d      	beq.n	8004344 <_printf_i+0x1b4>
 80042a8:	4615      	mov	r5, r2
 80042aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80042ae:	fb03 6711 	mls	r7, r3, r1, r6
 80042b2:	5dc7      	ldrb	r7, [r0, r7]
 80042b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042b8:	4637      	mov	r7, r6
 80042ba:	42bb      	cmp	r3, r7
 80042bc:	460e      	mov	r6, r1
 80042be:	d9f4      	bls.n	80042aa <_printf_i+0x11a>
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d10b      	bne.n	80042dc <_printf_i+0x14c>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	07de      	lsls	r6, r3, #31
 80042c8:	d508      	bpl.n	80042dc <_printf_i+0x14c>
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	6861      	ldr	r1, [r4, #4]
 80042ce:	4299      	cmp	r1, r3
 80042d0:	bfde      	ittt	le
 80042d2:	2330      	movle	r3, #48	; 0x30
 80042d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042dc:	1b52      	subs	r2, r2, r5
 80042de:	6122      	str	r2, [r4, #16]
 80042e0:	f8cd a000 	str.w	sl, [sp]
 80042e4:	464b      	mov	r3, r9
 80042e6:	aa03      	add	r2, sp, #12
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f7ff fee2 	bl	80040b4 <_printf_common>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d14c      	bne.n	800438e <_printf_i+0x1fe>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	b004      	add	sp, #16
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	4835      	ldr	r0, [pc, #212]	; (80043d4 <_printf_i+0x244>)
 8004300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004304:	6829      	ldr	r1, [r5, #0]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f851 6b04 	ldr.w	r6, [r1], #4
 800430c:	6029      	str	r1, [r5, #0]
 800430e:	061d      	lsls	r5, r3, #24
 8004310:	d514      	bpl.n	800433c <_printf_i+0x1ac>
 8004312:	07df      	lsls	r7, r3, #31
 8004314:	bf44      	itt	mi
 8004316:	f043 0320 	orrmi.w	r3, r3, #32
 800431a:	6023      	strmi	r3, [r4, #0]
 800431c:	b91e      	cbnz	r6, 8004326 <_printf_i+0x196>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f023 0320 	bic.w	r3, r3, #32
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	2310      	movs	r3, #16
 8004328:	e7b0      	b.n	800428c <_printf_i+0xfc>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f043 0320 	orr.w	r3, r3, #32
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	2378      	movs	r3, #120	; 0x78
 8004334:	4828      	ldr	r0, [pc, #160]	; (80043d8 <_printf_i+0x248>)
 8004336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433a:	e7e3      	b.n	8004304 <_printf_i+0x174>
 800433c:	0659      	lsls	r1, r3, #25
 800433e:	bf48      	it	mi
 8004340:	b2b6      	uxthmi	r6, r6
 8004342:	e7e6      	b.n	8004312 <_printf_i+0x182>
 8004344:	4615      	mov	r5, r2
 8004346:	e7bb      	b.n	80042c0 <_printf_i+0x130>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	6826      	ldr	r6, [r4, #0]
 800434c:	6961      	ldr	r1, [r4, #20]
 800434e:	1d18      	adds	r0, r3, #4
 8004350:	6028      	str	r0, [r5, #0]
 8004352:	0635      	lsls	r5, r6, #24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	d501      	bpl.n	800435c <_printf_i+0x1cc>
 8004358:	6019      	str	r1, [r3, #0]
 800435a:	e002      	b.n	8004362 <_printf_i+0x1d2>
 800435c:	0670      	lsls	r0, r6, #25
 800435e:	d5fb      	bpl.n	8004358 <_printf_i+0x1c8>
 8004360:	8019      	strh	r1, [r3, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	4615      	mov	r5, r2
 8004368:	e7ba      	b.n	80042e0 <_printf_i+0x150>
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	602a      	str	r2, [r5, #0]
 8004370:	681d      	ldr	r5, [r3, #0]
 8004372:	6862      	ldr	r2, [r4, #4]
 8004374:	2100      	movs	r1, #0
 8004376:	4628      	mov	r0, r5
 8004378:	f7fb ff52 	bl	8000220 <memchr>
 800437c:	b108      	cbz	r0, 8004382 <_printf_i+0x1f2>
 800437e:	1b40      	subs	r0, r0, r5
 8004380:	6060      	str	r0, [r4, #4]
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	2300      	movs	r3, #0
 8004388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800438c:	e7a8      	b.n	80042e0 <_printf_i+0x150>
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	462a      	mov	r2, r5
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	47d0      	blx	sl
 8004398:	3001      	adds	r0, #1
 800439a:	d0ab      	beq.n	80042f4 <_printf_i+0x164>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	079b      	lsls	r3, r3, #30
 80043a0:	d413      	bmi.n	80043ca <_printf_i+0x23a>
 80043a2:	68e0      	ldr	r0, [r4, #12]
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	4298      	cmp	r0, r3
 80043a8:	bfb8      	it	lt
 80043aa:	4618      	movlt	r0, r3
 80043ac:	e7a4      	b.n	80042f8 <_printf_i+0x168>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4632      	mov	r2, r6
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	47d0      	blx	sl
 80043b8:	3001      	adds	r0, #1
 80043ba:	d09b      	beq.n	80042f4 <_printf_i+0x164>
 80043bc:	3501      	adds	r5, #1
 80043be:	68e3      	ldr	r3, [r4, #12]
 80043c0:	9903      	ldr	r1, [sp, #12]
 80043c2:	1a5b      	subs	r3, r3, r1
 80043c4:	42ab      	cmp	r3, r5
 80043c6:	dcf2      	bgt.n	80043ae <_printf_i+0x21e>
 80043c8:	e7eb      	b.n	80043a2 <_printf_i+0x212>
 80043ca:	2500      	movs	r5, #0
 80043cc:	f104 0619 	add.w	r6, r4, #25
 80043d0:	e7f5      	b.n	80043be <_printf_i+0x22e>
 80043d2:	bf00      	nop
 80043d4:	08009138 	.word	0x08009138
 80043d8:	08009149 	.word	0x08009149

080043dc <_scanf_float>:
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	b087      	sub	sp, #28
 80043e2:	4617      	mov	r7, r2
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	688b      	ldr	r3, [r1, #8]
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043ee:	bf83      	ittte	hi
 80043f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043f4:	195b      	addhi	r3, r3, r5
 80043f6:	9302      	strhi	r3, [sp, #8]
 80043f8:	2300      	movls	r3, #0
 80043fa:	bf86      	itte	hi
 80043fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004400:	608b      	strhi	r3, [r1, #8]
 8004402:	9302      	strls	r3, [sp, #8]
 8004404:	680b      	ldr	r3, [r1, #0]
 8004406:	468b      	mov	fp, r1
 8004408:	2500      	movs	r5, #0
 800440a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800440e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004412:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004416:	4680      	mov	r8, r0
 8004418:	460c      	mov	r4, r1
 800441a:	465e      	mov	r6, fp
 800441c:	46aa      	mov	sl, r5
 800441e:	46a9      	mov	r9, r5
 8004420:	9501      	str	r5, [sp, #4]
 8004422:	68a2      	ldr	r2, [r4, #8]
 8004424:	b152      	cbz	r2, 800443c <_scanf_float+0x60>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b4e      	cmp	r3, #78	; 0x4e
 800442c:	d864      	bhi.n	80044f8 <_scanf_float+0x11c>
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d83c      	bhi.n	80044ac <_scanf_float+0xd0>
 8004432:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004436:	b2c8      	uxtb	r0, r1
 8004438:	280e      	cmp	r0, #14
 800443a:	d93a      	bls.n	80044b2 <_scanf_float+0xd6>
 800443c:	f1b9 0f00 	cmp.w	r9, #0
 8004440:	d003      	beq.n	800444a <_scanf_float+0x6e>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800444e:	f1ba 0f01 	cmp.w	sl, #1
 8004452:	f200 8113 	bhi.w	800467c <_scanf_float+0x2a0>
 8004456:	455e      	cmp	r6, fp
 8004458:	f200 8105 	bhi.w	8004666 <_scanf_float+0x28a>
 800445c:	2501      	movs	r5, #1
 800445e:	4628      	mov	r0, r5
 8004460:	b007      	add	sp, #28
 8004462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004466:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800446a:	2a0d      	cmp	r2, #13
 800446c:	d8e6      	bhi.n	800443c <_scanf_float+0x60>
 800446e:	a101      	add	r1, pc, #4	; (adr r1, 8004474 <_scanf_float+0x98>)
 8004470:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004474:	080045b3 	.word	0x080045b3
 8004478:	0800443d 	.word	0x0800443d
 800447c:	0800443d 	.word	0x0800443d
 8004480:	0800443d 	.word	0x0800443d
 8004484:	08004613 	.word	0x08004613
 8004488:	080045eb 	.word	0x080045eb
 800448c:	0800443d 	.word	0x0800443d
 8004490:	0800443d 	.word	0x0800443d
 8004494:	080045c1 	.word	0x080045c1
 8004498:	0800443d 	.word	0x0800443d
 800449c:	0800443d 	.word	0x0800443d
 80044a0:	0800443d 	.word	0x0800443d
 80044a4:	0800443d 	.word	0x0800443d
 80044a8:	08004579 	.word	0x08004579
 80044ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80044b0:	e7db      	b.n	800446a <_scanf_float+0x8e>
 80044b2:	290e      	cmp	r1, #14
 80044b4:	d8c2      	bhi.n	800443c <_scanf_float+0x60>
 80044b6:	a001      	add	r0, pc, #4	; (adr r0, 80044bc <_scanf_float+0xe0>)
 80044b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80044bc:	0800456b 	.word	0x0800456b
 80044c0:	0800443d 	.word	0x0800443d
 80044c4:	0800456b 	.word	0x0800456b
 80044c8:	080045ff 	.word	0x080045ff
 80044cc:	0800443d 	.word	0x0800443d
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004555 	.word	0x08004555
 80044d8:	08004555 	.word	0x08004555
 80044dc:	08004555 	.word	0x08004555
 80044e0:	08004555 	.word	0x08004555
 80044e4:	08004555 	.word	0x08004555
 80044e8:	08004555 	.word	0x08004555
 80044ec:	08004555 	.word	0x08004555
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004555 	.word	0x08004555
 80044f8:	2b6e      	cmp	r3, #110	; 0x6e
 80044fa:	d809      	bhi.n	8004510 <_scanf_float+0x134>
 80044fc:	2b60      	cmp	r3, #96	; 0x60
 80044fe:	d8b2      	bhi.n	8004466 <_scanf_float+0x8a>
 8004500:	2b54      	cmp	r3, #84	; 0x54
 8004502:	d077      	beq.n	80045f4 <_scanf_float+0x218>
 8004504:	2b59      	cmp	r3, #89	; 0x59
 8004506:	d199      	bne.n	800443c <_scanf_float+0x60>
 8004508:	2d07      	cmp	r5, #7
 800450a:	d197      	bne.n	800443c <_scanf_float+0x60>
 800450c:	2508      	movs	r5, #8
 800450e:	e029      	b.n	8004564 <_scanf_float+0x188>
 8004510:	2b74      	cmp	r3, #116	; 0x74
 8004512:	d06f      	beq.n	80045f4 <_scanf_float+0x218>
 8004514:	2b79      	cmp	r3, #121	; 0x79
 8004516:	e7f6      	b.n	8004506 <_scanf_float+0x12a>
 8004518:	6821      	ldr	r1, [r4, #0]
 800451a:	05c8      	lsls	r0, r1, #23
 800451c:	d51a      	bpl.n	8004554 <_scanf_float+0x178>
 800451e:	9b02      	ldr	r3, [sp, #8]
 8004520:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004524:	6021      	str	r1, [r4, #0]
 8004526:	f109 0901 	add.w	r9, r9, #1
 800452a:	b11b      	cbz	r3, 8004534 <_scanf_float+0x158>
 800452c:	3b01      	subs	r3, #1
 800452e:	3201      	adds	r2, #1
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	60a2      	str	r2, [r4, #8]
 8004534:	68a3      	ldr	r3, [r4, #8]
 8004536:	3b01      	subs	r3, #1
 8004538:	60a3      	str	r3, [r4, #8]
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	3301      	adds	r3, #1
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	f340 8084 	ble.w	8004654 <_scanf_float+0x278>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	e766      	b.n	8004422 <_scanf_float+0x46>
 8004554:	eb1a 0f05 	cmn.w	sl, r5
 8004558:	f47f af70 	bne.w	800443c <_scanf_float+0x60>
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	f806 3b01 	strb.w	r3, [r6], #1
 8004568:	e7e4      	b.n	8004534 <_scanf_float+0x158>
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	0610      	lsls	r0, r2, #24
 800456e:	f57f af65 	bpl.w	800443c <_scanf_float+0x60>
 8004572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004576:	e7f4      	b.n	8004562 <_scanf_float+0x186>
 8004578:	f1ba 0f00 	cmp.w	sl, #0
 800457c:	d10e      	bne.n	800459c <_scanf_float+0x1c0>
 800457e:	f1b9 0f00 	cmp.w	r9, #0
 8004582:	d10e      	bne.n	80045a2 <_scanf_float+0x1c6>
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800458a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800458e:	d108      	bne.n	80045a2 <_scanf_float+0x1c6>
 8004590:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004594:	6022      	str	r2, [r4, #0]
 8004596:	f04f 0a01 	mov.w	sl, #1
 800459a:	e7e3      	b.n	8004564 <_scanf_float+0x188>
 800459c:	f1ba 0f02 	cmp.w	sl, #2
 80045a0:	d055      	beq.n	800464e <_scanf_float+0x272>
 80045a2:	2d01      	cmp	r5, #1
 80045a4:	d002      	beq.n	80045ac <_scanf_float+0x1d0>
 80045a6:	2d04      	cmp	r5, #4
 80045a8:	f47f af48 	bne.w	800443c <_scanf_float+0x60>
 80045ac:	3501      	adds	r5, #1
 80045ae:	b2ed      	uxtb	r5, r5
 80045b0:	e7d8      	b.n	8004564 <_scanf_float+0x188>
 80045b2:	f1ba 0f01 	cmp.w	sl, #1
 80045b6:	f47f af41 	bne.w	800443c <_scanf_float+0x60>
 80045ba:	f04f 0a02 	mov.w	sl, #2
 80045be:	e7d1      	b.n	8004564 <_scanf_float+0x188>
 80045c0:	b97d      	cbnz	r5, 80045e2 <_scanf_float+0x206>
 80045c2:	f1b9 0f00 	cmp.w	r9, #0
 80045c6:	f47f af3c 	bne.w	8004442 <_scanf_float+0x66>
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80045d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045d4:	f47f af39 	bne.w	800444a <_scanf_float+0x6e>
 80045d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045dc:	6022      	str	r2, [r4, #0]
 80045de:	2501      	movs	r5, #1
 80045e0:	e7c0      	b.n	8004564 <_scanf_float+0x188>
 80045e2:	2d03      	cmp	r5, #3
 80045e4:	d0e2      	beq.n	80045ac <_scanf_float+0x1d0>
 80045e6:	2d05      	cmp	r5, #5
 80045e8:	e7de      	b.n	80045a8 <_scanf_float+0x1cc>
 80045ea:	2d02      	cmp	r5, #2
 80045ec:	f47f af26 	bne.w	800443c <_scanf_float+0x60>
 80045f0:	2503      	movs	r5, #3
 80045f2:	e7b7      	b.n	8004564 <_scanf_float+0x188>
 80045f4:	2d06      	cmp	r5, #6
 80045f6:	f47f af21 	bne.w	800443c <_scanf_float+0x60>
 80045fa:	2507      	movs	r5, #7
 80045fc:	e7b2      	b.n	8004564 <_scanf_float+0x188>
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	0591      	lsls	r1, r2, #22
 8004602:	f57f af1b 	bpl.w	800443c <_scanf_float+0x60>
 8004606:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800460a:	6022      	str	r2, [r4, #0]
 800460c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004610:	e7a8      	b.n	8004564 <_scanf_float+0x188>
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004618:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800461c:	d006      	beq.n	800462c <_scanf_float+0x250>
 800461e:	0550      	lsls	r0, r2, #21
 8004620:	f57f af0c 	bpl.w	800443c <_scanf_float+0x60>
 8004624:	f1b9 0f00 	cmp.w	r9, #0
 8004628:	f43f af0f 	beq.w	800444a <_scanf_float+0x6e>
 800462c:	0591      	lsls	r1, r2, #22
 800462e:	bf58      	it	pl
 8004630:	9901      	ldrpl	r1, [sp, #4]
 8004632:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004636:	bf58      	it	pl
 8004638:	eba9 0101 	subpl.w	r1, r9, r1
 800463c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004640:	bf58      	it	pl
 8004642:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	f04f 0900 	mov.w	r9, #0
 800464c:	e78a      	b.n	8004564 <_scanf_float+0x188>
 800464e:	f04f 0a03 	mov.w	sl, #3
 8004652:	e787      	b.n	8004564 <_scanf_float+0x188>
 8004654:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004658:	4639      	mov	r1, r7
 800465a:	4640      	mov	r0, r8
 800465c:	4798      	blx	r3
 800465e:	2800      	cmp	r0, #0
 8004660:	f43f aedf 	beq.w	8004422 <_scanf_float+0x46>
 8004664:	e6ea      	b.n	800443c <_scanf_float+0x60>
 8004666:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800466a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800466e:	463a      	mov	r2, r7
 8004670:	4640      	mov	r0, r8
 8004672:	4798      	blx	r3
 8004674:	6923      	ldr	r3, [r4, #16]
 8004676:	3b01      	subs	r3, #1
 8004678:	6123      	str	r3, [r4, #16]
 800467a:	e6ec      	b.n	8004456 <_scanf_float+0x7a>
 800467c:	1e6b      	subs	r3, r5, #1
 800467e:	2b06      	cmp	r3, #6
 8004680:	d825      	bhi.n	80046ce <_scanf_float+0x2f2>
 8004682:	2d02      	cmp	r5, #2
 8004684:	d836      	bhi.n	80046f4 <_scanf_float+0x318>
 8004686:	455e      	cmp	r6, fp
 8004688:	f67f aee8 	bls.w	800445c <_scanf_float+0x80>
 800468c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004690:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004694:	463a      	mov	r2, r7
 8004696:	4640      	mov	r0, r8
 8004698:	4798      	blx	r3
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	3b01      	subs	r3, #1
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	e7f1      	b.n	8004686 <_scanf_float+0x2aa>
 80046a2:	9802      	ldr	r0, [sp, #8]
 80046a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80046ac:	9002      	str	r0, [sp, #8]
 80046ae:	463a      	mov	r2, r7
 80046b0:	4640      	mov	r0, r8
 80046b2:	4798      	blx	r3
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046be:	fa5f fa8a 	uxtb.w	sl, sl
 80046c2:	f1ba 0f02 	cmp.w	sl, #2
 80046c6:	d1ec      	bne.n	80046a2 <_scanf_float+0x2c6>
 80046c8:	3d03      	subs	r5, #3
 80046ca:	b2ed      	uxtb	r5, r5
 80046cc:	1b76      	subs	r6, r6, r5
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	05da      	lsls	r2, r3, #23
 80046d2:	d52f      	bpl.n	8004734 <_scanf_float+0x358>
 80046d4:	055b      	lsls	r3, r3, #21
 80046d6:	d510      	bpl.n	80046fa <_scanf_float+0x31e>
 80046d8:	455e      	cmp	r6, fp
 80046da:	f67f aebf 	bls.w	800445c <_scanf_float+0x80>
 80046de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046e6:	463a      	mov	r2, r7
 80046e8:	4640      	mov	r0, r8
 80046ea:	4798      	blx	r3
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	e7f1      	b.n	80046d8 <_scanf_float+0x2fc>
 80046f4:	46aa      	mov	sl, r5
 80046f6:	9602      	str	r6, [sp, #8]
 80046f8:	e7df      	b.n	80046ba <_scanf_float+0x2de>
 80046fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	2965      	cmp	r1, #101	; 0x65
 8004702:	f103 33ff 	add.w	r3, r3, #4294967295
 8004706:	f106 35ff 	add.w	r5, r6, #4294967295
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	d00c      	beq.n	8004728 <_scanf_float+0x34c>
 800470e:	2945      	cmp	r1, #69	; 0x45
 8004710:	d00a      	beq.n	8004728 <_scanf_float+0x34c>
 8004712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004716:	463a      	mov	r2, r7
 8004718:	4640      	mov	r0, r8
 800471a:	4798      	blx	r3
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004722:	3b01      	subs	r3, #1
 8004724:	1eb5      	subs	r5, r6, #2
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800472c:	463a      	mov	r2, r7
 800472e:	4640      	mov	r0, r8
 8004730:	4798      	blx	r3
 8004732:	462e      	mov	r6, r5
 8004734:	6825      	ldr	r5, [r4, #0]
 8004736:	f015 0510 	ands.w	r5, r5, #16
 800473a:	d159      	bne.n	80047f0 <_scanf_float+0x414>
 800473c:	7035      	strb	r5, [r6, #0]
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	d11b      	bne.n	8004782 <_scanf_float+0x3a6>
 800474a:	9b01      	ldr	r3, [sp, #4]
 800474c:	454b      	cmp	r3, r9
 800474e:	eba3 0209 	sub.w	r2, r3, r9
 8004752:	d123      	bne.n	800479c <_scanf_float+0x3c0>
 8004754:	2200      	movs	r2, #0
 8004756:	4659      	mov	r1, fp
 8004758:	4640      	mov	r0, r8
 800475a:	f000 ff8f 	bl	800567c <_strtod_r>
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	9b03      	ldr	r3, [sp, #12]
 8004762:	f012 0f02 	tst.w	r2, #2
 8004766:	ec57 6b10 	vmov	r6, r7, d0
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	d021      	beq.n	80047b2 <_scanf_float+0x3d6>
 800476e:	9903      	ldr	r1, [sp, #12]
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	600a      	str	r2, [r1, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	e9c3 6700 	strd	r6, r7, [r3]
 800477a:	68e3      	ldr	r3, [r4, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60e3      	str	r3, [r4, #12]
 8004780:	e66d      	b.n	800445e <_scanf_float+0x82>
 8004782:	9b04      	ldr	r3, [sp, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0e5      	beq.n	8004754 <_scanf_float+0x378>
 8004788:	9905      	ldr	r1, [sp, #20]
 800478a:	230a      	movs	r3, #10
 800478c:	462a      	mov	r2, r5
 800478e:	3101      	adds	r1, #1
 8004790:	4640      	mov	r0, r8
 8004792:	f000 fffb 	bl	800578c <_strtol_r>
 8004796:	9b04      	ldr	r3, [sp, #16]
 8004798:	9e05      	ldr	r6, [sp, #20]
 800479a:	1ac2      	subs	r2, r0, r3
 800479c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80047a0:	429e      	cmp	r6, r3
 80047a2:	bf28      	it	cs
 80047a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80047a8:	4912      	ldr	r1, [pc, #72]	; (80047f4 <_scanf_float+0x418>)
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 f922 	bl	80049f4 <siprintf>
 80047b0:	e7d0      	b.n	8004754 <_scanf_float+0x378>
 80047b2:	9903      	ldr	r1, [sp, #12]
 80047b4:	f012 0f04 	tst.w	r2, #4
 80047b8:	f103 0204 	add.w	r2, r3, #4
 80047bc:	600a      	str	r2, [r1, #0]
 80047be:	d1d9      	bne.n	8004774 <_scanf_float+0x398>
 80047c0:	f8d3 8000 	ldr.w	r8, [r3]
 80047c4:	ee10 2a10 	vmov	r2, s0
 80047c8:	ee10 0a10 	vmov	r0, s0
 80047cc:	463b      	mov	r3, r7
 80047ce:	4639      	mov	r1, r7
 80047d0:	f7fc f9cc 	bl	8000b6c <__aeabi_dcmpun>
 80047d4:	b128      	cbz	r0, 80047e2 <_scanf_float+0x406>
 80047d6:	4808      	ldr	r0, [pc, #32]	; (80047f8 <_scanf_float+0x41c>)
 80047d8:	f000 f906 	bl	80049e8 <nanf>
 80047dc:	ed88 0a00 	vstr	s0, [r8]
 80047e0:	e7cb      	b.n	800477a <_scanf_float+0x39e>
 80047e2:	4630      	mov	r0, r6
 80047e4:	4639      	mov	r1, r7
 80047e6:	f7fc fa1f 	bl	8000c28 <__aeabi_d2f>
 80047ea:	f8c8 0000 	str.w	r0, [r8]
 80047ee:	e7c4      	b.n	800477a <_scanf_float+0x39e>
 80047f0:	2500      	movs	r5, #0
 80047f2:	e634      	b.n	800445e <_scanf_float+0x82>
 80047f4:	0800915a 	.word	0x0800915a
 80047f8:	080095e3 	.word	0x080095e3

080047fc <iprintf>:
 80047fc:	b40f      	push	{r0, r1, r2, r3}
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <iprintf+0x2c>)
 8004800:	b513      	push	{r0, r1, r4, lr}
 8004802:	681c      	ldr	r4, [r3, #0]
 8004804:	b124      	cbz	r4, 8004810 <iprintf+0x14>
 8004806:	69a3      	ldr	r3, [r4, #24]
 8004808:	b913      	cbnz	r3, 8004810 <iprintf+0x14>
 800480a:	4620      	mov	r0, r4
 800480c:	f001 ff66 	bl	80066dc <__sinit>
 8004810:	ab05      	add	r3, sp, #20
 8004812:	9a04      	ldr	r2, [sp, #16]
 8004814:	68a1      	ldr	r1, [r4, #8]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	4620      	mov	r0, r4
 800481a:	f003 fb5b 	bl	8007ed4 <_vfiprintf_r>
 800481e:	b002      	add	sp, #8
 8004820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004824:	b004      	add	sp, #16
 8004826:	4770      	bx	lr
 8004828:	2000000c 	.word	0x2000000c

0800482c <iscanf>:
 800482c:	b40f      	push	{r0, r1, r2, r3}
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <iscanf+0x2c>)
 8004830:	b513      	push	{r0, r1, r4, lr}
 8004832:	681c      	ldr	r4, [r3, #0]
 8004834:	b124      	cbz	r4, 8004840 <iscanf+0x14>
 8004836:	69a3      	ldr	r3, [r4, #24]
 8004838:	b913      	cbnz	r3, 8004840 <iscanf+0x14>
 800483a:	4620      	mov	r0, r4
 800483c:	f001 ff4e 	bl	80066dc <__sinit>
 8004840:	ab05      	add	r3, sp, #20
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	6861      	ldr	r1, [r4, #4]
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	4620      	mov	r0, r4
 800484a:	f003 fe19 	bl	8008480 <_vfiscanf_r>
 800484e:	b002      	add	sp, #8
 8004850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004854:	b004      	add	sp, #16
 8004856:	4770      	bx	lr
 8004858:	2000000c 	.word	0x2000000c

0800485c <setvbuf>:
 800485c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004860:	461d      	mov	r5, r3
 8004862:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <setvbuf+0x17c>)
 8004864:	681f      	ldr	r7, [r3, #0]
 8004866:	4604      	mov	r4, r0
 8004868:	460e      	mov	r6, r1
 800486a:	4690      	mov	r8, r2
 800486c:	b127      	cbz	r7, 8004878 <setvbuf+0x1c>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	b913      	cbnz	r3, 8004878 <setvbuf+0x1c>
 8004872:	4638      	mov	r0, r7
 8004874:	f001 ff32 	bl	80066dc <__sinit>
 8004878:	4b58      	ldr	r3, [pc, #352]	; (80049dc <setvbuf+0x180>)
 800487a:	429c      	cmp	r4, r3
 800487c:	d167      	bne.n	800494e <setvbuf+0xf2>
 800487e:	687c      	ldr	r4, [r7, #4]
 8004880:	f1b8 0f02 	cmp.w	r8, #2
 8004884:	d006      	beq.n	8004894 <setvbuf+0x38>
 8004886:	f1b8 0f01 	cmp.w	r8, #1
 800488a:	f200 809f 	bhi.w	80049cc <setvbuf+0x170>
 800488e:	2d00      	cmp	r5, #0
 8004890:	f2c0 809c 	blt.w	80049cc <setvbuf+0x170>
 8004894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004896:	07db      	lsls	r3, r3, #31
 8004898:	d405      	bmi.n	80048a6 <setvbuf+0x4a>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	0598      	lsls	r0, r3, #22
 800489e:	d402      	bmi.n	80048a6 <setvbuf+0x4a>
 80048a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048a2:	f002 fb4a 	bl	8006f3a <__retarget_lock_acquire_recursive>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4638      	mov	r0, r7
 80048aa:	f001 fe71 	bl	8006590 <_fflush_r>
 80048ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048b0:	b141      	cbz	r1, 80048c4 <setvbuf+0x68>
 80048b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048b6:	4299      	cmp	r1, r3
 80048b8:	d002      	beq.n	80048c0 <setvbuf+0x64>
 80048ba:	4638      	mov	r0, r7
 80048bc:	f003 f8a4 	bl	8007a08 <_free_r>
 80048c0:	2300      	movs	r3, #0
 80048c2:	6363      	str	r3, [r4, #52]	; 0x34
 80048c4:	2300      	movs	r3, #0
 80048c6:	61a3      	str	r3, [r4, #24]
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	0619      	lsls	r1, r3, #24
 80048ce:	d503      	bpl.n	80048d8 <setvbuf+0x7c>
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	4638      	mov	r0, r7
 80048d4:	f003 f898 	bl	8007a08 <_free_r>
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	f1b8 0f02 	cmp.w	r8, #2
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	d06c      	beq.n	80049c4 <setvbuf+0x168>
 80048ea:	ab01      	add	r3, sp, #4
 80048ec:	466a      	mov	r2, sp
 80048ee:	4621      	mov	r1, r4
 80048f0:	4638      	mov	r0, r7
 80048f2:	f002 fb24 	bl	8006f3e <__swhatbuf_r>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	4318      	orrs	r0, r3
 80048fa:	81a0      	strh	r0, [r4, #12]
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	d130      	bne.n	8004962 <setvbuf+0x106>
 8004900:	9d00      	ldr	r5, [sp, #0]
 8004902:	4628      	mov	r0, r5
 8004904:	f002 fb80 	bl	8007008 <malloc>
 8004908:	4606      	mov	r6, r0
 800490a:	2800      	cmp	r0, #0
 800490c:	d155      	bne.n	80049ba <setvbuf+0x15e>
 800490e:	f8dd 9000 	ldr.w	r9, [sp]
 8004912:	45a9      	cmp	r9, r5
 8004914:	d14a      	bne.n	80049ac <setvbuf+0x150>
 8004916:	f04f 35ff 	mov.w	r5, #4294967295
 800491a:	2200      	movs	r2, #0
 800491c:	60a2      	str	r2, [r4, #8]
 800491e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	6122      	str	r2, [r4, #16]
 8004926:	2201      	movs	r2, #1
 8004928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492c:	6162      	str	r2, [r4, #20]
 800492e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	07d2      	lsls	r2, r2, #31
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	d405      	bmi.n	8004946 <setvbuf+0xea>
 800493a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800493e:	d102      	bne.n	8004946 <setvbuf+0xea>
 8004940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004942:	f002 fafb 	bl	8006f3c <__retarget_lock_release_recursive>
 8004946:	4628      	mov	r0, r5
 8004948:	b003      	add	sp, #12
 800494a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <setvbuf+0x184>)
 8004950:	429c      	cmp	r4, r3
 8004952:	d101      	bne.n	8004958 <setvbuf+0xfc>
 8004954:	68bc      	ldr	r4, [r7, #8]
 8004956:	e793      	b.n	8004880 <setvbuf+0x24>
 8004958:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <setvbuf+0x188>)
 800495a:	429c      	cmp	r4, r3
 800495c:	bf08      	it	eq
 800495e:	68fc      	ldreq	r4, [r7, #12]
 8004960:	e78e      	b.n	8004880 <setvbuf+0x24>
 8004962:	2e00      	cmp	r6, #0
 8004964:	d0cd      	beq.n	8004902 <setvbuf+0xa6>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	b913      	cbnz	r3, 8004970 <setvbuf+0x114>
 800496a:	4638      	mov	r0, r7
 800496c:	f001 feb6 	bl	80066dc <__sinit>
 8004970:	f1b8 0f01 	cmp.w	r8, #1
 8004974:	bf08      	it	eq
 8004976:	89a3      	ldrheq	r3, [r4, #12]
 8004978:	6026      	str	r6, [r4, #0]
 800497a:	bf04      	itt	eq
 800497c:	f043 0301 	orreq.w	r3, r3, #1
 8004980:	81a3      	strheq	r3, [r4, #12]
 8004982:	89a2      	ldrh	r2, [r4, #12]
 8004984:	f012 0308 	ands.w	r3, r2, #8
 8004988:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800498c:	d01c      	beq.n	80049c8 <setvbuf+0x16c>
 800498e:	07d3      	lsls	r3, r2, #31
 8004990:	bf41      	itttt	mi
 8004992:	2300      	movmi	r3, #0
 8004994:	426d      	negmi	r5, r5
 8004996:	60a3      	strmi	r3, [r4, #8]
 8004998:	61a5      	strmi	r5, [r4, #24]
 800499a:	bf58      	it	pl
 800499c:	60a5      	strpl	r5, [r4, #8]
 800499e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80049a0:	f015 0501 	ands.w	r5, r5, #1
 80049a4:	d115      	bne.n	80049d2 <setvbuf+0x176>
 80049a6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80049aa:	e7c8      	b.n	800493e <setvbuf+0xe2>
 80049ac:	4648      	mov	r0, r9
 80049ae:	f002 fb2b 	bl	8007008 <malloc>
 80049b2:	4606      	mov	r6, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d0ae      	beq.n	8004916 <setvbuf+0xba>
 80049b8:	464d      	mov	r5, r9
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	e7d0      	b.n	8004966 <setvbuf+0x10a>
 80049c4:	2500      	movs	r5, #0
 80049c6:	e7a8      	b.n	800491a <setvbuf+0xbe>
 80049c8:	60a3      	str	r3, [r4, #8]
 80049ca:	e7e8      	b.n	800499e <setvbuf+0x142>
 80049cc:	f04f 35ff 	mov.w	r5, #4294967295
 80049d0:	e7b9      	b.n	8004946 <setvbuf+0xea>
 80049d2:	2500      	movs	r5, #0
 80049d4:	e7b7      	b.n	8004946 <setvbuf+0xea>
 80049d6:	bf00      	nop
 80049d8:	2000000c 	.word	0x2000000c
 80049dc:	08009364 	.word	0x08009364
 80049e0:	08009384 	.word	0x08009384
 80049e4:	08009344 	.word	0x08009344

080049e8 <nanf>:
 80049e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80049f0 <nanf+0x8>
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	7fc00000 	.word	0x7fc00000

080049f4 <siprintf>:
 80049f4:	b40e      	push	{r1, r2, r3}
 80049f6:	b500      	push	{lr}
 80049f8:	b09c      	sub	sp, #112	; 0x70
 80049fa:	ab1d      	add	r3, sp, #116	; 0x74
 80049fc:	9002      	str	r0, [sp, #8]
 80049fe:	9006      	str	r0, [sp, #24]
 8004a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a04:	4809      	ldr	r0, [pc, #36]	; (8004a2c <siprintf+0x38>)
 8004a06:	9107      	str	r1, [sp, #28]
 8004a08:	9104      	str	r1, [sp, #16]
 8004a0a:	4909      	ldr	r1, [pc, #36]	; (8004a30 <siprintf+0x3c>)
 8004a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a10:	9105      	str	r1, [sp, #20]
 8004a12:	6800      	ldr	r0, [r0, #0]
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	a902      	add	r1, sp, #8
 8004a18:	f003 f932 	bl	8007c80 <_svfiprintf_r>
 8004a1c:	9b02      	ldr	r3, [sp, #8]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	b01c      	add	sp, #112	; 0x70
 8004a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a28:	b003      	add	sp, #12
 8004a2a:	4770      	bx	lr
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	ffff0208 	.word	0xffff0208

08004a34 <sulp>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	ec45 4b10 	vmov	d0, r4, r5
 8004a3e:	4616      	mov	r6, r2
 8004a40:	f002 fe7c 	bl	800773c <__ulp>
 8004a44:	ec51 0b10 	vmov	r0, r1, d0
 8004a48:	b17e      	cbz	r6, 8004a6a <sulp+0x36>
 8004a4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004a4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	dd09      	ble.n	8004a6a <sulp+0x36>
 8004a56:	051b      	lsls	r3, r3, #20
 8004a58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a5c:	2400      	movs	r4, #0
 8004a5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a62:	4622      	mov	r2, r4
 8004a64:	462b      	mov	r3, r5
 8004a66:	f7fb fde7 	bl	8000638 <__aeabi_dmul>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	0000      	movs	r0, r0
	...

08004a70 <_strtod_l>:
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	ed2d 8b02 	vpush	{d8}
 8004a78:	b09d      	sub	sp, #116	; 0x74
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9318      	str	r3, [sp, #96]	; 0x60
 8004a80:	4ba2      	ldr	r3, [pc, #648]	; (8004d0c <_strtod_l+0x29c>)
 8004a82:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	9305      	str	r3, [sp, #20]
 8004a88:	4604      	mov	r4, r0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4688      	mov	r8, r1
 8004a8e:	f7fb fbbf 	bl	8000210 <strlen>
 8004a92:	f04f 0a00 	mov.w	sl, #0
 8004a96:	4605      	mov	r5, r0
 8004a98:	f04f 0b00 	mov.w	fp, #0
 8004a9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	2a2b      	cmp	r2, #43	; 0x2b
 8004aa6:	d04e      	beq.n	8004b46 <_strtod_l+0xd6>
 8004aa8:	d83b      	bhi.n	8004b22 <_strtod_l+0xb2>
 8004aaa:	2a0d      	cmp	r2, #13
 8004aac:	d834      	bhi.n	8004b18 <_strtod_l+0xa8>
 8004aae:	2a08      	cmp	r2, #8
 8004ab0:	d834      	bhi.n	8004b1c <_strtod_l+0xac>
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	d03e      	beq.n	8004b34 <_strtod_l+0xc4>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8004aba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004abc:	7833      	ldrb	r3, [r6, #0]
 8004abe:	2b30      	cmp	r3, #48	; 0x30
 8004ac0:	f040 80b0 	bne.w	8004c24 <_strtod_l+0x1b4>
 8004ac4:	7873      	ldrb	r3, [r6, #1]
 8004ac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004aca:	2b58      	cmp	r3, #88	; 0x58
 8004acc:	d168      	bne.n	8004ba0 <_strtod_l+0x130>
 8004ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	ab18      	add	r3, sp, #96	; 0x60
 8004ad4:	9702      	str	r7, [sp, #8]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4a8d      	ldr	r2, [pc, #564]	; (8004d10 <_strtod_l+0x2a0>)
 8004ada:	ab19      	add	r3, sp, #100	; 0x64
 8004adc:	a917      	add	r1, sp, #92	; 0x5c
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f001 ff1e 	bl	8006920 <__gethex>
 8004ae4:	f010 0707 	ands.w	r7, r0, #7
 8004ae8:	4605      	mov	r5, r0
 8004aea:	d005      	beq.n	8004af8 <_strtod_l+0x88>
 8004aec:	2f06      	cmp	r7, #6
 8004aee:	d12c      	bne.n	8004b4a <_strtod_l+0xda>
 8004af0:	3601      	adds	r6, #1
 8004af2:	2300      	movs	r3, #0
 8004af4:	9617      	str	r6, [sp, #92]	; 0x5c
 8004af6:	930a      	str	r3, [sp, #40]	; 0x28
 8004af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 8590 	bne.w	8005620 <_strtod_l+0xbb0>
 8004b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b02:	b1eb      	cbz	r3, 8004b40 <_strtod_l+0xd0>
 8004b04:	4652      	mov	r2, sl
 8004b06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b0a:	ec43 2b10 	vmov	d0, r2, r3
 8004b0e:	b01d      	add	sp, #116	; 0x74
 8004b10:	ecbd 8b02 	vpop	{d8}
 8004b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b18:	2a20      	cmp	r2, #32
 8004b1a:	d1cc      	bne.n	8004ab6 <_strtod_l+0x46>
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b20:	e7be      	b.n	8004aa0 <_strtod_l+0x30>
 8004b22:	2a2d      	cmp	r2, #45	; 0x2d
 8004b24:	d1c7      	bne.n	8004ab6 <_strtod_l+0x46>
 8004b26:	2201      	movs	r2, #1
 8004b28:	920a      	str	r2, [sp, #40]	; 0x28
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1c2      	bne.n	8004aba <_strtod_l+0x4a>
 8004b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 856e 	bne.w	800561c <_strtod_l+0xbac>
 8004b40:	4652      	mov	r2, sl
 8004b42:	465b      	mov	r3, fp
 8004b44:	e7e1      	b.n	8004b0a <_strtod_l+0x9a>
 8004b46:	2200      	movs	r2, #0
 8004b48:	e7ee      	b.n	8004b28 <_strtod_l+0xb8>
 8004b4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004b4c:	b13a      	cbz	r2, 8004b5e <_strtod_l+0xee>
 8004b4e:	2135      	movs	r1, #53	; 0x35
 8004b50:	a81a      	add	r0, sp, #104	; 0x68
 8004b52:	f002 fefe 	bl	8007952 <__copybits>
 8004b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f002 fabd 	bl	80070d8 <_Bfree>
 8004b5e:	3f01      	subs	r7, #1
 8004b60:	2f04      	cmp	r7, #4
 8004b62:	d806      	bhi.n	8004b72 <_strtod_l+0x102>
 8004b64:	e8df f007 	tbb	[pc, r7]
 8004b68:	1714030a 	.word	0x1714030a
 8004b6c:	0a          	.byte	0x0a
 8004b6d:	00          	.byte	0x00
 8004b6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004b72:	0728      	lsls	r0, r5, #28
 8004b74:	d5c0      	bpl.n	8004af8 <_strtod_l+0x88>
 8004b76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004b7a:	e7bd      	b.n	8004af8 <_strtod_l+0x88>
 8004b7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004b80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004b82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004b8e:	e7f0      	b.n	8004b72 <_strtod_l+0x102>
 8004b90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004d14 <_strtod_l+0x2a4>
 8004b94:	e7ed      	b.n	8004b72 <_strtod_l+0x102>
 8004b96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004b9a:	f04f 3aff 	mov.w	sl, #4294967295
 8004b9e:	e7e8      	b.n	8004b72 <_strtod_l+0x102>
 8004ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b30      	cmp	r3, #48	; 0x30
 8004baa:	d0f9      	beq.n	8004ba0 <_strtod_l+0x130>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0a3      	beq.n	8004af8 <_strtod_l+0x88>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f04f 0900 	mov.w	r9, #0
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bba:	9308      	str	r3, [sp, #32]
 8004bbc:	f8cd 901c 	str.w	r9, [sp, #28]
 8004bc0:	464f      	mov	r7, r9
 8004bc2:	220a      	movs	r2, #10
 8004bc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004bc6:	7806      	ldrb	r6, [r0, #0]
 8004bc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004bcc:	b2d9      	uxtb	r1, r3
 8004bce:	2909      	cmp	r1, #9
 8004bd0:	d92a      	bls.n	8004c28 <_strtod_l+0x1b8>
 8004bd2:	9905      	ldr	r1, [sp, #20]
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	f003 fef6 	bl	80089c6 <strncmp>
 8004bda:	b398      	cbz	r0, 8004c44 <_strtod_l+0x1d4>
 8004bdc:	2000      	movs	r0, #0
 8004bde:	4632      	mov	r2, r6
 8004be0:	463d      	mov	r5, r7
 8004be2:	9005      	str	r0, [sp, #20]
 8004be4:	4603      	mov	r3, r0
 8004be6:	2a65      	cmp	r2, #101	; 0x65
 8004be8:	d001      	beq.n	8004bee <_strtod_l+0x17e>
 8004bea:	2a45      	cmp	r2, #69	; 0x45
 8004bec:	d118      	bne.n	8004c20 <_strtod_l+0x1b0>
 8004bee:	b91d      	cbnz	r5, 8004bf8 <_strtod_l+0x188>
 8004bf0:	9a04      	ldr	r2, [sp, #16]
 8004bf2:	4302      	orrs	r2, r0
 8004bf4:	d09e      	beq.n	8004b34 <_strtod_l+0xc4>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004bfc:	f108 0201 	add.w	r2, r8, #1
 8004c00:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004c06:	2a2b      	cmp	r2, #43	; 0x2b
 8004c08:	d075      	beq.n	8004cf6 <_strtod_l+0x286>
 8004c0a:	2a2d      	cmp	r2, #45	; 0x2d
 8004c0c:	d07b      	beq.n	8004d06 <_strtod_l+0x296>
 8004c0e:	f04f 0c00 	mov.w	ip, #0
 8004c12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004c16:	2909      	cmp	r1, #9
 8004c18:	f240 8082 	bls.w	8004d20 <_strtod_l+0x2b0>
 8004c1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004c20:	2600      	movs	r6, #0
 8004c22:	e09d      	b.n	8004d60 <_strtod_l+0x2f0>
 8004c24:	2300      	movs	r3, #0
 8004c26:	e7c4      	b.n	8004bb2 <_strtod_l+0x142>
 8004c28:	2f08      	cmp	r7, #8
 8004c2a:	bfd8      	it	le
 8004c2c:	9907      	ldrle	r1, [sp, #28]
 8004c2e:	f100 0001 	add.w	r0, r0, #1
 8004c32:	bfda      	itte	le
 8004c34:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c38:	9307      	strle	r3, [sp, #28]
 8004c3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004c3e:	3701      	adds	r7, #1
 8004c40:	9017      	str	r0, [sp, #92]	; 0x5c
 8004c42:	e7bf      	b.n	8004bc4 <_strtod_l+0x154>
 8004c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c46:	195a      	adds	r2, r3, r5
 8004c48:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c4a:	5d5a      	ldrb	r2, [r3, r5]
 8004c4c:	2f00      	cmp	r7, #0
 8004c4e:	d037      	beq.n	8004cc0 <_strtod_l+0x250>
 8004c50:	9005      	str	r0, [sp, #20]
 8004c52:	463d      	mov	r5, r7
 8004c54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	d912      	bls.n	8004c82 <_strtod_l+0x212>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e7c2      	b.n	8004be6 <_strtod_l+0x176>
 8004c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c66:	785a      	ldrb	r2, [r3, #1]
 8004c68:	3001      	adds	r0, #1
 8004c6a:	2a30      	cmp	r2, #48	; 0x30
 8004c6c:	d0f8      	beq.n	8004c60 <_strtod_l+0x1f0>
 8004c6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	f200 84d9 	bhi.w	800562a <_strtod_l+0xbba>
 8004c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c7a:	9005      	str	r0, [sp, #20]
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	9308      	str	r3, [sp, #32]
 8004c80:	4605      	mov	r5, r0
 8004c82:	3a30      	subs	r2, #48	; 0x30
 8004c84:	f100 0301 	add.w	r3, r0, #1
 8004c88:	d014      	beq.n	8004cb4 <_strtod_l+0x244>
 8004c8a:	9905      	ldr	r1, [sp, #20]
 8004c8c:	4419      	add	r1, r3
 8004c8e:	9105      	str	r1, [sp, #20]
 8004c90:	462b      	mov	r3, r5
 8004c92:	eb00 0e05 	add.w	lr, r0, r5
 8004c96:	210a      	movs	r1, #10
 8004c98:	4573      	cmp	r3, lr
 8004c9a:	d113      	bne.n	8004cc4 <_strtod_l+0x254>
 8004c9c:	182b      	adds	r3, r5, r0
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	f105 0501 	add.w	r5, r5, #1
 8004ca4:	4405      	add	r5, r0
 8004ca6:	dc1c      	bgt.n	8004ce2 <_strtod_l+0x272>
 8004ca8:	9907      	ldr	r1, [sp, #28]
 8004caa:	230a      	movs	r3, #10
 8004cac:	fb03 2301 	mla	r3, r3, r1, r2
 8004cb0:	9307      	str	r3, [sp, #28]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cb6:	1c51      	adds	r1, r2, #1
 8004cb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8004cba:	7852      	ldrb	r2, [r2, #1]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	e7c9      	b.n	8004c54 <_strtod_l+0x1e4>
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	e7d2      	b.n	8004c6a <_strtod_l+0x1fa>
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	dc04      	bgt.n	8004cd2 <_strtod_l+0x262>
 8004cc8:	9e07      	ldr	r6, [sp, #28]
 8004cca:	434e      	muls	r6, r1
 8004ccc:	9607      	str	r6, [sp, #28]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	e7e2      	b.n	8004c98 <_strtod_l+0x228>
 8004cd2:	f103 0c01 	add.w	ip, r3, #1
 8004cd6:	f1bc 0f10 	cmp.w	ip, #16
 8004cda:	bfd8      	it	le
 8004cdc:	fb01 f909 	mulle.w	r9, r1, r9
 8004ce0:	e7f5      	b.n	8004cce <_strtod_l+0x25e>
 8004ce2:	2d10      	cmp	r5, #16
 8004ce4:	bfdc      	itt	le
 8004ce6:	230a      	movle	r3, #10
 8004ce8:	fb03 2909 	mlale	r9, r3, r9, r2
 8004cec:	e7e1      	b.n	8004cb2 <_strtod_l+0x242>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e77c      	b.n	8004bf0 <_strtod_l+0x180>
 8004cf6:	f04f 0c00 	mov.w	ip, #0
 8004cfa:	f108 0202 	add.w	r2, r8, #2
 8004cfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004d04:	e785      	b.n	8004c12 <_strtod_l+0x1a2>
 8004d06:	f04f 0c01 	mov.w	ip, #1
 8004d0a:	e7f6      	b.n	8004cfa <_strtod_l+0x28a>
 8004d0c:	0800940c 	.word	0x0800940c
 8004d10:	08009160 	.word	0x08009160
 8004d14:	7ff00000 	.word	0x7ff00000
 8004d18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d1a:	1c51      	adds	r1, r2, #1
 8004d1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8004d1e:	7852      	ldrb	r2, [r2, #1]
 8004d20:	2a30      	cmp	r2, #48	; 0x30
 8004d22:	d0f9      	beq.n	8004d18 <_strtod_l+0x2a8>
 8004d24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004d28:	2908      	cmp	r1, #8
 8004d2a:	f63f af79 	bhi.w	8004c20 <_strtod_l+0x1b0>
 8004d2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004d32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d34:	9206      	str	r2, [sp, #24]
 8004d36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d38:	1c51      	adds	r1, r2, #1
 8004d3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8004d3c:	7852      	ldrb	r2, [r2, #1]
 8004d3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004d42:	2e09      	cmp	r6, #9
 8004d44:	d937      	bls.n	8004db6 <_strtod_l+0x346>
 8004d46:	9e06      	ldr	r6, [sp, #24]
 8004d48:	1b89      	subs	r1, r1, r6
 8004d4a:	2908      	cmp	r1, #8
 8004d4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004d50:	dc02      	bgt.n	8004d58 <_strtod_l+0x2e8>
 8004d52:	4576      	cmp	r6, lr
 8004d54:	bfa8      	it	ge
 8004d56:	4676      	movge	r6, lr
 8004d58:	f1bc 0f00 	cmp.w	ip, #0
 8004d5c:	d000      	beq.n	8004d60 <_strtod_l+0x2f0>
 8004d5e:	4276      	negs	r6, r6
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	d14d      	bne.n	8004e00 <_strtod_l+0x390>
 8004d64:	9904      	ldr	r1, [sp, #16]
 8004d66:	4301      	orrs	r1, r0
 8004d68:	f47f aec6 	bne.w	8004af8 <_strtod_l+0x88>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f aee1 	bne.w	8004b34 <_strtod_l+0xc4>
 8004d72:	2a69      	cmp	r2, #105	; 0x69
 8004d74:	d027      	beq.n	8004dc6 <_strtod_l+0x356>
 8004d76:	dc24      	bgt.n	8004dc2 <_strtod_l+0x352>
 8004d78:	2a49      	cmp	r2, #73	; 0x49
 8004d7a:	d024      	beq.n	8004dc6 <_strtod_l+0x356>
 8004d7c:	2a4e      	cmp	r2, #78	; 0x4e
 8004d7e:	f47f aed9 	bne.w	8004b34 <_strtod_l+0xc4>
 8004d82:	499f      	ldr	r1, [pc, #636]	; (8005000 <_strtod_l+0x590>)
 8004d84:	a817      	add	r0, sp, #92	; 0x5c
 8004d86:	f002 f823 	bl	8006dd0 <__match>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	f43f aed2 	beq.w	8004b34 <_strtod_l+0xc4>
 8004d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b28      	cmp	r3, #40	; 0x28
 8004d96:	d12d      	bne.n	8004df4 <_strtod_l+0x384>
 8004d98:	499a      	ldr	r1, [pc, #616]	; (8005004 <_strtod_l+0x594>)
 8004d9a:	aa1a      	add	r2, sp, #104	; 0x68
 8004d9c:	a817      	add	r0, sp, #92	; 0x5c
 8004d9e:	f002 f82b 	bl	8006df8 <__hexnan>
 8004da2:	2805      	cmp	r0, #5
 8004da4:	d126      	bne.n	8004df4 <_strtod_l+0x384>
 8004da6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004da8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004dac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004db0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004db4:	e6a0      	b.n	8004af8 <_strtod_l+0x88>
 8004db6:	210a      	movs	r1, #10
 8004db8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004dbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004dc0:	e7b9      	b.n	8004d36 <_strtod_l+0x2c6>
 8004dc2:	2a6e      	cmp	r2, #110	; 0x6e
 8004dc4:	e7db      	b.n	8004d7e <_strtod_l+0x30e>
 8004dc6:	4990      	ldr	r1, [pc, #576]	; (8005008 <_strtod_l+0x598>)
 8004dc8:	a817      	add	r0, sp, #92	; 0x5c
 8004dca:	f002 f801 	bl	8006dd0 <__match>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	f43f aeb0 	beq.w	8004b34 <_strtod_l+0xc4>
 8004dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dd6:	498d      	ldr	r1, [pc, #564]	; (800500c <_strtod_l+0x59c>)
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	a817      	add	r0, sp, #92	; 0x5c
 8004ddc:	9317      	str	r3, [sp, #92]	; 0x5c
 8004dde:	f001 fff7 	bl	8006dd0 <__match>
 8004de2:	b910      	cbnz	r0, 8004dea <_strtod_l+0x37a>
 8004de4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004de6:	3301      	adds	r3, #1
 8004de8:	9317      	str	r3, [sp, #92]	; 0x5c
 8004dea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800501c <_strtod_l+0x5ac>
 8004dee:	f04f 0a00 	mov.w	sl, #0
 8004df2:	e681      	b.n	8004af8 <_strtod_l+0x88>
 8004df4:	4886      	ldr	r0, [pc, #536]	; (8005010 <_strtod_l+0x5a0>)
 8004df6:	f003 fd53 	bl	80088a0 <nan>
 8004dfa:	ec5b ab10 	vmov	sl, fp, d0
 8004dfe:	e67b      	b.n	8004af8 <_strtod_l+0x88>
 8004e00:	9b05      	ldr	r3, [sp, #20]
 8004e02:	9807      	ldr	r0, [sp, #28]
 8004e04:	1af3      	subs	r3, r6, r3
 8004e06:	2f00      	cmp	r7, #0
 8004e08:	bf08      	it	eq
 8004e0a:	462f      	moveq	r7, r5
 8004e0c:	2d10      	cmp	r5, #16
 8004e0e:	9306      	str	r3, [sp, #24]
 8004e10:	46a8      	mov	r8, r5
 8004e12:	bfa8      	it	ge
 8004e14:	f04f 0810 	movge.w	r8, #16
 8004e18:	f7fb fb94 	bl	8000544 <__aeabi_ui2d>
 8004e1c:	2d09      	cmp	r5, #9
 8004e1e:	4682      	mov	sl, r0
 8004e20:	468b      	mov	fp, r1
 8004e22:	dd13      	ble.n	8004e4c <_strtod_l+0x3dc>
 8004e24:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <_strtod_l+0x5a4>)
 8004e26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e2e:	f7fb fc03 	bl	8000638 <__aeabi_dmul>
 8004e32:	4682      	mov	sl, r0
 8004e34:	4648      	mov	r0, r9
 8004e36:	468b      	mov	fp, r1
 8004e38:	f7fb fb84 	bl	8000544 <__aeabi_ui2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4650      	mov	r0, sl
 8004e42:	4659      	mov	r1, fp
 8004e44:	f7fb fa42 	bl	80002cc <__adddf3>
 8004e48:	4682      	mov	sl, r0
 8004e4a:	468b      	mov	fp, r1
 8004e4c:	2d0f      	cmp	r5, #15
 8004e4e:	dc38      	bgt.n	8004ec2 <_strtod_l+0x452>
 8004e50:	9b06      	ldr	r3, [sp, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f43f ae50 	beq.w	8004af8 <_strtod_l+0x88>
 8004e58:	dd24      	ble.n	8004ea4 <_strtod_l+0x434>
 8004e5a:	2b16      	cmp	r3, #22
 8004e5c:	dc0b      	bgt.n	8004e76 <_strtod_l+0x406>
 8004e5e:	496d      	ldr	r1, [pc, #436]	; (8005014 <_strtod_l+0x5a4>)
 8004e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e68:	4652      	mov	r2, sl
 8004e6a:	465b      	mov	r3, fp
 8004e6c:	f7fb fbe4 	bl	8000638 <__aeabi_dmul>
 8004e70:	4682      	mov	sl, r0
 8004e72:	468b      	mov	fp, r1
 8004e74:	e640      	b.n	8004af8 <_strtod_l+0x88>
 8004e76:	9a06      	ldr	r2, [sp, #24]
 8004e78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	db20      	blt.n	8004ec2 <_strtod_l+0x452>
 8004e80:	4c64      	ldr	r4, [pc, #400]	; (8005014 <_strtod_l+0x5a4>)
 8004e82:	f1c5 050f 	rsb	r5, r5, #15
 8004e86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004e8a:	4652      	mov	r2, sl
 8004e8c:	465b      	mov	r3, fp
 8004e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e92:	f7fb fbd1 	bl	8000638 <__aeabi_dmul>
 8004e96:	9b06      	ldr	r3, [sp, #24]
 8004e98:	1b5d      	subs	r5, r3, r5
 8004e9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004e9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ea2:	e7e3      	b.n	8004e6c <_strtod_l+0x3fc>
 8004ea4:	9b06      	ldr	r3, [sp, #24]
 8004ea6:	3316      	adds	r3, #22
 8004ea8:	db0b      	blt.n	8004ec2 <_strtod_l+0x452>
 8004eaa:	9b05      	ldr	r3, [sp, #20]
 8004eac:	1b9e      	subs	r6, r3, r6
 8004eae:	4b59      	ldr	r3, [pc, #356]	; (8005014 <_strtod_l+0x5a4>)
 8004eb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004eb8:	4650      	mov	r0, sl
 8004eba:	4659      	mov	r1, fp
 8004ebc:	f7fb fce6 	bl	800088c <__aeabi_ddiv>
 8004ec0:	e7d6      	b.n	8004e70 <_strtod_l+0x400>
 8004ec2:	9b06      	ldr	r3, [sp, #24]
 8004ec4:	eba5 0808 	sub.w	r8, r5, r8
 8004ec8:	4498      	add	r8, r3
 8004eca:	f1b8 0f00 	cmp.w	r8, #0
 8004ece:	dd74      	ble.n	8004fba <_strtod_l+0x54a>
 8004ed0:	f018 030f 	ands.w	r3, r8, #15
 8004ed4:	d00a      	beq.n	8004eec <_strtod_l+0x47c>
 8004ed6:	494f      	ldr	r1, [pc, #316]	; (8005014 <_strtod_l+0x5a4>)
 8004ed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004edc:	4652      	mov	r2, sl
 8004ede:	465b      	mov	r3, fp
 8004ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee4:	f7fb fba8 	bl	8000638 <__aeabi_dmul>
 8004ee8:	4682      	mov	sl, r0
 8004eea:	468b      	mov	fp, r1
 8004eec:	f038 080f 	bics.w	r8, r8, #15
 8004ef0:	d04f      	beq.n	8004f92 <_strtod_l+0x522>
 8004ef2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004ef6:	dd22      	ble.n	8004f3e <_strtod_l+0x4ce>
 8004ef8:	2500      	movs	r5, #0
 8004efa:	462e      	mov	r6, r5
 8004efc:	9507      	str	r5, [sp, #28]
 8004efe:	9505      	str	r5, [sp, #20]
 8004f00:	2322      	movs	r3, #34	; 0x22
 8004f02:	f8df b118 	ldr.w	fp, [pc, #280]	; 800501c <_strtod_l+0x5ac>
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	f04f 0a00 	mov.w	sl, #0
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f43f adf2 	beq.w	8004af8 <_strtod_l+0x88>
 8004f14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004f16:	4620      	mov	r0, r4
 8004f18:	f002 f8de 	bl	80070d8 <_Bfree>
 8004f1c:	9905      	ldr	r1, [sp, #20]
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f002 f8da 	bl	80070d8 <_Bfree>
 8004f24:	4631      	mov	r1, r6
 8004f26:	4620      	mov	r0, r4
 8004f28:	f002 f8d6 	bl	80070d8 <_Bfree>
 8004f2c:	9907      	ldr	r1, [sp, #28]
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f002 f8d2 	bl	80070d8 <_Bfree>
 8004f34:	4629      	mov	r1, r5
 8004f36:	4620      	mov	r0, r4
 8004f38:	f002 f8ce 	bl	80070d8 <_Bfree>
 8004f3c:	e5dc      	b.n	8004af8 <_strtod_l+0x88>
 8004f3e:	4b36      	ldr	r3, [pc, #216]	; (8005018 <_strtod_l+0x5a8>)
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	2300      	movs	r3, #0
 8004f44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004f48:	4650      	mov	r0, sl
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	f1b8 0f01 	cmp.w	r8, #1
 8004f52:	dc21      	bgt.n	8004f98 <_strtod_l+0x528>
 8004f54:	b10b      	cbz	r3, 8004f5a <_strtod_l+0x4ea>
 8004f56:	4682      	mov	sl, r0
 8004f58:	468b      	mov	fp, r1
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <_strtod_l+0x5a8>)
 8004f5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004f60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004f64:	4652      	mov	r2, sl
 8004f66:	465b      	mov	r3, fp
 8004f68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004f6c:	f7fb fb64 	bl	8000638 <__aeabi_dmul>
 8004f70:	4b2a      	ldr	r3, [pc, #168]	; (800501c <_strtod_l+0x5ac>)
 8004f72:	460a      	mov	r2, r1
 8004f74:	400b      	ands	r3, r1
 8004f76:	492a      	ldr	r1, [pc, #168]	; (8005020 <_strtod_l+0x5b0>)
 8004f78:	428b      	cmp	r3, r1
 8004f7a:	4682      	mov	sl, r0
 8004f7c:	d8bc      	bhi.n	8004ef8 <_strtod_l+0x488>
 8004f7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f82:	428b      	cmp	r3, r1
 8004f84:	bf86      	itte	hi
 8004f86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005024 <_strtod_l+0x5b4>
 8004f8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8004f8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004f92:	2300      	movs	r3, #0
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	e084      	b.n	80050a2 <_strtod_l+0x632>
 8004f98:	f018 0f01 	tst.w	r8, #1
 8004f9c:	d005      	beq.n	8004faa <_strtod_l+0x53a>
 8004f9e:	9b04      	ldr	r3, [sp, #16]
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f7fb fb48 	bl	8000638 <__aeabi_dmul>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	9a04      	ldr	r2, [sp, #16]
 8004fac:	3208      	adds	r2, #8
 8004fae:	f109 0901 	add.w	r9, r9, #1
 8004fb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004fb6:	9204      	str	r2, [sp, #16]
 8004fb8:	e7c9      	b.n	8004f4e <_strtod_l+0x4de>
 8004fba:	d0ea      	beq.n	8004f92 <_strtod_l+0x522>
 8004fbc:	f1c8 0800 	rsb	r8, r8, #0
 8004fc0:	f018 020f 	ands.w	r2, r8, #15
 8004fc4:	d00a      	beq.n	8004fdc <_strtod_l+0x56c>
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <_strtod_l+0x5a4>)
 8004fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fcc:	4650      	mov	r0, sl
 8004fce:	4659      	mov	r1, fp
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fc5a 	bl	800088c <__aeabi_ddiv>
 8004fd8:	4682      	mov	sl, r0
 8004fda:	468b      	mov	fp, r1
 8004fdc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004fe0:	d0d7      	beq.n	8004f92 <_strtod_l+0x522>
 8004fe2:	f1b8 0f1f 	cmp.w	r8, #31
 8004fe6:	dd1f      	ble.n	8005028 <_strtod_l+0x5b8>
 8004fe8:	2500      	movs	r5, #0
 8004fea:	462e      	mov	r6, r5
 8004fec:	9507      	str	r5, [sp, #28]
 8004fee:	9505      	str	r5, [sp, #20]
 8004ff0:	2322      	movs	r3, #34	; 0x22
 8004ff2:	f04f 0a00 	mov.w	sl, #0
 8004ff6:	f04f 0b00 	mov.w	fp, #0
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	e786      	b.n	8004f0c <_strtod_l+0x49c>
 8004ffe:	bf00      	nop
 8005000:	08009135 	.word	0x08009135
 8005004:	08009174 	.word	0x08009174
 8005008:	0800912d 	.word	0x0800912d
 800500c:	080092b4 	.word	0x080092b4
 8005010:	080095e3 	.word	0x080095e3
 8005014:	080094a8 	.word	0x080094a8
 8005018:	08009480 	.word	0x08009480
 800501c:	7ff00000 	.word	0x7ff00000
 8005020:	7ca00000 	.word	0x7ca00000
 8005024:	7fefffff 	.word	0x7fefffff
 8005028:	f018 0310 	ands.w	r3, r8, #16
 800502c:	bf18      	it	ne
 800502e:	236a      	movne	r3, #106	; 0x6a
 8005030:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80053e0 <_strtod_l+0x970>
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	4650      	mov	r0, sl
 8005038:	4659      	mov	r1, fp
 800503a:	2300      	movs	r3, #0
 800503c:	f018 0f01 	tst.w	r8, #1
 8005040:	d004      	beq.n	800504c <_strtod_l+0x5dc>
 8005042:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005046:	f7fb faf7 	bl	8000638 <__aeabi_dmul>
 800504a:	2301      	movs	r3, #1
 800504c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005050:	f109 0908 	add.w	r9, r9, #8
 8005054:	d1f2      	bne.n	800503c <_strtod_l+0x5cc>
 8005056:	b10b      	cbz	r3, 800505c <_strtod_l+0x5ec>
 8005058:	4682      	mov	sl, r0
 800505a:	468b      	mov	fp, r1
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	b1c3      	cbz	r3, 8005092 <_strtod_l+0x622>
 8005060:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005064:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005068:	2b00      	cmp	r3, #0
 800506a:	4659      	mov	r1, fp
 800506c:	dd11      	ble.n	8005092 <_strtod_l+0x622>
 800506e:	2b1f      	cmp	r3, #31
 8005070:	f340 8124 	ble.w	80052bc <_strtod_l+0x84c>
 8005074:	2b34      	cmp	r3, #52	; 0x34
 8005076:	bfde      	ittt	le
 8005078:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800507c:	f04f 33ff 	movle.w	r3, #4294967295
 8005080:	fa03 f202 	lslle.w	r2, r3, r2
 8005084:	f04f 0a00 	mov.w	sl, #0
 8005088:	bfcc      	ite	gt
 800508a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800508e:	ea02 0b01 	andle.w	fp, r2, r1
 8005092:	2200      	movs	r2, #0
 8005094:	2300      	movs	r3, #0
 8005096:	4650      	mov	r0, sl
 8005098:	4659      	mov	r1, fp
 800509a:	f7fb fd35 	bl	8000b08 <__aeabi_dcmpeq>
 800509e:	2800      	cmp	r0, #0
 80050a0:	d1a2      	bne.n	8004fe8 <_strtod_l+0x578>
 80050a2:	9b07      	ldr	r3, [sp, #28]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	9908      	ldr	r1, [sp, #32]
 80050a8:	462b      	mov	r3, r5
 80050aa:	463a      	mov	r2, r7
 80050ac:	4620      	mov	r0, r4
 80050ae:	f002 f87b 	bl	80071a8 <__s2b>
 80050b2:	9007      	str	r0, [sp, #28]
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f43f af1f 	beq.w	8004ef8 <_strtod_l+0x488>
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	1b9e      	subs	r6, r3, r6
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bfb4      	ite	lt
 80050c4:	4633      	movlt	r3, r6
 80050c6:	2300      	movge	r3, #0
 80050c8:	930c      	str	r3, [sp, #48]	; 0x30
 80050ca:	9b06      	ldr	r3, [sp, #24]
 80050cc:	2500      	movs	r5, #0
 80050ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050d2:	9312      	str	r3, [sp, #72]	; 0x48
 80050d4:	462e      	mov	r6, r5
 80050d6:	9b07      	ldr	r3, [sp, #28]
 80050d8:	4620      	mov	r0, r4
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	f001 ffbc 	bl	8007058 <_Balloc>
 80050e0:	9005      	str	r0, [sp, #20]
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f43f af0c 	beq.w	8004f00 <_strtod_l+0x490>
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	3202      	adds	r2, #2
 80050ee:	f103 010c 	add.w	r1, r3, #12
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	300c      	adds	r0, #12
 80050f6:	f001 ffa1 	bl	800703c <memcpy>
 80050fa:	ec4b ab10 	vmov	d0, sl, fp
 80050fe:	aa1a      	add	r2, sp, #104	; 0x68
 8005100:	a919      	add	r1, sp, #100	; 0x64
 8005102:	4620      	mov	r0, r4
 8005104:	f002 fb96 	bl	8007834 <__d2b>
 8005108:	ec4b ab18 	vmov	d8, sl, fp
 800510c:	9018      	str	r0, [sp, #96]	; 0x60
 800510e:	2800      	cmp	r0, #0
 8005110:	f43f aef6 	beq.w	8004f00 <_strtod_l+0x490>
 8005114:	2101      	movs	r1, #1
 8005116:	4620      	mov	r0, r4
 8005118:	f002 f8e0 	bl	80072dc <__i2b>
 800511c:	4606      	mov	r6, r0
 800511e:	2800      	cmp	r0, #0
 8005120:	f43f aeee 	beq.w	8004f00 <_strtod_l+0x490>
 8005124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005126:	9904      	ldr	r1, [sp, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfab      	itete	ge
 800512c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800512e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005130:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005132:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005136:	bfac      	ite	ge
 8005138:	eb03 0902 	addge.w	r9, r3, r2
 800513c:	1ad7      	sublt	r7, r2, r3
 800513e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005140:	eba3 0801 	sub.w	r8, r3, r1
 8005144:	4490      	add	r8, r2
 8005146:	4ba1      	ldr	r3, [pc, #644]	; (80053cc <_strtod_l+0x95c>)
 8005148:	f108 38ff 	add.w	r8, r8, #4294967295
 800514c:	4598      	cmp	r8, r3
 800514e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005152:	f280 80c7 	bge.w	80052e4 <_strtod_l+0x874>
 8005156:	eba3 0308 	sub.w	r3, r3, r8
 800515a:	2b1f      	cmp	r3, #31
 800515c:	eba2 0203 	sub.w	r2, r2, r3
 8005160:	f04f 0101 	mov.w	r1, #1
 8005164:	f300 80b1 	bgt.w	80052ca <_strtod_l+0x85a>
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	930d      	str	r3, [sp, #52]	; 0x34
 800516e:	2300      	movs	r3, #0
 8005170:	9308      	str	r3, [sp, #32]
 8005172:	eb09 0802 	add.w	r8, r9, r2
 8005176:	9b04      	ldr	r3, [sp, #16]
 8005178:	45c1      	cmp	r9, r8
 800517a:	4417      	add	r7, r2
 800517c:	441f      	add	r7, r3
 800517e:	464b      	mov	r3, r9
 8005180:	bfa8      	it	ge
 8005182:	4643      	movge	r3, r8
 8005184:	42bb      	cmp	r3, r7
 8005186:	bfa8      	it	ge
 8005188:	463b      	movge	r3, r7
 800518a:	2b00      	cmp	r3, #0
 800518c:	bfc2      	ittt	gt
 800518e:	eba8 0803 	subgt.w	r8, r8, r3
 8005192:	1aff      	subgt	r7, r7, r3
 8005194:	eba9 0903 	subgt.w	r9, r9, r3
 8005198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	dd17      	ble.n	80051ce <_strtod_l+0x75e>
 800519e:	4631      	mov	r1, r6
 80051a0:	461a      	mov	r2, r3
 80051a2:	4620      	mov	r0, r4
 80051a4:	f002 f95a 	bl	800745c <__pow5mult>
 80051a8:	4606      	mov	r6, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f43f aea8 	beq.w	8004f00 <_strtod_l+0x490>
 80051b0:	4601      	mov	r1, r0
 80051b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80051b4:	4620      	mov	r0, r4
 80051b6:	f002 f8a7 	bl	8007308 <__multiply>
 80051ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80051bc:	2800      	cmp	r0, #0
 80051be:	f43f ae9f 	beq.w	8004f00 <_strtod_l+0x490>
 80051c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80051c4:	4620      	mov	r0, r4
 80051c6:	f001 ff87 	bl	80070d8 <_Bfree>
 80051ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051cc:	9318      	str	r3, [sp, #96]	; 0x60
 80051ce:	f1b8 0f00 	cmp.w	r8, #0
 80051d2:	f300 808c 	bgt.w	80052ee <_strtod_l+0x87e>
 80051d6:	9b06      	ldr	r3, [sp, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dd08      	ble.n	80051ee <_strtod_l+0x77e>
 80051dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051de:	9905      	ldr	r1, [sp, #20]
 80051e0:	4620      	mov	r0, r4
 80051e2:	f002 f93b 	bl	800745c <__pow5mult>
 80051e6:	9005      	str	r0, [sp, #20]
 80051e8:	2800      	cmp	r0, #0
 80051ea:	f43f ae89 	beq.w	8004f00 <_strtod_l+0x490>
 80051ee:	2f00      	cmp	r7, #0
 80051f0:	dd08      	ble.n	8005204 <_strtod_l+0x794>
 80051f2:	9905      	ldr	r1, [sp, #20]
 80051f4:	463a      	mov	r2, r7
 80051f6:	4620      	mov	r0, r4
 80051f8:	f002 f98a 	bl	8007510 <__lshift>
 80051fc:	9005      	str	r0, [sp, #20]
 80051fe:	2800      	cmp	r0, #0
 8005200:	f43f ae7e 	beq.w	8004f00 <_strtod_l+0x490>
 8005204:	f1b9 0f00 	cmp.w	r9, #0
 8005208:	dd08      	ble.n	800521c <_strtod_l+0x7ac>
 800520a:	4631      	mov	r1, r6
 800520c:	464a      	mov	r2, r9
 800520e:	4620      	mov	r0, r4
 8005210:	f002 f97e 	bl	8007510 <__lshift>
 8005214:	4606      	mov	r6, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	f43f ae72 	beq.w	8004f00 <_strtod_l+0x490>
 800521c:	9a05      	ldr	r2, [sp, #20]
 800521e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005220:	4620      	mov	r0, r4
 8005222:	f002 fa01 	bl	8007628 <__mdiff>
 8005226:	4605      	mov	r5, r0
 8005228:	2800      	cmp	r0, #0
 800522a:	f43f ae69 	beq.w	8004f00 <_strtod_l+0x490>
 800522e:	68c3      	ldr	r3, [r0, #12]
 8005230:	930b      	str	r3, [sp, #44]	; 0x2c
 8005232:	2300      	movs	r3, #0
 8005234:	60c3      	str	r3, [r0, #12]
 8005236:	4631      	mov	r1, r6
 8005238:	f002 f9da 	bl	80075f0 <__mcmp>
 800523c:	2800      	cmp	r0, #0
 800523e:	da60      	bge.n	8005302 <_strtod_l+0x892>
 8005240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005242:	ea53 030a 	orrs.w	r3, r3, sl
 8005246:	f040 8082 	bne.w	800534e <_strtod_l+0x8de>
 800524a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800524e:	2b00      	cmp	r3, #0
 8005250:	d17d      	bne.n	800534e <_strtod_l+0x8de>
 8005252:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005256:	0d1b      	lsrs	r3, r3, #20
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800525e:	d976      	bls.n	800534e <_strtod_l+0x8de>
 8005260:	696b      	ldr	r3, [r5, #20]
 8005262:	b913      	cbnz	r3, 800526a <_strtod_l+0x7fa>
 8005264:	692b      	ldr	r3, [r5, #16]
 8005266:	2b01      	cmp	r3, #1
 8005268:	dd71      	ble.n	800534e <_strtod_l+0x8de>
 800526a:	4629      	mov	r1, r5
 800526c:	2201      	movs	r2, #1
 800526e:	4620      	mov	r0, r4
 8005270:	f002 f94e 	bl	8007510 <__lshift>
 8005274:	4631      	mov	r1, r6
 8005276:	4605      	mov	r5, r0
 8005278:	f002 f9ba 	bl	80075f0 <__mcmp>
 800527c:	2800      	cmp	r0, #0
 800527e:	dd66      	ble.n	800534e <_strtod_l+0x8de>
 8005280:	9904      	ldr	r1, [sp, #16]
 8005282:	4a53      	ldr	r2, [pc, #332]	; (80053d0 <_strtod_l+0x960>)
 8005284:	465b      	mov	r3, fp
 8005286:	2900      	cmp	r1, #0
 8005288:	f000 8081 	beq.w	800538e <_strtod_l+0x91e>
 800528c:	ea02 010b 	and.w	r1, r2, fp
 8005290:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005294:	dc7b      	bgt.n	800538e <_strtod_l+0x91e>
 8005296:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800529a:	f77f aea9 	ble.w	8004ff0 <_strtod_l+0x580>
 800529e:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <_strtod_l+0x964>)
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	2200      	movs	r2, #0
 80052a6:	f7fb f9c7 	bl	8000638 <__aeabi_dmul>
 80052aa:	460b      	mov	r3, r1
 80052ac:	4303      	orrs	r3, r0
 80052ae:	bf08      	it	eq
 80052b0:	2322      	moveq	r3, #34	; 0x22
 80052b2:	4682      	mov	sl, r0
 80052b4:	468b      	mov	fp, r1
 80052b6:	bf08      	it	eq
 80052b8:	6023      	streq	r3, [r4, #0]
 80052ba:	e62b      	b.n	8004f14 <_strtod_l+0x4a4>
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	ea03 0a0a 	and.w	sl, r3, sl
 80052c8:	e6e3      	b.n	8005092 <_strtod_l+0x622>
 80052ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80052ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80052d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80052d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80052da:	fa01 f308 	lsl.w	r3, r1, r8
 80052de:	9308      	str	r3, [sp, #32]
 80052e0:	910d      	str	r1, [sp, #52]	; 0x34
 80052e2:	e746      	b.n	8005172 <_strtod_l+0x702>
 80052e4:	2300      	movs	r3, #0
 80052e6:	9308      	str	r3, [sp, #32]
 80052e8:	2301      	movs	r3, #1
 80052ea:	930d      	str	r3, [sp, #52]	; 0x34
 80052ec:	e741      	b.n	8005172 <_strtod_l+0x702>
 80052ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80052f0:	4642      	mov	r2, r8
 80052f2:	4620      	mov	r0, r4
 80052f4:	f002 f90c 	bl	8007510 <__lshift>
 80052f8:	9018      	str	r0, [sp, #96]	; 0x60
 80052fa:	2800      	cmp	r0, #0
 80052fc:	f47f af6b 	bne.w	80051d6 <_strtod_l+0x766>
 8005300:	e5fe      	b.n	8004f00 <_strtod_l+0x490>
 8005302:	465f      	mov	r7, fp
 8005304:	d16e      	bne.n	80053e4 <_strtod_l+0x974>
 8005306:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800530c:	b342      	cbz	r2, 8005360 <_strtod_l+0x8f0>
 800530e:	4a32      	ldr	r2, [pc, #200]	; (80053d8 <_strtod_l+0x968>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d128      	bne.n	8005366 <_strtod_l+0x8f6>
 8005314:	9b04      	ldr	r3, [sp, #16]
 8005316:	4651      	mov	r1, sl
 8005318:	b1eb      	cbz	r3, 8005356 <_strtod_l+0x8e6>
 800531a:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <_strtod_l+0x960>)
 800531c:	403b      	ands	r3, r7
 800531e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	d819      	bhi.n	800535c <_strtod_l+0x8ec>
 8005328:	0d1b      	lsrs	r3, r3, #20
 800532a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	4299      	cmp	r1, r3
 8005334:	d117      	bne.n	8005366 <_strtod_l+0x8f6>
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <_strtod_l+0x96c>)
 8005338:	429f      	cmp	r7, r3
 800533a:	d102      	bne.n	8005342 <_strtod_l+0x8d2>
 800533c:	3101      	adds	r1, #1
 800533e:	f43f addf 	beq.w	8004f00 <_strtod_l+0x490>
 8005342:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <_strtod_l+0x960>)
 8005344:	403b      	ands	r3, r7
 8005346:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800534a:	f04f 0a00 	mov.w	sl, #0
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1a4      	bne.n	800529e <_strtod_l+0x82e>
 8005354:	e5de      	b.n	8004f14 <_strtod_l+0x4a4>
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	e7ea      	b.n	8005332 <_strtod_l+0x8c2>
 800535c:	4613      	mov	r3, r2
 800535e:	e7e8      	b.n	8005332 <_strtod_l+0x8c2>
 8005360:	ea53 030a 	orrs.w	r3, r3, sl
 8005364:	d08c      	beq.n	8005280 <_strtod_l+0x810>
 8005366:	9b08      	ldr	r3, [sp, #32]
 8005368:	b1db      	cbz	r3, 80053a2 <_strtod_l+0x932>
 800536a:	423b      	tst	r3, r7
 800536c:	d0ef      	beq.n	800534e <_strtod_l+0x8de>
 800536e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005370:	9a04      	ldr	r2, [sp, #16]
 8005372:	4650      	mov	r0, sl
 8005374:	4659      	mov	r1, fp
 8005376:	b1c3      	cbz	r3, 80053aa <_strtod_l+0x93a>
 8005378:	f7ff fb5c 	bl	8004a34 <sulp>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	ec51 0b18 	vmov	r0, r1, d8
 8005384:	f7fa ffa2 	bl	80002cc <__adddf3>
 8005388:	4682      	mov	sl, r0
 800538a:	468b      	mov	fp, r1
 800538c:	e7df      	b.n	800534e <_strtod_l+0x8de>
 800538e:	4013      	ands	r3, r2
 8005390:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005394:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005398:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800539c:	f04f 3aff 	mov.w	sl, #4294967295
 80053a0:	e7d5      	b.n	800534e <_strtod_l+0x8de>
 80053a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a4:	ea13 0f0a 	tst.w	r3, sl
 80053a8:	e7e0      	b.n	800536c <_strtod_l+0x8fc>
 80053aa:	f7ff fb43 	bl	8004a34 <sulp>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	ec51 0b18 	vmov	r0, r1, d8
 80053b6:	f7fa ff87 	bl	80002c8 <__aeabi_dsub>
 80053ba:	2200      	movs	r2, #0
 80053bc:	2300      	movs	r3, #0
 80053be:	4682      	mov	sl, r0
 80053c0:	468b      	mov	fp, r1
 80053c2:	f7fb fba1 	bl	8000b08 <__aeabi_dcmpeq>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d0c1      	beq.n	800534e <_strtod_l+0x8de>
 80053ca:	e611      	b.n	8004ff0 <_strtod_l+0x580>
 80053cc:	fffffc02 	.word	0xfffffc02
 80053d0:	7ff00000 	.word	0x7ff00000
 80053d4:	39500000 	.word	0x39500000
 80053d8:	000fffff 	.word	0x000fffff
 80053dc:	7fefffff 	.word	0x7fefffff
 80053e0:	08009188 	.word	0x08009188
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	f002 fa80 	bl	80078ec <__ratio>
 80053ec:	ec59 8b10 	vmov	r8, r9, d0
 80053f0:	ee10 0a10 	vmov	r0, s0
 80053f4:	2200      	movs	r2, #0
 80053f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fb fb98 	bl	8000b30 <__aeabi_dcmple>
 8005400:	2800      	cmp	r0, #0
 8005402:	d07a      	beq.n	80054fa <_strtod_l+0xa8a>
 8005404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d04a      	beq.n	80054a0 <_strtod_l+0xa30>
 800540a:	4b95      	ldr	r3, [pc, #596]	; (8005660 <_strtod_l+0xbf0>)
 800540c:	2200      	movs	r2, #0
 800540e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005412:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005660 <_strtod_l+0xbf0>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	4b92      	ldr	r3, [pc, #584]	; (8005664 <_strtod_l+0xbf4>)
 800541c:	403b      	ands	r3, r7
 800541e:	930d      	str	r3, [sp, #52]	; 0x34
 8005420:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005422:	4b91      	ldr	r3, [pc, #580]	; (8005668 <_strtod_l+0xbf8>)
 8005424:	429a      	cmp	r2, r3
 8005426:	f040 80b0 	bne.w	800558a <_strtod_l+0xb1a>
 800542a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800542e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005432:	ec4b ab10 	vmov	d0, sl, fp
 8005436:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800543a:	f002 f97f 	bl	800773c <__ulp>
 800543e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005442:	ec53 2b10 	vmov	r2, r3, d0
 8005446:	f7fb f8f7 	bl	8000638 <__aeabi_dmul>
 800544a:	4652      	mov	r2, sl
 800544c:	465b      	mov	r3, fp
 800544e:	f7fa ff3d 	bl	80002cc <__adddf3>
 8005452:	460b      	mov	r3, r1
 8005454:	4983      	ldr	r1, [pc, #524]	; (8005664 <_strtod_l+0xbf4>)
 8005456:	4a85      	ldr	r2, [pc, #532]	; (800566c <_strtod_l+0xbfc>)
 8005458:	4019      	ands	r1, r3
 800545a:	4291      	cmp	r1, r2
 800545c:	4682      	mov	sl, r0
 800545e:	d960      	bls.n	8005522 <_strtod_l+0xab2>
 8005460:	ee18 3a90 	vmov	r3, s17
 8005464:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005468:	4293      	cmp	r3, r2
 800546a:	d104      	bne.n	8005476 <_strtod_l+0xa06>
 800546c:	ee18 3a10 	vmov	r3, s16
 8005470:	3301      	adds	r3, #1
 8005472:	f43f ad45 	beq.w	8004f00 <_strtod_l+0x490>
 8005476:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005678 <_strtod_l+0xc08>
 800547a:	f04f 3aff 	mov.w	sl, #4294967295
 800547e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005480:	4620      	mov	r0, r4
 8005482:	f001 fe29 	bl	80070d8 <_Bfree>
 8005486:	9905      	ldr	r1, [sp, #20]
 8005488:	4620      	mov	r0, r4
 800548a:	f001 fe25 	bl	80070d8 <_Bfree>
 800548e:	4631      	mov	r1, r6
 8005490:	4620      	mov	r0, r4
 8005492:	f001 fe21 	bl	80070d8 <_Bfree>
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f001 fe1d 	bl	80070d8 <_Bfree>
 800549e:	e61a      	b.n	80050d6 <_strtod_l+0x666>
 80054a0:	f1ba 0f00 	cmp.w	sl, #0
 80054a4:	d11b      	bne.n	80054de <_strtod_l+0xa6e>
 80054a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054aa:	b9f3      	cbnz	r3, 80054ea <_strtod_l+0xa7a>
 80054ac:	4b6c      	ldr	r3, [pc, #432]	; (8005660 <_strtod_l+0xbf0>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb fb32 	bl	8000b1c <__aeabi_dcmplt>
 80054b8:	b9d0      	cbnz	r0, 80054f0 <_strtod_l+0xa80>
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	4b6c      	ldr	r3, [pc, #432]	; (8005670 <_strtod_l+0xc00>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	f7fb f8b9 	bl	8000638 <__aeabi_dmul>
 80054c6:	4680      	mov	r8, r0
 80054c8:	4689      	mov	r9, r1
 80054ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80054ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80054d2:	9315      	str	r3, [sp, #84]	; 0x54
 80054d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80054d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054dc:	e79d      	b.n	800541a <_strtod_l+0x9aa>
 80054de:	f1ba 0f01 	cmp.w	sl, #1
 80054e2:	d102      	bne.n	80054ea <_strtod_l+0xa7a>
 80054e4:	2f00      	cmp	r7, #0
 80054e6:	f43f ad83 	beq.w	8004ff0 <_strtod_l+0x580>
 80054ea:	4b62      	ldr	r3, [pc, #392]	; (8005674 <_strtod_l+0xc04>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	e78e      	b.n	800540e <_strtod_l+0x99e>
 80054f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005670 <_strtod_l+0xc00>
 80054f4:	f04f 0800 	mov.w	r8, #0
 80054f8:	e7e7      	b.n	80054ca <_strtod_l+0xa5a>
 80054fa:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <_strtod_l+0xc00>)
 80054fc:	4640      	mov	r0, r8
 80054fe:	4649      	mov	r1, r9
 8005500:	2200      	movs	r2, #0
 8005502:	f7fb f899 	bl	8000638 <__aeabi_dmul>
 8005506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005508:	4680      	mov	r8, r0
 800550a:	4689      	mov	r9, r1
 800550c:	b933      	cbnz	r3, 800551c <_strtod_l+0xaac>
 800550e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005512:	900e      	str	r0, [sp, #56]	; 0x38
 8005514:	930f      	str	r3, [sp, #60]	; 0x3c
 8005516:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800551a:	e7dd      	b.n	80054d8 <_strtod_l+0xa68>
 800551c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005520:	e7f9      	b.n	8005516 <_strtod_l+0xaa6>
 8005522:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005526:	9b04      	ldr	r3, [sp, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1a8      	bne.n	800547e <_strtod_l+0xa0e>
 800552c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005532:	0d1b      	lsrs	r3, r3, #20
 8005534:	051b      	lsls	r3, r3, #20
 8005536:	429a      	cmp	r2, r3
 8005538:	d1a1      	bne.n	800547e <_strtod_l+0xa0e>
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb fbdb 	bl	8000cf8 <__aeabi_d2lz>
 8005542:	f7fb f84b 	bl	80005dc <__aeabi_l2d>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fa febb 	bl	80002c8 <__aeabi_dsub>
 8005552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005558:	ea43 030a 	orr.w	r3, r3, sl
 800555c:	4313      	orrs	r3, r2
 800555e:	4680      	mov	r8, r0
 8005560:	4689      	mov	r9, r1
 8005562:	d055      	beq.n	8005610 <_strtod_l+0xba0>
 8005564:	a336      	add	r3, pc, #216	; (adr r3, 8005640 <_strtod_l+0xbd0>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f7fb fad7 	bl	8000b1c <__aeabi_dcmplt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f47f acd0 	bne.w	8004f14 <_strtod_l+0x4a4>
 8005574:	a334      	add	r3, pc, #208	; (adr r3, 8005648 <_strtod_l+0xbd8>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fb faeb 	bl	8000b58 <__aeabi_dcmpgt>
 8005582:	2800      	cmp	r0, #0
 8005584:	f43f af7b 	beq.w	800547e <_strtod_l+0xa0e>
 8005588:	e4c4      	b.n	8004f14 <_strtod_l+0x4a4>
 800558a:	9b04      	ldr	r3, [sp, #16]
 800558c:	b333      	cbz	r3, 80055dc <_strtod_l+0xb6c>
 800558e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005590:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005594:	d822      	bhi.n	80055dc <_strtod_l+0xb6c>
 8005596:	a32e      	add	r3, pc, #184	; (adr r3, 8005650 <_strtod_l+0xbe0>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	4640      	mov	r0, r8
 800559e:	4649      	mov	r1, r9
 80055a0:	f7fb fac6 	bl	8000b30 <__aeabi_dcmple>
 80055a4:	b1a0      	cbz	r0, 80055d0 <_strtod_l+0xb60>
 80055a6:	4649      	mov	r1, r9
 80055a8:	4640      	mov	r0, r8
 80055aa:	f7fb fb1d 	bl	8000be8 <__aeabi_d2uiz>
 80055ae:	2801      	cmp	r0, #1
 80055b0:	bf38      	it	cc
 80055b2:	2001      	movcc	r0, #1
 80055b4:	f7fa ffc6 	bl	8000544 <__aeabi_ui2d>
 80055b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ba:	4680      	mov	r8, r0
 80055bc:	4689      	mov	r9, r1
 80055be:	bb23      	cbnz	r3, 800560a <_strtod_l+0xb9a>
 80055c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c4:	9010      	str	r0, [sp, #64]	; 0x40
 80055c6:	9311      	str	r3, [sp, #68]	; 0x44
 80055c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	9309      	str	r3, [sp, #36]	; 0x24
 80055dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055e0:	eeb0 0a48 	vmov.f32	s0, s16
 80055e4:	eef0 0a68 	vmov.f32	s1, s17
 80055e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055ec:	f002 f8a6 	bl	800773c <__ulp>
 80055f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055f4:	ec53 2b10 	vmov	r2, r3, d0
 80055f8:	f7fb f81e 	bl	8000638 <__aeabi_dmul>
 80055fc:	ec53 2b18 	vmov	r2, r3, d8
 8005600:	f7fa fe64 	bl	80002cc <__adddf3>
 8005604:	4682      	mov	sl, r0
 8005606:	468b      	mov	fp, r1
 8005608:	e78d      	b.n	8005526 <_strtod_l+0xab6>
 800560a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800560e:	e7db      	b.n	80055c8 <_strtod_l+0xb58>
 8005610:	a311      	add	r3, pc, #68	; (adr r3, 8005658 <_strtod_l+0xbe8>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fb fa81 	bl	8000b1c <__aeabi_dcmplt>
 800561a:	e7b2      	b.n	8005582 <_strtod_l+0xb12>
 800561c:	2300      	movs	r3, #0
 800561e:	930a      	str	r3, [sp, #40]	; 0x28
 8005620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005622:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	f7ff ba6b 	b.w	8004b00 <_strtod_l+0x90>
 800562a:	2a65      	cmp	r2, #101	; 0x65
 800562c:	f43f ab5f 	beq.w	8004cee <_strtod_l+0x27e>
 8005630:	2a45      	cmp	r2, #69	; 0x45
 8005632:	f43f ab5c 	beq.w	8004cee <_strtod_l+0x27e>
 8005636:	2301      	movs	r3, #1
 8005638:	f7ff bb94 	b.w	8004d64 <_strtod_l+0x2f4>
 800563c:	f3af 8000 	nop.w
 8005640:	94a03595 	.word	0x94a03595
 8005644:	3fdfffff 	.word	0x3fdfffff
 8005648:	35afe535 	.word	0x35afe535
 800564c:	3fe00000 	.word	0x3fe00000
 8005650:	ffc00000 	.word	0xffc00000
 8005654:	41dfffff 	.word	0x41dfffff
 8005658:	94a03595 	.word	0x94a03595
 800565c:	3fcfffff 	.word	0x3fcfffff
 8005660:	3ff00000 	.word	0x3ff00000
 8005664:	7ff00000 	.word	0x7ff00000
 8005668:	7fe00000 	.word	0x7fe00000
 800566c:	7c9fffff 	.word	0x7c9fffff
 8005670:	3fe00000 	.word	0x3fe00000
 8005674:	bff00000 	.word	0xbff00000
 8005678:	7fefffff 	.word	0x7fefffff

0800567c <_strtod_r>:
 800567c:	4b01      	ldr	r3, [pc, #4]	; (8005684 <_strtod_r+0x8>)
 800567e:	f7ff b9f7 	b.w	8004a70 <_strtod_l>
 8005682:	bf00      	nop
 8005684:	20000074 	.word	0x20000074

08005688 <_strtol_l.constprop.0>:
 8005688:	2b01      	cmp	r3, #1
 800568a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568e:	d001      	beq.n	8005694 <_strtol_l.constprop.0+0xc>
 8005690:	2b24      	cmp	r3, #36	; 0x24
 8005692:	d906      	bls.n	80056a2 <_strtol_l.constprop.0+0x1a>
 8005694:	f7fe fa06 	bl	8003aa4 <__errno>
 8005698:	2316      	movs	r3, #22
 800569a:	6003      	str	r3, [r0, #0]
 800569c:	2000      	movs	r0, #0
 800569e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005788 <_strtol_l.constprop.0+0x100>
 80056a6:	460d      	mov	r5, r1
 80056a8:	462e      	mov	r6, r5
 80056aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80056b2:	f017 0708 	ands.w	r7, r7, #8
 80056b6:	d1f7      	bne.n	80056a8 <_strtol_l.constprop.0+0x20>
 80056b8:	2c2d      	cmp	r4, #45	; 0x2d
 80056ba:	d132      	bne.n	8005722 <_strtol_l.constprop.0+0x9a>
 80056bc:	782c      	ldrb	r4, [r5, #0]
 80056be:	2701      	movs	r7, #1
 80056c0:	1cb5      	adds	r5, r6, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d05b      	beq.n	800577e <_strtol_l.constprop.0+0xf6>
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d109      	bne.n	80056de <_strtol_l.constprop.0+0x56>
 80056ca:	2c30      	cmp	r4, #48	; 0x30
 80056cc:	d107      	bne.n	80056de <_strtol_l.constprop.0+0x56>
 80056ce:	782c      	ldrb	r4, [r5, #0]
 80056d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056d4:	2c58      	cmp	r4, #88	; 0x58
 80056d6:	d14d      	bne.n	8005774 <_strtol_l.constprop.0+0xec>
 80056d8:	786c      	ldrb	r4, [r5, #1]
 80056da:	2310      	movs	r3, #16
 80056dc:	3502      	adds	r5, #2
 80056de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80056e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80056e6:	f04f 0c00 	mov.w	ip, #0
 80056ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80056ee:	4666      	mov	r6, ip
 80056f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80056f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80056f8:	f1be 0f09 	cmp.w	lr, #9
 80056fc:	d816      	bhi.n	800572c <_strtol_l.constprop.0+0xa4>
 80056fe:	4674      	mov	r4, lr
 8005700:	42a3      	cmp	r3, r4
 8005702:	dd24      	ble.n	800574e <_strtol_l.constprop.0+0xc6>
 8005704:	f1bc 0f00 	cmp.w	ip, #0
 8005708:	db1e      	blt.n	8005748 <_strtol_l.constprop.0+0xc0>
 800570a:	45b1      	cmp	r9, r6
 800570c:	d31c      	bcc.n	8005748 <_strtol_l.constprop.0+0xc0>
 800570e:	d101      	bne.n	8005714 <_strtol_l.constprop.0+0x8c>
 8005710:	45a2      	cmp	sl, r4
 8005712:	db19      	blt.n	8005748 <_strtol_l.constprop.0+0xc0>
 8005714:	fb06 4603 	mla	r6, r6, r3, r4
 8005718:	f04f 0c01 	mov.w	ip, #1
 800571c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005720:	e7e8      	b.n	80056f4 <_strtol_l.constprop.0+0x6c>
 8005722:	2c2b      	cmp	r4, #43	; 0x2b
 8005724:	bf04      	itt	eq
 8005726:	782c      	ldrbeq	r4, [r5, #0]
 8005728:	1cb5      	addeq	r5, r6, #2
 800572a:	e7ca      	b.n	80056c2 <_strtol_l.constprop.0+0x3a>
 800572c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005730:	f1be 0f19 	cmp.w	lr, #25
 8005734:	d801      	bhi.n	800573a <_strtol_l.constprop.0+0xb2>
 8005736:	3c37      	subs	r4, #55	; 0x37
 8005738:	e7e2      	b.n	8005700 <_strtol_l.constprop.0+0x78>
 800573a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800573e:	f1be 0f19 	cmp.w	lr, #25
 8005742:	d804      	bhi.n	800574e <_strtol_l.constprop.0+0xc6>
 8005744:	3c57      	subs	r4, #87	; 0x57
 8005746:	e7db      	b.n	8005700 <_strtol_l.constprop.0+0x78>
 8005748:	f04f 3cff 	mov.w	ip, #4294967295
 800574c:	e7e6      	b.n	800571c <_strtol_l.constprop.0+0x94>
 800574e:	f1bc 0f00 	cmp.w	ip, #0
 8005752:	da05      	bge.n	8005760 <_strtol_l.constprop.0+0xd8>
 8005754:	2322      	movs	r3, #34	; 0x22
 8005756:	6003      	str	r3, [r0, #0]
 8005758:	4646      	mov	r6, r8
 800575a:	b942      	cbnz	r2, 800576e <_strtol_l.constprop.0+0xe6>
 800575c:	4630      	mov	r0, r6
 800575e:	e79e      	b.n	800569e <_strtol_l.constprop.0+0x16>
 8005760:	b107      	cbz	r7, 8005764 <_strtol_l.constprop.0+0xdc>
 8005762:	4276      	negs	r6, r6
 8005764:	2a00      	cmp	r2, #0
 8005766:	d0f9      	beq.n	800575c <_strtol_l.constprop.0+0xd4>
 8005768:	f1bc 0f00 	cmp.w	ip, #0
 800576c:	d000      	beq.n	8005770 <_strtol_l.constprop.0+0xe8>
 800576e:	1e69      	subs	r1, r5, #1
 8005770:	6011      	str	r1, [r2, #0]
 8005772:	e7f3      	b.n	800575c <_strtol_l.constprop.0+0xd4>
 8005774:	2430      	movs	r4, #48	; 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1b1      	bne.n	80056de <_strtol_l.constprop.0+0x56>
 800577a:	2308      	movs	r3, #8
 800577c:	e7af      	b.n	80056de <_strtol_l.constprop.0+0x56>
 800577e:	2c30      	cmp	r4, #48	; 0x30
 8005780:	d0a5      	beq.n	80056ce <_strtol_l.constprop.0+0x46>
 8005782:	230a      	movs	r3, #10
 8005784:	e7ab      	b.n	80056de <_strtol_l.constprop.0+0x56>
 8005786:	bf00      	nop
 8005788:	080091b1 	.word	0x080091b1

0800578c <_strtol_r>:
 800578c:	f7ff bf7c 	b.w	8005688 <_strtol_l.constprop.0>

08005790 <quorem>:
 8005790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	6903      	ldr	r3, [r0, #16]
 8005796:	690c      	ldr	r4, [r1, #16]
 8005798:	42a3      	cmp	r3, r4
 800579a:	4607      	mov	r7, r0
 800579c:	f2c0 8081 	blt.w	80058a2 <quorem+0x112>
 80057a0:	3c01      	subs	r4, #1
 80057a2:	f101 0814 	add.w	r8, r1, #20
 80057a6:	f100 0514 	add.w	r5, r0, #20
 80057aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b8:	3301      	adds	r3, #1
 80057ba:	429a      	cmp	r2, r3
 80057bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057c8:	d331      	bcc.n	800582e <quorem+0x9e>
 80057ca:	f04f 0e00 	mov.w	lr, #0
 80057ce:	4640      	mov	r0, r8
 80057d0:	46ac      	mov	ip, r5
 80057d2:	46f2      	mov	sl, lr
 80057d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80057d8:	b293      	uxth	r3, r2
 80057da:	fb06 e303 	mla	r3, r6, r3, lr
 80057de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ebaa 0303 	sub.w	r3, sl, r3
 80057e8:	f8dc a000 	ldr.w	sl, [ip]
 80057ec:	0c12      	lsrs	r2, r2, #16
 80057ee:	fa13 f38a 	uxtah	r3, r3, sl
 80057f2:	fb06 e202 	mla	r2, r6, r2, lr
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	9b00      	ldr	r3, [sp, #0]
 80057fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057fe:	b292      	uxth	r2, r2
 8005800:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005808:	f8bd 3000 	ldrh.w	r3, [sp]
 800580c:	4581      	cmp	r9, r0
 800580e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005812:	f84c 3b04 	str.w	r3, [ip], #4
 8005816:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800581a:	d2db      	bcs.n	80057d4 <quorem+0x44>
 800581c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005820:	b92b      	cbnz	r3, 800582e <quorem+0x9e>
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	3b04      	subs	r3, #4
 8005826:	429d      	cmp	r5, r3
 8005828:	461a      	mov	r2, r3
 800582a:	d32e      	bcc.n	800588a <quorem+0xfa>
 800582c:	613c      	str	r4, [r7, #16]
 800582e:	4638      	mov	r0, r7
 8005830:	f001 fede 	bl	80075f0 <__mcmp>
 8005834:	2800      	cmp	r0, #0
 8005836:	db24      	blt.n	8005882 <quorem+0xf2>
 8005838:	3601      	adds	r6, #1
 800583a:	4628      	mov	r0, r5
 800583c:	f04f 0c00 	mov.w	ip, #0
 8005840:	f858 2b04 	ldr.w	r2, [r8], #4
 8005844:	f8d0 e000 	ldr.w	lr, [r0]
 8005848:	b293      	uxth	r3, r2
 800584a:	ebac 0303 	sub.w	r3, ip, r3
 800584e:	0c12      	lsrs	r2, r2, #16
 8005850:	fa13 f38e 	uxtah	r3, r3, lr
 8005854:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005862:	45c1      	cmp	r9, r8
 8005864:	f840 3b04 	str.w	r3, [r0], #4
 8005868:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800586c:	d2e8      	bcs.n	8005840 <quorem+0xb0>
 800586e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005876:	b922      	cbnz	r2, 8005882 <quorem+0xf2>
 8005878:	3b04      	subs	r3, #4
 800587a:	429d      	cmp	r5, r3
 800587c:	461a      	mov	r2, r3
 800587e:	d30a      	bcc.n	8005896 <quorem+0x106>
 8005880:	613c      	str	r4, [r7, #16]
 8005882:	4630      	mov	r0, r6
 8005884:	b003      	add	sp, #12
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	3b04      	subs	r3, #4
 800588e:	2a00      	cmp	r2, #0
 8005890:	d1cc      	bne.n	800582c <quorem+0x9c>
 8005892:	3c01      	subs	r4, #1
 8005894:	e7c7      	b.n	8005826 <quorem+0x96>
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	3b04      	subs	r3, #4
 800589a:	2a00      	cmp	r2, #0
 800589c:	d1f0      	bne.n	8005880 <quorem+0xf0>
 800589e:	3c01      	subs	r4, #1
 80058a0:	e7eb      	b.n	800587a <quorem+0xea>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e7ee      	b.n	8005884 <quorem+0xf4>
	...

080058a8 <_dtoa_r>:
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	ed2d 8b04 	vpush	{d8-d9}
 80058b0:	ec57 6b10 	vmov	r6, r7, d0
 80058b4:	b093      	sub	sp, #76	; 0x4c
 80058b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058bc:	9106      	str	r1, [sp, #24]
 80058be:	ee10 aa10 	vmov	sl, s0
 80058c2:	4604      	mov	r4, r0
 80058c4:	9209      	str	r2, [sp, #36]	; 0x24
 80058c6:	930c      	str	r3, [sp, #48]	; 0x30
 80058c8:	46bb      	mov	fp, r7
 80058ca:	b975      	cbnz	r5, 80058ea <_dtoa_r+0x42>
 80058cc:	2010      	movs	r0, #16
 80058ce:	f001 fb9b 	bl	8007008 <malloc>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6260      	str	r0, [r4, #36]	; 0x24
 80058d6:	b920      	cbnz	r0, 80058e2 <_dtoa_r+0x3a>
 80058d8:	4ba7      	ldr	r3, [pc, #668]	; (8005b78 <_dtoa_r+0x2d0>)
 80058da:	21ea      	movs	r1, #234	; 0xea
 80058dc:	48a7      	ldr	r0, [pc, #668]	; (8005b7c <_dtoa_r+0x2d4>)
 80058de:	f003 faad 	bl	8008e3c <__assert_func>
 80058e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058e6:	6005      	str	r5, [r0, #0]
 80058e8:	60c5      	str	r5, [r0, #12]
 80058ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ec:	6819      	ldr	r1, [r3, #0]
 80058ee:	b151      	cbz	r1, 8005906 <_dtoa_r+0x5e>
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	604a      	str	r2, [r1, #4]
 80058f4:	2301      	movs	r3, #1
 80058f6:	4093      	lsls	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
 80058fa:	4620      	mov	r0, r4
 80058fc:	f001 fbec 	bl	80070d8 <_Bfree>
 8005900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	1e3b      	subs	r3, r7, #0
 8005908:	bfaa      	itet	ge
 800590a:	2300      	movge	r3, #0
 800590c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005910:	f8c8 3000 	strge.w	r3, [r8]
 8005914:	4b9a      	ldr	r3, [pc, #616]	; (8005b80 <_dtoa_r+0x2d8>)
 8005916:	bfbc      	itt	lt
 8005918:	2201      	movlt	r2, #1
 800591a:	f8c8 2000 	strlt.w	r2, [r8]
 800591e:	ea33 030b 	bics.w	r3, r3, fp
 8005922:	d11b      	bne.n	800595c <_dtoa_r+0xb4>
 8005924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005926:	f242 730f 	movw	r3, #9999	; 0x270f
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005930:	4333      	orrs	r3, r6
 8005932:	f000 8592 	beq.w	800645a <_dtoa_r+0xbb2>
 8005936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005938:	b963      	cbnz	r3, 8005954 <_dtoa_r+0xac>
 800593a:	4b92      	ldr	r3, [pc, #584]	; (8005b84 <_dtoa_r+0x2dc>)
 800593c:	e022      	b.n	8005984 <_dtoa_r+0xdc>
 800593e:	4b92      	ldr	r3, [pc, #584]	; (8005b88 <_dtoa_r+0x2e0>)
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	3308      	adds	r3, #8
 8005944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	9801      	ldr	r0, [sp, #4]
 800594a:	b013      	add	sp, #76	; 0x4c
 800594c:	ecbd 8b04 	vpop	{d8-d9}
 8005950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005954:	4b8b      	ldr	r3, [pc, #556]	; (8005b84 <_dtoa_r+0x2dc>)
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	3303      	adds	r3, #3
 800595a:	e7f3      	b.n	8005944 <_dtoa_r+0x9c>
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	4650      	mov	r0, sl
 8005962:	4659      	mov	r1, fp
 8005964:	f7fb f8d0 	bl	8000b08 <__aeabi_dcmpeq>
 8005968:	ec4b ab19 	vmov	d9, sl, fp
 800596c:	4680      	mov	r8, r0
 800596e:	b158      	cbz	r0, 8005988 <_dtoa_r+0xe0>
 8005970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005972:	2301      	movs	r3, #1
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 856b 	beq.w	8006454 <_dtoa_r+0xbac>
 800597e:	4883      	ldr	r0, [pc, #524]	; (8005b8c <_dtoa_r+0x2e4>)
 8005980:	6018      	str	r0, [r3, #0]
 8005982:	1e43      	subs	r3, r0, #1
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	e7df      	b.n	8005948 <_dtoa_r+0xa0>
 8005988:	ec4b ab10 	vmov	d0, sl, fp
 800598c:	aa10      	add	r2, sp, #64	; 0x40
 800598e:	a911      	add	r1, sp, #68	; 0x44
 8005990:	4620      	mov	r0, r4
 8005992:	f001 ff4f 	bl	8007834 <__d2b>
 8005996:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800599a:	ee08 0a10 	vmov	s16, r0
 800599e:	2d00      	cmp	r5, #0
 80059a0:	f000 8084 	beq.w	8005aac <_dtoa_r+0x204>
 80059a4:	ee19 3a90 	vmov	r3, s19
 80059a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059b0:	4656      	mov	r6, sl
 80059b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80059be:	4b74      	ldr	r3, [pc, #464]	; (8005b90 <_dtoa_r+0x2e8>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	f7fa fc7f 	bl	80002c8 <__aeabi_dsub>
 80059ca:	a365      	add	r3, pc, #404	; (adr r3, 8005b60 <_dtoa_r+0x2b8>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fe32 	bl	8000638 <__aeabi_dmul>
 80059d4:	a364      	add	r3, pc, #400	; (adr r3, 8005b68 <_dtoa_r+0x2c0>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fc77 	bl	80002cc <__adddf3>
 80059de:	4606      	mov	r6, r0
 80059e0:	4628      	mov	r0, r5
 80059e2:	460f      	mov	r7, r1
 80059e4:	f7fa fdbe 	bl	8000564 <__aeabi_i2d>
 80059e8:	a361      	add	r3, pc, #388	; (adr r3, 8005b70 <_dtoa_r+0x2c8>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fe23 	bl	8000638 <__aeabi_dmul>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa fc67 	bl	80002cc <__adddf3>
 80059fe:	4606      	mov	r6, r0
 8005a00:	460f      	mov	r7, r1
 8005a02:	f7fb f8c9 	bl	8000b98 <__aeabi_d2iz>
 8005a06:	2200      	movs	r2, #0
 8005a08:	9000      	str	r0, [sp, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fb f884 	bl	8000b1c <__aeabi_dcmplt>
 8005a14:	b150      	cbz	r0, 8005a2c <_dtoa_r+0x184>
 8005a16:	9800      	ldr	r0, [sp, #0]
 8005a18:	f7fa fda4 	bl	8000564 <__aeabi_i2d>
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	f7fb f872 	bl	8000b08 <__aeabi_dcmpeq>
 8005a24:	b910      	cbnz	r0, 8005a2c <_dtoa_r+0x184>
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	9b00      	ldr	r3, [sp, #0]
 8005a2e:	2b16      	cmp	r3, #22
 8005a30:	d85a      	bhi.n	8005ae8 <_dtoa_r+0x240>
 8005a32:	9a00      	ldr	r2, [sp, #0]
 8005a34:	4b57      	ldr	r3, [pc, #348]	; (8005b94 <_dtoa_r+0x2ec>)
 8005a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	ec51 0b19 	vmov	r0, r1, d9
 8005a42:	f7fb f86b 	bl	8000b1c <__aeabi_dcmplt>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d050      	beq.n	8005aec <_dtoa_r+0x244>
 8005a4a:	9b00      	ldr	r3, [sp, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	2300      	movs	r3, #0
 8005a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a56:	1b5d      	subs	r5, r3, r5
 8005a58:	1e6b      	subs	r3, r5, #1
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	bf45      	ittet	mi
 8005a5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a62:	9304      	strmi	r3, [sp, #16]
 8005a64:	2300      	movpl	r3, #0
 8005a66:	2300      	movmi	r3, #0
 8005a68:	bf4c      	ite	mi
 8005a6a:	9305      	strmi	r3, [sp, #20]
 8005a6c:	9304      	strpl	r3, [sp, #16]
 8005a6e:	9b00      	ldr	r3, [sp, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db3d      	blt.n	8005af0 <_dtoa_r+0x248>
 8005a74:	9b05      	ldr	r3, [sp, #20]
 8005a76:	9a00      	ldr	r2, [sp, #0]
 8005a78:	920a      	str	r2, [sp, #40]	; 0x28
 8005a7a:	4413      	add	r3, r2
 8005a7c:	9305      	str	r3, [sp, #20]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	9b06      	ldr	r3, [sp, #24]
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	f200 8089 	bhi.w	8005b9c <_dtoa_r+0x2f4>
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	bfc4      	itt	gt
 8005a8e:	3b04      	subgt	r3, #4
 8005a90:	9306      	strgt	r3, [sp, #24]
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	f1a3 0302 	sub.w	r3, r3, #2
 8005a98:	bfcc      	ite	gt
 8005a9a:	2500      	movgt	r5, #0
 8005a9c:	2501      	movle	r5, #1
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	f200 8087 	bhi.w	8005bb2 <_dtoa_r+0x30a>
 8005aa4:	e8df f003 	tbb	[pc, r3]
 8005aa8:	59383a2d 	.word	0x59383a2d
 8005aac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ab0:	441d      	add	r5, r3
 8005ab2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	bfc1      	itttt	gt
 8005aba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005abe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ac2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005ac6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005aca:	bfda      	itte	le
 8005acc:	f1c3 0320 	rsble	r3, r3, #32
 8005ad0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ad4:	4318      	orrgt	r0, r3
 8005ad6:	f7fa fd35 	bl	8000544 <__aeabi_ui2d>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4606      	mov	r6, r0
 8005ade:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ae2:	3d01      	subs	r5, #1
 8005ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ae6:	e76a      	b.n	80059be <_dtoa_r+0x116>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e7b2      	b.n	8005a52 <_dtoa_r+0x1aa>
 8005aec:	900b      	str	r0, [sp, #44]	; 0x2c
 8005aee:	e7b1      	b.n	8005a54 <_dtoa_r+0x1ac>
 8005af0:	9b04      	ldr	r3, [sp, #16]
 8005af2:	9a00      	ldr	r2, [sp, #0]
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	4253      	negs	r3, r2
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	2300      	movs	r3, #0
 8005afe:	930a      	str	r3, [sp, #40]	; 0x28
 8005b00:	e7bf      	b.n	8005a82 <_dtoa_r+0x1da>
 8005b02:	2300      	movs	r3, #0
 8005b04:	9308      	str	r3, [sp, #32]
 8005b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dc55      	bgt.n	8005bb8 <_dtoa_r+0x310>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b12:	461a      	mov	r2, r3
 8005b14:	9209      	str	r2, [sp, #36]	; 0x24
 8005b16:	e00c      	b.n	8005b32 <_dtoa_r+0x28a>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e7f3      	b.n	8005b04 <_dtoa_r+0x25c>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b00      	ldr	r3, [sp, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	9303      	str	r3, [sp, #12]
 8005b2e:	bfb8      	it	lt
 8005b30:	2301      	movlt	r3, #1
 8005b32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b34:	2200      	movs	r2, #0
 8005b36:	6042      	str	r2, [r0, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f102 0614 	add.w	r6, r2, #20
 8005b3e:	429e      	cmp	r6, r3
 8005b40:	6841      	ldr	r1, [r0, #4]
 8005b42:	d93d      	bls.n	8005bc0 <_dtoa_r+0x318>
 8005b44:	4620      	mov	r0, r4
 8005b46:	f001 fa87 	bl	8007058 <_Balloc>
 8005b4a:	9001      	str	r0, [sp, #4]
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d13b      	bne.n	8005bc8 <_dtoa_r+0x320>
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <_dtoa_r+0x2f0>)
 8005b52:	4602      	mov	r2, r0
 8005b54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b58:	e6c0      	b.n	80058dc <_dtoa_r+0x34>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e7df      	b.n	8005b1e <_dtoa_r+0x276>
 8005b5e:	bf00      	nop
 8005b60:	636f4361 	.word	0x636f4361
 8005b64:	3fd287a7 	.word	0x3fd287a7
 8005b68:	8b60c8b3 	.word	0x8b60c8b3
 8005b6c:	3fc68a28 	.word	0x3fc68a28
 8005b70:	509f79fb 	.word	0x509f79fb
 8005b74:	3fd34413 	.word	0x3fd34413
 8005b78:	080092be 	.word	0x080092be
 8005b7c:	080092d5 	.word	0x080092d5
 8005b80:	7ff00000 	.word	0x7ff00000
 8005b84:	080092ba 	.word	0x080092ba
 8005b88:	080092b1 	.word	0x080092b1
 8005b8c:	08009592 	.word	0x08009592
 8005b90:	3ff80000 	.word	0x3ff80000
 8005b94:	080094a8 	.word	0x080094a8
 8005b98:	08009330 	.word	0x08009330
 8005b9c:	2501      	movs	r5, #1
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9306      	str	r3, [sp, #24]
 8005ba2:	9508      	str	r5, [sp, #32]
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2312      	movs	r3, #18
 8005bb0:	e7b0      	b.n	8005b14 <_dtoa_r+0x26c>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	e7f5      	b.n	8005ba4 <_dtoa_r+0x2fc>
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bbe:	e7b8      	b.n	8005b32 <_dtoa_r+0x28a>
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	6041      	str	r1, [r0, #4]
 8005bc4:	0052      	lsls	r2, r2, #1
 8005bc6:	e7b8      	b.n	8005b3a <_dtoa_r+0x292>
 8005bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bca:	9a01      	ldr	r2, [sp, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	2b0e      	cmp	r3, #14
 8005bd2:	f200 809d 	bhi.w	8005d10 <_dtoa_r+0x468>
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	f000 809a 	beq.w	8005d10 <_dtoa_r+0x468>
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd32      	ble.n	8005c48 <_dtoa_r+0x3a0>
 8005be2:	4ab7      	ldr	r2, [pc, #732]	; (8005ec0 <_dtoa_r+0x618>)
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	05d8      	lsls	r0, r3, #23
 8005bf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005bf8:	d516      	bpl.n	8005c28 <_dtoa_r+0x380>
 8005bfa:	4bb2      	ldr	r3, [pc, #712]	; (8005ec4 <_dtoa_r+0x61c>)
 8005bfc:	ec51 0b19 	vmov	r0, r1, d9
 8005c00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c04:	f7fa fe42 	bl	800088c <__aeabi_ddiv>
 8005c08:	f007 070f 	and.w	r7, r7, #15
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	468b      	mov	fp, r1
 8005c10:	2503      	movs	r5, #3
 8005c12:	4eac      	ldr	r6, [pc, #688]	; (8005ec4 <_dtoa_r+0x61c>)
 8005c14:	b957      	cbnz	r7, 8005c2c <_dtoa_r+0x384>
 8005c16:	4642      	mov	r2, r8
 8005c18:	464b      	mov	r3, r9
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa fe35 	bl	800088c <__aeabi_ddiv>
 8005c22:	4682      	mov	sl, r0
 8005c24:	468b      	mov	fp, r1
 8005c26:	e028      	b.n	8005c7a <_dtoa_r+0x3d2>
 8005c28:	2502      	movs	r5, #2
 8005c2a:	e7f2      	b.n	8005c12 <_dtoa_r+0x36a>
 8005c2c:	07f9      	lsls	r1, r7, #31
 8005c2e:	d508      	bpl.n	8005c42 <_dtoa_r+0x39a>
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c38:	f7fa fcfe 	bl	8000638 <__aeabi_dmul>
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4689      	mov	r9, r1
 8005c42:	107f      	asrs	r7, r7, #1
 8005c44:	3608      	adds	r6, #8
 8005c46:	e7e5      	b.n	8005c14 <_dtoa_r+0x36c>
 8005c48:	f000 809b 	beq.w	8005d82 <_dtoa_r+0x4da>
 8005c4c:	9b00      	ldr	r3, [sp, #0]
 8005c4e:	4f9d      	ldr	r7, [pc, #628]	; (8005ec4 <_dtoa_r+0x61c>)
 8005c50:	425e      	negs	r6, r3
 8005c52:	4b9b      	ldr	r3, [pc, #620]	; (8005ec0 <_dtoa_r+0x618>)
 8005c54:	f006 020f 	and.w	r2, r6, #15
 8005c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	ec51 0b19 	vmov	r0, r1, d9
 8005c64:	f7fa fce8 	bl	8000638 <__aeabi_dmul>
 8005c68:	1136      	asrs	r6, r6, #4
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	468b      	mov	fp, r1
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2502      	movs	r5, #2
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	d17a      	bne.n	8005d6c <_dtoa_r+0x4c4>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1d3      	bne.n	8005c22 <_dtoa_r+0x37a>
 8005c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8082 	beq.w	8005d86 <_dtoa_r+0x4de>
 8005c82:	4b91      	ldr	r3, [pc, #580]	; (8005ec8 <_dtoa_r+0x620>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	4650      	mov	r0, sl
 8005c88:	4659      	mov	r1, fp
 8005c8a:	f7fa ff47 	bl	8000b1c <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d079      	beq.n	8005d86 <_dtoa_r+0x4de>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d076      	beq.n	8005d86 <_dtoa_r+0x4de>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dd36      	ble.n	8005d0c <_dtoa_r+0x464>
 8005c9e:	9b00      	ldr	r3, [sp, #0]
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	1e5f      	subs	r7, r3, #1
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <_dtoa_r+0x624>)
 8005caa:	f7fa fcc5 	bl	8000638 <__aeabi_dmul>
 8005cae:	9e02      	ldr	r6, [sp, #8]
 8005cb0:	4682      	mov	sl, r0
 8005cb2:	468b      	mov	fp, r1
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7fa fc54 	bl	8000564 <__aeabi_i2d>
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	465b      	mov	r3, fp
 8005cc0:	f7fa fcba 	bl	8000638 <__aeabi_dmul>
 8005cc4:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <_dtoa_r+0x628>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f7fa fb00 	bl	80002cc <__adddf3>
 8005ccc:	46d0      	mov	r8, sl
 8005cce:	46d9      	mov	r9, fp
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	d158      	bne.n	8005d8c <_dtoa_r+0x4e4>
 8005cda:	4b7e      	ldr	r3, [pc, #504]	; (8005ed4 <_dtoa_r+0x62c>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4640      	mov	r0, r8
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	f7fa faf1 	bl	80002c8 <__aeabi_dsub>
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	465b      	mov	r3, fp
 8005cea:	4680      	mov	r8, r0
 8005cec:	4689      	mov	r9, r1
 8005cee:	f7fa ff33 	bl	8000b58 <__aeabi_dcmpgt>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f040 8295 	bne.w	8006222 <_dtoa_r+0x97a>
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4649      	mov	r1, r9
 8005d02:	f7fa ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f040 8289 	bne.w	800621e <_dtoa_r+0x976>
 8005d0c:	ec5b ab19 	vmov	sl, fp, d9
 8005d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f2c0 8148 	blt.w	8005fa8 <_dtoa_r+0x700>
 8005d18:	9a00      	ldr	r2, [sp, #0]
 8005d1a:	2a0e      	cmp	r2, #14
 8005d1c:	f300 8144 	bgt.w	8005fa8 <_dtoa_r+0x700>
 8005d20:	4b67      	ldr	r3, [pc, #412]	; (8005ec0 <_dtoa_r+0x618>)
 8005d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f280 80d5 	bge.w	8005edc <_dtoa_r+0x634>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f300 80d1 	bgt.w	8005edc <_dtoa_r+0x634>
 8005d3a:	f040 826f 	bne.w	800621c <_dtoa_r+0x974>
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <_dtoa_r+0x62c>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa fc77 	bl	8000638 <__aeabi_dmul>
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	f7fa fef9 	bl	8000b44 <__aeabi_dcmpge>
 8005d52:	9e03      	ldr	r6, [sp, #12]
 8005d54:	4637      	mov	r7, r6
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f040 8245 	bne.w	80061e6 <_dtoa_r+0x93e>
 8005d5c:	9d01      	ldr	r5, [sp, #4]
 8005d5e:	2331      	movs	r3, #49	; 0x31
 8005d60:	f805 3b01 	strb.w	r3, [r5], #1
 8005d64:	9b00      	ldr	r3, [sp, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	e240      	b.n	80061ee <_dtoa_r+0x946>
 8005d6c:	07f2      	lsls	r2, r6, #31
 8005d6e:	d505      	bpl.n	8005d7c <_dtoa_r+0x4d4>
 8005d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	3501      	adds	r5, #1
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	1076      	asrs	r6, r6, #1
 8005d7e:	3708      	adds	r7, #8
 8005d80:	e777      	b.n	8005c72 <_dtoa_r+0x3ca>
 8005d82:	2502      	movs	r5, #2
 8005d84:	e779      	b.n	8005c7a <_dtoa_r+0x3d2>
 8005d86:	9f00      	ldr	r7, [sp, #0]
 8005d88:	9e03      	ldr	r6, [sp, #12]
 8005d8a:	e794      	b.n	8005cb6 <_dtoa_r+0x40e>
 8005d8c:	9901      	ldr	r1, [sp, #4]
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <_dtoa_r+0x618>)
 8005d90:	4431      	add	r1, r6
 8005d92:	910d      	str	r1, [sp, #52]	; 0x34
 8005d94:	9908      	ldr	r1, [sp, #32]
 8005d96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	d043      	beq.n	8005e2a <_dtoa_r+0x582>
 8005da2:	494d      	ldr	r1, [pc, #308]	; (8005ed8 <_dtoa_r+0x630>)
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fa fd71 	bl	800088c <__aeabi_ddiv>
 8005daa:	4652      	mov	r2, sl
 8005dac:	465b      	mov	r3, fp
 8005dae:	f7fa fa8b 	bl	80002c8 <__aeabi_dsub>
 8005db2:	9d01      	ldr	r5, [sp, #4]
 8005db4:	4682      	mov	sl, r0
 8005db6:	468b      	mov	fp, r1
 8005db8:	4649      	mov	r1, r9
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7fa feec 	bl	8000b98 <__aeabi_d2iz>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	f7fa fbcf 	bl	8000564 <__aeabi_i2d>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fa7b 	bl	80002c8 <__aeabi_dsub>
 8005dd2:	3630      	adds	r6, #48	; 0x30
 8005dd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005dd8:	4652      	mov	r2, sl
 8005dda:	465b      	mov	r3, fp
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	f7fa fe9c 	bl	8000b1c <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d163      	bne.n	8005eb0 <_dtoa_r+0x608>
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	4936      	ldr	r1, [pc, #216]	; (8005ec8 <_dtoa_r+0x620>)
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fa fa6a 	bl	80002c8 <__aeabi_dsub>
 8005df4:	4652      	mov	r2, sl
 8005df6:	465b      	mov	r3, fp
 8005df8:	f7fa fe90 	bl	8000b1c <__aeabi_dcmplt>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f040 80b5 	bne.w	8005f6c <_dtoa_r+0x6c4>
 8005e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e04:	429d      	cmp	r5, r3
 8005e06:	d081      	beq.n	8005d0c <_dtoa_r+0x464>
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <_dtoa_r+0x624>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	4659      	mov	r1, fp
 8005e10:	f7fa fc12 	bl	8000638 <__aeabi_dmul>
 8005e14:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <_dtoa_r+0x624>)
 8005e16:	4682      	mov	sl, r0
 8005e18:	468b      	mov	fp, r1
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f7fa fc0a 	bl	8000638 <__aeabi_dmul>
 8005e24:	4680      	mov	r8, r0
 8005e26:	4689      	mov	r9, r1
 8005e28:	e7c6      	b.n	8005db8 <_dtoa_r+0x510>
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	f7fa fc03 	bl	8000638 <__aeabi_dmul>
 8005e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e34:	9d01      	ldr	r5, [sp, #4]
 8005e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e38:	4682      	mov	sl, r0
 8005e3a:	468b      	mov	fp, r1
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7fa feaa 	bl	8000b98 <__aeabi_d2iz>
 8005e44:	4606      	mov	r6, r0
 8005e46:	f7fa fb8d 	bl	8000564 <__aeabi_i2d>
 8005e4a:	3630      	adds	r6, #48	; 0x30
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa fa38 	bl	80002c8 <__aeabi_dsub>
 8005e58:	f805 6b01 	strb.w	r6, [r5], #1
 8005e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	4680      	mov	r8, r0
 8005e62:	4689      	mov	r9, r1
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	d124      	bne.n	8005eb4 <_dtoa_r+0x60c>
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <_dtoa_r+0x630>)
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	4659      	mov	r1, fp
 8005e70:	f7fa fa2c 	bl	80002cc <__adddf3>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	f7fa fe6c 	bl	8000b58 <__aeabi_dcmpgt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d173      	bne.n	8005f6c <_dtoa_r+0x6c4>
 8005e84:	4652      	mov	r2, sl
 8005e86:	465b      	mov	r3, fp
 8005e88:	4913      	ldr	r1, [pc, #76]	; (8005ed8 <_dtoa_r+0x630>)
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	f7fa fa1c 	bl	80002c8 <__aeabi_dsub>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4640      	mov	r0, r8
 8005e96:	4649      	mov	r1, r9
 8005e98:	f7fa fe40 	bl	8000b1c <__aeabi_dcmplt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f43f af35 	beq.w	8005d0c <_dtoa_r+0x464>
 8005ea2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ea4:	1e6b      	subs	r3, r5, #1
 8005ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ea8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d0f8      	beq.n	8005ea2 <_dtoa_r+0x5fa>
 8005eb0:	9700      	str	r7, [sp, #0]
 8005eb2:	e049      	b.n	8005f48 <_dtoa_r+0x6a0>
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <_dtoa_r+0x624>)
 8005eb6:	f7fa fbbf 	bl	8000638 <__aeabi_dmul>
 8005eba:	4680      	mov	r8, r0
 8005ebc:	4689      	mov	r9, r1
 8005ebe:	e7bd      	b.n	8005e3c <_dtoa_r+0x594>
 8005ec0:	080094a8 	.word	0x080094a8
 8005ec4:	08009480 	.word	0x08009480
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	40240000 	.word	0x40240000
 8005ed0:	401c0000 	.word	0x401c0000
 8005ed4:	40140000 	.word	0x40140000
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	9d01      	ldr	r5, [sp, #4]
 8005ede:	4656      	mov	r6, sl
 8005ee0:	465f      	mov	r7, fp
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa fccf 	bl	800088c <__aeabi_ddiv>
 8005eee:	f7fa fe53 	bl	8000b98 <__aeabi_d2iz>
 8005ef2:	4682      	mov	sl, r0
 8005ef4:	f7fa fb36 	bl	8000564 <__aeabi_i2d>
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	f7fa fb9c 	bl	8000638 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4630      	mov	r0, r6
 8005f06:	4639      	mov	r1, r7
 8005f08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f0c:	f7fa f9dc 	bl	80002c8 <__aeabi_dsub>
 8005f10:	f805 6b01 	strb.w	r6, [r5], #1
 8005f14:	9e01      	ldr	r6, [sp, #4]
 8005f16:	9f03      	ldr	r7, [sp, #12]
 8005f18:	1bae      	subs	r6, r5, r6
 8005f1a:	42b7      	cmp	r7, r6
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	d135      	bne.n	8005f8e <_dtoa_r+0x6e6>
 8005f22:	f7fa f9d3 	bl	80002cc <__adddf3>
 8005f26:	4642      	mov	r2, r8
 8005f28:	464b      	mov	r3, r9
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	f7fa fe13 	bl	8000b58 <__aeabi_dcmpgt>
 8005f32:	b9d0      	cbnz	r0, 8005f6a <_dtoa_r+0x6c2>
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fde4 	bl	8000b08 <__aeabi_dcmpeq>
 8005f40:	b110      	cbz	r0, 8005f48 <_dtoa_r+0x6a0>
 8005f42:	f01a 0f01 	tst.w	sl, #1
 8005f46:	d110      	bne.n	8005f6a <_dtoa_r+0x6c2>
 8005f48:	4620      	mov	r0, r4
 8005f4a:	ee18 1a10 	vmov	r1, s16
 8005f4e:	f001 f8c3 	bl	80070d8 <_Bfree>
 8005f52:	2300      	movs	r3, #0
 8005f54:	9800      	ldr	r0, [sp, #0]
 8005f56:	702b      	strb	r3, [r5, #0]
 8005f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	6018      	str	r0, [r3, #0]
 8005f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f43f acf1 	beq.w	8005948 <_dtoa_r+0xa0>
 8005f66:	601d      	str	r5, [r3, #0]
 8005f68:	e4ee      	b.n	8005948 <_dtoa_r+0xa0>
 8005f6a:	9f00      	ldr	r7, [sp, #0]
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	461d      	mov	r5, r3
 8005f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f74:	2a39      	cmp	r2, #57	; 0x39
 8005f76:	d106      	bne.n	8005f86 <_dtoa_r+0x6de>
 8005f78:	9a01      	ldr	r2, [sp, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d1f7      	bne.n	8005f6e <_dtoa_r+0x6c6>
 8005f7e:	9901      	ldr	r1, [sp, #4]
 8005f80:	2230      	movs	r2, #48	; 0x30
 8005f82:	3701      	adds	r7, #1
 8005f84:	700a      	strb	r2, [r1, #0]
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	3201      	adds	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e790      	b.n	8005eb0 <_dtoa_r+0x608>
 8005f8e:	4ba6      	ldr	r3, [pc, #664]	; (8006228 <_dtoa_r+0x980>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	f7fa fb51 	bl	8000638 <__aeabi_dmul>
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	f7fa fdb3 	bl	8000b08 <__aeabi_dcmpeq>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d09d      	beq.n	8005ee2 <_dtoa_r+0x63a>
 8005fa6:	e7cf      	b.n	8005f48 <_dtoa_r+0x6a0>
 8005fa8:	9a08      	ldr	r2, [sp, #32]
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	f000 80d7 	beq.w	800615e <_dtoa_r+0x8b6>
 8005fb0:	9a06      	ldr	r2, [sp, #24]
 8005fb2:	2a01      	cmp	r2, #1
 8005fb4:	f300 80ba 	bgt.w	800612c <_dtoa_r+0x884>
 8005fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	f000 80b2 	beq.w	8006124 <_dtoa_r+0x87c>
 8005fc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fc4:	9e07      	ldr	r6, [sp, #28]
 8005fc6:	9d04      	ldr	r5, [sp, #16]
 8005fc8:	9a04      	ldr	r2, [sp, #16]
 8005fca:	441a      	add	r2, r3
 8005fcc:	9204      	str	r2, [sp, #16]
 8005fce:	9a05      	ldr	r2, [sp, #20]
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	441a      	add	r2, r3
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	9205      	str	r2, [sp, #20]
 8005fd8:	f001 f980 	bl	80072dc <__i2b>
 8005fdc:	4607      	mov	r7, r0
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	dd0c      	ble.n	8005ffc <_dtoa_r+0x754>
 8005fe2:	9b05      	ldr	r3, [sp, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd09      	ble.n	8005ffc <_dtoa_r+0x754>
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	9a04      	ldr	r2, [sp, #16]
 8005fec:	bfa8      	it	ge
 8005fee:	462b      	movge	r3, r5
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	9204      	str	r2, [sp, #16]
 8005ff4:	9a05      	ldr	r2, [sp, #20]
 8005ff6:	1aed      	subs	r5, r5, r3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	b31b      	cbz	r3, 8006048 <_dtoa_r+0x7a0>
 8006000:	9b08      	ldr	r3, [sp, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80af 	beq.w	8006166 <_dtoa_r+0x8be>
 8006008:	2e00      	cmp	r6, #0
 800600a:	dd13      	ble.n	8006034 <_dtoa_r+0x78c>
 800600c:	4639      	mov	r1, r7
 800600e:	4632      	mov	r2, r6
 8006010:	4620      	mov	r0, r4
 8006012:	f001 fa23 	bl	800745c <__pow5mult>
 8006016:	ee18 2a10 	vmov	r2, s16
 800601a:	4601      	mov	r1, r0
 800601c:	4607      	mov	r7, r0
 800601e:	4620      	mov	r0, r4
 8006020:	f001 f972 	bl	8007308 <__multiply>
 8006024:	ee18 1a10 	vmov	r1, s16
 8006028:	4680      	mov	r8, r0
 800602a:	4620      	mov	r0, r4
 800602c:	f001 f854 	bl	80070d8 <_Bfree>
 8006030:	ee08 8a10 	vmov	s16, r8
 8006034:	9b07      	ldr	r3, [sp, #28]
 8006036:	1b9a      	subs	r2, r3, r6
 8006038:	d006      	beq.n	8006048 <_dtoa_r+0x7a0>
 800603a:	ee18 1a10 	vmov	r1, s16
 800603e:	4620      	mov	r0, r4
 8006040:	f001 fa0c 	bl	800745c <__pow5mult>
 8006044:	ee08 0a10 	vmov	s16, r0
 8006048:	2101      	movs	r1, #1
 800604a:	4620      	mov	r0, r4
 800604c:	f001 f946 	bl	80072dc <__i2b>
 8006050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	4606      	mov	r6, r0
 8006056:	f340 8088 	ble.w	800616a <_dtoa_r+0x8c2>
 800605a:	461a      	mov	r2, r3
 800605c:	4601      	mov	r1, r0
 800605e:	4620      	mov	r0, r4
 8006060:	f001 f9fc 	bl	800745c <__pow5mult>
 8006064:	9b06      	ldr	r3, [sp, #24]
 8006066:	2b01      	cmp	r3, #1
 8006068:	4606      	mov	r6, r0
 800606a:	f340 8081 	ble.w	8006170 <_dtoa_r+0x8c8>
 800606e:	f04f 0800 	mov.w	r8, #0
 8006072:	6933      	ldr	r3, [r6, #16]
 8006074:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006078:	6918      	ldr	r0, [r3, #16]
 800607a:	f001 f8df 	bl	800723c <__hi0bits>
 800607e:	f1c0 0020 	rsb	r0, r0, #32
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	4418      	add	r0, r3
 8006086:	f010 001f 	ands.w	r0, r0, #31
 800608a:	f000 8092 	beq.w	80061b2 <_dtoa_r+0x90a>
 800608e:	f1c0 0320 	rsb	r3, r0, #32
 8006092:	2b04      	cmp	r3, #4
 8006094:	f340 808a 	ble.w	80061ac <_dtoa_r+0x904>
 8006098:	f1c0 001c 	rsb	r0, r0, #28
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	4403      	add	r3, r0
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	4403      	add	r3, r0
 80060a6:	4405      	add	r5, r0
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dd07      	ble.n	80060c0 <_dtoa_r+0x818>
 80060b0:	ee18 1a10 	vmov	r1, s16
 80060b4:	461a      	mov	r2, r3
 80060b6:	4620      	mov	r0, r4
 80060b8:	f001 fa2a 	bl	8007510 <__lshift>
 80060bc:	ee08 0a10 	vmov	s16, r0
 80060c0:	9b05      	ldr	r3, [sp, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd05      	ble.n	80060d2 <_dtoa_r+0x82a>
 80060c6:	4631      	mov	r1, r6
 80060c8:	461a      	mov	r2, r3
 80060ca:	4620      	mov	r0, r4
 80060cc:	f001 fa20 	bl	8007510 <__lshift>
 80060d0:	4606      	mov	r6, r0
 80060d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d06e      	beq.n	80061b6 <_dtoa_r+0x90e>
 80060d8:	ee18 0a10 	vmov	r0, s16
 80060dc:	4631      	mov	r1, r6
 80060de:	f001 fa87 	bl	80075f0 <__mcmp>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	da67      	bge.n	80061b6 <_dtoa_r+0x90e>
 80060e6:	9b00      	ldr	r3, [sp, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	ee18 1a10 	vmov	r1, s16
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	220a      	movs	r2, #10
 80060f2:	2300      	movs	r3, #0
 80060f4:	4620      	mov	r0, r4
 80060f6:	f001 f811 	bl	800711c <__multadd>
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	ee08 0a10 	vmov	s16, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 81b1 	beq.w	8006468 <_dtoa_r+0xbc0>
 8006106:	2300      	movs	r3, #0
 8006108:	4639      	mov	r1, r7
 800610a:	220a      	movs	r2, #10
 800610c:	4620      	mov	r0, r4
 800610e:	f001 f805 	bl	800711c <__multadd>
 8006112:	9b02      	ldr	r3, [sp, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	4607      	mov	r7, r0
 8006118:	f300 808e 	bgt.w	8006238 <_dtoa_r+0x990>
 800611c:	9b06      	ldr	r3, [sp, #24]
 800611e:	2b02      	cmp	r3, #2
 8006120:	dc51      	bgt.n	80061c6 <_dtoa_r+0x91e>
 8006122:	e089      	b.n	8006238 <_dtoa_r+0x990>
 8006124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800612a:	e74b      	b.n	8005fc4 <_dtoa_r+0x71c>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	1e5e      	subs	r6, r3, #1
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	42b3      	cmp	r3, r6
 8006134:	bfbf      	itttt	lt
 8006136:	9b07      	ldrlt	r3, [sp, #28]
 8006138:	9607      	strlt	r6, [sp, #28]
 800613a:	1af2      	sublt	r2, r6, r3
 800613c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800613e:	bfb6      	itet	lt
 8006140:	189b      	addlt	r3, r3, r2
 8006142:	1b9e      	subge	r6, r3, r6
 8006144:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	bfb8      	it	lt
 800614a:	2600      	movlt	r6, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfb7      	itett	lt
 8006150:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006154:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006158:	1a9d      	sublt	r5, r3, r2
 800615a:	2300      	movlt	r3, #0
 800615c:	e734      	b.n	8005fc8 <_dtoa_r+0x720>
 800615e:	9e07      	ldr	r6, [sp, #28]
 8006160:	9d04      	ldr	r5, [sp, #16]
 8006162:	9f08      	ldr	r7, [sp, #32]
 8006164:	e73b      	b.n	8005fde <_dtoa_r+0x736>
 8006166:	9a07      	ldr	r2, [sp, #28]
 8006168:	e767      	b.n	800603a <_dtoa_r+0x792>
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	2b01      	cmp	r3, #1
 800616e:	dc18      	bgt.n	80061a2 <_dtoa_r+0x8fa>
 8006170:	f1ba 0f00 	cmp.w	sl, #0
 8006174:	d115      	bne.n	80061a2 <_dtoa_r+0x8fa>
 8006176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800617a:	b993      	cbnz	r3, 80061a2 <_dtoa_r+0x8fa>
 800617c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006180:	0d1b      	lsrs	r3, r3, #20
 8006182:	051b      	lsls	r3, r3, #20
 8006184:	b183      	cbz	r3, 80061a8 <_dtoa_r+0x900>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	9b05      	ldr	r3, [sp, #20]
 800618e:	3301      	adds	r3, #1
 8006190:	9305      	str	r3, [sp, #20]
 8006192:	f04f 0801 	mov.w	r8, #1
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f af6a 	bne.w	8006072 <_dtoa_r+0x7ca>
 800619e:	2001      	movs	r0, #1
 80061a0:	e76f      	b.n	8006082 <_dtoa_r+0x7da>
 80061a2:	f04f 0800 	mov.w	r8, #0
 80061a6:	e7f6      	b.n	8006196 <_dtoa_r+0x8ee>
 80061a8:	4698      	mov	r8, r3
 80061aa:	e7f4      	b.n	8006196 <_dtoa_r+0x8ee>
 80061ac:	f43f af7d 	beq.w	80060aa <_dtoa_r+0x802>
 80061b0:	4618      	mov	r0, r3
 80061b2:	301c      	adds	r0, #28
 80061b4:	e772      	b.n	800609c <_dtoa_r+0x7f4>
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dc37      	bgt.n	800622c <_dtoa_r+0x984>
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	dd34      	ble.n	800622c <_dtoa_r+0x984>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	9302      	str	r3, [sp, #8]
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	b96b      	cbnz	r3, 80061e6 <_dtoa_r+0x93e>
 80061ca:	4631      	mov	r1, r6
 80061cc:	2205      	movs	r2, #5
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 ffa4 	bl	800711c <__multadd>
 80061d4:	4601      	mov	r1, r0
 80061d6:	4606      	mov	r6, r0
 80061d8:	ee18 0a10 	vmov	r0, s16
 80061dc:	f001 fa08 	bl	80075f0 <__mcmp>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f73f adbb 	bgt.w	8005d5c <_dtoa_r+0x4b4>
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	9d01      	ldr	r5, [sp, #4]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	4631      	mov	r1, r6
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 ff6f 	bl	80070d8 <_Bfree>
 80061fa:	2f00      	cmp	r7, #0
 80061fc:	f43f aea4 	beq.w	8005f48 <_dtoa_r+0x6a0>
 8006200:	f1b8 0f00 	cmp.w	r8, #0
 8006204:	d005      	beq.n	8006212 <_dtoa_r+0x96a>
 8006206:	45b8      	cmp	r8, r7
 8006208:	d003      	beq.n	8006212 <_dtoa_r+0x96a>
 800620a:	4641      	mov	r1, r8
 800620c:	4620      	mov	r0, r4
 800620e:	f000 ff63 	bl	80070d8 <_Bfree>
 8006212:	4639      	mov	r1, r7
 8006214:	4620      	mov	r0, r4
 8006216:	f000 ff5f 	bl	80070d8 <_Bfree>
 800621a:	e695      	b.n	8005f48 <_dtoa_r+0x6a0>
 800621c:	2600      	movs	r6, #0
 800621e:	4637      	mov	r7, r6
 8006220:	e7e1      	b.n	80061e6 <_dtoa_r+0x93e>
 8006222:	9700      	str	r7, [sp, #0]
 8006224:	4637      	mov	r7, r6
 8006226:	e599      	b.n	8005d5c <_dtoa_r+0x4b4>
 8006228:	40240000 	.word	0x40240000
 800622c:	9b08      	ldr	r3, [sp, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80ca 	beq.w	80063c8 <_dtoa_r+0xb20>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	2d00      	cmp	r5, #0
 800623a:	dd05      	ble.n	8006248 <_dtoa_r+0x9a0>
 800623c:	4639      	mov	r1, r7
 800623e:	462a      	mov	r2, r5
 8006240:	4620      	mov	r0, r4
 8006242:	f001 f965 	bl	8007510 <__lshift>
 8006246:	4607      	mov	r7, r0
 8006248:	f1b8 0f00 	cmp.w	r8, #0
 800624c:	d05b      	beq.n	8006306 <_dtoa_r+0xa5e>
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 ff01 	bl	8007058 <_Balloc>
 8006256:	4605      	mov	r5, r0
 8006258:	b928      	cbnz	r0, 8006266 <_dtoa_r+0x9be>
 800625a:	4b87      	ldr	r3, [pc, #540]	; (8006478 <_dtoa_r+0xbd0>)
 800625c:	4602      	mov	r2, r0
 800625e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006262:	f7ff bb3b 	b.w	80058dc <_dtoa_r+0x34>
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	3202      	adds	r2, #2
 800626a:	0092      	lsls	r2, r2, #2
 800626c:	f107 010c 	add.w	r1, r7, #12
 8006270:	300c      	adds	r0, #12
 8006272:	f000 fee3 	bl	800703c <memcpy>
 8006276:	2201      	movs	r2, #1
 8006278:	4629      	mov	r1, r5
 800627a:	4620      	mov	r0, r4
 800627c:	f001 f948 	bl	8007510 <__lshift>
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	f103 0901 	add.w	r9, r3, #1
 8006286:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800628a:	4413      	add	r3, r2
 800628c:	9305      	str	r3, [sp, #20]
 800628e:	f00a 0301 	and.w	r3, sl, #1
 8006292:	46b8      	mov	r8, r7
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	4607      	mov	r7, r0
 8006298:	4631      	mov	r1, r6
 800629a:	ee18 0a10 	vmov	r0, s16
 800629e:	f7ff fa77 	bl	8005790 <quorem>
 80062a2:	4641      	mov	r1, r8
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80062aa:	ee18 0a10 	vmov	r0, s16
 80062ae:	f001 f99f 	bl	80075f0 <__mcmp>
 80062b2:	463a      	mov	r2, r7
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	4631      	mov	r1, r6
 80062b8:	4620      	mov	r0, r4
 80062ba:	f001 f9b5 	bl	8007628 <__mdiff>
 80062be:	68c2      	ldr	r2, [r0, #12]
 80062c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80062c4:	4605      	mov	r5, r0
 80062c6:	bb02      	cbnz	r2, 800630a <_dtoa_r+0xa62>
 80062c8:	4601      	mov	r1, r0
 80062ca:	ee18 0a10 	vmov	r0, s16
 80062ce:	f001 f98f 	bl	80075f0 <__mcmp>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4629      	mov	r1, r5
 80062d6:	4620      	mov	r0, r4
 80062d8:	9207      	str	r2, [sp, #28]
 80062da:	f000 fefd 	bl	80070d8 <_Bfree>
 80062de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80062e2:	ea43 0102 	orr.w	r1, r3, r2
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	430b      	orrs	r3, r1
 80062ea:	464d      	mov	r5, r9
 80062ec:	d10f      	bne.n	800630e <_dtoa_r+0xa66>
 80062ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062f2:	d02a      	beq.n	800634a <_dtoa_r+0xaa2>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd02      	ble.n	8006300 <_dtoa_r+0xa58>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006300:	f88b a000 	strb.w	sl, [fp]
 8006304:	e775      	b.n	80061f2 <_dtoa_r+0x94a>
 8006306:	4638      	mov	r0, r7
 8006308:	e7ba      	b.n	8006280 <_dtoa_r+0x9d8>
 800630a:	2201      	movs	r2, #1
 800630c:	e7e2      	b.n	80062d4 <_dtoa_r+0xa2c>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db04      	blt.n	800631e <_dtoa_r+0xa76>
 8006314:	9906      	ldr	r1, [sp, #24]
 8006316:	430b      	orrs	r3, r1
 8006318:	9904      	ldr	r1, [sp, #16]
 800631a:	430b      	orrs	r3, r1
 800631c:	d122      	bne.n	8006364 <_dtoa_r+0xabc>
 800631e:	2a00      	cmp	r2, #0
 8006320:	ddee      	ble.n	8006300 <_dtoa_r+0xa58>
 8006322:	ee18 1a10 	vmov	r1, s16
 8006326:	2201      	movs	r2, #1
 8006328:	4620      	mov	r0, r4
 800632a:	f001 f8f1 	bl	8007510 <__lshift>
 800632e:	4631      	mov	r1, r6
 8006330:	ee08 0a10 	vmov	s16, r0
 8006334:	f001 f95c 	bl	80075f0 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	dc03      	bgt.n	8006344 <_dtoa_r+0xa9c>
 800633c:	d1e0      	bne.n	8006300 <_dtoa_r+0xa58>
 800633e:	f01a 0f01 	tst.w	sl, #1
 8006342:	d0dd      	beq.n	8006300 <_dtoa_r+0xa58>
 8006344:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006348:	d1d7      	bne.n	80062fa <_dtoa_r+0xa52>
 800634a:	2339      	movs	r3, #57	; 0x39
 800634c:	f88b 3000 	strb.w	r3, [fp]
 8006350:	462b      	mov	r3, r5
 8006352:	461d      	mov	r5, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800635a:	2a39      	cmp	r2, #57	; 0x39
 800635c:	d071      	beq.n	8006442 <_dtoa_r+0xb9a>
 800635e:	3201      	adds	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e746      	b.n	80061f2 <_dtoa_r+0x94a>
 8006364:	2a00      	cmp	r2, #0
 8006366:	dd07      	ble.n	8006378 <_dtoa_r+0xad0>
 8006368:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800636c:	d0ed      	beq.n	800634a <_dtoa_r+0xaa2>
 800636e:	f10a 0301 	add.w	r3, sl, #1
 8006372:	f88b 3000 	strb.w	r3, [fp]
 8006376:	e73c      	b.n	80061f2 <_dtoa_r+0x94a>
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800637e:	4599      	cmp	r9, r3
 8006380:	d047      	beq.n	8006412 <_dtoa_r+0xb6a>
 8006382:	ee18 1a10 	vmov	r1, s16
 8006386:	2300      	movs	r3, #0
 8006388:	220a      	movs	r2, #10
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fec6 	bl	800711c <__multadd>
 8006390:	45b8      	cmp	r8, r7
 8006392:	ee08 0a10 	vmov	s16, r0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	f04f 020a 	mov.w	r2, #10
 800639e:	4641      	mov	r1, r8
 80063a0:	4620      	mov	r0, r4
 80063a2:	d106      	bne.n	80063b2 <_dtoa_r+0xb0a>
 80063a4:	f000 feba 	bl	800711c <__multadd>
 80063a8:	4680      	mov	r8, r0
 80063aa:	4607      	mov	r7, r0
 80063ac:	f109 0901 	add.w	r9, r9, #1
 80063b0:	e772      	b.n	8006298 <_dtoa_r+0x9f0>
 80063b2:	f000 feb3 	bl	800711c <__multadd>
 80063b6:	4639      	mov	r1, r7
 80063b8:	4680      	mov	r8, r0
 80063ba:	2300      	movs	r3, #0
 80063bc:	220a      	movs	r2, #10
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 feac 	bl	800711c <__multadd>
 80063c4:	4607      	mov	r7, r0
 80063c6:	e7f1      	b.n	80063ac <_dtoa_r+0xb04>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	9d01      	ldr	r5, [sp, #4]
 80063ce:	ee18 0a10 	vmov	r0, s16
 80063d2:	4631      	mov	r1, r6
 80063d4:	f7ff f9dc 	bl	8005790 <quorem>
 80063d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063dc:	9b01      	ldr	r3, [sp, #4]
 80063de:	f805 ab01 	strb.w	sl, [r5], #1
 80063e2:	1aea      	subs	r2, r5, r3
 80063e4:	9b02      	ldr	r3, [sp, #8]
 80063e6:	4293      	cmp	r3, r2
 80063e8:	dd09      	ble.n	80063fe <_dtoa_r+0xb56>
 80063ea:	ee18 1a10 	vmov	r1, s16
 80063ee:	2300      	movs	r3, #0
 80063f0:	220a      	movs	r2, #10
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 fe92 	bl	800711c <__multadd>
 80063f8:	ee08 0a10 	vmov	s16, r0
 80063fc:	e7e7      	b.n	80063ce <_dtoa_r+0xb26>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bfc8      	it	gt
 8006404:	461d      	movgt	r5, r3
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	bfd8      	it	le
 800640a:	2501      	movle	r5, #1
 800640c:	441d      	add	r5, r3
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	ee18 1a10 	vmov	r1, s16
 8006416:	2201      	movs	r2, #1
 8006418:	4620      	mov	r0, r4
 800641a:	f001 f879 	bl	8007510 <__lshift>
 800641e:	4631      	mov	r1, r6
 8006420:	ee08 0a10 	vmov	s16, r0
 8006424:	f001 f8e4 	bl	80075f0 <__mcmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	dc91      	bgt.n	8006350 <_dtoa_r+0xaa8>
 800642c:	d102      	bne.n	8006434 <_dtoa_r+0xb8c>
 800642e:	f01a 0f01 	tst.w	sl, #1
 8006432:	d18d      	bne.n	8006350 <_dtoa_r+0xaa8>
 8006434:	462b      	mov	r3, r5
 8006436:	461d      	mov	r5, r3
 8006438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800643c:	2a30      	cmp	r2, #48	; 0x30
 800643e:	d0fa      	beq.n	8006436 <_dtoa_r+0xb8e>
 8006440:	e6d7      	b.n	80061f2 <_dtoa_r+0x94a>
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	429a      	cmp	r2, r3
 8006446:	d184      	bne.n	8006352 <_dtoa_r+0xaaa>
 8006448:	9b00      	ldr	r3, [sp, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2331      	movs	r3, #49	; 0x31
 8006450:	7013      	strb	r3, [r2, #0]
 8006452:	e6ce      	b.n	80061f2 <_dtoa_r+0x94a>
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <_dtoa_r+0xbd4>)
 8006456:	f7ff ba95 	b.w	8005984 <_dtoa_r+0xdc>
 800645a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f aa6e 	bne.w	800593e <_dtoa_r+0x96>
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <_dtoa_r+0xbd8>)
 8006464:	f7ff ba8e 	b.w	8005984 <_dtoa_r+0xdc>
 8006468:	9b02      	ldr	r3, [sp, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dcae      	bgt.n	80063cc <_dtoa_r+0xb24>
 800646e:	9b06      	ldr	r3, [sp, #24]
 8006470:	2b02      	cmp	r3, #2
 8006472:	f73f aea8 	bgt.w	80061c6 <_dtoa_r+0x91e>
 8006476:	e7a9      	b.n	80063cc <_dtoa_r+0xb24>
 8006478:	08009330 	.word	0x08009330
 800647c:	08009591 	.word	0x08009591
 8006480:	080092b1 	.word	0x080092b1

08006484 <__sflush_r>:
 8006484:	898a      	ldrh	r2, [r1, #12]
 8006486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648a:	4605      	mov	r5, r0
 800648c:	0710      	lsls	r0, r2, #28
 800648e:	460c      	mov	r4, r1
 8006490:	d458      	bmi.n	8006544 <__sflush_r+0xc0>
 8006492:	684b      	ldr	r3, [r1, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	dc05      	bgt.n	80064a4 <__sflush_r+0x20>
 8006498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc02      	bgt.n	80064a4 <__sflush_r+0x20>
 800649e:	2000      	movs	r0, #0
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d0f9      	beq.n	800649e <__sflush_r+0x1a>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064b0:	682f      	ldr	r7, [r5, #0]
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	d032      	beq.n	800651c <__sflush_r+0x98>
 80064b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	075a      	lsls	r2, r3, #29
 80064bc:	d505      	bpl.n	80064ca <__sflush_r+0x46>
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	1ac0      	subs	r0, r0, r3
 80064c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c4:	b10b      	cbz	r3, 80064ca <__sflush_r+0x46>
 80064c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c8:	1ac0      	subs	r0, r0, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	4602      	mov	r2, r0
 80064ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d0:	6a21      	ldr	r1, [r4, #32]
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b0      	blx	r6
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	d106      	bne.n	80064ea <__sflush_r+0x66>
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	291d      	cmp	r1, #29
 80064e0:	d82c      	bhi.n	800653c <__sflush_r+0xb8>
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <__sflush_r+0x108>)
 80064e4:	40ca      	lsrs	r2, r1
 80064e6:	07d6      	lsls	r6, r2, #31
 80064e8:	d528      	bpl.n	800653c <__sflush_r+0xb8>
 80064ea:	2200      	movs	r2, #0
 80064ec:	6062      	str	r2, [r4, #4]
 80064ee:	04d9      	lsls	r1, r3, #19
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	d504      	bpl.n	8006500 <__sflush_r+0x7c>
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0x7a>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b903      	cbnz	r3, 8006500 <__sflush_r+0x7c>
 80064fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006502:	602f      	str	r7, [r5, #0]
 8006504:	2900      	cmp	r1, #0
 8006506:	d0ca      	beq.n	800649e <__sflush_r+0x1a>
 8006508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <__sflush_r+0x92>
 8006510:	4628      	mov	r0, r5
 8006512:	f001 fa79 	bl	8007a08 <_free_r>
 8006516:	2000      	movs	r0, #0
 8006518:	6360      	str	r0, [r4, #52]	; 0x34
 800651a:	e7c1      	b.n	80064a0 <__sflush_r+0x1c>
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	2301      	movs	r3, #1
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	1c41      	adds	r1, r0, #1
 8006526:	d1c7      	bne.n	80064b8 <__sflush_r+0x34>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0c4      	beq.n	80064b8 <__sflush_r+0x34>
 800652e:	2b1d      	cmp	r3, #29
 8006530:	d001      	beq.n	8006536 <__sflush_r+0xb2>
 8006532:	2b16      	cmp	r3, #22
 8006534:	d101      	bne.n	800653a <__sflush_r+0xb6>
 8006536:	602f      	str	r7, [r5, #0]
 8006538:	e7b1      	b.n	800649e <__sflush_r+0x1a>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	e7ad      	b.n	80064a0 <__sflush_r+0x1c>
 8006544:	690f      	ldr	r7, [r1, #16]
 8006546:	2f00      	cmp	r7, #0
 8006548:	d0a9      	beq.n	800649e <__sflush_r+0x1a>
 800654a:	0793      	lsls	r3, r2, #30
 800654c:	680e      	ldr	r6, [r1, #0]
 800654e:	bf08      	it	eq
 8006550:	694b      	ldreq	r3, [r1, #20]
 8006552:	600f      	str	r7, [r1, #0]
 8006554:	bf18      	it	ne
 8006556:	2300      	movne	r3, #0
 8006558:	eba6 0807 	sub.w	r8, r6, r7
 800655c:	608b      	str	r3, [r1, #8]
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	dd9c      	ble.n	800649e <__sflush_r+0x1a>
 8006564:	6a21      	ldr	r1, [r4, #32]
 8006566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006568:	4643      	mov	r3, r8
 800656a:	463a      	mov	r2, r7
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	2800      	cmp	r0, #0
 8006572:	dc06      	bgt.n	8006582 <__sflush_r+0xfe>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e78e      	b.n	80064a0 <__sflush_r+0x1c>
 8006582:	4407      	add	r7, r0
 8006584:	eba8 0800 	sub.w	r8, r8, r0
 8006588:	e7e9      	b.n	800655e <__sflush_r+0xda>
 800658a:	bf00      	nop
 800658c:	20400001 	.word	0x20400001

08006590 <_fflush_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b913      	cbnz	r3, 80065a0 <_fflush_r+0x10>
 800659a:	2500      	movs	r5, #0
 800659c:	4628      	mov	r0, r5
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	b118      	cbz	r0, 80065aa <_fflush_r+0x1a>
 80065a2:	6983      	ldr	r3, [r0, #24]
 80065a4:	b90b      	cbnz	r3, 80065aa <_fflush_r+0x1a>
 80065a6:	f000 f899 	bl	80066dc <__sinit>
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <_fflush_r+0x6c>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d11b      	bne.n	80065e8 <_fflush_r+0x58>
 80065b0:	686c      	ldr	r4, [r5, #4]
 80065b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <_fflush_r+0xa>
 80065ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065bc:	07d0      	lsls	r0, r2, #31
 80065be:	d404      	bmi.n	80065ca <_fflush_r+0x3a>
 80065c0:	0599      	lsls	r1, r3, #22
 80065c2:	d402      	bmi.n	80065ca <_fflush_r+0x3a>
 80065c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065c6:	f000 fcb8 	bl	8006f3a <__retarget_lock_acquire_recursive>
 80065ca:	4628      	mov	r0, r5
 80065cc:	4621      	mov	r1, r4
 80065ce:	f7ff ff59 	bl	8006484 <__sflush_r>
 80065d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d4:	07da      	lsls	r2, r3, #31
 80065d6:	4605      	mov	r5, r0
 80065d8:	d4e0      	bmi.n	800659c <_fflush_r+0xc>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	059b      	lsls	r3, r3, #22
 80065de:	d4dd      	bmi.n	800659c <_fflush_r+0xc>
 80065e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e2:	f000 fcab 	bl	8006f3c <__retarget_lock_release_recursive>
 80065e6:	e7d9      	b.n	800659c <_fflush_r+0xc>
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <_fflush_r+0x70>)
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d101      	bne.n	80065f2 <_fflush_r+0x62>
 80065ee:	68ac      	ldr	r4, [r5, #8]
 80065f0:	e7df      	b.n	80065b2 <_fflush_r+0x22>
 80065f2:	4b04      	ldr	r3, [pc, #16]	; (8006604 <_fflush_r+0x74>)
 80065f4:	429c      	cmp	r4, r3
 80065f6:	bf08      	it	eq
 80065f8:	68ec      	ldreq	r4, [r5, #12]
 80065fa:	e7da      	b.n	80065b2 <_fflush_r+0x22>
 80065fc:	08009364 	.word	0x08009364
 8006600:	08009384 	.word	0x08009384
 8006604:	08009344 	.word	0x08009344

08006608 <fflush>:
 8006608:	4601      	mov	r1, r0
 800660a:	b920      	cbnz	r0, 8006616 <fflush+0xe>
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <fflush+0x18>)
 800660e:	4905      	ldr	r1, [pc, #20]	; (8006624 <fflush+0x1c>)
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	f000 b8fe 	b.w	8006812 <_fwalk_reent>
 8006616:	4b04      	ldr	r3, [pc, #16]	; (8006628 <fflush+0x20>)
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	f7ff bfb9 	b.w	8006590 <_fflush_r>
 800661e:	bf00      	nop
 8006620:	08009124 	.word	0x08009124
 8006624:	08006591 	.word	0x08006591
 8006628:	2000000c 	.word	0x2000000c

0800662c <std>:
 800662c:	2300      	movs	r3, #0
 800662e:	b510      	push	{r4, lr}
 8006630:	4604      	mov	r4, r0
 8006632:	e9c0 3300 	strd	r3, r3, [r0]
 8006636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800663a:	6083      	str	r3, [r0, #8]
 800663c:	8181      	strh	r1, [r0, #12]
 800663e:	6643      	str	r3, [r0, #100]	; 0x64
 8006640:	81c2      	strh	r2, [r0, #14]
 8006642:	6183      	str	r3, [r0, #24]
 8006644:	4619      	mov	r1, r3
 8006646:	2208      	movs	r2, #8
 8006648:	305c      	adds	r0, #92	; 0x5c
 800664a:	f7fd fa55 	bl	8003af8 <memset>
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <std+0x38>)
 8006650:	6263      	str	r3, [r4, #36]	; 0x24
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <std+0x3c>)
 8006654:	62a3      	str	r3, [r4, #40]	; 0x28
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <std+0x40>)
 8006658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <std+0x44>)
 800665c:	6224      	str	r4, [r4, #32]
 800665e:	6323      	str	r3, [r4, #48]	; 0x30
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	08008941 	.word	0x08008941
 8006668:	08008963 	.word	0x08008963
 800666c:	0800899b 	.word	0x0800899b
 8006670:	080089bf 	.word	0x080089bf

08006674 <_cleanup_r>:
 8006674:	4901      	ldr	r1, [pc, #4]	; (800667c <_cleanup_r+0x8>)
 8006676:	f000 b8cc 	b.w	8006812 <_fwalk_reent>
 800667a:	bf00      	nop
 800667c:	08006591 	.word	0x08006591

08006680 <__sfmoreglue>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	2268      	movs	r2, #104	; 0x68
 8006684:	1e4d      	subs	r5, r1, #1
 8006686:	4355      	muls	r5, r2
 8006688:	460e      	mov	r6, r1
 800668a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800668e:	f001 fa27 	bl	8007ae0 <_malloc_r>
 8006692:	4604      	mov	r4, r0
 8006694:	b140      	cbz	r0, 80066a8 <__sfmoreglue+0x28>
 8006696:	2100      	movs	r1, #0
 8006698:	e9c0 1600 	strd	r1, r6, [r0]
 800669c:	300c      	adds	r0, #12
 800669e:	60a0      	str	r0, [r4, #8]
 80066a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066a4:	f7fd fa28 	bl	8003af8 <memset>
 80066a8:	4620      	mov	r0, r4
 80066aa:	bd70      	pop	{r4, r5, r6, pc}

080066ac <__sfp_lock_acquire>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sfp_lock_acquire+0x8>)
 80066ae:	f000 bc44 	b.w	8006f3a <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	2000028d 	.word	0x2000028d

080066b8 <__sfp_lock_release>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sfp_lock_release+0x8>)
 80066ba:	f000 bc3f 	b.w	8006f3c <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	2000028d 	.word	0x2000028d

080066c4 <__sinit_lock_acquire>:
 80066c4:	4801      	ldr	r0, [pc, #4]	; (80066cc <__sinit_lock_acquire+0x8>)
 80066c6:	f000 bc38 	b.w	8006f3a <__retarget_lock_acquire_recursive>
 80066ca:	bf00      	nop
 80066cc:	2000028e 	.word	0x2000028e

080066d0 <__sinit_lock_release>:
 80066d0:	4801      	ldr	r0, [pc, #4]	; (80066d8 <__sinit_lock_release+0x8>)
 80066d2:	f000 bc33 	b.w	8006f3c <__retarget_lock_release_recursive>
 80066d6:	bf00      	nop
 80066d8:	2000028e 	.word	0x2000028e

080066dc <__sinit>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4604      	mov	r4, r0
 80066e0:	f7ff fff0 	bl	80066c4 <__sinit_lock_acquire>
 80066e4:	69a3      	ldr	r3, [r4, #24]
 80066e6:	b11b      	cbz	r3, 80066f0 <__sinit+0x14>
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ec:	f7ff bff0 	b.w	80066d0 <__sinit_lock_release>
 80066f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066f4:	6523      	str	r3, [r4, #80]	; 0x50
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <__sinit+0x68>)
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <__sinit+0x6c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80066fe:	42a3      	cmp	r3, r4
 8006700:	bf04      	itt	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	61a3      	streq	r3, [r4, #24]
 8006706:	4620      	mov	r0, r4
 8006708:	f000 f820 	bl	800674c <__sfp>
 800670c:	6060      	str	r0, [r4, #4]
 800670e:	4620      	mov	r0, r4
 8006710:	f000 f81c 	bl	800674c <__sfp>
 8006714:	60a0      	str	r0, [r4, #8]
 8006716:	4620      	mov	r0, r4
 8006718:	f000 f818 	bl	800674c <__sfp>
 800671c:	2200      	movs	r2, #0
 800671e:	60e0      	str	r0, [r4, #12]
 8006720:	2104      	movs	r1, #4
 8006722:	6860      	ldr	r0, [r4, #4]
 8006724:	f7ff ff82 	bl	800662c <std>
 8006728:	68a0      	ldr	r0, [r4, #8]
 800672a:	2201      	movs	r2, #1
 800672c:	2109      	movs	r1, #9
 800672e:	f7ff ff7d 	bl	800662c <std>
 8006732:	68e0      	ldr	r0, [r4, #12]
 8006734:	2202      	movs	r2, #2
 8006736:	2112      	movs	r1, #18
 8006738:	f7ff ff78 	bl	800662c <std>
 800673c:	2301      	movs	r3, #1
 800673e:	61a3      	str	r3, [r4, #24]
 8006740:	e7d2      	b.n	80066e8 <__sinit+0xc>
 8006742:	bf00      	nop
 8006744:	08009124 	.word	0x08009124
 8006748:	08006675 	.word	0x08006675

0800674c <__sfp>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	4607      	mov	r7, r0
 8006750:	f7ff ffac 	bl	80066ac <__sfp_lock_acquire>
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <__sfp+0x84>)
 8006756:	681e      	ldr	r6, [r3, #0]
 8006758:	69b3      	ldr	r3, [r6, #24]
 800675a:	b913      	cbnz	r3, 8006762 <__sfp+0x16>
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff ffbd 	bl	80066dc <__sinit>
 8006762:	3648      	adds	r6, #72	; 0x48
 8006764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006768:	3b01      	subs	r3, #1
 800676a:	d503      	bpl.n	8006774 <__sfp+0x28>
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	b30b      	cbz	r3, 80067b4 <__sfp+0x68>
 8006770:	6836      	ldr	r6, [r6, #0]
 8006772:	e7f7      	b.n	8006764 <__sfp+0x18>
 8006774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006778:	b9d5      	cbnz	r5, 80067b0 <__sfp+0x64>
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <__sfp+0x88>)
 800677c:	60e3      	str	r3, [r4, #12]
 800677e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006782:	6665      	str	r5, [r4, #100]	; 0x64
 8006784:	f000 fbd8 	bl	8006f38 <__retarget_lock_init_recursive>
 8006788:	f7ff ff96 	bl	80066b8 <__sfp_lock_release>
 800678c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006794:	6025      	str	r5, [r4, #0]
 8006796:	61a5      	str	r5, [r4, #24]
 8006798:	2208      	movs	r2, #8
 800679a:	4629      	mov	r1, r5
 800679c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067a0:	f7fd f9aa 	bl	8003af8 <memset>
 80067a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067ac:	4620      	mov	r0, r4
 80067ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b0:	3468      	adds	r4, #104	; 0x68
 80067b2:	e7d9      	b.n	8006768 <__sfp+0x1c>
 80067b4:	2104      	movs	r1, #4
 80067b6:	4638      	mov	r0, r7
 80067b8:	f7ff ff62 	bl	8006680 <__sfmoreglue>
 80067bc:	4604      	mov	r4, r0
 80067be:	6030      	str	r0, [r6, #0]
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d1d5      	bne.n	8006770 <__sfp+0x24>
 80067c4:	f7ff ff78 	bl	80066b8 <__sfp_lock_release>
 80067c8:	230c      	movs	r3, #12
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	e7ee      	b.n	80067ac <__sfp+0x60>
 80067ce:	bf00      	nop
 80067d0:	08009124 	.word	0x08009124
 80067d4:	ffff0001 	.word	0xffff0001

080067d8 <_fwalk>:
 80067d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067dc:	460f      	mov	r7, r1
 80067de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067e2:	2600      	movs	r6, #0
 80067e4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80067e8:	f1b8 0801 	subs.w	r8, r8, #1
 80067ec:	d505      	bpl.n	80067fa <_fwalk+0x22>
 80067ee:	6824      	ldr	r4, [r4, #0]
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d1f7      	bne.n	80067e4 <_fwalk+0xc>
 80067f4:	4630      	mov	r0, r6
 80067f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d906      	bls.n	800680e <_fwalk+0x36>
 8006800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006804:	3301      	adds	r3, #1
 8006806:	d002      	beq.n	800680e <_fwalk+0x36>
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	4306      	orrs	r6, r0
 800680e:	3568      	adds	r5, #104	; 0x68
 8006810:	e7ea      	b.n	80067e8 <_fwalk+0x10>

08006812 <_fwalk_reent>:
 8006812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006816:	4606      	mov	r6, r0
 8006818:	4688      	mov	r8, r1
 800681a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800681e:	2700      	movs	r7, #0
 8006820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006824:	f1b9 0901 	subs.w	r9, r9, #1
 8006828:	d505      	bpl.n	8006836 <_fwalk_reent+0x24>
 800682a:	6824      	ldr	r4, [r4, #0]
 800682c:	2c00      	cmp	r4, #0
 800682e:	d1f7      	bne.n	8006820 <_fwalk_reent+0xe>
 8006830:	4638      	mov	r0, r7
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d907      	bls.n	800684c <_fwalk_reent+0x3a>
 800683c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006840:	3301      	adds	r3, #1
 8006842:	d003      	beq.n	800684c <_fwalk_reent+0x3a>
 8006844:	4629      	mov	r1, r5
 8006846:	4630      	mov	r0, r6
 8006848:	47c0      	blx	r8
 800684a:	4307      	orrs	r7, r0
 800684c:	3568      	adds	r5, #104	; 0x68
 800684e:	e7e9      	b.n	8006824 <_fwalk_reent+0x12>

08006850 <rshift>:
 8006850:	6903      	ldr	r3, [r0, #16]
 8006852:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006856:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800685a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800685e:	f100 0414 	add.w	r4, r0, #20
 8006862:	dd45      	ble.n	80068f0 <rshift+0xa0>
 8006864:	f011 011f 	ands.w	r1, r1, #31
 8006868:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800686c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006870:	d10c      	bne.n	800688c <rshift+0x3c>
 8006872:	f100 0710 	add.w	r7, r0, #16
 8006876:	4629      	mov	r1, r5
 8006878:	42b1      	cmp	r1, r6
 800687a:	d334      	bcc.n	80068e6 <rshift+0x96>
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	1eea      	subs	r2, r5, #3
 8006882:	4296      	cmp	r6, r2
 8006884:	bf38      	it	cc
 8006886:	2300      	movcc	r3, #0
 8006888:	4423      	add	r3, r4
 800688a:	e015      	b.n	80068b8 <rshift+0x68>
 800688c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006890:	f1c1 0820 	rsb	r8, r1, #32
 8006894:	40cf      	lsrs	r7, r1
 8006896:	f105 0e04 	add.w	lr, r5, #4
 800689a:	46a1      	mov	r9, r4
 800689c:	4576      	cmp	r6, lr
 800689e:	46f4      	mov	ip, lr
 80068a0:	d815      	bhi.n	80068ce <rshift+0x7e>
 80068a2:	1a9a      	subs	r2, r3, r2
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	3a04      	subs	r2, #4
 80068a8:	3501      	adds	r5, #1
 80068aa:	42ae      	cmp	r6, r5
 80068ac:	bf38      	it	cc
 80068ae:	2200      	movcc	r2, #0
 80068b0:	18a3      	adds	r3, r4, r2
 80068b2:	50a7      	str	r7, [r4, r2]
 80068b4:	b107      	cbz	r7, 80068b8 <rshift+0x68>
 80068b6:	3304      	adds	r3, #4
 80068b8:	1b1a      	subs	r2, r3, r4
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80068c0:	bf08      	it	eq
 80068c2:	2300      	moveq	r3, #0
 80068c4:	6102      	str	r2, [r0, #16]
 80068c6:	bf08      	it	eq
 80068c8:	6143      	streq	r3, [r0, #20]
 80068ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ce:	f8dc c000 	ldr.w	ip, [ip]
 80068d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80068d6:	ea4c 0707 	orr.w	r7, ip, r7
 80068da:	f849 7b04 	str.w	r7, [r9], #4
 80068de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068e2:	40cf      	lsrs	r7, r1
 80068e4:	e7da      	b.n	800689c <rshift+0x4c>
 80068e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80068ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80068ee:	e7c3      	b.n	8006878 <rshift+0x28>
 80068f0:	4623      	mov	r3, r4
 80068f2:	e7e1      	b.n	80068b8 <rshift+0x68>

080068f4 <__hexdig_fun>:
 80068f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	d802      	bhi.n	8006902 <__hexdig_fun+0xe>
 80068fc:	3820      	subs	r0, #32
 80068fe:	b2c0      	uxtb	r0, r0
 8006900:	4770      	bx	lr
 8006902:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006906:	2b05      	cmp	r3, #5
 8006908:	d801      	bhi.n	800690e <__hexdig_fun+0x1a>
 800690a:	3847      	subs	r0, #71	; 0x47
 800690c:	e7f7      	b.n	80068fe <__hexdig_fun+0xa>
 800690e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006912:	2b05      	cmp	r3, #5
 8006914:	d801      	bhi.n	800691a <__hexdig_fun+0x26>
 8006916:	3827      	subs	r0, #39	; 0x27
 8006918:	e7f1      	b.n	80068fe <__hexdig_fun+0xa>
 800691a:	2000      	movs	r0, #0
 800691c:	4770      	bx	lr
	...

08006920 <__gethex>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	ed2d 8b02 	vpush	{d8}
 8006928:	b089      	sub	sp, #36	; 0x24
 800692a:	ee08 0a10 	vmov	s16, r0
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	4bb4      	ldr	r3, [pc, #720]	; (8006c04 <__gethex+0x2e4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	4618      	mov	r0, r3
 8006938:	468b      	mov	fp, r1
 800693a:	4690      	mov	r8, r2
 800693c:	f7f9 fc68 	bl	8000210 <strlen>
 8006940:	9b01      	ldr	r3, [sp, #4]
 8006942:	f8db 2000 	ldr.w	r2, [fp]
 8006946:	4403      	add	r3, r0
 8006948:	4682      	mov	sl, r0
 800694a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	1c93      	adds	r3, r2, #2
 8006952:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006956:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800695a:	32fe      	adds	r2, #254	; 0xfe
 800695c:	18d1      	adds	r1, r2, r3
 800695e:	461f      	mov	r7, r3
 8006960:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006964:	9100      	str	r1, [sp, #0]
 8006966:	2830      	cmp	r0, #48	; 0x30
 8006968:	d0f8      	beq.n	800695c <__gethex+0x3c>
 800696a:	f7ff ffc3 	bl	80068f4 <__hexdig_fun>
 800696e:	4604      	mov	r4, r0
 8006970:	2800      	cmp	r0, #0
 8006972:	d13a      	bne.n	80069ea <__gethex+0xca>
 8006974:	9901      	ldr	r1, [sp, #4]
 8006976:	4652      	mov	r2, sl
 8006978:	4638      	mov	r0, r7
 800697a:	f002 f824 	bl	80089c6 <strncmp>
 800697e:	4605      	mov	r5, r0
 8006980:	2800      	cmp	r0, #0
 8006982:	d168      	bne.n	8006a56 <__gethex+0x136>
 8006984:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006988:	eb07 060a 	add.w	r6, r7, sl
 800698c:	f7ff ffb2 	bl	80068f4 <__hexdig_fun>
 8006990:	2800      	cmp	r0, #0
 8006992:	d062      	beq.n	8006a5a <__gethex+0x13a>
 8006994:	4633      	mov	r3, r6
 8006996:	7818      	ldrb	r0, [r3, #0]
 8006998:	2830      	cmp	r0, #48	; 0x30
 800699a:	461f      	mov	r7, r3
 800699c:	f103 0301 	add.w	r3, r3, #1
 80069a0:	d0f9      	beq.n	8006996 <__gethex+0x76>
 80069a2:	f7ff ffa7 	bl	80068f4 <__hexdig_fun>
 80069a6:	2301      	movs	r3, #1
 80069a8:	fab0 f480 	clz	r4, r0
 80069ac:	0964      	lsrs	r4, r4, #5
 80069ae:	4635      	mov	r5, r6
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	463a      	mov	r2, r7
 80069b4:	4616      	mov	r6, r2
 80069b6:	3201      	adds	r2, #1
 80069b8:	7830      	ldrb	r0, [r6, #0]
 80069ba:	f7ff ff9b 	bl	80068f4 <__hexdig_fun>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d1f8      	bne.n	80069b4 <__gethex+0x94>
 80069c2:	9901      	ldr	r1, [sp, #4]
 80069c4:	4652      	mov	r2, sl
 80069c6:	4630      	mov	r0, r6
 80069c8:	f001 fffd 	bl	80089c6 <strncmp>
 80069cc:	b980      	cbnz	r0, 80069f0 <__gethex+0xd0>
 80069ce:	b94d      	cbnz	r5, 80069e4 <__gethex+0xc4>
 80069d0:	eb06 050a 	add.w	r5, r6, sl
 80069d4:	462a      	mov	r2, r5
 80069d6:	4616      	mov	r6, r2
 80069d8:	3201      	adds	r2, #1
 80069da:	7830      	ldrb	r0, [r6, #0]
 80069dc:	f7ff ff8a 	bl	80068f4 <__hexdig_fun>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d1f8      	bne.n	80069d6 <__gethex+0xb6>
 80069e4:	1bad      	subs	r5, r5, r6
 80069e6:	00ad      	lsls	r5, r5, #2
 80069e8:	e004      	b.n	80069f4 <__gethex+0xd4>
 80069ea:	2400      	movs	r4, #0
 80069ec:	4625      	mov	r5, r4
 80069ee:	e7e0      	b.n	80069b2 <__gethex+0x92>
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	d1f7      	bne.n	80069e4 <__gethex+0xc4>
 80069f4:	7833      	ldrb	r3, [r6, #0]
 80069f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069fa:	2b50      	cmp	r3, #80	; 0x50
 80069fc:	d13b      	bne.n	8006a76 <__gethex+0x156>
 80069fe:	7873      	ldrb	r3, [r6, #1]
 8006a00:	2b2b      	cmp	r3, #43	; 0x2b
 8006a02:	d02c      	beq.n	8006a5e <__gethex+0x13e>
 8006a04:	2b2d      	cmp	r3, #45	; 0x2d
 8006a06:	d02e      	beq.n	8006a66 <__gethex+0x146>
 8006a08:	1c71      	adds	r1, r6, #1
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	7808      	ldrb	r0, [r1, #0]
 8006a10:	f7ff ff70 	bl	80068f4 <__hexdig_fun>
 8006a14:	1e43      	subs	r3, r0, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b18      	cmp	r3, #24
 8006a1a:	d82c      	bhi.n	8006a76 <__gethex+0x156>
 8006a1c:	f1a0 0210 	sub.w	r2, r0, #16
 8006a20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a24:	f7ff ff66 	bl	80068f4 <__hexdig_fun>
 8006a28:	1e43      	subs	r3, r0, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b18      	cmp	r3, #24
 8006a2e:	d91d      	bls.n	8006a6c <__gethex+0x14c>
 8006a30:	f1b9 0f00 	cmp.w	r9, #0
 8006a34:	d000      	beq.n	8006a38 <__gethex+0x118>
 8006a36:	4252      	negs	r2, r2
 8006a38:	4415      	add	r5, r2
 8006a3a:	f8cb 1000 	str.w	r1, [fp]
 8006a3e:	b1e4      	cbz	r4, 8006a7a <__gethex+0x15a>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf14      	ite	ne
 8006a46:	2700      	movne	r7, #0
 8006a48:	2706      	moveq	r7, #6
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	b009      	add	sp, #36	; 0x24
 8006a4e:	ecbd 8b02 	vpop	{d8}
 8006a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a56:	463e      	mov	r6, r7
 8006a58:	4625      	mov	r5, r4
 8006a5a:	2401      	movs	r4, #1
 8006a5c:	e7ca      	b.n	80069f4 <__gethex+0xd4>
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	1cb1      	adds	r1, r6, #2
 8006a64:	e7d3      	b.n	8006a0e <__gethex+0xee>
 8006a66:	f04f 0901 	mov.w	r9, #1
 8006a6a:	e7fa      	b.n	8006a62 <__gethex+0x142>
 8006a6c:	230a      	movs	r3, #10
 8006a6e:	fb03 0202 	mla	r2, r3, r2, r0
 8006a72:	3a10      	subs	r2, #16
 8006a74:	e7d4      	b.n	8006a20 <__gethex+0x100>
 8006a76:	4631      	mov	r1, r6
 8006a78:	e7df      	b.n	8006a3a <__gethex+0x11a>
 8006a7a:	1bf3      	subs	r3, r6, r7
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	4621      	mov	r1, r4
 8006a80:	2b07      	cmp	r3, #7
 8006a82:	dc0b      	bgt.n	8006a9c <__gethex+0x17c>
 8006a84:	ee18 0a10 	vmov	r0, s16
 8006a88:	f000 fae6 	bl	8007058 <_Balloc>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	b940      	cbnz	r0, 8006aa2 <__gethex+0x182>
 8006a90:	4b5d      	ldr	r3, [pc, #372]	; (8006c08 <__gethex+0x2e8>)
 8006a92:	4602      	mov	r2, r0
 8006a94:	21de      	movs	r1, #222	; 0xde
 8006a96:	485d      	ldr	r0, [pc, #372]	; (8006c0c <__gethex+0x2ec>)
 8006a98:	f002 f9d0 	bl	8008e3c <__assert_func>
 8006a9c:	3101      	adds	r1, #1
 8006a9e:	105b      	asrs	r3, r3, #1
 8006aa0:	e7ee      	b.n	8006a80 <__gethex+0x160>
 8006aa2:	f100 0914 	add.w	r9, r0, #20
 8006aa6:	f04f 0b00 	mov.w	fp, #0
 8006aaa:	f1ca 0301 	rsb	r3, sl, #1
 8006aae:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ab2:	f8cd b000 	str.w	fp, [sp]
 8006ab6:	9306      	str	r3, [sp, #24]
 8006ab8:	42b7      	cmp	r7, r6
 8006aba:	d340      	bcc.n	8006b3e <__gethex+0x21e>
 8006abc:	9802      	ldr	r0, [sp, #8]
 8006abe:	9b00      	ldr	r3, [sp, #0]
 8006ac0:	f840 3b04 	str.w	r3, [r0], #4
 8006ac4:	eba0 0009 	sub.w	r0, r0, r9
 8006ac8:	1080      	asrs	r0, r0, #2
 8006aca:	0146      	lsls	r6, r0, #5
 8006acc:	6120      	str	r0, [r4, #16]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fbb4 	bl	800723c <__hi0bits>
 8006ad4:	1a30      	subs	r0, r6, r0
 8006ad6:	f8d8 6000 	ldr.w	r6, [r8]
 8006ada:	42b0      	cmp	r0, r6
 8006adc:	dd63      	ble.n	8006ba6 <__gethex+0x286>
 8006ade:	1b87      	subs	r7, r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 ff58 	bl	8007998 <__any_on>
 8006ae8:	4682      	mov	sl, r0
 8006aea:	b1a8      	cbz	r0, 8006b18 <__gethex+0x1f8>
 8006aec:	1e7b      	subs	r3, r7, #1
 8006aee:	1159      	asrs	r1, r3, #5
 8006af0:	f003 021f 	and.w	r2, r3, #31
 8006af4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006af8:	f04f 0a01 	mov.w	sl, #1
 8006afc:	fa0a f202 	lsl.w	r2, sl, r2
 8006b00:	420a      	tst	r2, r1
 8006b02:	d009      	beq.n	8006b18 <__gethex+0x1f8>
 8006b04:	4553      	cmp	r3, sl
 8006b06:	dd05      	ble.n	8006b14 <__gethex+0x1f4>
 8006b08:	1eb9      	subs	r1, r7, #2
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 ff44 	bl	8007998 <__any_on>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d145      	bne.n	8006ba0 <__gethex+0x280>
 8006b14:	f04f 0a02 	mov.w	sl, #2
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff fe98 	bl	8006850 <rshift>
 8006b20:	443d      	add	r5, r7
 8006b22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b26:	42ab      	cmp	r3, r5
 8006b28:	da4c      	bge.n	8006bc4 <__gethex+0x2a4>
 8006b2a:	ee18 0a10 	vmov	r0, s16
 8006b2e:	4621      	mov	r1, r4
 8006b30:	f000 fad2 	bl	80070d8 <_Bfree>
 8006b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b36:	2300      	movs	r3, #0
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	27a3      	movs	r7, #163	; 0xa3
 8006b3c:	e785      	b.n	8006a4a <__gethex+0x12a>
 8006b3e:	1e73      	subs	r3, r6, #1
 8006b40:	9a05      	ldr	r2, [sp, #20]
 8006b42:	9303      	str	r3, [sp, #12]
 8006b44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d019      	beq.n	8006b80 <__gethex+0x260>
 8006b4c:	f1bb 0f20 	cmp.w	fp, #32
 8006b50:	d107      	bne.n	8006b62 <__gethex+0x242>
 8006b52:	9b02      	ldr	r3, [sp, #8]
 8006b54:	9a00      	ldr	r2, [sp, #0]
 8006b56:	f843 2b04 	str.w	r2, [r3], #4
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	469b      	mov	fp, r3
 8006b62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b66:	f7ff fec5 	bl	80068f4 <__hexdig_fun>
 8006b6a:	9b00      	ldr	r3, [sp, #0]
 8006b6c:	f000 000f 	and.w	r0, r0, #15
 8006b70:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b74:	4303      	orrs	r3, r0
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	f10b 0b04 	add.w	fp, fp, #4
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	e00d      	b.n	8006b9c <__gethex+0x27c>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	9a06      	ldr	r2, [sp, #24]
 8006b84:	4413      	add	r3, r2
 8006b86:	42bb      	cmp	r3, r7
 8006b88:	d3e0      	bcc.n	8006b4c <__gethex+0x22c>
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	9901      	ldr	r1, [sp, #4]
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	4652      	mov	r2, sl
 8006b92:	f001 ff18 	bl	80089c6 <strncmp>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d1d7      	bne.n	8006b4c <__gethex+0x22c>
 8006b9c:	461e      	mov	r6, r3
 8006b9e:	e78b      	b.n	8006ab8 <__gethex+0x198>
 8006ba0:	f04f 0a03 	mov.w	sl, #3
 8006ba4:	e7b8      	b.n	8006b18 <__gethex+0x1f8>
 8006ba6:	da0a      	bge.n	8006bbe <__gethex+0x29e>
 8006ba8:	1a37      	subs	r7, r6, r0
 8006baa:	4621      	mov	r1, r4
 8006bac:	ee18 0a10 	vmov	r0, s16
 8006bb0:	463a      	mov	r2, r7
 8006bb2:	f000 fcad 	bl	8007510 <__lshift>
 8006bb6:	1bed      	subs	r5, r5, r7
 8006bb8:	4604      	mov	r4, r0
 8006bba:	f100 0914 	add.w	r9, r0, #20
 8006bbe:	f04f 0a00 	mov.w	sl, #0
 8006bc2:	e7ae      	b.n	8006b22 <__gethex+0x202>
 8006bc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bc8:	42a8      	cmp	r0, r5
 8006bca:	dd72      	ble.n	8006cb2 <__gethex+0x392>
 8006bcc:	1b45      	subs	r5, r0, r5
 8006bce:	42ae      	cmp	r6, r5
 8006bd0:	dc36      	bgt.n	8006c40 <__gethex+0x320>
 8006bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d02a      	beq.n	8006c30 <__gethex+0x310>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d02c      	beq.n	8006c38 <__gethex+0x318>
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d11c      	bne.n	8006c1c <__gethex+0x2fc>
 8006be2:	42ae      	cmp	r6, r5
 8006be4:	d11a      	bne.n	8006c1c <__gethex+0x2fc>
 8006be6:	2e01      	cmp	r6, #1
 8006be8:	d112      	bne.n	8006c10 <__gethex+0x2f0>
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	f8c9 3000 	str.w	r3, [r9]
 8006bfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bfc:	2762      	movs	r7, #98	; 0x62
 8006bfe:	601c      	str	r4, [r3, #0]
 8006c00:	e723      	b.n	8006a4a <__gethex+0x12a>
 8006c02:	bf00      	nop
 8006c04:	0800940c 	.word	0x0800940c
 8006c08:	08009330 	.word	0x08009330
 8006c0c:	080093a4 	.word	0x080093a4
 8006c10:	1e71      	subs	r1, r6, #1
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fec0 	bl	8007998 <__any_on>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d1e6      	bne.n	8006bea <__gethex+0x2ca>
 8006c1c:	ee18 0a10 	vmov	r0, s16
 8006c20:	4621      	mov	r1, r4
 8006c22:	f000 fa59 	bl	80070d8 <_Bfree>
 8006c26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	2750      	movs	r7, #80	; 0x50
 8006c2e:	e70c      	b.n	8006a4a <__gethex+0x12a>
 8006c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f2      	bne.n	8006c1c <__gethex+0x2fc>
 8006c36:	e7d8      	b.n	8006bea <__gethex+0x2ca>
 8006c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1d5      	bne.n	8006bea <__gethex+0x2ca>
 8006c3e:	e7ed      	b.n	8006c1c <__gethex+0x2fc>
 8006c40:	1e6f      	subs	r7, r5, #1
 8006c42:	f1ba 0f00 	cmp.w	sl, #0
 8006c46:	d131      	bne.n	8006cac <__gethex+0x38c>
 8006c48:	b127      	cbz	r7, 8006c54 <__gethex+0x334>
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 fea3 	bl	8007998 <__any_on>
 8006c52:	4682      	mov	sl, r0
 8006c54:	117b      	asrs	r3, r7, #5
 8006c56:	2101      	movs	r1, #1
 8006c58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c5c:	f007 071f 	and.w	r7, r7, #31
 8006c60:	fa01 f707 	lsl.w	r7, r1, r7
 8006c64:	421f      	tst	r7, r3
 8006c66:	4629      	mov	r1, r5
 8006c68:	4620      	mov	r0, r4
 8006c6a:	bf18      	it	ne
 8006c6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c70:	1b76      	subs	r6, r6, r5
 8006c72:	f7ff fded 	bl	8006850 <rshift>
 8006c76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006c7a:	2702      	movs	r7, #2
 8006c7c:	f1ba 0f00 	cmp.w	sl, #0
 8006c80:	d048      	beq.n	8006d14 <__gethex+0x3f4>
 8006c82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d015      	beq.n	8006cb6 <__gethex+0x396>
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d017      	beq.n	8006cbe <__gethex+0x39e>
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d109      	bne.n	8006ca6 <__gethex+0x386>
 8006c92:	f01a 0f02 	tst.w	sl, #2
 8006c96:	d006      	beq.n	8006ca6 <__gethex+0x386>
 8006c98:	f8d9 0000 	ldr.w	r0, [r9]
 8006c9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ca0:	f01a 0f01 	tst.w	sl, #1
 8006ca4:	d10e      	bne.n	8006cc4 <__gethex+0x3a4>
 8006ca6:	f047 0710 	orr.w	r7, r7, #16
 8006caa:	e033      	b.n	8006d14 <__gethex+0x3f4>
 8006cac:	f04f 0a01 	mov.w	sl, #1
 8006cb0:	e7d0      	b.n	8006c54 <__gethex+0x334>
 8006cb2:	2701      	movs	r7, #1
 8006cb4:	e7e2      	b.n	8006c7c <__gethex+0x35c>
 8006cb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb8:	f1c3 0301 	rsb	r3, r3, #1
 8006cbc:	9315      	str	r3, [sp, #84]	; 0x54
 8006cbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <__gethex+0x386>
 8006cc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006cc8:	f104 0314 	add.w	r3, r4, #20
 8006ccc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006cd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006cd4:	f04f 0c00 	mov.w	ip, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cde:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006ce2:	d01c      	beq.n	8006d1e <__gethex+0x3fe>
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	6002      	str	r2, [r0, #0]
 8006ce8:	2f02      	cmp	r7, #2
 8006cea:	f104 0314 	add.w	r3, r4, #20
 8006cee:	d13f      	bne.n	8006d70 <__gethex+0x450>
 8006cf0:	f8d8 2000 	ldr.w	r2, [r8]
 8006cf4:	3a01      	subs	r2, #1
 8006cf6:	42b2      	cmp	r2, r6
 8006cf8:	d10a      	bne.n	8006d10 <__gethex+0x3f0>
 8006cfa:	1171      	asrs	r1, r6, #5
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d02:	f006 061f 	and.w	r6, r6, #31
 8006d06:	fa02 f606 	lsl.w	r6, r2, r6
 8006d0a:	421e      	tst	r6, r3
 8006d0c:	bf18      	it	ne
 8006d0e:	4617      	movne	r7, r2
 8006d10:	f047 0720 	orr.w	r7, r7, #32
 8006d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d16:	601c      	str	r4, [r3, #0]
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	601d      	str	r5, [r3, #0]
 8006d1c:	e695      	b.n	8006a4a <__gethex+0x12a>
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d24:	d8d8      	bhi.n	8006cd8 <__gethex+0x3b8>
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	459b      	cmp	fp, r3
 8006d2a:	db19      	blt.n	8006d60 <__gethex+0x440>
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	ee18 0a10 	vmov	r0, s16
 8006d32:	3101      	adds	r1, #1
 8006d34:	f000 f990 	bl	8007058 <_Balloc>
 8006d38:	4681      	mov	r9, r0
 8006d3a:	b918      	cbnz	r0, 8006d44 <__gethex+0x424>
 8006d3c:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <__gethex+0x488>)
 8006d3e:	4602      	mov	r2, r0
 8006d40:	2184      	movs	r1, #132	; 0x84
 8006d42:	e6a8      	b.n	8006a96 <__gethex+0x176>
 8006d44:	6922      	ldr	r2, [r4, #16]
 8006d46:	3202      	adds	r2, #2
 8006d48:	f104 010c 	add.w	r1, r4, #12
 8006d4c:	0092      	lsls	r2, r2, #2
 8006d4e:	300c      	adds	r0, #12
 8006d50:	f000 f974 	bl	800703c <memcpy>
 8006d54:	4621      	mov	r1, r4
 8006d56:	ee18 0a10 	vmov	r0, s16
 8006d5a:	f000 f9bd 	bl	80070d8 <_Bfree>
 8006d5e:	464c      	mov	r4, r9
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d68:	6122      	str	r2, [r4, #16]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	615a      	str	r2, [r3, #20]
 8006d6e:	e7bb      	b.n	8006ce8 <__gethex+0x3c8>
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	455a      	cmp	r2, fp
 8006d74:	dd0b      	ble.n	8006d8e <__gethex+0x46e>
 8006d76:	2101      	movs	r1, #1
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff fd69 	bl	8006850 <rshift>
 8006d7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d82:	3501      	adds	r5, #1
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	f6ff aed0 	blt.w	8006b2a <__gethex+0x20a>
 8006d8a:	2701      	movs	r7, #1
 8006d8c:	e7c0      	b.n	8006d10 <__gethex+0x3f0>
 8006d8e:	f016 061f 	ands.w	r6, r6, #31
 8006d92:	d0fa      	beq.n	8006d8a <__gethex+0x46a>
 8006d94:	4453      	add	r3, sl
 8006d96:	f1c6 0620 	rsb	r6, r6, #32
 8006d9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006d9e:	f000 fa4d 	bl	800723c <__hi0bits>
 8006da2:	42b0      	cmp	r0, r6
 8006da4:	dbe7      	blt.n	8006d76 <__gethex+0x456>
 8006da6:	e7f0      	b.n	8006d8a <__gethex+0x46a>
 8006da8:	08009330 	.word	0x08009330

08006dac <L_shift>:
 8006dac:	f1c2 0208 	rsb	r2, r2, #8
 8006db0:	0092      	lsls	r2, r2, #2
 8006db2:	b570      	push	{r4, r5, r6, lr}
 8006db4:	f1c2 0620 	rsb	r6, r2, #32
 8006db8:	6843      	ldr	r3, [r0, #4]
 8006dba:	6804      	ldr	r4, [r0, #0]
 8006dbc:	fa03 f506 	lsl.w	r5, r3, r6
 8006dc0:	432c      	orrs	r4, r5
 8006dc2:	40d3      	lsrs	r3, r2
 8006dc4:	6004      	str	r4, [r0, #0]
 8006dc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006dca:	4288      	cmp	r0, r1
 8006dcc:	d3f4      	bcc.n	8006db8 <L_shift+0xc>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}

08006dd0 <__match>:
 8006dd0:	b530      	push	{r4, r5, lr}
 8006dd2:	6803      	ldr	r3, [r0, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dda:	b914      	cbnz	r4, 8006de2 <__match+0x12>
 8006ddc:	6003      	str	r3, [r0, #0]
 8006dde:	2001      	movs	r0, #1
 8006de0:	bd30      	pop	{r4, r5, pc}
 8006de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006de6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006dea:	2d19      	cmp	r5, #25
 8006dec:	bf98      	it	ls
 8006dee:	3220      	addls	r2, #32
 8006df0:	42a2      	cmp	r2, r4
 8006df2:	d0f0      	beq.n	8006dd6 <__match+0x6>
 8006df4:	2000      	movs	r0, #0
 8006df6:	e7f3      	b.n	8006de0 <__match+0x10>

08006df8 <__hexnan>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	680b      	ldr	r3, [r1, #0]
 8006dfe:	115e      	asrs	r6, r3, #5
 8006e00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e04:	f013 031f 	ands.w	r3, r3, #31
 8006e08:	b087      	sub	sp, #28
 8006e0a:	bf18      	it	ne
 8006e0c:	3604      	addne	r6, #4
 8006e0e:	2500      	movs	r5, #0
 8006e10:	1f37      	subs	r7, r6, #4
 8006e12:	4690      	mov	r8, r2
 8006e14:	6802      	ldr	r2, [r0, #0]
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	4682      	mov	sl, r0
 8006e1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e1e:	46b9      	mov	r9, r7
 8006e20:	463c      	mov	r4, r7
 8006e22:	9502      	str	r5, [sp, #8]
 8006e24:	46ab      	mov	fp, r5
 8006e26:	7851      	ldrb	r1, [r2, #1]
 8006e28:	1c53      	adds	r3, r2, #1
 8006e2a:	9303      	str	r3, [sp, #12]
 8006e2c:	b341      	cbz	r1, 8006e80 <__hexnan+0x88>
 8006e2e:	4608      	mov	r0, r1
 8006e30:	9205      	str	r2, [sp, #20]
 8006e32:	9104      	str	r1, [sp, #16]
 8006e34:	f7ff fd5e 	bl	80068f4 <__hexdig_fun>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d14f      	bne.n	8006edc <__hexnan+0xe4>
 8006e3c:	9904      	ldr	r1, [sp, #16]
 8006e3e:	9a05      	ldr	r2, [sp, #20]
 8006e40:	2920      	cmp	r1, #32
 8006e42:	d818      	bhi.n	8006e76 <__hexnan+0x7e>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	459b      	cmp	fp, r3
 8006e48:	dd13      	ble.n	8006e72 <__hexnan+0x7a>
 8006e4a:	454c      	cmp	r4, r9
 8006e4c:	d206      	bcs.n	8006e5c <__hexnan+0x64>
 8006e4e:	2d07      	cmp	r5, #7
 8006e50:	dc04      	bgt.n	8006e5c <__hexnan+0x64>
 8006e52:	462a      	mov	r2, r5
 8006e54:	4649      	mov	r1, r9
 8006e56:	4620      	mov	r0, r4
 8006e58:	f7ff ffa8 	bl	8006dac <L_shift>
 8006e5c:	4544      	cmp	r4, r8
 8006e5e:	d950      	bls.n	8006f02 <__hexnan+0x10a>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f1a4 0904 	sub.w	r9, r4, #4
 8006e66:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8006e6e:	464c      	mov	r4, r9
 8006e70:	461d      	mov	r5, r3
 8006e72:	9a03      	ldr	r2, [sp, #12]
 8006e74:	e7d7      	b.n	8006e26 <__hexnan+0x2e>
 8006e76:	2929      	cmp	r1, #41	; 0x29
 8006e78:	d156      	bne.n	8006f28 <__hexnan+0x130>
 8006e7a:	3202      	adds	r2, #2
 8006e7c:	f8ca 2000 	str.w	r2, [sl]
 8006e80:	f1bb 0f00 	cmp.w	fp, #0
 8006e84:	d050      	beq.n	8006f28 <__hexnan+0x130>
 8006e86:	454c      	cmp	r4, r9
 8006e88:	d206      	bcs.n	8006e98 <__hexnan+0xa0>
 8006e8a:	2d07      	cmp	r5, #7
 8006e8c:	dc04      	bgt.n	8006e98 <__hexnan+0xa0>
 8006e8e:	462a      	mov	r2, r5
 8006e90:	4649      	mov	r1, r9
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff ff8a 	bl	8006dac <L_shift>
 8006e98:	4544      	cmp	r4, r8
 8006e9a:	d934      	bls.n	8006f06 <__hexnan+0x10e>
 8006e9c:	f1a8 0204 	sub.w	r2, r8, #4
 8006ea0:	4623      	mov	r3, r4
 8006ea2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ea6:	f842 1f04 	str.w	r1, [r2, #4]!
 8006eaa:	429f      	cmp	r7, r3
 8006eac:	d2f9      	bcs.n	8006ea2 <__hexnan+0xaa>
 8006eae:	1b3b      	subs	r3, r7, r4
 8006eb0:	f023 0303 	bic.w	r3, r3, #3
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	3e03      	subs	r6, #3
 8006eba:	42b4      	cmp	r4, r6
 8006ebc:	bf88      	it	hi
 8006ebe:	2304      	movhi	r3, #4
 8006ec0:	4443      	add	r3, r8
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f843 2b04 	str.w	r2, [r3], #4
 8006ec8:	429f      	cmp	r7, r3
 8006eca:	d2fb      	bcs.n	8006ec4 <__hexnan+0xcc>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	b91b      	cbnz	r3, 8006ed8 <__hexnan+0xe0>
 8006ed0:	4547      	cmp	r7, r8
 8006ed2:	d127      	bne.n	8006f24 <__hexnan+0x12c>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	2005      	movs	r0, #5
 8006eda:	e026      	b.n	8006f2a <__hexnan+0x132>
 8006edc:	3501      	adds	r5, #1
 8006ede:	2d08      	cmp	r5, #8
 8006ee0:	f10b 0b01 	add.w	fp, fp, #1
 8006ee4:	dd06      	ble.n	8006ef4 <__hexnan+0xfc>
 8006ee6:	4544      	cmp	r4, r8
 8006ee8:	d9c3      	bls.n	8006e72 <__hexnan+0x7a>
 8006eea:	2300      	movs	r3, #0
 8006eec:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ef0:	2501      	movs	r5, #1
 8006ef2:	3c04      	subs	r4, #4
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	f000 000f 	and.w	r0, r0, #15
 8006efa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	e7b7      	b.n	8006e72 <__hexnan+0x7a>
 8006f02:	2508      	movs	r5, #8
 8006f04:	e7b5      	b.n	8006e72 <__hexnan+0x7a>
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0df      	beq.n	8006ecc <__hexnan+0xd4>
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f10:	f1c3 0320 	rsb	r3, r3, #32
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f1c:	401a      	ands	r2, r3
 8006f1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f22:	e7d3      	b.n	8006ecc <__hexnan+0xd4>
 8006f24:	3f04      	subs	r7, #4
 8006f26:	e7d1      	b.n	8006ecc <__hexnan+0xd4>
 8006f28:	2004      	movs	r0, #4
 8006f2a:	b007      	add	sp, #28
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f30 <_localeconv_r>:
 8006f30:	4800      	ldr	r0, [pc, #0]	; (8006f34 <_localeconv_r+0x4>)
 8006f32:	4770      	bx	lr
 8006f34:	20000164 	.word	0x20000164

08006f38 <__retarget_lock_init_recursive>:
 8006f38:	4770      	bx	lr

08006f3a <__retarget_lock_acquire_recursive>:
 8006f3a:	4770      	bx	lr

08006f3c <__retarget_lock_release_recursive>:
 8006f3c:	4770      	bx	lr

08006f3e <__swhatbuf_r>:
 8006f3e:	b570      	push	{r4, r5, r6, lr}
 8006f40:	460e      	mov	r6, r1
 8006f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f46:	2900      	cmp	r1, #0
 8006f48:	b096      	sub	sp, #88	; 0x58
 8006f4a:	4614      	mov	r4, r2
 8006f4c:	461d      	mov	r5, r3
 8006f4e:	da08      	bge.n	8006f62 <__swhatbuf_r+0x24>
 8006f50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	602a      	str	r2, [r5, #0]
 8006f58:	061a      	lsls	r2, r3, #24
 8006f5a:	d410      	bmi.n	8006f7e <__swhatbuf_r+0x40>
 8006f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f60:	e00e      	b.n	8006f80 <__swhatbuf_r+0x42>
 8006f62:	466a      	mov	r2, sp
 8006f64:	f001 ffaa 	bl	8008ebc <_fstat_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	dbf1      	blt.n	8006f50 <__swhatbuf_r+0x12>
 8006f6c:	9a01      	ldr	r2, [sp, #4]
 8006f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f76:	425a      	negs	r2, r3
 8006f78:	415a      	adcs	r2, r3
 8006f7a:	602a      	str	r2, [r5, #0]
 8006f7c:	e7ee      	b.n	8006f5c <__swhatbuf_r+0x1e>
 8006f7e:	2340      	movs	r3, #64	; 0x40
 8006f80:	2000      	movs	r0, #0
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	b016      	add	sp, #88	; 0x58
 8006f86:	bd70      	pop	{r4, r5, r6, pc}

08006f88 <__smakebuf_r>:
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f8c:	079d      	lsls	r5, r3, #30
 8006f8e:	4606      	mov	r6, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	d507      	bpl.n	8006fa4 <__smakebuf_r+0x1c>
 8006f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	6163      	str	r3, [r4, #20]
 8006fa0:	b002      	add	sp, #8
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	ab01      	add	r3, sp, #4
 8006fa6:	466a      	mov	r2, sp
 8006fa8:	f7ff ffc9 	bl	8006f3e <__swhatbuf_r>
 8006fac:	9900      	ldr	r1, [sp, #0]
 8006fae:	4605      	mov	r5, r0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 fd95 	bl	8007ae0 <_malloc_r>
 8006fb6:	b948      	cbnz	r0, 8006fcc <__smakebuf_r+0x44>
 8006fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbc:	059a      	lsls	r2, r3, #22
 8006fbe:	d4ef      	bmi.n	8006fa0 <__smakebuf_r+0x18>
 8006fc0:	f023 0303 	bic.w	r3, r3, #3
 8006fc4:	f043 0302 	orr.w	r3, r3, #2
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	e7e3      	b.n	8006f94 <__smakebuf_r+0xc>
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <__smakebuf_r+0x7c>)
 8006fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	9b00      	ldr	r3, [sp, #0]
 8006fdc:	6163      	str	r3, [r4, #20]
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	6120      	str	r0, [r4, #16]
 8006fe2:	b15b      	cbz	r3, 8006ffc <__smakebuf_r+0x74>
 8006fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f001 ff79 	bl	8008ee0 <_isatty_r>
 8006fee:	b128      	cbz	r0, 8006ffc <__smakebuf_r+0x74>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	89a0      	ldrh	r0, [r4, #12]
 8006ffe:	4305      	orrs	r5, r0
 8007000:	81a5      	strh	r5, [r4, #12]
 8007002:	e7cd      	b.n	8006fa0 <__smakebuf_r+0x18>
 8007004:	08006675 	.word	0x08006675

08007008 <malloc>:
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <malloc+0xc>)
 800700a:	4601      	mov	r1, r0
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f000 bd67 	b.w	8007ae0 <_malloc_r>
 8007012:	bf00      	nop
 8007014:	2000000c 	.word	0x2000000c

08007018 <__ascii_mbtowc>:
 8007018:	b082      	sub	sp, #8
 800701a:	b901      	cbnz	r1, 800701e <__ascii_mbtowc+0x6>
 800701c:	a901      	add	r1, sp, #4
 800701e:	b142      	cbz	r2, 8007032 <__ascii_mbtowc+0x1a>
 8007020:	b14b      	cbz	r3, 8007036 <__ascii_mbtowc+0x1e>
 8007022:	7813      	ldrb	r3, [r2, #0]
 8007024:	600b      	str	r3, [r1, #0]
 8007026:	7812      	ldrb	r2, [r2, #0]
 8007028:	1e10      	subs	r0, r2, #0
 800702a:	bf18      	it	ne
 800702c:	2001      	movne	r0, #1
 800702e:	b002      	add	sp, #8
 8007030:	4770      	bx	lr
 8007032:	4610      	mov	r0, r2
 8007034:	e7fb      	b.n	800702e <__ascii_mbtowc+0x16>
 8007036:	f06f 0001 	mvn.w	r0, #1
 800703a:	e7f8      	b.n	800702e <__ascii_mbtowc+0x16>

0800703c <memcpy>:
 800703c:	440a      	add	r2, r1
 800703e:	4291      	cmp	r1, r2
 8007040:	f100 33ff 	add.w	r3, r0, #4294967295
 8007044:	d100      	bne.n	8007048 <memcpy+0xc>
 8007046:	4770      	bx	lr
 8007048:	b510      	push	{r4, lr}
 800704a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800704e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007052:	4291      	cmp	r1, r2
 8007054:	d1f9      	bne.n	800704a <memcpy+0xe>
 8007056:	bd10      	pop	{r4, pc}

08007058 <_Balloc>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800705c:	4604      	mov	r4, r0
 800705e:	460d      	mov	r5, r1
 8007060:	b976      	cbnz	r6, 8007080 <_Balloc+0x28>
 8007062:	2010      	movs	r0, #16
 8007064:	f7ff ffd0 	bl	8007008 <malloc>
 8007068:	4602      	mov	r2, r0
 800706a:	6260      	str	r0, [r4, #36]	; 0x24
 800706c:	b920      	cbnz	r0, 8007078 <_Balloc+0x20>
 800706e:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <_Balloc+0x78>)
 8007070:	4818      	ldr	r0, [pc, #96]	; (80070d4 <_Balloc+0x7c>)
 8007072:	2166      	movs	r1, #102	; 0x66
 8007074:	f001 fee2 	bl	8008e3c <__assert_func>
 8007078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800707c:	6006      	str	r6, [r0, #0]
 800707e:	60c6      	str	r6, [r0, #12]
 8007080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007082:	68f3      	ldr	r3, [r6, #12]
 8007084:	b183      	cbz	r3, 80070a8 <_Balloc+0x50>
 8007086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800708e:	b9b8      	cbnz	r0, 80070c0 <_Balloc+0x68>
 8007090:	2101      	movs	r1, #1
 8007092:	fa01 f605 	lsl.w	r6, r1, r5
 8007096:	1d72      	adds	r2, r6, #5
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fc9d 	bl	80079da <_calloc_r>
 80070a0:	b160      	cbz	r0, 80070bc <_Balloc+0x64>
 80070a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070a6:	e00e      	b.n	80070c6 <_Balloc+0x6e>
 80070a8:	2221      	movs	r2, #33	; 0x21
 80070aa:	2104      	movs	r1, #4
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 fc94 	bl	80079da <_calloc_r>
 80070b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b4:	60f0      	str	r0, [r6, #12]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e4      	bne.n	8007086 <_Balloc+0x2e>
 80070bc:	2000      	movs	r0, #0
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	6802      	ldr	r2, [r0, #0]
 80070c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070c6:	2300      	movs	r3, #0
 80070c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070cc:	e7f7      	b.n	80070be <_Balloc+0x66>
 80070ce:	bf00      	nop
 80070d0:	080092be 	.word	0x080092be
 80070d4:	08009420 	.word	0x08009420

080070d8 <_Bfree>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070dc:	4605      	mov	r5, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	b976      	cbnz	r6, 8007100 <_Bfree+0x28>
 80070e2:	2010      	movs	r0, #16
 80070e4:	f7ff ff90 	bl	8007008 <malloc>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6268      	str	r0, [r5, #36]	; 0x24
 80070ec:	b920      	cbnz	r0, 80070f8 <_Bfree+0x20>
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <_Bfree+0x3c>)
 80070f0:	4809      	ldr	r0, [pc, #36]	; (8007118 <_Bfree+0x40>)
 80070f2:	218a      	movs	r1, #138	; 0x8a
 80070f4:	f001 fea2 	bl	8008e3c <__assert_func>
 80070f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070fc:	6006      	str	r6, [r0, #0]
 80070fe:	60c6      	str	r6, [r0, #12]
 8007100:	b13c      	cbz	r4, 8007112 <_Bfree+0x3a>
 8007102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007104:	6862      	ldr	r2, [r4, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800710c:	6021      	str	r1, [r4, #0]
 800710e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	080092be 	.word	0x080092be
 8007118:	08009420 	.word	0x08009420

0800711c <__multadd>:
 800711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007120:	690d      	ldr	r5, [r1, #16]
 8007122:	4607      	mov	r7, r0
 8007124:	460c      	mov	r4, r1
 8007126:	461e      	mov	r6, r3
 8007128:	f101 0c14 	add.w	ip, r1, #20
 800712c:	2000      	movs	r0, #0
 800712e:	f8dc 3000 	ldr.w	r3, [ip]
 8007132:	b299      	uxth	r1, r3
 8007134:	fb02 6101 	mla	r1, r2, r1, r6
 8007138:	0c1e      	lsrs	r6, r3, #16
 800713a:	0c0b      	lsrs	r3, r1, #16
 800713c:	fb02 3306 	mla	r3, r2, r6, r3
 8007140:	b289      	uxth	r1, r1
 8007142:	3001      	adds	r0, #1
 8007144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007148:	4285      	cmp	r5, r0
 800714a:	f84c 1b04 	str.w	r1, [ip], #4
 800714e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007152:	dcec      	bgt.n	800712e <__multadd+0x12>
 8007154:	b30e      	cbz	r6, 800719a <__multadd+0x7e>
 8007156:	68a3      	ldr	r3, [r4, #8]
 8007158:	42ab      	cmp	r3, r5
 800715a:	dc19      	bgt.n	8007190 <__multadd+0x74>
 800715c:	6861      	ldr	r1, [r4, #4]
 800715e:	4638      	mov	r0, r7
 8007160:	3101      	adds	r1, #1
 8007162:	f7ff ff79 	bl	8007058 <_Balloc>
 8007166:	4680      	mov	r8, r0
 8007168:	b928      	cbnz	r0, 8007176 <__multadd+0x5a>
 800716a:	4602      	mov	r2, r0
 800716c:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <__multadd+0x84>)
 800716e:	480d      	ldr	r0, [pc, #52]	; (80071a4 <__multadd+0x88>)
 8007170:	21b5      	movs	r1, #181	; 0xb5
 8007172:	f001 fe63 	bl	8008e3c <__assert_func>
 8007176:	6922      	ldr	r2, [r4, #16]
 8007178:	3202      	adds	r2, #2
 800717a:	f104 010c 	add.w	r1, r4, #12
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	300c      	adds	r0, #12
 8007182:	f7ff ff5b 	bl	800703c <memcpy>
 8007186:	4621      	mov	r1, r4
 8007188:	4638      	mov	r0, r7
 800718a:	f7ff ffa5 	bl	80070d8 <_Bfree>
 800718e:	4644      	mov	r4, r8
 8007190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007194:	3501      	adds	r5, #1
 8007196:	615e      	str	r6, [r3, #20]
 8007198:	6125      	str	r5, [r4, #16]
 800719a:	4620      	mov	r0, r4
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a0:	08009330 	.word	0x08009330
 80071a4:	08009420 	.word	0x08009420

080071a8 <__s2b>:
 80071a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	4615      	mov	r5, r2
 80071b0:	461f      	mov	r7, r3
 80071b2:	2209      	movs	r2, #9
 80071b4:	3308      	adds	r3, #8
 80071b6:	4606      	mov	r6, r0
 80071b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071bc:	2100      	movs	r1, #0
 80071be:	2201      	movs	r2, #1
 80071c0:	429a      	cmp	r2, r3
 80071c2:	db09      	blt.n	80071d8 <__s2b+0x30>
 80071c4:	4630      	mov	r0, r6
 80071c6:	f7ff ff47 	bl	8007058 <_Balloc>
 80071ca:	b940      	cbnz	r0, 80071de <__s2b+0x36>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b19      	ldr	r3, [pc, #100]	; (8007234 <__s2b+0x8c>)
 80071d0:	4819      	ldr	r0, [pc, #100]	; (8007238 <__s2b+0x90>)
 80071d2:	21ce      	movs	r1, #206	; 0xce
 80071d4:	f001 fe32 	bl	8008e3c <__assert_func>
 80071d8:	0052      	lsls	r2, r2, #1
 80071da:	3101      	adds	r1, #1
 80071dc:	e7f0      	b.n	80071c0 <__s2b+0x18>
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	6143      	str	r3, [r0, #20]
 80071e2:	2d09      	cmp	r5, #9
 80071e4:	f04f 0301 	mov.w	r3, #1
 80071e8:	6103      	str	r3, [r0, #16]
 80071ea:	dd16      	ble.n	800721a <__s2b+0x72>
 80071ec:	f104 0909 	add.w	r9, r4, #9
 80071f0:	46c8      	mov	r8, r9
 80071f2:	442c      	add	r4, r5
 80071f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80071f8:	4601      	mov	r1, r0
 80071fa:	3b30      	subs	r3, #48	; 0x30
 80071fc:	220a      	movs	r2, #10
 80071fe:	4630      	mov	r0, r6
 8007200:	f7ff ff8c 	bl	800711c <__multadd>
 8007204:	45a0      	cmp	r8, r4
 8007206:	d1f5      	bne.n	80071f4 <__s2b+0x4c>
 8007208:	f1a5 0408 	sub.w	r4, r5, #8
 800720c:	444c      	add	r4, r9
 800720e:	1b2d      	subs	r5, r5, r4
 8007210:	1963      	adds	r3, r4, r5
 8007212:	42bb      	cmp	r3, r7
 8007214:	db04      	blt.n	8007220 <__s2b+0x78>
 8007216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721a:	340a      	adds	r4, #10
 800721c:	2509      	movs	r5, #9
 800721e:	e7f6      	b.n	800720e <__s2b+0x66>
 8007220:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007224:	4601      	mov	r1, r0
 8007226:	3b30      	subs	r3, #48	; 0x30
 8007228:	220a      	movs	r2, #10
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ff76 	bl	800711c <__multadd>
 8007230:	e7ee      	b.n	8007210 <__s2b+0x68>
 8007232:	bf00      	nop
 8007234:	08009330 	.word	0x08009330
 8007238:	08009420 	.word	0x08009420

0800723c <__hi0bits>:
 800723c:	0c03      	lsrs	r3, r0, #16
 800723e:	041b      	lsls	r3, r3, #16
 8007240:	b9d3      	cbnz	r3, 8007278 <__hi0bits+0x3c>
 8007242:	0400      	lsls	r0, r0, #16
 8007244:	2310      	movs	r3, #16
 8007246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800724a:	bf04      	itt	eq
 800724c:	0200      	lsleq	r0, r0, #8
 800724e:	3308      	addeq	r3, #8
 8007250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007254:	bf04      	itt	eq
 8007256:	0100      	lsleq	r0, r0, #4
 8007258:	3304      	addeq	r3, #4
 800725a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800725e:	bf04      	itt	eq
 8007260:	0080      	lsleq	r0, r0, #2
 8007262:	3302      	addeq	r3, #2
 8007264:	2800      	cmp	r0, #0
 8007266:	db05      	blt.n	8007274 <__hi0bits+0x38>
 8007268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800726c:	f103 0301 	add.w	r3, r3, #1
 8007270:	bf08      	it	eq
 8007272:	2320      	moveq	r3, #32
 8007274:	4618      	mov	r0, r3
 8007276:	4770      	bx	lr
 8007278:	2300      	movs	r3, #0
 800727a:	e7e4      	b.n	8007246 <__hi0bits+0xa>

0800727c <__lo0bits>:
 800727c:	6803      	ldr	r3, [r0, #0]
 800727e:	f013 0207 	ands.w	r2, r3, #7
 8007282:	4601      	mov	r1, r0
 8007284:	d00b      	beq.n	800729e <__lo0bits+0x22>
 8007286:	07da      	lsls	r2, r3, #31
 8007288:	d423      	bmi.n	80072d2 <__lo0bits+0x56>
 800728a:	0798      	lsls	r0, r3, #30
 800728c:	bf49      	itett	mi
 800728e:	085b      	lsrmi	r3, r3, #1
 8007290:	089b      	lsrpl	r3, r3, #2
 8007292:	2001      	movmi	r0, #1
 8007294:	600b      	strmi	r3, [r1, #0]
 8007296:	bf5c      	itt	pl
 8007298:	600b      	strpl	r3, [r1, #0]
 800729a:	2002      	movpl	r0, #2
 800729c:	4770      	bx	lr
 800729e:	b298      	uxth	r0, r3
 80072a0:	b9a8      	cbnz	r0, 80072ce <__lo0bits+0x52>
 80072a2:	0c1b      	lsrs	r3, r3, #16
 80072a4:	2010      	movs	r0, #16
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	b90a      	cbnz	r2, 80072ae <__lo0bits+0x32>
 80072aa:	3008      	adds	r0, #8
 80072ac:	0a1b      	lsrs	r3, r3, #8
 80072ae:	071a      	lsls	r2, r3, #28
 80072b0:	bf04      	itt	eq
 80072b2:	091b      	lsreq	r3, r3, #4
 80072b4:	3004      	addeq	r0, #4
 80072b6:	079a      	lsls	r2, r3, #30
 80072b8:	bf04      	itt	eq
 80072ba:	089b      	lsreq	r3, r3, #2
 80072bc:	3002      	addeq	r0, #2
 80072be:	07da      	lsls	r2, r3, #31
 80072c0:	d403      	bmi.n	80072ca <__lo0bits+0x4e>
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	f100 0001 	add.w	r0, r0, #1
 80072c8:	d005      	beq.n	80072d6 <__lo0bits+0x5a>
 80072ca:	600b      	str	r3, [r1, #0]
 80072cc:	4770      	bx	lr
 80072ce:	4610      	mov	r0, r2
 80072d0:	e7e9      	b.n	80072a6 <__lo0bits+0x2a>
 80072d2:	2000      	movs	r0, #0
 80072d4:	4770      	bx	lr
 80072d6:	2020      	movs	r0, #32
 80072d8:	4770      	bx	lr
	...

080072dc <__i2b>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	460c      	mov	r4, r1
 80072e0:	2101      	movs	r1, #1
 80072e2:	f7ff feb9 	bl	8007058 <_Balloc>
 80072e6:	4602      	mov	r2, r0
 80072e8:	b928      	cbnz	r0, 80072f6 <__i2b+0x1a>
 80072ea:	4b05      	ldr	r3, [pc, #20]	; (8007300 <__i2b+0x24>)
 80072ec:	4805      	ldr	r0, [pc, #20]	; (8007304 <__i2b+0x28>)
 80072ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072f2:	f001 fda3 	bl	8008e3c <__assert_func>
 80072f6:	2301      	movs	r3, #1
 80072f8:	6144      	str	r4, [r0, #20]
 80072fa:	6103      	str	r3, [r0, #16]
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	bf00      	nop
 8007300:	08009330 	.word	0x08009330
 8007304:	08009420 	.word	0x08009420

08007308 <__multiply>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	4691      	mov	r9, r2
 800730e:	690a      	ldr	r2, [r1, #16]
 8007310:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007314:	429a      	cmp	r2, r3
 8007316:	bfb8      	it	lt
 8007318:	460b      	movlt	r3, r1
 800731a:	460c      	mov	r4, r1
 800731c:	bfbc      	itt	lt
 800731e:	464c      	movlt	r4, r9
 8007320:	4699      	movlt	r9, r3
 8007322:	6927      	ldr	r7, [r4, #16]
 8007324:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	6861      	ldr	r1, [r4, #4]
 800732c:	eb07 060a 	add.w	r6, r7, sl
 8007330:	42b3      	cmp	r3, r6
 8007332:	b085      	sub	sp, #20
 8007334:	bfb8      	it	lt
 8007336:	3101      	addlt	r1, #1
 8007338:	f7ff fe8e 	bl	8007058 <_Balloc>
 800733c:	b930      	cbnz	r0, 800734c <__multiply+0x44>
 800733e:	4602      	mov	r2, r0
 8007340:	4b44      	ldr	r3, [pc, #272]	; (8007454 <__multiply+0x14c>)
 8007342:	4845      	ldr	r0, [pc, #276]	; (8007458 <__multiply+0x150>)
 8007344:	f240 115d 	movw	r1, #349	; 0x15d
 8007348:	f001 fd78 	bl	8008e3c <__assert_func>
 800734c:	f100 0514 	add.w	r5, r0, #20
 8007350:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007354:	462b      	mov	r3, r5
 8007356:	2200      	movs	r2, #0
 8007358:	4543      	cmp	r3, r8
 800735a:	d321      	bcc.n	80073a0 <__multiply+0x98>
 800735c:	f104 0314 	add.w	r3, r4, #20
 8007360:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007364:	f109 0314 	add.w	r3, r9, #20
 8007368:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800736c:	9202      	str	r2, [sp, #8]
 800736e:	1b3a      	subs	r2, r7, r4
 8007370:	3a15      	subs	r2, #21
 8007372:	f022 0203 	bic.w	r2, r2, #3
 8007376:	3204      	adds	r2, #4
 8007378:	f104 0115 	add.w	r1, r4, #21
 800737c:	428f      	cmp	r7, r1
 800737e:	bf38      	it	cc
 8007380:	2204      	movcc	r2, #4
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9a02      	ldr	r2, [sp, #8]
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	d80c      	bhi.n	80073a6 <__multiply+0x9e>
 800738c:	2e00      	cmp	r6, #0
 800738e:	dd03      	ble.n	8007398 <__multiply+0x90>
 8007390:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007394:	2b00      	cmp	r3, #0
 8007396:	d05a      	beq.n	800744e <__multiply+0x146>
 8007398:	6106      	str	r6, [r0, #16]
 800739a:	b005      	add	sp, #20
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	f843 2b04 	str.w	r2, [r3], #4
 80073a4:	e7d8      	b.n	8007358 <__multiply+0x50>
 80073a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80073aa:	f1ba 0f00 	cmp.w	sl, #0
 80073ae:	d024      	beq.n	80073fa <__multiply+0xf2>
 80073b0:	f104 0e14 	add.w	lr, r4, #20
 80073b4:	46a9      	mov	r9, r5
 80073b6:	f04f 0c00 	mov.w	ip, #0
 80073ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073be:	f8d9 1000 	ldr.w	r1, [r9]
 80073c2:	fa1f fb82 	uxth.w	fp, r2
 80073c6:	b289      	uxth	r1, r1
 80073c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80073cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073d0:	f8d9 2000 	ldr.w	r2, [r9]
 80073d4:	4461      	add	r1, ip
 80073d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073da:	fb0a c20b 	mla	r2, sl, fp, ip
 80073de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073e2:	b289      	uxth	r1, r1
 80073e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073e8:	4577      	cmp	r7, lr
 80073ea:	f849 1b04 	str.w	r1, [r9], #4
 80073ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073f2:	d8e2      	bhi.n	80073ba <__multiply+0xb2>
 80073f4:	9a01      	ldr	r2, [sp, #4]
 80073f6:	f845 c002 	str.w	ip, [r5, r2]
 80073fa:	9a03      	ldr	r2, [sp, #12]
 80073fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007400:	3304      	adds	r3, #4
 8007402:	f1b9 0f00 	cmp.w	r9, #0
 8007406:	d020      	beq.n	800744a <__multiply+0x142>
 8007408:	6829      	ldr	r1, [r5, #0]
 800740a:	f104 0c14 	add.w	ip, r4, #20
 800740e:	46ae      	mov	lr, r5
 8007410:	f04f 0a00 	mov.w	sl, #0
 8007414:	f8bc b000 	ldrh.w	fp, [ip]
 8007418:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800741c:	fb09 220b 	mla	r2, r9, fp, r2
 8007420:	4492      	add	sl, r2
 8007422:	b289      	uxth	r1, r1
 8007424:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007428:	f84e 1b04 	str.w	r1, [lr], #4
 800742c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007430:	f8be 1000 	ldrh.w	r1, [lr]
 8007434:	0c12      	lsrs	r2, r2, #16
 8007436:	fb09 1102 	mla	r1, r9, r2, r1
 800743a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800743e:	4567      	cmp	r7, ip
 8007440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007444:	d8e6      	bhi.n	8007414 <__multiply+0x10c>
 8007446:	9a01      	ldr	r2, [sp, #4]
 8007448:	50a9      	str	r1, [r5, r2]
 800744a:	3504      	adds	r5, #4
 800744c:	e79a      	b.n	8007384 <__multiply+0x7c>
 800744e:	3e01      	subs	r6, #1
 8007450:	e79c      	b.n	800738c <__multiply+0x84>
 8007452:	bf00      	nop
 8007454:	08009330 	.word	0x08009330
 8007458:	08009420 	.word	0x08009420

0800745c <__pow5mult>:
 800745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007460:	4615      	mov	r5, r2
 8007462:	f012 0203 	ands.w	r2, r2, #3
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	d007      	beq.n	800747c <__pow5mult+0x20>
 800746c:	4c25      	ldr	r4, [pc, #148]	; (8007504 <__pow5mult+0xa8>)
 800746e:	3a01      	subs	r2, #1
 8007470:	2300      	movs	r3, #0
 8007472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007476:	f7ff fe51 	bl	800711c <__multadd>
 800747a:	4607      	mov	r7, r0
 800747c:	10ad      	asrs	r5, r5, #2
 800747e:	d03d      	beq.n	80074fc <__pow5mult+0xa0>
 8007480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007482:	b97c      	cbnz	r4, 80074a4 <__pow5mult+0x48>
 8007484:	2010      	movs	r0, #16
 8007486:	f7ff fdbf 	bl	8007008 <malloc>
 800748a:	4602      	mov	r2, r0
 800748c:	6270      	str	r0, [r6, #36]	; 0x24
 800748e:	b928      	cbnz	r0, 800749c <__pow5mult+0x40>
 8007490:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <__pow5mult+0xac>)
 8007492:	481e      	ldr	r0, [pc, #120]	; (800750c <__pow5mult+0xb0>)
 8007494:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007498:	f001 fcd0 	bl	8008e3c <__assert_func>
 800749c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074a0:	6004      	str	r4, [r0, #0]
 80074a2:	60c4      	str	r4, [r0, #12]
 80074a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074ac:	b94c      	cbnz	r4, 80074c2 <__pow5mult+0x66>
 80074ae:	f240 2171 	movw	r1, #625	; 0x271
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ff12 	bl	80072dc <__i2b>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80074be:	4604      	mov	r4, r0
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	07eb      	lsls	r3, r5, #31
 80074c8:	d50a      	bpl.n	80074e0 <__pow5mult+0x84>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4622      	mov	r2, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ff1a 	bl	8007308 <__multiply>
 80074d4:	4639      	mov	r1, r7
 80074d6:	4680      	mov	r8, r0
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff fdfd 	bl	80070d8 <_Bfree>
 80074de:	4647      	mov	r7, r8
 80074e0:	106d      	asrs	r5, r5, #1
 80074e2:	d00b      	beq.n	80074fc <__pow5mult+0xa0>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	b938      	cbnz	r0, 80074f8 <__pow5mult+0x9c>
 80074e8:	4622      	mov	r2, r4
 80074ea:	4621      	mov	r1, r4
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ff0b 	bl	8007308 <__multiply>
 80074f2:	6020      	str	r0, [r4, #0]
 80074f4:	f8c0 9000 	str.w	r9, [r0]
 80074f8:	4604      	mov	r4, r0
 80074fa:	e7e4      	b.n	80074c6 <__pow5mult+0x6a>
 80074fc:	4638      	mov	r0, r7
 80074fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007502:	bf00      	nop
 8007504:	08009570 	.word	0x08009570
 8007508:	080092be 	.word	0x080092be
 800750c:	08009420 	.word	0x08009420

08007510 <__lshift>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	460c      	mov	r4, r1
 8007516:	6849      	ldr	r1, [r1, #4]
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	4607      	mov	r7, r0
 8007522:	4691      	mov	r9, r2
 8007524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007528:	f108 0601 	add.w	r6, r8, #1
 800752c:	42b3      	cmp	r3, r6
 800752e:	db0b      	blt.n	8007548 <__lshift+0x38>
 8007530:	4638      	mov	r0, r7
 8007532:	f7ff fd91 	bl	8007058 <_Balloc>
 8007536:	4605      	mov	r5, r0
 8007538:	b948      	cbnz	r0, 800754e <__lshift+0x3e>
 800753a:	4602      	mov	r2, r0
 800753c:	4b2a      	ldr	r3, [pc, #168]	; (80075e8 <__lshift+0xd8>)
 800753e:	482b      	ldr	r0, [pc, #172]	; (80075ec <__lshift+0xdc>)
 8007540:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007544:	f001 fc7a 	bl	8008e3c <__assert_func>
 8007548:	3101      	adds	r1, #1
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	e7ee      	b.n	800752c <__lshift+0x1c>
 800754e:	2300      	movs	r3, #0
 8007550:	f100 0114 	add.w	r1, r0, #20
 8007554:	f100 0210 	add.w	r2, r0, #16
 8007558:	4618      	mov	r0, r3
 800755a:	4553      	cmp	r3, sl
 800755c:	db37      	blt.n	80075ce <__lshift+0xbe>
 800755e:	6920      	ldr	r0, [r4, #16]
 8007560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007564:	f104 0314 	add.w	r3, r4, #20
 8007568:	f019 091f 	ands.w	r9, r9, #31
 800756c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007570:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007574:	d02f      	beq.n	80075d6 <__lshift+0xc6>
 8007576:	f1c9 0e20 	rsb	lr, r9, #32
 800757a:	468a      	mov	sl, r1
 800757c:	f04f 0c00 	mov.w	ip, #0
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	fa02 f209 	lsl.w	r2, r2, r9
 8007586:	ea42 020c 	orr.w	r2, r2, ip
 800758a:	f84a 2b04 	str.w	r2, [sl], #4
 800758e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007592:	4298      	cmp	r0, r3
 8007594:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007598:	d8f2      	bhi.n	8007580 <__lshift+0x70>
 800759a:	1b03      	subs	r3, r0, r4
 800759c:	3b15      	subs	r3, #21
 800759e:	f023 0303 	bic.w	r3, r3, #3
 80075a2:	3304      	adds	r3, #4
 80075a4:	f104 0215 	add.w	r2, r4, #21
 80075a8:	4290      	cmp	r0, r2
 80075aa:	bf38      	it	cc
 80075ac:	2304      	movcc	r3, #4
 80075ae:	f841 c003 	str.w	ip, [r1, r3]
 80075b2:	f1bc 0f00 	cmp.w	ip, #0
 80075b6:	d001      	beq.n	80075bc <__lshift+0xac>
 80075b8:	f108 0602 	add.w	r6, r8, #2
 80075bc:	3e01      	subs	r6, #1
 80075be:	4638      	mov	r0, r7
 80075c0:	612e      	str	r6, [r5, #16]
 80075c2:	4621      	mov	r1, r4
 80075c4:	f7ff fd88 	bl	80070d8 <_Bfree>
 80075c8:	4628      	mov	r0, r5
 80075ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80075d2:	3301      	adds	r3, #1
 80075d4:	e7c1      	b.n	800755a <__lshift+0x4a>
 80075d6:	3904      	subs	r1, #4
 80075d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80075e0:	4298      	cmp	r0, r3
 80075e2:	d8f9      	bhi.n	80075d8 <__lshift+0xc8>
 80075e4:	e7ea      	b.n	80075bc <__lshift+0xac>
 80075e6:	bf00      	nop
 80075e8:	08009330 	.word	0x08009330
 80075ec:	08009420 	.word	0x08009420

080075f0 <__mcmp>:
 80075f0:	b530      	push	{r4, r5, lr}
 80075f2:	6902      	ldr	r2, [r0, #16]
 80075f4:	690c      	ldr	r4, [r1, #16]
 80075f6:	1b12      	subs	r2, r2, r4
 80075f8:	d10e      	bne.n	8007618 <__mcmp+0x28>
 80075fa:	f100 0314 	add.w	r3, r0, #20
 80075fe:	3114      	adds	r1, #20
 8007600:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007608:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800760c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007610:	42a5      	cmp	r5, r4
 8007612:	d003      	beq.n	800761c <__mcmp+0x2c>
 8007614:	d305      	bcc.n	8007622 <__mcmp+0x32>
 8007616:	2201      	movs	r2, #1
 8007618:	4610      	mov	r0, r2
 800761a:	bd30      	pop	{r4, r5, pc}
 800761c:	4283      	cmp	r3, r0
 800761e:	d3f3      	bcc.n	8007608 <__mcmp+0x18>
 8007620:	e7fa      	b.n	8007618 <__mcmp+0x28>
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	e7f7      	b.n	8007618 <__mcmp+0x28>

08007628 <__mdiff>:
 8007628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	460c      	mov	r4, r1
 800762e:	4606      	mov	r6, r0
 8007630:	4611      	mov	r1, r2
 8007632:	4620      	mov	r0, r4
 8007634:	4690      	mov	r8, r2
 8007636:	f7ff ffdb 	bl	80075f0 <__mcmp>
 800763a:	1e05      	subs	r5, r0, #0
 800763c:	d110      	bne.n	8007660 <__mdiff+0x38>
 800763e:	4629      	mov	r1, r5
 8007640:	4630      	mov	r0, r6
 8007642:	f7ff fd09 	bl	8007058 <_Balloc>
 8007646:	b930      	cbnz	r0, 8007656 <__mdiff+0x2e>
 8007648:	4b3a      	ldr	r3, [pc, #232]	; (8007734 <__mdiff+0x10c>)
 800764a:	4602      	mov	r2, r0
 800764c:	f240 2132 	movw	r1, #562	; 0x232
 8007650:	4839      	ldr	r0, [pc, #228]	; (8007738 <__mdiff+0x110>)
 8007652:	f001 fbf3 	bl	8008e3c <__assert_func>
 8007656:	2301      	movs	r3, #1
 8007658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800765c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007660:	bfa4      	itt	ge
 8007662:	4643      	movge	r3, r8
 8007664:	46a0      	movge	r8, r4
 8007666:	4630      	mov	r0, r6
 8007668:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800766c:	bfa6      	itte	ge
 800766e:	461c      	movge	r4, r3
 8007670:	2500      	movge	r5, #0
 8007672:	2501      	movlt	r5, #1
 8007674:	f7ff fcf0 	bl	8007058 <_Balloc>
 8007678:	b920      	cbnz	r0, 8007684 <__mdiff+0x5c>
 800767a:	4b2e      	ldr	r3, [pc, #184]	; (8007734 <__mdiff+0x10c>)
 800767c:	4602      	mov	r2, r0
 800767e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007682:	e7e5      	b.n	8007650 <__mdiff+0x28>
 8007684:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007688:	6926      	ldr	r6, [r4, #16]
 800768a:	60c5      	str	r5, [r0, #12]
 800768c:	f104 0914 	add.w	r9, r4, #20
 8007690:	f108 0514 	add.w	r5, r8, #20
 8007694:	f100 0e14 	add.w	lr, r0, #20
 8007698:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800769c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076a0:	f108 0210 	add.w	r2, r8, #16
 80076a4:	46f2      	mov	sl, lr
 80076a6:	2100      	movs	r1, #0
 80076a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076b0:	fa1f f883 	uxth.w	r8, r3
 80076b4:	fa11 f18b 	uxtah	r1, r1, fp
 80076b8:	0c1b      	lsrs	r3, r3, #16
 80076ba:	eba1 0808 	sub.w	r8, r1, r8
 80076be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076c6:	fa1f f888 	uxth.w	r8, r8
 80076ca:	1419      	asrs	r1, r3, #16
 80076cc:	454e      	cmp	r6, r9
 80076ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076d2:	f84a 3b04 	str.w	r3, [sl], #4
 80076d6:	d8e7      	bhi.n	80076a8 <__mdiff+0x80>
 80076d8:	1b33      	subs	r3, r6, r4
 80076da:	3b15      	subs	r3, #21
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	3304      	adds	r3, #4
 80076e2:	3415      	adds	r4, #21
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	bf38      	it	cc
 80076e8:	2304      	movcc	r3, #4
 80076ea:	441d      	add	r5, r3
 80076ec:	4473      	add	r3, lr
 80076ee:	469e      	mov	lr, r3
 80076f0:	462e      	mov	r6, r5
 80076f2:	4566      	cmp	r6, ip
 80076f4:	d30e      	bcc.n	8007714 <__mdiff+0xec>
 80076f6:	f10c 0203 	add.w	r2, ip, #3
 80076fa:	1b52      	subs	r2, r2, r5
 80076fc:	f022 0203 	bic.w	r2, r2, #3
 8007700:	3d03      	subs	r5, #3
 8007702:	45ac      	cmp	ip, r5
 8007704:	bf38      	it	cc
 8007706:	2200      	movcc	r2, #0
 8007708:	441a      	add	r2, r3
 800770a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800770e:	b17b      	cbz	r3, 8007730 <__mdiff+0x108>
 8007710:	6107      	str	r7, [r0, #16]
 8007712:	e7a3      	b.n	800765c <__mdiff+0x34>
 8007714:	f856 8b04 	ldr.w	r8, [r6], #4
 8007718:	fa11 f288 	uxtah	r2, r1, r8
 800771c:	1414      	asrs	r4, r2, #16
 800771e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007722:	b292      	uxth	r2, r2
 8007724:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007728:	f84e 2b04 	str.w	r2, [lr], #4
 800772c:	1421      	asrs	r1, r4, #16
 800772e:	e7e0      	b.n	80076f2 <__mdiff+0xca>
 8007730:	3f01      	subs	r7, #1
 8007732:	e7ea      	b.n	800770a <__mdiff+0xe2>
 8007734:	08009330 	.word	0x08009330
 8007738:	08009420 	.word	0x08009420

0800773c <__ulp>:
 800773c:	b082      	sub	sp, #8
 800773e:	ed8d 0b00 	vstr	d0, [sp]
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	4912      	ldr	r1, [pc, #72]	; (8007790 <__ulp+0x54>)
 8007746:	4019      	ands	r1, r3
 8007748:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800774c:	2900      	cmp	r1, #0
 800774e:	dd05      	ble.n	800775c <__ulp+0x20>
 8007750:	2200      	movs	r2, #0
 8007752:	460b      	mov	r3, r1
 8007754:	ec43 2b10 	vmov	d0, r2, r3
 8007758:	b002      	add	sp, #8
 800775a:	4770      	bx	lr
 800775c:	4249      	negs	r1, r1
 800775e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007762:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	da04      	bge.n	800777a <__ulp+0x3e>
 8007770:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007774:	fa41 f300 	asr.w	r3, r1, r0
 8007778:	e7ec      	b.n	8007754 <__ulp+0x18>
 800777a:	f1a0 0114 	sub.w	r1, r0, #20
 800777e:	291e      	cmp	r1, #30
 8007780:	bfda      	itte	le
 8007782:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007786:	fa20 f101 	lsrle.w	r1, r0, r1
 800778a:	2101      	movgt	r1, #1
 800778c:	460a      	mov	r2, r1
 800778e:	e7e1      	b.n	8007754 <__ulp+0x18>
 8007790:	7ff00000 	.word	0x7ff00000

08007794 <__b2d>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	6905      	ldr	r5, [r0, #16]
 8007798:	f100 0714 	add.w	r7, r0, #20
 800779c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80077a0:	1f2e      	subs	r6, r5, #4
 80077a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7ff fd48 	bl	800723c <__hi0bits>
 80077ac:	f1c0 0320 	rsb	r3, r0, #32
 80077b0:	280a      	cmp	r0, #10
 80077b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007830 <__b2d+0x9c>
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	dc14      	bgt.n	80077e4 <__b2d+0x50>
 80077ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80077be:	fa24 f10e 	lsr.w	r1, r4, lr
 80077c2:	42b7      	cmp	r7, r6
 80077c4:	ea41 030c 	orr.w	r3, r1, ip
 80077c8:	bf34      	ite	cc
 80077ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077ce:	2100      	movcs	r1, #0
 80077d0:	3015      	adds	r0, #21
 80077d2:	fa04 f000 	lsl.w	r0, r4, r0
 80077d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80077da:	ea40 0201 	orr.w	r2, r0, r1
 80077de:	ec43 2b10 	vmov	d0, r2, r3
 80077e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e4:	42b7      	cmp	r7, r6
 80077e6:	bf3a      	itte	cc
 80077e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80077f0:	2100      	movcs	r1, #0
 80077f2:	380b      	subs	r0, #11
 80077f4:	d017      	beq.n	8007826 <__b2d+0x92>
 80077f6:	f1c0 0c20 	rsb	ip, r0, #32
 80077fa:	fa04 f500 	lsl.w	r5, r4, r0
 80077fe:	42be      	cmp	r6, r7
 8007800:	fa21 f40c 	lsr.w	r4, r1, ip
 8007804:	ea45 0504 	orr.w	r5, r5, r4
 8007808:	bf8c      	ite	hi
 800780a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800780e:	2400      	movls	r4, #0
 8007810:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007814:	fa01 f000 	lsl.w	r0, r1, r0
 8007818:	fa24 f40c 	lsr.w	r4, r4, ip
 800781c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007820:	ea40 0204 	orr.w	r2, r0, r4
 8007824:	e7db      	b.n	80077de <__b2d+0x4a>
 8007826:	ea44 030c 	orr.w	r3, r4, ip
 800782a:	460a      	mov	r2, r1
 800782c:	e7d7      	b.n	80077de <__b2d+0x4a>
 800782e:	bf00      	nop
 8007830:	3ff00000 	.word	0x3ff00000

08007834 <__d2b>:
 8007834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007838:	4689      	mov	r9, r1
 800783a:	2101      	movs	r1, #1
 800783c:	ec57 6b10 	vmov	r6, r7, d0
 8007840:	4690      	mov	r8, r2
 8007842:	f7ff fc09 	bl	8007058 <_Balloc>
 8007846:	4604      	mov	r4, r0
 8007848:	b930      	cbnz	r0, 8007858 <__d2b+0x24>
 800784a:	4602      	mov	r2, r0
 800784c:	4b25      	ldr	r3, [pc, #148]	; (80078e4 <__d2b+0xb0>)
 800784e:	4826      	ldr	r0, [pc, #152]	; (80078e8 <__d2b+0xb4>)
 8007850:	f240 310a 	movw	r1, #778	; 0x30a
 8007854:	f001 faf2 	bl	8008e3c <__assert_func>
 8007858:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800785c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007860:	bb35      	cbnz	r5, 80078b0 <__d2b+0x7c>
 8007862:	2e00      	cmp	r6, #0
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	d028      	beq.n	80078ba <__d2b+0x86>
 8007868:	4668      	mov	r0, sp
 800786a:	9600      	str	r6, [sp, #0]
 800786c:	f7ff fd06 	bl	800727c <__lo0bits>
 8007870:	9900      	ldr	r1, [sp, #0]
 8007872:	b300      	cbz	r0, 80078b6 <__d2b+0x82>
 8007874:	9a01      	ldr	r2, [sp, #4]
 8007876:	f1c0 0320 	rsb	r3, r0, #32
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	430b      	orrs	r3, r1
 8007880:	40c2      	lsrs	r2, r0
 8007882:	6163      	str	r3, [r4, #20]
 8007884:	9201      	str	r2, [sp, #4]
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	61a3      	str	r3, [r4, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	bf14      	ite	ne
 800788e:	2202      	movne	r2, #2
 8007890:	2201      	moveq	r2, #1
 8007892:	6122      	str	r2, [r4, #16]
 8007894:	b1d5      	cbz	r5, 80078cc <__d2b+0x98>
 8007896:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800789a:	4405      	add	r5, r0
 800789c:	f8c9 5000 	str.w	r5, [r9]
 80078a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078a4:	f8c8 0000 	str.w	r0, [r8]
 80078a8:	4620      	mov	r0, r4
 80078aa:	b003      	add	sp, #12
 80078ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078b4:	e7d5      	b.n	8007862 <__d2b+0x2e>
 80078b6:	6161      	str	r1, [r4, #20]
 80078b8:	e7e5      	b.n	8007886 <__d2b+0x52>
 80078ba:	a801      	add	r0, sp, #4
 80078bc:	f7ff fcde 	bl	800727c <__lo0bits>
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	6163      	str	r3, [r4, #20]
 80078c4:	2201      	movs	r2, #1
 80078c6:	6122      	str	r2, [r4, #16]
 80078c8:	3020      	adds	r0, #32
 80078ca:	e7e3      	b.n	8007894 <__d2b+0x60>
 80078cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078d4:	f8c9 0000 	str.w	r0, [r9]
 80078d8:	6918      	ldr	r0, [r3, #16]
 80078da:	f7ff fcaf 	bl	800723c <__hi0bits>
 80078de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078e2:	e7df      	b.n	80078a4 <__d2b+0x70>
 80078e4:	08009330 	.word	0x08009330
 80078e8:	08009420 	.word	0x08009420

080078ec <__ratio>:
 80078ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	4688      	mov	r8, r1
 80078f2:	4669      	mov	r1, sp
 80078f4:	4681      	mov	r9, r0
 80078f6:	f7ff ff4d 	bl	8007794 <__b2d>
 80078fa:	a901      	add	r1, sp, #4
 80078fc:	4640      	mov	r0, r8
 80078fe:	ec55 4b10 	vmov	r4, r5, d0
 8007902:	f7ff ff47 	bl	8007794 <__b2d>
 8007906:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800790a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800790e:	eba3 0c02 	sub.w	ip, r3, r2
 8007912:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800791c:	ec51 0b10 	vmov	r0, r1, d0
 8007920:	2b00      	cmp	r3, #0
 8007922:	bfd6      	itet	le
 8007924:	460a      	movle	r2, r1
 8007926:	462a      	movgt	r2, r5
 8007928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800792c:	468b      	mov	fp, r1
 800792e:	462f      	mov	r7, r5
 8007930:	bfd4      	ite	le
 8007932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007936:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800793a:	4620      	mov	r0, r4
 800793c:	ee10 2a10 	vmov	r2, s0
 8007940:	465b      	mov	r3, fp
 8007942:	4639      	mov	r1, r7
 8007944:	f7f8 ffa2 	bl	800088c <__aeabi_ddiv>
 8007948:	ec41 0b10 	vmov	d0, r0, r1
 800794c:	b003      	add	sp, #12
 800794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007952 <__copybits>:
 8007952:	3901      	subs	r1, #1
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	1149      	asrs	r1, r1, #5
 8007958:	6914      	ldr	r4, [r2, #16]
 800795a:	3101      	adds	r1, #1
 800795c:	f102 0314 	add.w	r3, r2, #20
 8007960:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007964:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007968:	1f05      	subs	r5, r0, #4
 800796a:	42a3      	cmp	r3, r4
 800796c:	d30c      	bcc.n	8007988 <__copybits+0x36>
 800796e:	1aa3      	subs	r3, r4, r2
 8007970:	3b11      	subs	r3, #17
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	3211      	adds	r2, #17
 8007978:	42a2      	cmp	r2, r4
 800797a:	bf88      	it	hi
 800797c:	2300      	movhi	r3, #0
 800797e:	4418      	add	r0, r3
 8007980:	2300      	movs	r3, #0
 8007982:	4288      	cmp	r0, r1
 8007984:	d305      	bcc.n	8007992 <__copybits+0x40>
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	f853 6b04 	ldr.w	r6, [r3], #4
 800798c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007990:	e7eb      	b.n	800796a <__copybits+0x18>
 8007992:	f840 3b04 	str.w	r3, [r0], #4
 8007996:	e7f4      	b.n	8007982 <__copybits+0x30>

08007998 <__any_on>:
 8007998:	f100 0214 	add.w	r2, r0, #20
 800799c:	6900      	ldr	r0, [r0, #16]
 800799e:	114b      	asrs	r3, r1, #5
 80079a0:	4298      	cmp	r0, r3
 80079a2:	b510      	push	{r4, lr}
 80079a4:	db11      	blt.n	80079ca <__any_on+0x32>
 80079a6:	dd0a      	ble.n	80079be <__any_on+0x26>
 80079a8:	f011 011f 	ands.w	r1, r1, #31
 80079ac:	d007      	beq.n	80079be <__any_on+0x26>
 80079ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079b2:	fa24 f001 	lsr.w	r0, r4, r1
 80079b6:	fa00 f101 	lsl.w	r1, r0, r1
 80079ba:	428c      	cmp	r4, r1
 80079bc:	d10b      	bne.n	80079d6 <__any_on+0x3e>
 80079be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d803      	bhi.n	80079ce <__any_on+0x36>
 80079c6:	2000      	movs	r0, #0
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	4603      	mov	r3, r0
 80079cc:	e7f7      	b.n	80079be <__any_on+0x26>
 80079ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d0f5      	beq.n	80079c2 <__any_on+0x2a>
 80079d6:	2001      	movs	r0, #1
 80079d8:	e7f6      	b.n	80079c8 <__any_on+0x30>

080079da <_calloc_r>:
 80079da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079dc:	fba1 2402 	umull	r2, r4, r1, r2
 80079e0:	b94c      	cbnz	r4, 80079f6 <_calloc_r+0x1c>
 80079e2:	4611      	mov	r1, r2
 80079e4:	9201      	str	r2, [sp, #4]
 80079e6:	f000 f87b 	bl	8007ae0 <_malloc_r>
 80079ea:	9a01      	ldr	r2, [sp, #4]
 80079ec:	4605      	mov	r5, r0
 80079ee:	b930      	cbnz	r0, 80079fe <_calloc_r+0x24>
 80079f0:	4628      	mov	r0, r5
 80079f2:	b003      	add	sp, #12
 80079f4:	bd30      	pop	{r4, r5, pc}
 80079f6:	220c      	movs	r2, #12
 80079f8:	6002      	str	r2, [r0, #0]
 80079fa:	2500      	movs	r5, #0
 80079fc:	e7f8      	b.n	80079f0 <_calloc_r+0x16>
 80079fe:	4621      	mov	r1, r4
 8007a00:	f7fc f87a 	bl	8003af8 <memset>
 8007a04:	e7f4      	b.n	80079f0 <_calloc_r+0x16>
	...

08007a08 <_free_r>:
 8007a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d044      	beq.n	8007a98 <_free_r+0x90>
 8007a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a12:	9001      	str	r0, [sp, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f1a1 0404 	sub.w	r4, r1, #4
 8007a1a:	bfb8      	it	lt
 8007a1c:	18e4      	addlt	r4, r4, r3
 8007a1e:	f001 fa9b 	bl	8008f58 <__malloc_lock>
 8007a22:	4a1e      	ldr	r2, [pc, #120]	; (8007a9c <_free_r+0x94>)
 8007a24:	9801      	ldr	r0, [sp, #4]
 8007a26:	6813      	ldr	r3, [r2, #0]
 8007a28:	b933      	cbnz	r3, 8007a38 <_free_r+0x30>
 8007a2a:	6063      	str	r3, [r4, #4]
 8007a2c:	6014      	str	r4, [r2, #0]
 8007a2e:	b003      	add	sp, #12
 8007a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a34:	f001 ba96 	b.w	8008f64 <__malloc_unlock>
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d908      	bls.n	8007a4e <_free_r+0x46>
 8007a3c:	6825      	ldr	r5, [r4, #0]
 8007a3e:	1961      	adds	r1, r4, r5
 8007a40:	428b      	cmp	r3, r1
 8007a42:	bf01      	itttt	eq
 8007a44:	6819      	ldreq	r1, [r3, #0]
 8007a46:	685b      	ldreq	r3, [r3, #4]
 8007a48:	1949      	addeq	r1, r1, r5
 8007a4a:	6021      	streq	r1, [r4, #0]
 8007a4c:	e7ed      	b.n	8007a2a <_free_r+0x22>
 8007a4e:	461a      	mov	r2, r3
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	b10b      	cbz	r3, 8007a58 <_free_r+0x50>
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	d9fa      	bls.n	8007a4e <_free_r+0x46>
 8007a58:	6811      	ldr	r1, [r2, #0]
 8007a5a:	1855      	adds	r5, r2, r1
 8007a5c:	42a5      	cmp	r5, r4
 8007a5e:	d10b      	bne.n	8007a78 <_free_r+0x70>
 8007a60:	6824      	ldr	r4, [r4, #0]
 8007a62:	4421      	add	r1, r4
 8007a64:	1854      	adds	r4, r2, r1
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	6011      	str	r1, [r2, #0]
 8007a6a:	d1e0      	bne.n	8007a2e <_free_r+0x26>
 8007a6c:	681c      	ldr	r4, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	6053      	str	r3, [r2, #4]
 8007a72:	4421      	add	r1, r4
 8007a74:	6011      	str	r1, [r2, #0]
 8007a76:	e7da      	b.n	8007a2e <_free_r+0x26>
 8007a78:	d902      	bls.n	8007a80 <_free_r+0x78>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	6003      	str	r3, [r0, #0]
 8007a7e:	e7d6      	b.n	8007a2e <_free_r+0x26>
 8007a80:	6825      	ldr	r5, [r4, #0]
 8007a82:	1961      	adds	r1, r4, r5
 8007a84:	428b      	cmp	r3, r1
 8007a86:	bf04      	itt	eq
 8007a88:	6819      	ldreq	r1, [r3, #0]
 8007a8a:	685b      	ldreq	r3, [r3, #4]
 8007a8c:	6063      	str	r3, [r4, #4]
 8007a8e:	bf04      	itt	eq
 8007a90:	1949      	addeq	r1, r1, r5
 8007a92:	6021      	streq	r1, [r4, #0]
 8007a94:	6054      	str	r4, [r2, #4]
 8007a96:	e7ca      	b.n	8007a2e <_free_r+0x26>
 8007a98:	b003      	add	sp, #12
 8007a9a:	bd30      	pop	{r4, r5, pc}
 8007a9c:	20000290 	.word	0x20000290

08007aa0 <sbrk_aligned>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4e0e      	ldr	r6, [pc, #56]	; (8007adc <sbrk_aligned+0x3c>)
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	6831      	ldr	r1, [r6, #0]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	b911      	cbnz	r1, 8007ab2 <sbrk_aligned+0x12>
 8007aac:	f000 ff00 	bl	80088b0 <_sbrk_r>
 8007ab0:	6030      	str	r0, [r6, #0]
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f000 fefb 	bl	80088b0 <_sbrk_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d00a      	beq.n	8007ad4 <sbrk_aligned+0x34>
 8007abe:	1cc4      	adds	r4, r0, #3
 8007ac0:	f024 0403 	bic.w	r4, r4, #3
 8007ac4:	42a0      	cmp	r0, r4
 8007ac6:	d007      	beq.n	8007ad8 <sbrk_aligned+0x38>
 8007ac8:	1a21      	subs	r1, r4, r0
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 fef0 	bl	80088b0 <_sbrk_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d101      	bne.n	8007ad8 <sbrk_aligned+0x38>
 8007ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ad8:	4620      	mov	r0, r4
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	20000294 	.word	0x20000294

08007ae0 <_malloc_r>:
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	1ccd      	adds	r5, r1, #3
 8007ae6:	f025 0503 	bic.w	r5, r5, #3
 8007aea:	3508      	adds	r5, #8
 8007aec:	2d0c      	cmp	r5, #12
 8007aee:	bf38      	it	cc
 8007af0:	250c      	movcc	r5, #12
 8007af2:	2d00      	cmp	r5, #0
 8007af4:	4607      	mov	r7, r0
 8007af6:	db01      	blt.n	8007afc <_malloc_r+0x1c>
 8007af8:	42a9      	cmp	r1, r5
 8007afa:	d905      	bls.n	8007b08 <_malloc_r+0x28>
 8007afc:	230c      	movs	r3, #12
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	2600      	movs	r6, #0
 8007b02:	4630      	mov	r0, r6
 8007b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b08:	4e2e      	ldr	r6, [pc, #184]	; (8007bc4 <_malloc_r+0xe4>)
 8007b0a:	f001 fa25 	bl	8008f58 <__malloc_lock>
 8007b0e:	6833      	ldr	r3, [r6, #0]
 8007b10:	461c      	mov	r4, r3
 8007b12:	bb34      	cbnz	r4, 8007b62 <_malloc_r+0x82>
 8007b14:	4629      	mov	r1, r5
 8007b16:	4638      	mov	r0, r7
 8007b18:	f7ff ffc2 	bl	8007aa0 <sbrk_aligned>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	4604      	mov	r4, r0
 8007b20:	d14d      	bne.n	8007bbe <_malloc_r+0xde>
 8007b22:	6834      	ldr	r4, [r6, #0]
 8007b24:	4626      	mov	r6, r4
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d140      	bne.n	8007bac <_malloc_r+0xcc>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4638      	mov	r0, r7
 8007b30:	eb04 0803 	add.w	r8, r4, r3
 8007b34:	f000 febc 	bl	80088b0 <_sbrk_r>
 8007b38:	4580      	cmp	r8, r0
 8007b3a:	d13a      	bne.n	8007bb2 <_malloc_r+0xd2>
 8007b3c:	6821      	ldr	r1, [r4, #0]
 8007b3e:	3503      	adds	r5, #3
 8007b40:	1a6d      	subs	r5, r5, r1
 8007b42:	f025 0503 	bic.w	r5, r5, #3
 8007b46:	3508      	adds	r5, #8
 8007b48:	2d0c      	cmp	r5, #12
 8007b4a:	bf38      	it	cc
 8007b4c:	250c      	movcc	r5, #12
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff ffa5 	bl	8007aa0 <sbrk_aligned>
 8007b56:	3001      	adds	r0, #1
 8007b58:	d02b      	beq.n	8007bb2 <_malloc_r+0xd2>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	442b      	add	r3, r5
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	e00e      	b.n	8007b80 <_malloc_r+0xa0>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	1b52      	subs	r2, r2, r5
 8007b66:	d41e      	bmi.n	8007ba6 <_malloc_r+0xc6>
 8007b68:	2a0b      	cmp	r2, #11
 8007b6a:	d916      	bls.n	8007b9a <_malloc_r+0xba>
 8007b6c:	1961      	adds	r1, r4, r5
 8007b6e:	42a3      	cmp	r3, r4
 8007b70:	6025      	str	r5, [r4, #0]
 8007b72:	bf18      	it	ne
 8007b74:	6059      	strne	r1, [r3, #4]
 8007b76:	6863      	ldr	r3, [r4, #4]
 8007b78:	bf08      	it	eq
 8007b7a:	6031      	streq	r1, [r6, #0]
 8007b7c:	5162      	str	r2, [r4, r5]
 8007b7e:	604b      	str	r3, [r1, #4]
 8007b80:	4638      	mov	r0, r7
 8007b82:	f104 060b 	add.w	r6, r4, #11
 8007b86:	f001 f9ed 	bl	8008f64 <__malloc_unlock>
 8007b8a:	f026 0607 	bic.w	r6, r6, #7
 8007b8e:	1d23      	adds	r3, r4, #4
 8007b90:	1af2      	subs	r2, r6, r3
 8007b92:	d0b6      	beq.n	8007b02 <_malloc_r+0x22>
 8007b94:	1b9b      	subs	r3, r3, r6
 8007b96:	50a3      	str	r3, [r4, r2]
 8007b98:	e7b3      	b.n	8007b02 <_malloc_r+0x22>
 8007b9a:	6862      	ldr	r2, [r4, #4]
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	bf0c      	ite	eq
 8007ba0:	6032      	streq	r2, [r6, #0]
 8007ba2:	605a      	strne	r2, [r3, #4]
 8007ba4:	e7ec      	b.n	8007b80 <_malloc_r+0xa0>
 8007ba6:	4623      	mov	r3, r4
 8007ba8:	6864      	ldr	r4, [r4, #4]
 8007baa:	e7b2      	b.n	8007b12 <_malloc_r+0x32>
 8007bac:	4634      	mov	r4, r6
 8007bae:	6876      	ldr	r6, [r6, #4]
 8007bb0:	e7b9      	b.n	8007b26 <_malloc_r+0x46>
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	603b      	str	r3, [r7, #0]
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	f001 f9d4 	bl	8008f64 <__malloc_unlock>
 8007bbc:	e7a1      	b.n	8007b02 <_malloc_r+0x22>
 8007bbe:	6025      	str	r5, [r4, #0]
 8007bc0:	e7de      	b.n	8007b80 <_malloc_r+0xa0>
 8007bc2:	bf00      	nop
 8007bc4:	20000290 	.word	0x20000290

08007bc8 <__ssputs_r>:
 8007bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bcc:	688e      	ldr	r6, [r1, #8]
 8007bce:	429e      	cmp	r6, r3
 8007bd0:	4682      	mov	sl, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	4690      	mov	r8, r2
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	d838      	bhi.n	8007c4c <__ssputs_r+0x84>
 8007bda:	898a      	ldrh	r2, [r1, #12]
 8007bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007be0:	d032      	beq.n	8007c48 <__ssputs_r+0x80>
 8007be2:	6825      	ldr	r5, [r4, #0]
 8007be4:	6909      	ldr	r1, [r1, #16]
 8007be6:	eba5 0901 	sub.w	r9, r5, r1
 8007bea:	6965      	ldr	r5, [r4, #20]
 8007bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	444b      	add	r3, r9
 8007bf8:	106d      	asrs	r5, r5, #1
 8007bfa:	429d      	cmp	r5, r3
 8007bfc:	bf38      	it	cc
 8007bfe:	461d      	movcc	r5, r3
 8007c00:	0553      	lsls	r3, r2, #21
 8007c02:	d531      	bpl.n	8007c68 <__ssputs_r+0xa0>
 8007c04:	4629      	mov	r1, r5
 8007c06:	f7ff ff6b 	bl	8007ae0 <_malloc_r>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	b950      	cbnz	r0, 8007c24 <__ssputs_r+0x5c>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	f8ca 3000 	str.w	r3, [sl]
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c24:	6921      	ldr	r1, [r4, #16]
 8007c26:	464a      	mov	r2, r9
 8007c28:	f7ff fa08 	bl	800703c <memcpy>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	6126      	str	r6, [r4, #16]
 8007c3a:	6165      	str	r5, [r4, #20]
 8007c3c:	444e      	add	r6, r9
 8007c3e:	eba5 0509 	sub.w	r5, r5, r9
 8007c42:	6026      	str	r6, [r4, #0]
 8007c44:	60a5      	str	r5, [r4, #8]
 8007c46:	463e      	mov	r6, r7
 8007c48:	42be      	cmp	r6, r7
 8007c4a:	d900      	bls.n	8007c4e <__ssputs_r+0x86>
 8007c4c:	463e      	mov	r6, r7
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	4632      	mov	r2, r6
 8007c52:	4641      	mov	r1, r8
 8007c54:	f001 f966 	bl	8008f24 <memmove>
 8007c58:	68a3      	ldr	r3, [r4, #8]
 8007c5a:	1b9b      	subs	r3, r3, r6
 8007c5c:	60a3      	str	r3, [r4, #8]
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	4433      	add	r3, r6
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	2000      	movs	r0, #0
 8007c66:	e7db      	b.n	8007c20 <__ssputs_r+0x58>
 8007c68:	462a      	mov	r2, r5
 8007c6a:	f001 f981 	bl	8008f70 <_realloc_r>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1e1      	bne.n	8007c38 <__ssputs_r+0x70>
 8007c74:	6921      	ldr	r1, [r4, #16]
 8007c76:	4650      	mov	r0, sl
 8007c78:	f7ff fec6 	bl	8007a08 <_free_r>
 8007c7c:	e7c7      	b.n	8007c0e <__ssputs_r+0x46>
	...

08007c80 <_svfiprintf_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	4698      	mov	r8, r3
 8007c86:	898b      	ldrh	r3, [r1, #12]
 8007c88:	061b      	lsls	r3, r3, #24
 8007c8a:	b09d      	sub	sp, #116	; 0x74
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	460d      	mov	r5, r1
 8007c90:	4614      	mov	r4, r2
 8007c92:	d50e      	bpl.n	8007cb2 <_svfiprintf_r+0x32>
 8007c94:	690b      	ldr	r3, [r1, #16]
 8007c96:	b963      	cbnz	r3, 8007cb2 <_svfiprintf_r+0x32>
 8007c98:	2140      	movs	r1, #64	; 0x40
 8007c9a:	f7ff ff21 	bl	8007ae0 <_malloc_r>
 8007c9e:	6028      	str	r0, [r5, #0]
 8007ca0:	6128      	str	r0, [r5, #16]
 8007ca2:	b920      	cbnz	r0, 8007cae <_svfiprintf_r+0x2e>
 8007ca4:	230c      	movs	r3, #12
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	e0d1      	b.n	8007e52 <_svfiprintf_r+0x1d2>
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	616b      	str	r3, [r5, #20]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb6:	2320      	movs	r3, #32
 8007cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cc0:	2330      	movs	r3, #48	; 0x30
 8007cc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e6c <_svfiprintf_r+0x1ec>
 8007cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cca:	f04f 0901 	mov.w	r9, #1
 8007cce:	4623      	mov	r3, r4
 8007cd0:	469a      	mov	sl, r3
 8007cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cd6:	b10a      	cbz	r2, 8007cdc <_svfiprintf_r+0x5c>
 8007cd8:	2a25      	cmp	r2, #37	; 0x25
 8007cda:	d1f9      	bne.n	8007cd0 <_svfiprintf_r+0x50>
 8007cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ce0:	d00b      	beq.n	8007cfa <_svfiprintf_r+0x7a>
 8007ce2:	465b      	mov	r3, fp
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7ff ff6d 	bl	8007bc8 <__ssputs_r>
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f000 80aa 	beq.w	8007e48 <_svfiprintf_r+0x1c8>
 8007cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cf6:	445a      	add	r2, fp
 8007cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8007cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 80a2 	beq.w	8007e48 <_svfiprintf_r+0x1c8>
 8007d04:	2300      	movs	r3, #0
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d0e:	f10a 0a01 	add.w	sl, sl, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	9307      	str	r3, [sp, #28]
 8007d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d1c:	4654      	mov	r4, sl
 8007d1e:	2205      	movs	r2, #5
 8007d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d24:	4851      	ldr	r0, [pc, #324]	; (8007e6c <_svfiprintf_r+0x1ec>)
 8007d26:	f7f8 fa7b 	bl	8000220 <memchr>
 8007d2a:	9a04      	ldr	r2, [sp, #16]
 8007d2c:	b9d8      	cbnz	r0, 8007d66 <_svfiprintf_r+0xe6>
 8007d2e:	06d0      	lsls	r0, r2, #27
 8007d30:	bf44      	itt	mi
 8007d32:	2320      	movmi	r3, #32
 8007d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d38:	0711      	lsls	r1, r2, #28
 8007d3a:	bf44      	itt	mi
 8007d3c:	232b      	movmi	r3, #43	; 0x2b
 8007d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b2a      	cmp	r3, #42	; 0x2a
 8007d48:	d015      	beq.n	8007d76 <_svfiprintf_r+0xf6>
 8007d4a:	9a07      	ldr	r2, [sp, #28]
 8007d4c:	4654      	mov	r4, sl
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f04f 0c0a 	mov.w	ip, #10
 8007d54:	4621      	mov	r1, r4
 8007d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d5a:	3b30      	subs	r3, #48	; 0x30
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d94e      	bls.n	8007dfe <_svfiprintf_r+0x17e>
 8007d60:	b1b0      	cbz	r0, 8007d90 <_svfiprintf_r+0x110>
 8007d62:	9207      	str	r2, [sp, #28]
 8007d64:	e014      	b.n	8007d90 <_svfiprintf_r+0x110>
 8007d66:	eba0 0308 	sub.w	r3, r0, r8
 8007d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	46a2      	mov	sl, r4
 8007d74:	e7d2      	b.n	8007d1c <_svfiprintf_r+0x9c>
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	1d19      	adds	r1, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	9103      	str	r1, [sp, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bfbb      	ittet	lt
 8007d82:	425b      	neglt	r3, r3
 8007d84:	f042 0202 	orrlt.w	r2, r2, #2
 8007d88:	9307      	strge	r3, [sp, #28]
 8007d8a:	9307      	strlt	r3, [sp, #28]
 8007d8c:	bfb8      	it	lt
 8007d8e:	9204      	strlt	r2, [sp, #16]
 8007d90:	7823      	ldrb	r3, [r4, #0]
 8007d92:	2b2e      	cmp	r3, #46	; 0x2e
 8007d94:	d10c      	bne.n	8007db0 <_svfiprintf_r+0x130>
 8007d96:	7863      	ldrb	r3, [r4, #1]
 8007d98:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9a:	d135      	bne.n	8007e08 <_svfiprintf_r+0x188>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	1d1a      	adds	r2, r3, #4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	9203      	str	r2, [sp, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bfb8      	it	lt
 8007da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dac:	3402      	adds	r4, #2
 8007dae:	9305      	str	r3, [sp, #20]
 8007db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e7c <_svfiprintf_r+0x1fc>
 8007db4:	7821      	ldrb	r1, [r4, #0]
 8007db6:	2203      	movs	r2, #3
 8007db8:	4650      	mov	r0, sl
 8007dba:	f7f8 fa31 	bl	8000220 <memchr>
 8007dbe:	b140      	cbz	r0, 8007dd2 <_svfiprintf_r+0x152>
 8007dc0:	2340      	movs	r3, #64	; 0x40
 8007dc2:	eba0 000a 	sub.w	r0, r0, sl
 8007dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	4303      	orrs	r3, r0
 8007dce:	3401      	adds	r4, #1
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd6:	4826      	ldr	r0, [pc, #152]	; (8007e70 <_svfiprintf_r+0x1f0>)
 8007dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ddc:	2206      	movs	r2, #6
 8007dde:	f7f8 fa1f 	bl	8000220 <memchr>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d038      	beq.n	8007e58 <_svfiprintf_r+0x1d8>
 8007de6:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <_svfiprintf_r+0x1f4>)
 8007de8:	bb1b      	cbnz	r3, 8007e32 <_svfiprintf_r+0x1b2>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	3308      	adds	r3, #8
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	4433      	add	r3, r6
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	e767      	b.n	8007cce <_svfiprintf_r+0x4e>
 8007dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e02:	460c      	mov	r4, r1
 8007e04:	2001      	movs	r0, #1
 8007e06:	e7a5      	b.n	8007d54 <_svfiprintf_r+0xd4>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	3401      	adds	r4, #1
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f04f 0c0a 	mov.w	ip, #10
 8007e14:	4620      	mov	r0, r4
 8007e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e1a:	3a30      	subs	r2, #48	; 0x30
 8007e1c:	2a09      	cmp	r2, #9
 8007e1e:	d903      	bls.n	8007e28 <_svfiprintf_r+0x1a8>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0c5      	beq.n	8007db0 <_svfiprintf_r+0x130>
 8007e24:	9105      	str	r1, [sp, #20]
 8007e26:	e7c3      	b.n	8007db0 <_svfiprintf_r+0x130>
 8007e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e7f0      	b.n	8007e14 <_svfiprintf_r+0x194>
 8007e32:	ab03      	add	r3, sp, #12
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	462a      	mov	r2, r5
 8007e38:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <_svfiprintf_r+0x1f8>)
 8007e3a:	a904      	add	r1, sp, #16
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f7fb ff03 	bl	8003c48 <_printf_float>
 8007e42:	1c42      	adds	r2, r0, #1
 8007e44:	4606      	mov	r6, r0
 8007e46:	d1d6      	bne.n	8007df6 <_svfiprintf_r+0x176>
 8007e48:	89ab      	ldrh	r3, [r5, #12]
 8007e4a:	065b      	lsls	r3, r3, #25
 8007e4c:	f53f af2c 	bmi.w	8007ca8 <_svfiprintf_r+0x28>
 8007e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e52:	b01d      	add	sp, #116	; 0x74
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <_svfiprintf_r+0x1f8>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	4638      	mov	r0, r7
 8007e64:	f7fc f994 	bl	8004190 <_printf_i>
 8007e68:	e7eb      	b.n	8007e42 <_svfiprintf_r+0x1c2>
 8007e6a:	bf00      	nop
 8007e6c:	0800957c 	.word	0x0800957c
 8007e70:	08009586 	.word	0x08009586
 8007e74:	08003c49 	.word	0x08003c49
 8007e78:	08007bc9 	.word	0x08007bc9
 8007e7c:	08009582 	.word	0x08009582

08007e80 <__sfputc_r>:
 8007e80:	6893      	ldr	r3, [r2, #8]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	b410      	push	{r4}
 8007e88:	6093      	str	r3, [r2, #8]
 8007e8a:	da08      	bge.n	8007e9e <__sfputc_r+0x1e>
 8007e8c:	6994      	ldr	r4, [r2, #24]
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	db01      	blt.n	8007e96 <__sfputc_r+0x16>
 8007e92:	290a      	cmp	r1, #10
 8007e94:	d103      	bne.n	8007e9e <__sfputc_r+0x1e>
 8007e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9a:	f000 beef 	b.w	8008c7c <__swbuf_r>
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	1c58      	adds	r0, r3, #1
 8007ea2:	6010      	str	r0, [r2, #0]
 8007ea4:	7019      	strb	r1, [r3, #0]
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <__sfputs_r>:
 8007eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	18d5      	adds	r5, r2, r3
 8007eb8:	42ac      	cmp	r4, r5
 8007eba:	d101      	bne.n	8007ec0 <__sfputs_r+0x12>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	e007      	b.n	8007ed0 <__sfputs_r+0x22>
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	463a      	mov	r2, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff ffda 	bl	8007e80 <__sfputc_r>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d1f3      	bne.n	8007eb8 <__sfputs_r+0xa>
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ed4 <_vfiprintf_r>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	460d      	mov	r5, r1
 8007eda:	b09d      	sub	sp, #116	; 0x74
 8007edc:	4614      	mov	r4, r2
 8007ede:	4698      	mov	r8, r3
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	b118      	cbz	r0, 8007eec <_vfiprintf_r+0x18>
 8007ee4:	6983      	ldr	r3, [r0, #24]
 8007ee6:	b90b      	cbnz	r3, 8007eec <_vfiprintf_r+0x18>
 8007ee8:	f7fe fbf8 	bl	80066dc <__sinit>
 8007eec:	4b89      	ldr	r3, [pc, #548]	; (8008114 <_vfiprintf_r+0x240>)
 8007eee:	429d      	cmp	r5, r3
 8007ef0:	d11b      	bne.n	8007f2a <_vfiprintf_r+0x56>
 8007ef2:	6875      	ldr	r5, [r6, #4]
 8007ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ef6:	07d9      	lsls	r1, r3, #31
 8007ef8:	d405      	bmi.n	8007f06 <_vfiprintf_r+0x32>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	059a      	lsls	r2, r3, #22
 8007efe:	d402      	bmi.n	8007f06 <_vfiprintf_r+0x32>
 8007f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f02:	f7ff f81a 	bl	8006f3a <__retarget_lock_acquire_recursive>
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	071b      	lsls	r3, r3, #28
 8007f0a:	d501      	bpl.n	8007f10 <_vfiprintf_r+0x3c>
 8007f0c:	692b      	ldr	r3, [r5, #16]
 8007f0e:	b9eb      	cbnz	r3, 8007f4c <_vfiprintf_r+0x78>
 8007f10:	4629      	mov	r1, r5
 8007f12:	4630      	mov	r0, r6
 8007f14:	f000 ff24 	bl	8008d60 <__swsetup_r>
 8007f18:	b1c0      	cbz	r0, 8007f4c <_vfiprintf_r+0x78>
 8007f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f1c:	07dc      	lsls	r4, r3, #31
 8007f1e:	d50e      	bpl.n	8007f3e <_vfiprintf_r+0x6a>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	b01d      	add	sp, #116	; 0x74
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	4b7b      	ldr	r3, [pc, #492]	; (8008118 <_vfiprintf_r+0x244>)
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	d101      	bne.n	8007f34 <_vfiprintf_r+0x60>
 8007f30:	68b5      	ldr	r5, [r6, #8]
 8007f32:	e7df      	b.n	8007ef4 <_vfiprintf_r+0x20>
 8007f34:	4b79      	ldr	r3, [pc, #484]	; (800811c <_vfiprintf_r+0x248>)
 8007f36:	429d      	cmp	r5, r3
 8007f38:	bf08      	it	eq
 8007f3a:	68f5      	ldreq	r5, [r6, #12]
 8007f3c:	e7da      	b.n	8007ef4 <_vfiprintf_r+0x20>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	0598      	lsls	r0, r3, #22
 8007f42:	d4ed      	bmi.n	8007f20 <_vfiprintf_r+0x4c>
 8007f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f46:	f7fe fff9 	bl	8006f3c <__retarget_lock_release_recursive>
 8007f4a:	e7e9      	b.n	8007f20 <_vfiprintf_r+0x4c>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f50:	2320      	movs	r3, #32
 8007f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f5a:	2330      	movs	r3, #48	; 0x30
 8007f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008120 <_vfiprintf_r+0x24c>
 8007f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f64:	f04f 0901 	mov.w	r9, #1
 8007f68:	4623      	mov	r3, r4
 8007f6a:	469a      	mov	sl, r3
 8007f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f70:	b10a      	cbz	r2, 8007f76 <_vfiprintf_r+0xa2>
 8007f72:	2a25      	cmp	r2, #37	; 0x25
 8007f74:	d1f9      	bne.n	8007f6a <_vfiprintf_r+0x96>
 8007f76:	ebba 0b04 	subs.w	fp, sl, r4
 8007f7a:	d00b      	beq.n	8007f94 <_vfiprintf_r+0xc0>
 8007f7c:	465b      	mov	r3, fp
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7ff ff93 	bl	8007eae <__sfputs_r>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f000 80aa 	beq.w	80080e2 <_vfiprintf_r+0x20e>
 8007f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f90:	445a      	add	r2, fp
 8007f92:	9209      	str	r2, [sp, #36]	; 0x24
 8007f94:	f89a 3000 	ldrb.w	r3, [sl]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80a2 	beq.w	80080e2 <_vfiprintf_r+0x20e>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fa8:	f10a 0a01 	add.w	sl, sl, #1
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb6:	4654      	mov	r4, sl
 8007fb8:	2205      	movs	r2, #5
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	4858      	ldr	r0, [pc, #352]	; (8008120 <_vfiprintf_r+0x24c>)
 8007fc0:	f7f8 f92e 	bl	8000220 <memchr>
 8007fc4:	9a04      	ldr	r2, [sp, #16]
 8007fc6:	b9d8      	cbnz	r0, 8008000 <_vfiprintf_r+0x12c>
 8007fc8:	06d1      	lsls	r1, r2, #27
 8007fca:	bf44      	itt	mi
 8007fcc:	2320      	movmi	r3, #32
 8007fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd2:	0713      	lsls	r3, r2, #28
 8007fd4:	bf44      	itt	mi
 8007fd6:	232b      	movmi	r3, #43	; 0x2b
 8007fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe2:	d015      	beq.n	8008010 <_vfiprintf_r+0x13c>
 8007fe4:	9a07      	ldr	r2, [sp, #28]
 8007fe6:	4654      	mov	r4, sl
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f04f 0c0a 	mov.w	ip, #10
 8007fee:	4621      	mov	r1, r4
 8007ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ff4:	3b30      	subs	r3, #48	; 0x30
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d94e      	bls.n	8008098 <_vfiprintf_r+0x1c4>
 8007ffa:	b1b0      	cbz	r0, 800802a <_vfiprintf_r+0x156>
 8007ffc:	9207      	str	r2, [sp, #28]
 8007ffe:	e014      	b.n	800802a <_vfiprintf_r+0x156>
 8008000:	eba0 0308 	sub.w	r3, r0, r8
 8008004:	fa09 f303 	lsl.w	r3, r9, r3
 8008008:	4313      	orrs	r3, r2
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	46a2      	mov	sl, r4
 800800e:	e7d2      	b.n	8007fb6 <_vfiprintf_r+0xe2>
 8008010:	9b03      	ldr	r3, [sp, #12]
 8008012:	1d19      	adds	r1, r3, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	9103      	str	r1, [sp, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	bfbb      	ittet	lt
 800801c:	425b      	neglt	r3, r3
 800801e:	f042 0202 	orrlt.w	r2, r2, #2
 8008022:	9307      	strge	r3, [sp, #28]
 8008024:	9307      	strlt	r3, [sp, #28]
 8008026:	bfb8      	it	lt
 8008028:	9204      	strlt	r2, [sp, #16]
 800802a:	7823      	ldrb	r3, [r4, #0]
 800802c:	2b2e      	cmp	r3, #46	; 0x2e
 800802e:	d10c      	bne.n	800804a <_vfiprintf_r+0x176>
 8008030:	7863      	ldrb	r3, [r4, #1]
 8008032:	2b2a      	cmp	r3, #42	; 0x2a
 8008034:	d135      	bne.n	80080a2 <_vfiprintf_r+0x1ce>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	9203      	str	r2, [sp, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	f04f 33ff 	movlt.w	r3, #4294967295
 8008046:	3402      	adds	r4, #2
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008130 <_vfiprintf_r+0x25c>
 800804e:	7821      	ldrb	r1, [r4, #0]
 8008050:	2203      	movs	r2, #3
 8008052:	4650      	mov	r0, sl
 8008054:	f7f8 f8e4 	bl	8000220 <memchr>
 8008058:	b140      	cbz	r0, 800806c <_vfiprintf_r+0x198>
 800805a:	2340      	movs	r3, #64	; 0x40
 800805c:	eba0 000a 	sub.w	r0, r0, sl
 8008060:	fa03 f000 	lsl.w	r0, r3, r0
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	4303      	orrs	r3, r0
 8008068:	3401      	adds	r4, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008070:	482c      	ldr	r0, [pc, #176]	; (8008124 <_vfiprintf_r+0x250>)
 8008072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008076:	2206      	movs	r2, #6
 8008078:	f7f8 f8d2 	bl	8000220 <memchr>
 800807c:	2800      	cmp	r0, #0
 800807e:	d03f      	beq.n	8008100 <_vfiprintf_r+0x22c>
 8008080:	4b29      	ldr	r3, [pc, #164]	; (8008128 <_vfiprintf_r+0x254>)
 8008082:	bb1b      	cbnz	r3, 80080cc <_vfiprintf_r+0x1f8>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	3307      	adds	r3, #7
 8008088:	f023 0307 	bic.w	r3, r3, #7
 800808c:	3308      	adds	r3, #8
 800808e:	9303      	str	r3, [sp, #12]
 8008090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008092:	443b      	add	r3, r7
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	e767      	b.n	8007f68 <_vfiprintf_r+0x94>
 8008098:	fb0c 3202 	mla	r2, ip, r2, r3
 800809c:	460c      	mov	r4, r1
 800809e:	2001      	movs	r0, #1
 80080a0:	e7a5      	b.n	8007fee <_vfiprintf_r+0x11a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	3401      	adds	r4, #1
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	4619      	mov	r1, r3
 80080aa:	f04f 0c0a 	mov.w	ip, #10
 80080ae:	4620      	mov	r0, r4
 80080b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080b4:	3a30      	subs	r2, #48	; 0x30
 80080b6:	2a09      	cmp	r2, #9
 80080b8:	d903      	bls.n	80080c2 <_vfiprintf_r+0x1ee>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0c5      	beq.n	800804a <_vfiprintf_r+0x176>
 80080be:	9105      	str	r1, [sp, #20]
 80080c0:	e7c3      	b.n	800804a <_vfiprintf_r+0x176>
 80080c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80080c6:	4604      	mov	r4, r0
 80080c8:	2301      	movs	r3, #1
 80080ca:	e7f0      	b.n	80080ae <_vfiprintf_r+0x1da>
 80080cc:	ab03      	add	r3, sp, #12
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	462a      	mov	r2, r5
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <_vfiprintf_r+0x258>)
 80080d4:	a904      	add	r1, sp, #16
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7fb fdb6 	bl	8003c48 <_printf_float>
 80080dc:	4607      	mov	r7, r0
 80080de:	1c78      	adds	r0, r7, #1
 80080e0:	d1d6      	bne.n	8008090 <_vfiprintf_r+0x1bc>
 80080e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e4:	07d9      	lsls	r1, r3, #31
 80080e6:	d405      	bmi.n	80080f4 <_vfiprintf_r+0x220>
 80080e8:	89ab      	ldrh	r3, [r5, #12]
 80080ea:	059a      	lsls	r2, r3, #22
 80080ec:	d402      	bmi.n	80080f4 <_vfiprintf_r+0x220>
 80080ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f0:	f7fe ff24 	bl	8006f3c <__retarget_lock_release_recursive>
 80080f4:	89ab      	ldrh	r3, [r5, #12]
 80080f6:	065b      	lsls	r3, r3, #25
 80080f8:	f53f af12 	bmi.w	8007f20 <_vfiprintf_r+0x4c>
 80080fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080fe:	e711      	b.n	8007f24 <_vfiprintf_r+0x50>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	462a      	mov	r2, r5
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <_vfiprintf_r+0x258>)
 8008108:	a904      	add	r1, sp, #16
 800810a:	4630      	mov	r0, r6
 800810c:	f7fc f840 	bl	8004190 <_printf_i>
 8008110:	e7e4      	b.n	80080dc <_vfiprintf_r+0x208>
 8008112:	bf00      	nop
 8008114:	08009364 	.word	0x08009364
 8008118:	08009384 	.word	0x08009384
 800811c:	08009344 	.word	0x08009344
 8008120:	0800957c 	.word	0x0800957c
 8008124:	08009586 	.word	0x08009586
 8008128:	08003c49 	.word	0x08003c49
 800812c:	08007eaf 	.word	0x08007eaf
 8008130:	08009582 	.word	0x08009582

08008134 <__svfiscanf_r>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	461d      	mov	r5, r3
 800813a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800813c:	07df      	lsls	r7, r3, #31
 800813e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008142:	4606      	mov	r6, r0
 8008144:	460c      	mov	r4, r1
 8008146:	4692      	mov	sl, r2
 8008148:	d405      	bmi.n	8008156 <__svfiscanf_r+0x22>
 800814a:	898b      	ldrh	r3, [r1, #12]
 800814c:	0598      	lsls	r0, r3, #22
 800814e:	d402      	bmi.n	8008156 <__svfiscanf_r+0x22>
 8008150:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8008152:	f7fe fef2 	bl	8006f3a <__retarget_lock_acquire_recursive>
 8008156:	2300      	movs	r3, #0
 8008158:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800815c:	4ba6      	ldr	r3, [pc, #664]	; (80083f8 <__svfiscanf_r+0x2c4>)
 800815e:	93a0      	str	r3, [sp, #640]	; 0x280
 8008160:	f10d 0804 	add.w	r8, sp, #4
 8008164:	4ba5      	ldr	r3, [pc, #660]	; (80083fc <__svfiscanf_r+0x2c8>)
 8008166:	4fa6      	ldr	r7, [pc, #664]	; (8008400 <__svfiscanf_r+0x2cc>)
 8008168:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008404 <__svfiscanf_r+0x2d0>
 800816c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008170:	93a1      	str	r3, [sp, #644]	; 0x284
 8008172:	9500      	str	r5, [sp, #0]
 8008174:	f89a 3000 	ldrb.w	r3, [sl]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8173 	beq.w	8008464 <__svfiscanf_r+0x330>
 800817e:	5dd9      	ldrb	r1, [r3, r7]
 8008180:	f011 0108 	ands.w	r1, r1, #8
 8008184:	f10a 0501 	add.w	r5, sl, #1
 8008188:	d019      	beq.n	80081be <__svfiscanf_r+0x8a>
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dd0f      	ble.n	80081b0 <__svfiscanf_r+0x7c>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	5cba      	ldrb	r2, [r7, r2]
 8008196:	0711      	lsls	r1, r2, #28
 8008198:	d401      	bmi.n	800819e <__svfiscanf_r+0x6a>
 800819a:	46aa      	mov	sl, r5
 800819c:	e7ea      	b.n	8008174 <__svfiscanf_r+0x40>
 800819e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80081a0:	3201      	adds	r2, #1
 80081a2:	9245      	str	r2, [sp, #276]	; 0x114
 80081a4:	6862      	ldr	r2, [r4, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	3a01      	subs	r2, #1
 80081aa:	6062      	str	r2, [r4, #4]
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	e7ec      	b.n	800818a <__svfiscanf_r+0x56>
 80081b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80081b2:	4621      	mov	r1, r4
 80081b4:	4630      	mov	r0, r6
 80081b6:	4798      	blx	r3
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0e9      	beq.n	8008190 <__svfiscanf_r+0x5c>
 80081bc:	e7ed      	b.n	800819a <__svfiscanf_r+0x66>
 80081be:	2b25      	cmp	r3, #37	; 0x25
 80081c0:	d012      	beq.n	80081e8 <__svfiscanf_r+0xb4>
 80081c2:	469a      	mov	sl, r3
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f340 8095 	ble.w	80082f6 <__svfiscanf_r+0x1c2>
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	7813      	ldrb	r3, [r2, #0]
 80081d0:	4553      	cmp	r3, sl
 80081d2:	f040 8147 	bne.w	8008464 <__svfiscanf_r+0x330>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	3b01      	subs	r3, #1
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80081de:	3201      	adds	r2, #1
 80081e0:	3301      	adds	r3, #1
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	9345      	str	r3, [sp, #276]	; 0x114
 80081e6:	e7d8      	b.n	800819a <__svfiscanf_r+0x66>
 80081e8:	9141      	str	r1, [sp, #260]	; 0x104
 80081ea:	9143      	str	r1, [sp, #268]	; 0x10c
 80081ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80081f0:	2b2a      	cmp	r3, #42	; 0x2a
 80081f2:	bf02      	ittt	eq
 80081f4:	2310      	moveq	r3, #16
 80081f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80081f8:	f10a 0502 	addeq.w	r5, sl, #2
 80081fc:	220a      	movs	r2, #10
 80081fe:	46aa      	mov	sl, r5
 8008200:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008204:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008208:	2b09      	cmp	r3, #9
 800820a:	d91e      	bls.n	800824a <__svfiscanf_r+0x116>
 800820c:	487d      	ldr	r0, [pc, #500]	; (8008404 <__svfiscanf_r+0x2d0>)
 800820e:	2203      	movs	r2, #3
 8008210:	f7f8 f806 	bl	8000220 <memchr>
 8008214:	b140      	cbz	r0, 8008228 <__svfiscanf_r+0xf4>
 8008216:	2301      	movs	r3, #1
 8008218:	eba0 0009 	sub.w	r0, r0, r9
 800821c:	fa03 f000 	lsl.w	r0, r3, r0
 8008220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008222:	4318      	orrs	r0, r3
 8008224:	9041      	str	r0, [sp, #260]	; 0x104
 8008226:	4655      	mov	r5, sl
 8008228:	f815 3b01 	ldrb.w	r3, [r5], #1
 800822c:	2b78      	cmp	r3, #120	; 0x78
 800822e:	d807      	bhi.n	8008240 <__svfiscanf_r+0x10c>
 8008230:	2b57      	cmp	r3, #87	; 0x57
 8008232:	d811      	bhi.n	8008258 <__svfiscanf_r+0x124>
 8008234:	2b25      	cmp	r3, #37	; 0x25
 8008236:	d0c4      	beq.n	80081c2 <__svfiscanf_r+0x8e>
 8008238:	d858      	bhi.n	80082ec <__svfiscanf_r+0x1b8>
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80c8 	beq.w	80083d0 <__svfiscanf_r+0x29c>
 8008240:	2303      	movs	r3, #3
 8008242:	9347      	str	r3, [sp, #284]	; 0x11c
 8008244:	230a      	movs	r3, #10
 8008246:	9342      	str	r3, [sp, #264]	; 0x108
 8008248:	e07c      	b.n	8008344 <__svfiscanf_r+0x210>
 800824a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800824c:	fb02 1103 	mla	r1, r2, r3, r1
 8008250:	3930      	subs	r1, #48	; 0x30
 8008252:	9143      	str	r1, [sp, #268]	; 0x10c
 8008254:	4655      	mov	r5, sl
 8008256:	e7d2      	b.n	80081fe <__svfiscanf_r+0xca>
 8008258:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800825c:	2a20      	cmp	r2, #32
 800825e:	d8ef      	bhi.n	8008240 <__svfiscanf_r+0x10c>
 8008260:	a101      	add	r1, pc, #4	; (adr r1, 8008268 <__svfiscanf_r+0x134>)
 8008262:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008266:	bf00      	nop
 8008268:	0800832f 	.word	0x0800832f
 800826c:	08008241 	.word	0x08008241
 8008270:	08008241 	.word	0x08008241
 8008274:	0800838d 	.word	0x0800838d
 8008278:	08008241 	.word	0x08008241
 800827c:	08008241 	.word	0x08008241
 8008280:	08008241 	.word	0x08008241
 8008284:	08008241 	.word	0x08008241
 8008288:	08008241 	.word	0x08008241
 800828c:	08008241 	.word	0x08008241
 8008290:	08008241 	.word	0x08008241
 8008294:	080083a3 	.word	0x080083a3
 8008298:	08008379 	.word	0x08008379
 800829c:	080082f3 	.word	0x080082f3
 80082a0:	080082f3 	.word	0x080082f3
 80082a4:	080082f3 	.word	0x080082f3
 80082a8:	08008241 	.word	0x08008241
 80082ac:	0800837d 	.word	0x0800837d
 80082b0:	08008241 	.word	0x08008241
 80082b4:	08008241 	.word	0x08008241
 80082b8:	08008241 	.word	0x08008241
 80082bc:	08008241 	.word	0x08008241
 80082c0:	080083b3 	.word	0x080083b3
 80082c4:	08008385 	.word	0x08008385
 80082c8:	08008327 	.word	0x08008327
 80082cc:	08008241 	.word	0x08008241
 80082d0:	08008241 	.word	0x08008241
 80082d4:	080083af 	.word	0x080083af
 80082d8:	08008241 	.word	0x08008241
 80082dc:	08008379 	.word	0x08008379
 80082e0:	08008241 	.word	0x08008241
 80082e4:	08008241 	.word	0x08008241
 80082e8:	0800832f 	.word	0x0800832f
 80082ec:	3b45      	subs	r3, #69	; 0x45
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d8a6      	bhi.n	8008240 <__svfiscanf_r+0x10c>
 80082f2:	2305      	movs	r3, #5
 80082f4:	e025      	b.n	8008342 <__svfiscanf_r+0x20e>
 80082f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082f8:	4621      	mov	r1, r4
 80082fa:	4630      	mov	r0, r6
 80082fc:	4798      	blx	r3
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f af64 	beq.w	80081cc <__svfiscanf_r+0x98>
 8008304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008306:	07da      	lsls	r2, r3, #31
 8008308:	f140 80a4 	bpl.w	8008454 <__svfiscanf_r+0x320>
 800830c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800830e:	2800      	cmp	r0, #0
 8008310:	d067      	beq.n	80083e2 <__svfiscanf_r+0x2ae>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008318:	bf18      	it	ne
 800831a:	f04f 30ff 	movne.w	r0, #4294967295
 800831e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008328:	f042 0220 	orr.w	r2, r2, #32
 800832c:	9241      	str	r2, [sp, #260]	; 0x104
 800832e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008334:	9241      	str	r2, [sp, #260]	; 0x104
 8008336:	2210      	movs	r2, #16
 8008338:	2b6f      	cmp	r3, #111	; 0x6f
 800833a:	9242      	str	r2, [sp, #264]	; 0x108
 800833c:	bf34      	ite	cc
 800833e:	2303      	movcc	r3, #3
 8008340:	2304      	movcs	r3, #4
 8008342:	9347      	str	r3, [sp, #284]	; 0x11c
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dd4e      	ble.n	80083e8 <__svfiscanf_r+0x2b4>
 800834a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800834c:	065b      	lsls	r3, r3, #25
 800834e:	d404      	bmi.n	800835a <__svfiscanf_r+0x226>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	5cba      	ldrb	r2, [r7, r2]
 8008356:	0710      	lsls	r0, r2, #28
 8008358:	d456      	bmi.n	8008408 <__svfiscanf_r+0x2d4>
 800835a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800835c:	2b02      	cmp	r3, #2
 800835e:	dc65      	bgt.n	800842c <__svfiscanf_r+0x2f8>
 8008360:	466b      	mov	r3, sp
 8008362:	4622      	mov	r2, r4
 8008364:	a941      	add	r1, sp, #260	; 0x104
 8008366:	4630      	mov	r0, r6
 8008368:	f000 f8b2 	bl	80084d0 <_scanf_chars>
 800836c:	2801      	cmp	r0, #1
 800836e:	d079      	beq.n	8008464 <__svfiscanf_r+0x330>
 8008370:	2802      	cmp	r0, #2
 8008372:	f47f af12 	bne.w	800819a <__svfiscanf_r+0x66>
 8008376:	e7c5      	b.n	8008304 <__svfiscanf_r+0x1d0>
 8008378:	220a      	movs	r2, #10
 800837a:	e7dd      	b.n	8008338 <__svfiscanf_r+0x204>
 800837c:	2300      	movs	r3, #0
 800837e:	9342      	str	r3, [sp, #264]	; 0x108
 8008380:	2303      	movs	r3, #3
 8008382:	e7de      	b.n	8008342 <__svfiscanf_r+0x20e>
 8008384:	2308      	movs	r3, #8
 8008386:	9342      	str	r3, [sp, #264]	; 0x108
 8008388:	2304      	movs	r3, #4
 800838a:	e7da      	b.n	8008342 <__svfiscanf_r+0x20e>
 800838c:	4629      	mov	r1, r5
 800838e:	4640      	mov	r0, r8
 8008390:	f000 fa9e 	bl	80088d0 <__sccl>
 8008394:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839a:	9341      	str	r3, [sp, #260]	; 0x104
 800839c:	4605      	mov	r5, r0
 800839e:	2301      	movs	r3, #1
 80083a0:	e7cf      	b.n	8008342 <__svfiscanf_r+0x20e>
 80083a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a8:	9341      	str	r3, [sp, #260]	; 0x104
 80083aa:	2300      	movs	r3, #0
 80083ac:	e7c9      	b.n	8008342 <__svfiscanf_r+0x20e>
 80083ae:	2302      	movs	r3, #2
 80083b0:	e7c7      	b.n	8008342 <__svfiscanf_r+0x20e>
 80083b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80083b4:	06c3      	lsls	r3, r0, #27
 80083b6:	f53f aef0 	bmi.w	800819a <__svfiscanf_r+0x66>
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083be:	1d19      	adds	r1, r3, #4
 80083c0:	9100      	str	r1, [sp, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f010 0f01 	tst.w	r0, #1
 80083c8:	bf14      	ite	ne
 80083ca:	801a      	strhne	r2, [r3, #0]
 80083cc:	601a      	streq	r2, [r3, #0]
 80083ce:	e6e4      	b.n	800819a <__svfiscanf_r+0x66>
 80083d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d2:	07d8      	lsls	r0, r3, #31
 80083d4:	d405      	bmi.n	80083e2 <__svfiscanf_r+0x2ae>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	0599      	lsls	r1, r3, #22
 80083da:	d402      	bmi.n	80083e2 <__svfiscanf_r+0x2ae>
 80083dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083de:	f7fe fdad 	bl	8006f3c <__retarget_lock_release_recursive>
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	e79a      	b.n	800831e <__svfiscanf_r+0x1ea>
 80083e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083ea:	4621      	mov	r1, r4
 80083ec:	4630      	mov	r0, r6
 80083ee:	4798      	blx	r3
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d0aa      	beq.n	800834a <__svfiscanf_r+0x216>
 80083f4:	e786      	b.n	8008304 <__svfiscanf_r+0x1d0>
 80083f6:	bf00      	nop
 80083f8:	08008b4d 	.word	0x08008b4d
 80083fc:	08008789 	.word	0x08008789
 8008400:	080091b1 	.word	0x080091b1
 8008404:	08009582 	.word	0x08009582
 8008408:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800840a:	3201      	adds	r2, #1
 800840c:	9245      	str	r2, [sp, #276]	; 0x114
 800840e:	6862      	ldr	r2, [r4, #4]
 8008410:	3a01      	subs	r2, #1
 8008412:	2a00      	cmp	r2, #0
 8008414:	6062      	str	r2, [r4, #4]
 8008416:	dd02      	ble.n	800841e <__svfiscanf_r+0x2ea>
 8008418:	3301      	adds	r3, #1
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	e798      	b.n	8008350 <__svfiscanf_r+0x21c>
 800841e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008420:	4621      	mov	r1, r4
 8008422:	4630      	mov	r0, r6
 8008424:	4798      	blx	r3
 8008426:	2800      	cmp	r0, #0
 8008428:	d092      	beq.n	8008350 <__svfiscanf_r+0x21c>
 800842a:	e76b      	b.n	8008304 <__svfiscanf_r+0x1d0>
 800842c:	2b04      	cmp	r3, #4
 800842e:	dc06      	bgt.n	800843e <__svfiscanf_r+0x30a>
 8008430:	466b      	mov	r3, sp
 8008432:	4622      	mov	r2, r4
 8008434:	a941      	add	r1, sp, #260	; 0x104
 8008436:	4630      	mov	r0, r6
 8008438:	f000 f8a4 	bl	8008584 <_scanf_i>
 800843c:	e796      	b.n	800836c <__svfiscanf_r+0x238>
 800843e:	4b0f      	ldr	r3, [pc, #60]	; (800847c <__svfiscanf_r+0x348>)
 8008440:	2b00      	cmp	r3, #0
 8008442:	f43f aeaa 	beq.w	800819a <__svfiscanf_r+0x66>
 8008446:	466b      	mov	r3, sp
 8008448:	4622      	mov	r2, r4
 800844a:	a941      	add	r1, sp, #260	; 0x104
 800844c:	4630      	mov	r0, r6
 800844e:	f7fb ffc5 	bl	80043dc <_scanf_float>
 8008452:	e78b      	b.n	800836c <__svfiscanf_r+0x238>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	0599      	lsls	r1, r3, #22
 8008458:	f53f af58 	bmi.w	800830c <__svfiscanf_r+0x1d8>
 800845c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845e:	f7fe fd6d 	bl	8006f3c <__retarget_lock_release_recursive>
 8008462:	e753      	b.n	800830c <__svfiscanf_r+0x1d8>
 8008464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008466:	07da      	lsls	r2, r3, #31
 8008468:	d405      	bmi.n	8008476 <__svfiscanf_r+0x342>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	059b      	lsls	r3, r3, #22
 800846e:	d402      	bmi.n	8008476 <__svfiscanf_r+0x342>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f7fe fd63 	bl	8006f3c <__retarget_lock_release_recursive>
 8008476:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008478:	e751      	b.n	800831e <__svfiscanf_r+0x1ea>
 800847a:	bf00      	nop
 800847c:	080043dd 	.word	0x080043dd

08008480 <_vfiscanf_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	460c      	mov	r4, r1
 8008484:	4605      	mov	r5, r0
 8008486:	b138      	cbz	r0, 8008498 <_vfiscanf_r+0x18>
 8008488:	6981      	ldr	r1, [r0, #24]
 800848a:	b929      	cbnz	r1, 8008498 <_vfiscanf_r+0x18>
 800848c:	e9cd 2300 	strd	r2, r3, [sp]
 8008490:	f7fe f924 	bl	80066dc <__sinit>
 8008494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008498:	490a      	ldr	r1, [pc, #40]	; (80084c4 <_vfiscanf_r+0x44>)
 800849a:	428c      	cmp	r4, r1
 800849c:	d107      	bne.n	80084ae <_vfiscanf_r+0x2e>
 800849e:	686c      	ldr	r4, [r5, #4]
 80084a0:	4621      	mov	r1, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	b003      	add	sp, #12
 80084a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084aa:	f7ff be43 	b.w	8008134 <__svfiscanf_r>
 80084ae:	4906      	ldr	r1, [pc, #24]	; (80084c8 <_vfiscanf_r+0x48>)
 80084b0:	428c      	cmp	r4, r1
 80084b2:	d101      	bne.n	80084b8 <_vfiscanf_r+0x38>
 80084b4:	68ac      	ldr	r4, [r5, #8]
 80084b6:	e7f3      	b.n	80084a0 <_vfiscanf_r+0x20>
 80084b8:	4904      	ldr	r1, [pc, #16]	; (80084cc <_vfiscanf_r+0x4c>)
 80084ba:	428c      	cmp	r4, r1
 80084bc:	bf08      	it	eq
 80084be:	68ec      	ldreq	r4, [r5, #12]
 80084c0:	e7ee      	b.n	80084a0 <_vfiscanf_r+0x20>
 80084c2:	bf00      	nop
 80084c4:	08009364 	.word	0x08009364
 80084c8:	08009384 	.word	0x08009384
 80084cc:	08009344 	.word	0x08009344

080084d0 <_scanf_chars>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4615      	mov	r5, r2
 80084d6:	688a      	ldr	r2, [r1, #8]
 80084d8:	4680      	mov	r8, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	b932      	cbnz	r2, 80084ec <_scanf_chars+0x1c>
 80084de:	698a      	ldr	r2, [r1, #24]
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	bf0c      	ite	eq
 80084e4:	2201      	moveq	r2, #1
 80084e6:	f04f 32ff 	movne.w	r2, #4294967295
 80084ea:	608a      	str	r2, [r1, #8]
 80084ec:	6822      	ldr	r2, [r4, #0]
 80084ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008580 <_scanf_chars+0xb0>
 80084f2:	06d1      	lsls	r1, r2, #27
 80084f4:	bf5f      	itttt	pl
 80084f6:	681a      	ldrpl	r2, [r3, #0]
 80084f8:	1d11      	addpl	r1, r2, #4
 80084fa:	6019      	strpl	r1, [r3, #0]
 80084fc:	6816      	ldrpl	r6, [r2, #0]
 80084fe:	2700      	movs	r7, #0
 8008500:	69a0      	ldr	r0, [r4, #24]
 8008502:	b188      	cbz	r0, 8008528 <_scanf_chars+0x58>
 8008504:	2801      	cmp	r0, #1
 8008506:	d107      	bne.n	8008518 <_scanf_chars+0x48>
 8008508:	682a      	ldr	r2, [r5, #0]
 800850a:	7811      	ldrb	r1, [r2, #0]
 800850c:	6962      	ldr	r2, [r4, #20]
 800850e:	5c52      	ldrb	r2, [r2, r1]
 8008510:	b952      	cbnz	r2, 8008528 <_scanf_chars+0x58>
 8008512:	2f00      	cmp	r7, #0
 8008514:	d031      	beq.n	800857a <_scanf_chars+0xaa>
 8008516:	e022      	b.n	800855e <_scanf_chars+0x8e>
 8008518:	2802      	cmp	r0, #2
 800851a:	d120      	bne.n	800855e <_scanf_chars+0x8e>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008524:	071b      	lsls	r3, r3, #28
 8008526:	d41a      	bmi.n	800855e <_scanf_chars+0x8e>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	06da      	lsls	r2, r3, #27
 800852c:	bf5e      	ittt	pl
 800852e:	682b      	ldrpl	r3, [r5, #0]
 8008530:	781b      	ldrbpl	r3, [r3, #0]
 8008532:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008536:	682a      	ldr	r2, [r5, #0]
 8008538:	686b      	ldr	r3, [r5, #4]
 800853a:	3201      	adds	r2, #1
 800853c:	602a      	str	r2, [r5, #0]
 800853e:	68a2      	ldr	r2, [r4, #8]
 8008540:	3b01      	subs	r3, #1
 8008542:	3a01      	subs	r2, #1
 8008544:	606b      	str	r3, [r5, #4]
 8008546:	3701      	adds	r7, #1
 8008548:	60a2      	str	r2, [r4, #8]
 800854a:	b142      	cbz	r2, 800855e <_scanf_chars+0x8e>
 800854c:	2b00      	cmp	r3, #0
 800854e:	dcd7      	bgt.n	8008500 <_scanf_chars+0x30>
 8008550:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008554:	4629      	mov	r1, r5
 8008556:	4640      	mov	r0, r8
 8008558:	4798      	blx	r3
 800855a:	2800      	cmp	r0, #0
 800855c:	d0d0      	beq.n	8008500 <_scanf_chars+0x30>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	f013 0310 	ands.w	r3, r3, #16
 8008564:	d105      	bne.n	8008572 <_scanf_chars+0xa2>
 8008566:	68e2      	ldr	r2, [r4, #12]
 8008568:	3201      	adds	r2, #1
 800856a:	60e2      	str	r2, [r4, #12]
 800856c:	69a2      	ldr	r2, [r4, #24]
 800856e:	b102      	cbz	r2, 8008572 <_scanf_chars+0xa2>
 8008570:	7033      	strb	r3, [r6, #0]
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	443b      	add	r3, r7
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	2000      	movs	r0, #0
 800857a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857e:	bf00      	nop
 8008580:	080091b1 	.word	0x080091b1

08008584 <_scanf_i>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	4698      	mov	r8, r3
 800858a:	4b76      	ldr	r3, [pc, #472]	; (8008764 <_scanf_i+0x1e0>)
 800858c:	460c      	mov	r4, r1
 800858e:	4682      	mov	sl, r0
 8008590:	4616      	mov	r6, r2
 8008592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008596:	b087      	sub	sp, #28
 8008598:	ab03      	add	r3, sp, #12
 800859a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800859e:	4b72      	ldr	r3, [pc, #456]	; (8008768 <_scanf_i+0x1e4>)
 80085a0:	69a1      	ldr	r1, [r4, #24]
 80085a2:	4a72      	ldr	r2, [pc, #456]	; (800876c <_scanf_i+0x1e8>)
 80085a4:	2903      	cmp	r1, #3
 80085a6:	bf18      	it	ne
 80085a8:	461a      	movne	r2, r3
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	9201      	str	r2, [sp, #4]
 80085ae:	1e5a      	subs	r2, r3, #1
 80085b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085b4:	bf88      	it	hi
 80085b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085ba:	4627      	mov	r7, r4
 80085bc:	bf82      	ittt	hi
 80085be:	eb03 0905 	addhi.w	r9, r3, r5
 80085c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80085c6:	60a3      	strhi	r3, [r4, #8]
 80085c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80085cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80085d0:	bf98      	it	ls
 80085d2:	f04f 0900 	movls.w	r9, #0
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	463d      	mov	r5, r7
 80085da:	f04f 0b00 	mov.w	fp, #0
 80085de:	6831      	ldr	r1, [r6, #0]
 80085e0:	ab03      	add	r3, sp, #12
 80085e2:	7809      	ldrb	r1, [r1, #0]
 80085e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80085e8:	2202      	movs	r2, #2
 80085ea:	f7f7 fe19 	bl	8000220 <memchr>
 80085ee:	b328      	cbz	r0, 800863c <_scanf_i+0xb8>
 80085f0:	f1bb 0f01 	cmp.w	fp, #1
 80085f4:	d159      	bne.n	80086aa <_scanf_i+0x126>
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	b92a      	cbnz	r2, 8008606 <_scanf_i+0x82>
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	2308      	movs	r3, #8
 80085fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	6022      	str	r2, [r4, #0]
 8008606:	6822      	ldr	r2, [r4, #0]
 8008608:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	68a2      	ldr	r2, [r4, #8]
 8008610:	1e51      	subs	r1, r2, #1
 8008612:	60a1      	str	r1, [r4, #8]
 8008614:	b192      	cbz	r2, 800863c <_scanf_i+0xb8>
 8008616:	6832      	ldr	r2, [r6, #0]
 8008618:	1c51      	adds	r1, r2, #1
 800861a:	6031      	str	r1, [r6, #0]
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	f805 2b01 	strb.w	r2, [r5], #1
 8008622:	6872      	ldr	r2, [r6, #4]
 8008624:	3a01      	subs	r2, #1
 8008626:	2a00      	cmp	r2, #0
 8008628:	6072      	str	r2, [r6, #4]
 800862a:	dc07      	bgt.n	800863c <_scanf_i+0xb8>
 800862c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008630:	4631      	mov	r1, r6
 8008632:	4650      	mov	r0, sl
 8008634:	4790      	blx	r2
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 8085 	bne.w	8008746 <_scanf_i+0x1c2>
 800863c:	f10b 0b01 	add.w	fp, fp, #1
 8008640:	f1bb 0f03 	cmp.w	fp, #3
 8008644:	d1cb      	bne.n	80085de <_scanf_i+0x5a>
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	b90b      	cbnz	r3, 800864e <_scanf_i+0xca>
 800864a:	230a      	movs	r3, #10
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	4947      	ldr	r1, [pc, #284]	; (8008770 <_scanf_i+0x1ec>)
 8008652:	6960      	ldr	r0, [r4, #20]
 8008654:	1ac9      	subs	r1, r1, r3
 8008656:	f000 f93b 	bl	80088d0 <__sccl>
 800865a:	f04f 0b00 	mov.w	fp, #0
 800865e:	68a3      	ldr	r3, [r4, #8]
 8008660:	6822      	ldr	r2, [r4, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d03d      	beq.n	80086e2 <_scanf_i+0x15e>
 8008666:	6831      	ldr	r1, [r6, #0]
 8008668:	6960      	ldr	r0, [r4, #20]
 800866a:	f891 c000 	ldrb.w	ip, [r1]
 800866e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008672:	2800      	cmp	r0, #0
 8008674:	d035      	beq.n	80086e2 <_scanf_i+0x15e>
 8008676:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800867a:	d124      	bne.n	80086c6 <_scanf_i+0x142>
 800867c:	0510      	lsls	r0, r2, #20
 800867e:	d522      	bpl.n	80086c6 <_scanf_i+0x142>
 8008680:	f10b 0b01 	add.w	fp, fp, #1
 8008684:	f1b9 0f00 	cmp.w	r9, #0
 8008688:	d003      	beq.n	8008692 <_scanf_i+0x10e>
 800868a:	3301      	adds	r3, #1
 800868c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	6873      	ldr	r3, [r6, #4]
 8008694:	3b01      	subs	r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	6073      	str	r3, [r6, #4]
 800869a:	dd1b      	ble.n	80086d4 <_scanf_i+0x150>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	3301      	adds	r3, #1
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	60a3      	str	r3, [r4, #8]
 80086a8:	e7d9      	b.n	800865e <_scanf_i+0xda>
 80086aa:	f1bb 0f02 	cmp.w	fp, #2
 80086ae:	d1ae      	bne.n	800860e <_scanf_i+0x8a>
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80086b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80086ba:	d1bf      	bne.n	800863c <_scanf_i+0xb8>
 80086bc:	2310      	movs	r3, #16
 80086be:	6063      	str	r3, [r4, #4]
 80086c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086c4:	e7a2      	b.n	800860c <_scanf_i+0x88>
 80086c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	780b      	ldrb	r3, [r1, #0]
 80086ce:	f805 3b01 	strb.w	r3, [r5], #1
 80086d2:	e7de      	b.n	8008692 <_scanf_i+0x10e>
 80086d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086d8:	4631      	mov	r1, r6
 80086da:	4650      	mov	r0, sl
 80086dc:	4798      	blx	r3
 80086de:	2800      	cmp	r0, #0
 80086e0:	d0df      	beq.n	80086a2 <_scanf_i+0x11e>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	05db      	lsls	r3, r3, #23
 80086e6:	d50d      	bpl.n	8008704 <_scanf_i+0x180>
 80086e8:	42bd      	cmp	r5, r7
 80086ea:	d909      	bls.n	8008700 <_scanf_i+0x17c>
 80086ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80086f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086f4:	4632      	mov	r2, r6
 80086f6:	4650      	mov	r0, sl
 80086f8:	4798      	blx	r3
 80086fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80086fe:	464d      	mov	r5, r9
 8008700:	42bd      	cmp	r5, r7
 8008702:	d02d      	beq.n	8008760 <_scanf_i+0x1dc>
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	f012 0210 	ands.w	r2, r2, #16
 800870a:	d113      	bne.n	8008734 <_scanf_i+0x1b0>
 800870c:	702a      	strb	r2, [r5, #0]
 800870e:	6863      	ldr	r3, [r4, #4]
 8008710:	9e01      	ldr	r6, [sp, #4]
 8008712:	4639      	mov	r1, r7
 8008714:	4650      	mov	r0, sl
 8008716:	47b0      	blx	r6
 8008718:	6821      	ldr	r1, [r4, #0]
 800871a:	f8d8 3000 	ldr.w	r3, [r8]
 800871e:	f011 0f20 	tst.w	r1, #32
 8008722:	d013      	beq.n	800874c <_scanf_i+0x1c8>
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	f8c8 2000 	str.w	r2, [r8]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	60e3      	str	r3, [r4, #12]
 8008734:	1bed      	subs	r5, r5, r7
 8008736:	44ab      	add	fp, r5
 8008738:	6925      	ldr	r5, [r4, #16]
 800873a:	445d      	add	r5, fp
 800873c:	6125      	str	r5, [r4, #16]
 800873e:	2000      	movs	r0, #0
 8008740:	b007      	add	sp, #28
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	f04f 0b00 	mov.w	fp, #0
 800874a:	e7ca      	b.n	80086e2 <_scanf_i+0x15e>
 800874c:	1d1a      	adds	r2, r3, #4
 800874e:	f8c8 2000 	str.w	r2, [r8]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f011 0f01 	tst.w	r1, #1
 8008758:	bf14      	ite	ne
 800875a:	8018      	strhne	r0, [r3, #0]
 800875c:	6018      	streq	r0, [r3, #0]
 800875e:	e7e6      	b.n	800872e <_scanf_i+0x1aa>
 8008760:	2001      	movs	r0, #1
 8008762:	e7ed      	b.n	8008740 <_scanf_i+0x1bc>
 8008764:	08009100 	.word	0x08009100
 8008768:	08008ad5 	.word	0x08008ad5
 800876c:	0800578d 	.word	0x0800578d
 8008770:	080095a6 	.word	0x080095a6

08008774 <lflush>:
 8008774:	8983      	ldrh	r3, [r0, #12]
 8008776:	f003 0309 	and.w	r3, r3, #9
 800877a:	2b09      	cmp	r3, #9
 800877c:	d101      	bne.n	8008782 <lflush+0xe>
 800877e:	f7fd bf43 	b.w	8006608 <fflush>
 8008782:	2000      	movs	r0, #0
 8008784:	4770      	bx	lr
	...

08008788 <__srefill_r>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	4605      	mov	r5, r0
 800878e:	b118      	cbz	r0, 8008798 <__srefill_r+0x10>
 8008790:	6983      	ldr	r3, [r0, #24]
 8008792:	b90b      	cbnz	r3, 8008798 <__srefill_r+0x10>
 8008794:	f7fd ffa2 	bl	80066dc <__sinit>
 8008798:	4b3b      	ldr	r3, [pc, #236]	; (8008888 <__srefill_r+0x100>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d10a      	bne.n	80087b4 <__srefill_r+0x2c>
 800879e:	686c      	ldr	r4, [r5, #4]
 80087a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a4:	2300      	movs	r3, #0
 80087a6:	6063      	str	r3, [r4, #4]
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	069e      	lsls	r6, r3, #26
 80087ac:	d50c      	bpl.n	80087c8 <__srefill_r+0x40>
 80087ae:	f04f 30ff 	mov.w	r0, #4294967295
 80087b2:	e066      	b.n	8008882 <__srefill_r+0xfa>
 80087b4:	4b35      	ldr	r3, [pc, #212]	; (800888c <__srefill_r+0x104>)
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d101      	bne.n	80087be <__srefill_r+0x36>
 80087ba:	68ac      	ldr	r4, [r5, #8]
 80087bc:	e7f0      	b.n	80087a0 <__srefill_r+0x18>
 80087be:	4b34      	ldr	r3, [pc, #208]	; (8008890 <__srefill_r+0x108>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	bf08      	it	eq
 80087c4:	68ec      	ldreq	r4, [r5, #12]
 80087c6:	e7eb      	b.n	80087a0 <__srefill_r+0x18>
 80087c8:	0758      	lsls	r0, r3, #29
 80087ca:	d448      	bmi.n	800885e <__srefill_r+0xd6>
 80087cc:	06d9      	lsls	r1, r3, #27
 80087ce:	d405      	bmi.n	80087dc <__srefill_r+0x54>
 80087d0:	2309      	movs	r3, #9
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	e7e8      	b.n	80087ae <__srefill_r+0x26>
 80087dc:	071a      	lsls	r2, r3, #28
 80087de:	d50b      	bpl.n	80087f8 <__srefill_r+0x70>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f7fd fed4 	bl	8006590 <_fflush_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d1e0      	bne.n	80087ae <__srefill_r+0x26>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	60a0      	str	r0, [r4, #8]
 80087f0:	f023 0308 	bic.w	r3, r3, #8
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	61a0      	str	r0, [r4, #24]
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f043 0304 	orr.w	r3, r3, #4
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	b91b      	cbnz	r3, 800880c <__srefill_r+0x84>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f7fe fbbe 	bl	8006f88 <__smakebuf_r>
 800880c:	89a6      	ldrh	r6, [r4, #12]
 800880e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008812:	07b3      	lsls	r3, r6, #30
 8008814:	d00f      	beq.n	8008836 <__srefill_r+0xae>
 8008816:	2301      	movs	r3, #1
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	4b1e      	ldr	r3, [pc, #120]	; (8008894 <__srefill_r+0x10c>)
 800881c:	491e      	ldr	r1, [pc, #120]	; (8008898 <__srefill_r+0x110>)
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f006 0609 	and.w	r6, r6, #9
 8008824:	f7fd ffd8 	bl	80067d8 <_fwalk>
 8008828:	2e09      	cmp	r6, #9
 800882a:	81a7      	strh	r7, [r4, #12]
 800882c:	d103      	bne.n	8008836 <__srefill_r+0xae>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f7fd fe27 	bl	8006484 <__sflush_r>
 8008836:	6922      	ldr	r2, [r4, #16]
 8008838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800883a:	6963      	ldr	r3, [r4, #20]
 800883c:	6a21      	ldr	r1, [r4, #32]
 800883e:	6022      	str	r2, [r4, #0]
 8008840:	4628      	mov	r0, r5
 8008842:	47b0      	blx	r6
 8008844:	2800      	cmp	r0, #0
 8008846:	6060      	str	r0, [r4, #4]
 8008848:	dc1c      	bgt.n	8008884 <__srefill_r+0xfc>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	bf17      	itett	ne
 8008850:	2200      	movne	r2, #0
 8008852:	f043 0320 	orreq.w	r3, r3, #32
 8008856:	6062      	strne	r2, [r4, #4]
 8008858:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800885c:	e7bc      	b.n	80087d8 <__srefill_r+0x50>
 800885e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008860:	2900      	cmp	r1, #0
 8008862:	d0cd      	beq.n	8008800 <__srefill_r+0x78>
 8008864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__srefill_r+0xea>
 800886c:	4628      	mov	r0, r5
 800886e:	f7ff f8cb 	bl	8007a08 <_free_r>
 8008872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	2000      	movs	r0, #0
 8008878:	6360      	str	r0, [r4, #52]	; 0x34
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0c0      	beq.n	8008800 <__srefill_r+0x78>
 800887e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008884:	2000      	movs	r0, #0
 8008886:	e7fc      	b.n	8008882 <__srefill_r+0xfa>
 8008888:	08009364 	.word	0x08009364
 800888c:	08009384 	.word	0x08009384
 8008890:	08009344 	.word	0x08009344
 8008894:	08009124 	.word	0x08009124
 8008898:	08008775 	.word	0x08008775
 800889c:	00000000 	.word	0x00000000

080088a0 <nan>:
 80088a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088a8 <nan+0x8>
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	00000000 	.word	0x00000000
 80088ac:	7ff80000 	.word	0x7ff80000

080088b0 <_sbrk_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d06      	ldr	r5, [pc, #24]	; (80088cc <_sbrk_r+0x1c>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f7f8 fefe 	bl	80016bc <_sbrk>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_sbrk_r+0x1a>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_sbrk_r+0x1a>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20000298 	.word	0x20000298

080088d0 <__sccl>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	780b      	ldrb	r3, [r1, #0]
 80088d4:	4604      	mov	r4, r0
 80088d6:	2b5e      	cmp	r3, #94	; 0x5e
 80088d8:	bf0b      	itete	eq
 80088da:	784b      	ldrbeq	r3, [r1, #1]
 80088dc:	1c48      	addne	r0, r1, #1
 80088de:	1c88      	addeq	r0, r1, #2
 80088e0:	2200      	movne	r2, #0
 80088e2:	bf08      	it	eq
 80088e4:	2201      	moveq	r2, #1
 80088e6:	1e61      	subs	r1, r4, #1
 80088e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80088ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 80088f0:	42a9      	cmp	r1, r5
 80088f2:	d1fb      	bne.n	80088ec <__sccl+0x1c>
 80088f4:	b90b      	cbnz	r3, 80088fa <__sccl+0x2a>
 80088f6:	3801      	subs	r0, #1
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	f082 0201 	eor.w	r2, r2, #1
 80088fe:	54e2      	strb	r2, [r4, r3]
 8008900:	4605      	mov	r5, r0
 8008902:	4628      	mov	r0, r5
 8008904:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008908:	292d      	cmp	r1, #45	; 0x2d
 800890a:	d006      	beq.n	800891a <__sccl+0x4a>
 800890c:	295d      	cmp	r1, #93	; 0x5d
 800890e:	d0f3      	beq.n	80088f8 <__sccl+0x28>
 8008910:	b909      	cbnz	r1, 8008916 <__sccl+0x46>
 8008912:	4628      	mov	r0, r5
 8008914:	e7f0      	b.n	80088f8 <__sccl+0x28>
 8008916:	460b      	mov	r3, r1
 8008918:	e7f1      	b.n	80088fe <__sccl+0x2e>
 800891a:	786e      	ldrb	r6, [r5, #1]
 800891c:	2e5d      	cmp	r6, #93	; 0x5d
 800891e:	d0fa      	beq.n	8008916 <__sccl+0x46>
 8008920:	42b3      	cmp	r3, r6
 8008922:	dcf8      	bgt.n	8008916 <__sccl+0x46>
 8008924:	3502      	adds	r5, #2
 8008926:	4619      	mov	r1, r3
 8008928:	3101      	adds	r1, #1
 800892a:	428e      	cmp	r6, r1
 800892c:	5462      	strb	r2, [r4, r1]
 800892e:	dcfb      	bgt.n	8008928 <__sccl+0x58>
 8008930:	1af1      	subs	r1, r6, r3
 8008932:	3901      	subs	r1, #1
 8008934:	1c58      	adds	r0, r3, #1
 8008936:	42b3      	cmp	r3, r6
 8008938:	bfa8      	it	ge
 800893a:	2100      	movge	r1, #0
 800893c:	1843      	adds	r3, r0, r1
 800893e:	e7e0      	b.n	8008902 <__sccl+0x32>

08008940 <__sread>:
 8008940:	b510      	push	{r4, lr}
 8008942:	460c      	mov	r4, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	f000 fb42 	bl	8008fd0 <_read_r>
 800894c:	2800      	cmp	r0, #0
 800894e:	bfab      	itete	ge
 8008950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008952:	89a3      	ldrhlt	r3, [r4, #12]
 8008954:	181b      	addge	r3, r3, r0
 8008956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800895a:	bfac      	ite	ge
 800895c:	6563      	strge	r3, [r4, #84]	; 0x54
 800895e:	81a3      	strhlt	r3, [r4, #12]
 8008960:	bd10      	pop	{r4, pc}

08008962 <__swrite>:
 8008962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	461f      	mov	r7, r3
 8008968:	898b      	ldrh	r3, [r1, #12]
 800896a:	05db      	lsls	r3, r3, #23
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	4616      	mov	r6, r2
 8008972:	d505      	bpl.n	8008980 <__swrite+0x1e>
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2302      	movs	r3, #2
 800897a:	2200      	movs	r2, #0
 800897c:	f000 fac0 	bl	8008f00 <_lseek_r>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008996:	f000 b9d1 	b.w	8008d3c <_write_r>

0800899a <__sseek>:
 800899a:	b510      	push	{r4, lr}
 800899c:	460c      	mov	r4, r1
 800899e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a2:	f000 faad 	bl	8008f00 <_lseek_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	bf15      	itete	ne
 80089ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089b6:	81a3      	strheq	r3, [r4, #12]
 80089b8:	bf18      	it	ne
 80089ba:	81a3      	strhne	r3, [r4, #12]
 80089bc:	bd10      	pop	{r4, pc}

080089be <__sclose>:
 80089be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c2:	f000 ba59 	b.w	8008e78 <_close_r>

080089c6 <strncmp>:
 80089c6:	b510      	push	{r4, lr}
 80089c8:	b17a      	cbz	r2, 80089ea <strncmp+0x24>
 80089ca:	4603      	mov	r3, r0
 80089cc:	3901      	subs	r1, #1
 80089ce:	1884      	adds	r4, r0, r2
 80089d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089d8:	4290      	cmp	r0, r2
 80089da:	d101      	bne.n	80089e0 <strncmp+0x1a>
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d101      	bne.n	80089e4 <strncmp+0x1e>
 80089e0:	1a80      	subs	r0, r0, r2
 80089e2:	bd10      	pop	{r4, pc}
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d1f3      	bne.n	80089d0 <strncmp+0xa>
 80089e8:	e7fa      	b.n	80089e0 <strncmp+0x1a>
 80089ea:	4610      	mov	r0, r2
 80089ec:	e7f9      	b.n	80089e2 <strncmp+0x1c>
	...

080089f0 <_strtoul_l.constprop.0>:
 80089f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089f4:	4f36      	ldr	r7, [pc, #216]	; (8008ad0 <_strtoul_l.constprop.0+0xe0>)
 80089f6:	4686      	mov	lr, r0
 80089f8:	460d      	mov	r5, r1
 80089fa:	4628      	mov	r0, r5
 80089fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a00:	5de6      	ldrb	r6, [r4, r7]
 8008a02:	f016 0608 	ands.w	r6, r6, #8
 8008a06:	d1f8      	bne.n	80089fa <_strtoul_l.constprop.0+0xa>
 8008a08:	2c2d      	cmp	r4, #45	; 0x2d
 8008a0a:	d12f      	bne.n	8008a6c <_strtoul_l.constprop.0+0x7c>
 8008a0c:	782c      	ldrb	r4, [r5, #0]
 8008a0e:	2601      	movs	r6, #1
 8008a10:	1c85      	adds	r5, r0, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d057      	beq.n	8008ac6 <_strtoul_l.constprop.0+0xd6>
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d109      	bne.n	8008a2e <_strtoul_l.constprop.0+0x3e>
 8008a1a:	2c30      	cmp	r4, #48	; 0x30
 8008a1c:	d107      	bne.n	8008a2e <_strtoul_l.constprop.0+0x3e>
 8008a1e:	7828      	ldrb	r0, [r5, #0]
 8008a20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008a24:	2858      	cmp	r0, #88	; 0x58
 8008a26:	d149      	bne.n	8008abc <_strtoul_l.constprop.0+0xcc>
 8008a28:	786c      	ldrb	r4, [r5, #1]
 8008a2a:	2310      	movs	r3, #16
 8008a2c:	3502      	adds	r5, #2
 8008a2e:	f04f 38ff 	mov.w	r8, #4294967295
 8008a32:	2700      	movs	r7, #0
 8008a34:	fbb8 f8f3 	udiv	r8, r8, r3
 8008a38:	fb03 f908 	mul.w	r9, r3, r8
 8008a3c:	ea6f 0909 	mvn.w	r9, r9
 8008a40:	4638      	mov	r0, r7
 8008a42:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a46:	f1bc 0f09 	cmp.w	ip, #9
 8008a4a:	d814      	bhi.n	8008a76 <_strtoul_l.constprop.0+0x86>
 8008a4c:	4664      	mov	r4, ip
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	dd22      	ble.n	8008a98 <_strtoul_l.constprop.0+0xa8>
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	db1d      	blt.n	8008a92 <_strtoul_l.constprop.0+0xa2>
 8008a56:	4580      	cmp	r8, r0
 8008a58:	d31b      	bcc.n	8008a92 <_strtoul_l.constprop.0+0xa2>
 8008a5a:	d101      	bne.n	8008a60 <_strtoul_l.constprop.0+0x70>
 8008a5c:	45a1      	cmp	r9, r4
 8008a5e:	db18      	blt.n	8008a92 <_strtoul_l.constprop.0+0xa2>
 8008a60:	fb00 4003 	mla	r0, r0, r3, r4
 8008a64:	2701      	movs	r7, #1
 8008a66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a6a:	e7ea      	b.n	8008a42 <_strtoul_l.constprop.0+0x52>
 8008a6c:	2c2b      	cmp	r4, #43	; 0x2b
 8008a6e:	bf04      	itt	eq
 8008a70:	782c      	ldrbeq	r4, [r5, #0]
 8008a72:	1c85      	addeq	r5, r0, #2
 8008a74:	e7cd      	b.n	8008a12 <_strtoul_l.constprop.0+0x22>
 8008a76:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a7a:	f1bc 0f19 	cmp.w	ip, #25
 8008a7e:	d801      	bhi.n	8008a84 <_strtoul_l.constprop.0+0x94>
 8008a80:	3c37      	subs	r4, #55	; 0x37
 8008a82:	e7e4      	b.n	8008a4e <_strtoul_l.constprop.0+0x5e>
 8008a84:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a88:	f1bc 0f19 	cmp.w	ip, #25
 8008a8c:	d804      	bhi.n	8008a98 <_strtoul_l.constprop.0+0xa8>
 8008a8e:	3c57      	subs	r4, #87	; 0x57
 8008a90:	e7dd      	b.n	8008a4e <_strtoul_l.constprop.0+0x5e>
 8008a92:	f04f 37ff 	mov.w	r7, #4294967295
 8008a96:	e7e6      	b.n	8008a66 <_strtoul_l.constprop.0+0x76>
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	da07      	bge.n	8008aac <_strtoul_l.constprop.0+0xbc>
 8008a9c:	2322      	movs	r3, #34	; 0x22
 8008a9e:	f8ce 3000 	str.w	r3, [lr]
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa6:	b932      	cbnz	r2, 8008ab6 <_strtoul_l.constprop.0+0xc6>
 8008aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aac:	b106      	cbz	r6, 8008ab0 <_strtoul_l.constprop.0+0xc0>
 8008aae:	4240      	negs	r0, r0
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	d0f9      	beq.n	8008aa8 <_strtoul_l.constprop.0+0xb8>
 8008ab4:	b107      	cbz	r7, 8008ab8 <_strtoul_l.constprop.0+0xc8>
 8008ab6:	1e69      	subs	r1, r5, #1
 8008ab8:	6011      	str	r1, [r2, #0]
 8008aba:	e7f5      	b.n	8008aa8 <_strtoul_l.constprop.0+0xb8>
 8008abc:	2430      	movs	r4, #48	; 0x30
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1b5      	bne.n	8008a2e <_strtoul_l.constprop.0+0x3e>
 8008ac2:	2308      	movs	r3, #8
 8008ac4:	e7b3      	b.n	8008a2e <_strtoul_l.constprop.0+0x3e>
 8008ac6:	2c30      	cmp	r4, #48	; 0x30
 8008ac8:	d0a9      	beq.n	8008a1e <_strtoul_l.constprop.0+0x2e>
 8008aca:	230a      	movs	r3, #10
 8008acc:	e7af      	b.n	8008a2e <_strtoul_l.constprop.0+0x3e>
 8008ace:	bf00      	nop
 8008ad0:	080091b1 	.word	0x080091b1

08008ad4 <_strtoul_r>:
 8008ad4:	f7ff bf8c 	b.w	80089f0 <_strtoul_l.constprop.0>

08008ad8 <__submore>:
 8008ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008adc:	460c      	mov	r4, r1
 8008ade:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae4:	4299      	cmp	r1, r3
 8008ae6:	d11d      	bne.n	8008b24 <__submore+0x4c>
 8008ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008aec:	f7fe fff8 	bl	8007ae0 <_malloc_r>
 8008af0:	b918      	cbnz	r0, 8008afa <__submore+0x22>
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295
 8008af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008afe:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008b04:	6360      	str	r0, [r4, #52]	; 0x34
 8008b06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008b0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008b12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008b1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008b1e:	6020      	str	r0, [r4, #0]
 8008b20:	2000      	movs	r0, #0
 8008b22:	e7e8      	b.n	8008af6 <__submore+0x1e>
 8008b24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008b26:	0077      	lsls	r7, r6, #1
 8008b28:	463a      	mov	r2, r7
 8008b2a:	f000 fa21 	bl	8008f70 <_realloc_r>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d0de      	beq.n	8008af2 <__submore+0x1a>
 8008b34:	eb00 0806 	add.w	r8, r0, r6
 8008b38:	4601      	mov	r1, r0
 8008b3a:	4632      	mov	r2, r6
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	f7fe fa7d 	bl	800703c <memcpy>
 8008b42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008b46:	f8c4 8000 	str.w	r8, [r4]
 8008b4a:	e7e9      	b.n	8008b20 <__submore+0x48>

08008b4c <_ungetc_r>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	4614      	mov	r4, r2
 8008b50:	1c4a      	adds	r2, r1, #1
 8008b52:	4606      	mov	r6, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	d103      	bne.n	8008b60 <_ungetc_r+0x14>
 8008b58:	f04f 35ff 	mov.w	r5, #4294967295
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	b118      	cbz	r0, 8008b6a <_ungetc_r+0x1e>
 8008b62:	6983      	ldr	r3, [r0, #24]
 8008b64:	b90b      	cbnz	r3, 8008b6a <_ungetc_r+0x1e>
 8008b66:	f7fd fdb9 	bl	80066dc <__sinit>
 8008b6a:	4b41      	ldr	r3, [pc, #260]	; (8008c70 <_ungetc_r+0x124>)
 8008b6c:	429c      	cmp	r4, r3
 8008b6e:	d11d      	bne.n	8008bac <_ungetc_r+0x60>
 8008b70:	6874      	ldr	r4, [r6, #4]
 8008b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b74:	07db      	lsls	r3, r3, #31
 8008b76:	d405      	bmi.n	8008b84 <_ungetc_r+0x38>
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	0598      	lsls	r0, r3, #22
 8008b7c:	d402      	bmi.n	8008b84 <_ungetc_r+0x38>
 8008b7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b80:	f7fe f9db 	bl	8006f3a <__retarget_lock_acquire_recursive>
 8008b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b88:	f023 0320 	bic.w	r3, r3, #32
 8008b8c:	0759      	lsls	r1, r3, #29
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	d42d      	bmi.n	8008bf0 <_ungetc_r+0xa4>
 8008b94:	06d3      	lsls	r3, r2, #27
 8008b96:	d413      	bmi.n	8008bc0 <_ungetc_r+0x74>
 8008b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b9a:	07dd      	lsls	r5, r3, #31
 8008b9c:	d4dc      	bmi.n	8008b58 <_ungetc_r+0xc>
 8008b9e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008ba2:	d1d9      	bne.n	8008b58 <_ungetc_r+0xc>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ba6:	f7fe f9c9 	bl	8006f3c <__retarget_lock_release_recursive>
 8008baa:	e7d5      	b.n	8008b58 <_ungetc_r+0xc>
 8008bac:	4b31      	ldr	r3, [pc, #196]	; (8008c74 <_ungetc_r+0x128>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d101      	bne.n	8008bb6 <_ungetc_r+0x6a>
 8008bb2:	68b4      	ldr	r4, [r6, #8]
 8008bb4:	e7dd      	b.n	8008b72 <_ungetc_r+0x26>
 8008bb6:	4b30      	ldr	r3, [pc, #192]	; (8008c78 <_ungetc_r+0x12c>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	bf08      	it	eq
 8008bbc:	68f4      	ldreq	r4, [r6, #12]
 8008bbe:	e7d8      	b.n	8008b72 <_ungetc_r+0x26>
 8008bc0:	0710      	lsls	r0, r2, #28
 8008bc2:	d511      	bpl.n	8008be8 <_ungetc_r+0x9c>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f7fd fce2 	bl	8006590 <_fflush_r>
 8008bcc:	b130      	cbz	r0, 8008bdc <_ungetc_r+0x90>
 8008bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd0:	07d9      	lsls	r1, r3, #31
 8008bd2:	d4c1      	bmi.n	8008b58 <_ungetc_r+0xc>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008bda:	e7e2      	b.n	8008ba2 <_ungetc_r+0x56>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	60a0      	str	r0, [r4, #8]
 8008be0:	f023 0308 	bic.w	r3, r3, #8
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	61a0      	str	r0, [r4, #24]
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0304 	orr.w	r3, r3, #4
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	b2ed      	uxtb	r5, r5
 8008bf6:	b1d3      	cbz	r3, 8008c2e <_ungetc_r+0xe2>
 8008bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	dc05      	bgt.n	8008c0a <_ungetc_r+0xbe>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4630      	mov	r0, r6
 8008c02:	f7ff ff69 	bl	8008ad8 <__submore>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d1e1      	bne.n	8008bce <_ungetc_r+0x82>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	1e5a      	subs	r2, r3, #1
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	3301      	adds	r3, #1
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c1c:	07da      	lsls	r2, r3, #31
 8008c1e:	d49d      	bmi.n	8008b5c <_ungetc_r+0x10>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	059b      	lsls	r3, r3, #22
 8008c24:	d49a      	bmi.n	8008b5c <_ungetc_r+0x10>
 8008c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c28:	f7fe f988 	bl	8006f3c <__retarget_lock_release_recursive>
 8008c2c:	e796      	b.n	8008b5c <_ungetc_r+0x10>
 8008c2e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008c30:	6920      	ldr	r0, [r4, #16]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	f001 0101 	and.w	r1, r1, #1
 8008c38:	b160      	cbz	r0, 8008c54 <_ungetc_r+0x108>
 8008c3a:	4298      	cmp	r0, r3
 8008c3c:	d20a      	bcs.n	8008c54 <_ungetc_r+0x108>
 8008c3e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008c42:	42a8      	cmp	r0, r5
 8008c44:	d106      	bne.n	8008c54 <_ungetc_r+0x108>
 8008c46:	3b01      	subs	r3, #1
 8008c48:	3201      	adds	r2, #1
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	6062      	str	r2, [r4, #4]
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	d184      	bne.n	8008b5c <_ungetc_r+0x10>
 8008c52:	e7e5      	b.n	8008c20 <_ungetc_r+0xd4>
 8008c54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c5e:	2303      	movs	r3, #3
 8008c60:	63a3      	str	r3, [r4, #56]	; 0x38
 8008c62:	4623      	mov	r3, r4
 8008c64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	6063      	str	r3, [r4, #4]
 8008c6e:	e7ee      	b.n	8008c4e <_ungetc_r+0x102>
 8008c70:	08009364 	.word	0x08009364
 8008c74:	08009384 	.word	0x08009384
 8008c78:	08009344 	.word	0x08009344

08008c7c <__swbuf_r>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	460e      	mov	r6, r1
 8008c80:	4614      	mov	r4, r2
 8008c82:	4605      	mov	r5, r0
 8008c84:	b118      	cbz	r0, 8008c8e <__swbuf_r+0x12>
 8008c86:	6983      	ldr	r3, [r0, #24]
 8008c88:	b90b      	cbnz	r3, 8008c8e <__swbuf_r+0x12>
 8008c8a:	f7fd fd27 	bl	80066dc <__sinit>
 8008c8e:	4b21      	ldr	r3, [pc, #132]	; (8008d14 <__swbuf_r+0x98>)
 8008c90:	429c      	cmp	r4, r3
 8008c92:	d12b      	bne.n	8008cec <__swbuf_r+0x70>
 8008c94:	686c      	ldr	r4, [r5, #4]
 8008c96:	69a3      	ldr	r3, [r4, #24]
 8008c98:	60a3      	str	r3, [r4, #8]
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	071a      	lsls	r2, r3, #28
 8008c9e:	d52f      	bpl.n	8008d00 <__swbuf_r+0x84>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	b36b      	cbz	r3, 8008d00 <__swbuf_r+0x84>
 8008ca4:	6923      	ldr	r3, [r4, #16]
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	1ac0      	subs	r0, r0, r3
 8008caa:	6963      	ldr	r3, [r4, #20]
 8008cac:	b2f6      	uxtb	r6, r6
 8008cae:	4283      	cmp	r3, r0
 8008cb0:	4637      	mov	r7, r6
 8008cb2:	dc04      	bgt.n	8008cbe <__swbuf_r+0x42>
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7fd fc6a 	bl	8006590 <_fflush_r>
 8008cbc:	bb30      	cbnz	r0, 8008d0c <__swbuf_r+0x90>
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	60a3      	str	r3, [r4, #8]
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	6022      	str	r2, [r4, #0]
 8008cca:	701e      	strb	r6, [r3, #0]
 8008ccc:	6963      	ldr	r3, [r4, #20]
 8008cce:	3001      	adds	r0, #1
 8008cd0:	4283      	cmp	r3, r0
 8008cd2:	d004      	beq.n	8008cde <__swbuf_r+0x62>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	07db      	lsls	r3, r3, #31
 8008cd8:	d506      	bpl.n	8008ce8 <__swbuf_r+0x6c>
 8008cda:	2e0a      	cmp	r6, #10
 8008cdc:	d104      	bne.n	8008ce8 <__swbuf_r+0x6c>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f7fd fc55 	bl	8006590 <_fflush_r>
 8008ce6:	b988      	cbnz	r0, 8008d0c <__swbuf_r+0x90>
 8008ce8:	4638      	mov	r0, r7
 8008cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <__swbuf_r+0x9c>)
 8008cee:	429c      	cmp	r4, r3
 8008cf0:	d101      	bne.n	8008cf6 <__swbuf_r+0x7a>
 8008cf2:	68ac      	ldr	r4, [r5, #8]
 8008cf4:	e7cf      	b.n	8008c96 <__swbuf_r+0x1a>
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <__swbuf_r+0xa0>)
 8008cf8:	429c      	cmp	r4, r3
 8008cfa:	bf08      	it	eq
 8008cfc:	68ec      	ldreq	r4, [r5, #12]
 8008cfe:	e7ca      	b.n	8008c96 <__swbuf_r+0x1a>
 8008d00:	4621      	mov	r1, r4
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 f82c 	bl	8008d60 <__swsetup_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0cb      	beq.n	8008ca4 <__swbuf_r+0x28>
 8008d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d10:	e7ea      	b.n	8008ce8 <__swbuf_r+0x6c>
 8008d12:	bf00      	nop
 8008d14:	08009364 	.word	0x08009364
 8008d18:	08009384 	.word	0x08009384
 8008d1c:	08009344 	.word	0x08009344

08008d20 <__ascii_wctomb>:
 8008d20:	b149      	cbz	r1, 8008d36 <__ascii_wctomb+0x16>
 8008d22:	2aff      	cmp	r2, #255	; 0xff
 8008d24:	bf85      	ittet	hi
 8008d26:	238a      	movhi	r3, #138	; 0x8a
 8008d28:	6003      	strhi	r3, [r0, #0]
 8008d2a:	700a      	strbls	r2, [r1, #0]
 8008d2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d30:	bf98      	it	ls
 8008d32:	2001      	movls	r0, #1
 8008d34:	4770      	bx	lr
 8008d36:	4608      	mov	r0, r1
 8008d38:	4770      	bx	lr
	...

08008d3c <_write_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	; (8008d5c <_write_r+0x20>)
 8008d40:	4604      	mov	r4, r0
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	602a      	str	r2, [r5, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f7f8 fb8c 	bl	8001468 <_write>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_write_r+0x1e>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_write_r+0x1e>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	20000298 	.word	0x20000298

08008d60 <__swsetup_r>:
 8008d60:	4b32      	ldr	r3, [pc, #200]	; (8008e2c <__swsetup_r+0xcc>)
 8008d62:	b570      	push	{r4, r5, r6, lr}
 8008d64:	681d      	ldr	r5, [r3, #0]
 8008d66:	4606      	mov	r6, r0
 8008d68:	460c      	mov	r4, r1
 8008d6a:	b125      	cbz	r5, 8008d76 <__swsetup_r+0x16>
 8008d6c:	69ab      	ldr	r3, [r5, #24]
 8008d6e:	b913      	cbnz	r3, 8008d76 <__swsetup_r+0x16>
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7fd fcb3 	bl	80066dc <__sinit>
 8008d76:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <__swsetup_r+0xd0>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d10f      	bne.n	8008d9c <__swsetup_r+0x3c>
 8008d7c:	686c      	ldr	r4, [r5, #4]
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d84:	0719      	lsls	r1, r3, #28
 8008d86:	d42c      	bmi.n	8008de2 <__swsetup_r+0x82>
 8008d88:	06dd      	lsls	r5, r3, #27
 8008d8a:	d411      	bmi.n	8008db0 <__swsetup_r+0x50>
 8008d8c:	2309      	movs	r3, #9
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9a:	e03e      	b.n	8008e1a <__swsetup_r+0xba>
 8008d9c:	4b25      	ldr	r3, [pc, #148]	; (8008e34 <__swsetup_r+0xd4>)
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	d101      	bne.n	8008da6 <__swsetup_r+0x46>
 8008da2:	68ac      	ldr	r4, [r5, #8]
 8008da4:	e7eb      	b.n	8008d7e <__swsetup_r+0x1e>
 8008da6:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <__swsetup_r+0xd8>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	bf08      	it	eq
 8008dac:	68ec      	ldreq	r4, [r5, #12]
 8008dae:	e7e6      	b.n	8008d7e <__swsetup_r+0x1e>
 8008db0:	0758      	lsls	r0, r3, #29
 8008db2:	d512      	bpl.n	8008dda <__swsetup_r+0x7a>
 8008db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008db6:	b141      	cbz	r1, 8008dca <__swsetup_r+0x6a>
 8008db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	d002      	beq.n	8008dc6 <__swsetup_r+0x66>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7fe fe21 	bl	8007a08 <_free_r>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f043 0308 	orr.w	r3, r3, #8
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	b94b      	cbnz	r3, 8008dfa <__swsetup_r+0x9a>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df0:	d003      	beq.n	8008dfa <__swsetup_r+0x9a>
 8008df2:	4621      	mov	r1, r4
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7fe f8c7 	bl	8006f88 <__smakebuf_r>
 8008dfa:	89a0      	ldrh	r0, [r4, #12]
 8008dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e00:	f010 0301 	ands.w	r3, r0, #1
 8008e04:	d00a      	beq.n	8008e1c <__swsetup_r+0xbc>
 8008e06:	2300      	movs	r3, #0
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	6963      	ldr	r3, [r4, #20]
 8008e0c:	425b      	negs	r3, r3
 8008e0e:	61a3      	str	r3, [r4, #24]
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b943      	cbnz	r3, 8008e26 <__swsetup_r+0xc6>
 8008e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e18:	d1ba      	bne.n	8008d90 <__swsetup_r+0x30>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	0781      	lsls	r1, r0, #30
 8008e1e:	bf58      	it	pl
 8008e20:	6963      	ldrpl	r3, [r4, #20]
 8008e22:	60a3      	str	r3, [r4, #8]
 8008e24:	e7f4      	b.n	8008e10 <__swsetup_r+0xb0>
 8008e26:	2000      	movs	r0, #0
 8008e28:	e7f7      	b.n	8008e1a <__swsetup_r+0xba>
 8008e2a:	bf00      	nop
 8008e2c:	2000000c 	.word	0x2000000c
 8008e30:	08009364 	.word	0x08009364
 8008e34:	08009384 	.word	0x08009384
 8008e38:	08009344 	.word	0x08009344

08008e3c <__assert_func>:
 8008e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e3e:	4614      	mov	r4, r2
 8008e40:	461a      	mov	r2, r3
 8008e42:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <__assert_func+0x2c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4605      	mov	r5, r0
 8008e48:	68d8      	ldr	r0, [r3, #12]
 8008e4a:	b14c      	cbz	r4, 8008e60 <__assert_func+0x24>
 8008e4c:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <__assert_func+0x30>)
 8008e4e:	9100      	str	r1, [sp, #0]
 8008e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e54:	4906      	ldr	r1, [pc, #24]	; (8008e70 <__assert_func+0x34>)
 8008e56:	462b      	mov	r3, r5
 8008e58:	f000 f81e 	bl	8008e98 <fiprintf>
 8008e5c:	f000 f8ca 	bl	8008ff4 <abort>
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <__assert_func+0x38>)
 8008e62:	461c      	mov	r4, r3
 8008e64:	e7f3      	b.n	8008e4e <__assert_func+0x12>
 8008e66:	bf00      	nop
 8008e68:	2000000c 	.word	0x2000000c
 8008e6c:	080095a8 	.word	0x080095a8
 8008e70:	080095b5 	.word	0x080095b5
 8008e74:	080095e3 	.word	0x080095e3

08008e78 <_close_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_close_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 fb1c 	bl	80014c0 <_close>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_close_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_close_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000298 	.word	0x20000298

08008e98 <fiprintf>:
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b503      	push	{r0, r1, lr}
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	4805      	ldr	r0, [pc, #20]	; (8008eb8 <fiprintf+0x20>)
 8008ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea6:	6800      	ldr	r0, [r0, #0]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f7ff f813 	bl	8007ed4 <_vfiprintf_r>
 8008eae:	b002      	add	sp, #8
 8008eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb4:	b003      	add	sp, #12
 8008eb6:	4770      	bx	lr
 8008eb8:	2000000c 	.word	0x2000000c

08008ebc <_fstat_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d07      	ldr	r5, [pc, #28]	; (8008edc <_fstat_r+0x20>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	f7f8 fb49 	bl	8001560 <_fstat>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d102      	bne.n	8008ed8 <_fstat_r+0x1c>
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	b103      	cbz	r3, 8008ed8 <_fstat_r+0x1c>
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20000298 	.word	0x20000298

08008ee0 <_isatty_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d06      	ldr	r5, [pc, #24]	; (8008efc <_isatty_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f8 faa6 	bl	800143c <_isatty>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_isatty_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_isatty_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000298 	.word	0x20000298

08008f00 <_lseek_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_lseek_r+0x20>)
 8008f04:	4604      	mov	r4, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	4611      	mov	r1, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f8 faed 	bl	80014ee <_lseek>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_lseek_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_lseek_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000298 	.word	0x20000298

08008f24 <memmove>:
 8008f24:	4288      	cmp	r0, r1
 8008f26:	b510      	push	{r4, lr}
 8008f28:	eb01 0402 	add.w	r4, r1, r2
 8008f2c:	d902      	bls.n	8008f34 <memmove+0x10>
 8008f2e:	4284      	cmp	r4, r0
 8008f30:	4623      	mov	r3, r4
 8008f32:	d807      	bhi.n	8008f44 <memmove+0x20>
 8008f34:	1e43      	subs	r3, r0, #1
 8008f36:	42a1      	cmp	r1, r4
 8008f38:	d008      	beq.n	8008f4c <memmove+0x28>
 8008f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f42:	e7f8      	b.n	8008f36 <memmove+0x12>
 8008f44:	4402      	add	r2, r0
 8008f46:	4601      	mov	r1, r0
 8008f48:	428a      	cmp	r2, r1
 8008f4a:	d100      	bne.n	8008f4e <memmove+0x2a>
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f56:	e7f7      	b.n	8008f48 <memmove+0x24>

08008f58 <__malloc_lock>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__malloc_lock+0x8>)
 8008f5a:	f7fd bfee 	b.w	8006f3a <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	2000028c 	.word	0x2000028c

08008f64 <__malloc_unlock>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__malloc_unlock+0x8>)
 8008f66:	f7fd bfe9 	b.w	8006f3c <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	2000028c 	.word	0x2000028c

08008f70 <_realloc_r>:
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	4680      	mov	r8, r0
 8008f76:	4614      	mov	r4, r2
 8008f78:	460e      	mov	r6, r1
 8008f7a:	b921      	cbnz	r1, 8008f86 <_realloc_r+0x16>
 8008f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	4611      	mov	r1, r2
 8008f82:	f7fe bdad 	b.w	8007ae0 <_malloc_r>
 8008f86:	b92a      	cbnz	r2, 8008f94 <_realloc_r+0x24>
 8008f88:	f7fe fd3e 	bl	8007a08 <_free_r>
 8008f8c:	4625      	mov	r5, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	f000 f835 	bl	8009002 <_malloc_usable_size_r>
 8008f98:	4284      	cmp	r4, r0
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	d802      	bhi.n	8008fa4 <_realloc_r+0x34>
 8008f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fa2:	d812      	bhi.n	8008fca <_realloc_r+0x5a>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7fe fd9a 	bl	8007ae0 <_malloc_r>
 8008fac:	4605      	mov	r5, r0
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d0ed      	beq.n	8008f8e <_realloc_r+0x1e>
 8008fb2:	42bc      	cmp	r4, r7
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	bf28      	it	cs
 8008fba:	463a      	movcs	r2, r7
 8008fbc:	f7fe f83e 	bl	800703c <memcpy>
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f7fe fd20 	bl	8007a08 <_free_r>
 8008fc8:	e7e1      	b.n	8008f8e <_realloc_r+0x1e>
 8008fca:	4635      	mov	r5, r6
 8008fcc:	e7df      	b.n	8008f8e <_realloc_r+0x1e>
	...

08008fd0 <_read_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	; (8008ff0 <_read_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f8 fa96 	bl	8001510 <_read>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_read_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_read_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20000298 	.word	0x20000298

08008ff4 <abort>:
 8008ff4:	b508      	push	{r3, lr}
 8008ff6:	2006      	movs	r0, #6
 8008ff8:	f000 f834 	bl	8009064 <raise>
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f000 f85d 	bl	80090bc <_exit>

08009002 <_malloc_usable_size_r>:
 8009002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009006:	1f18      	subs	r0, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfbc      	itt	lt
 800900c:	580b      	ldrlt	r3, [r1, r0]
 800900e:	18c0      	addlt	r0, r0, r3
 8009010:	4770      	bx	lr

08009012 <_raise_r>:
 8009012:	291f      	cmp	r1, #31
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4604      	mov	r4, r0
 8009018:	460d      	mov	r5, r1
 800901a:	d904      	bls.n	8009026 <_raise_r+0x14>
 800901c:	2316      	movs	r3, #22
 800901e:	6003      	str	r3, [r0, #0]
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009028:	b112      	cbz	r2, 8009030 <_raise_r+0x1e>
 800902a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800902e:	b94b      	cbnz	r3, 8009044 <_raise_r+0x32>
 8009030:	4620      	mov	r0, r4
 8009032:	f000 f831 	bl	8009098 <_getpid_r>
 8009036:	462a      	mov	r2, r5
 8009038:	4601      	mov	r1, r0
 800903a:	4620      	mov	r0, r4
 800903c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009040:	f000 b818 	b.w	8009074 <_kill_r>
 8009044:	2b01      	cmp	r3, #1
 8009046:	d00a      	beq.n	800905e <_raise_r+0x4c>
 8009048:	1c59      	adds	r1, r3, #1
 800904a:	d103      	bne.n	8009054 <_raise_r+0x42>
 800904c:	2316      	movs	r3, #22
 800904e:	6003      	str	r3, [r0, #0]
 8009050:	2001      	movs	r0, #1
 8009052:	e7e7      	b.n	8009024 <_raise_r+0x12>
 8009054:	2400      	movs	r4, #0
 8009056:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800905a:	4628      	mov	r0, r5
 800905c:	4798      	blx	r3
 800905e:	2000      	movs	r0, #0
 8009060:	e7e0      	b.n	8009024 <_raise_r+0x12>
	...

08009064 <raise>:
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <raise+0xc>)
 8009066:	4601      	mov	r1, r0
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	f7ff bfd2 	b.w	8009012 <_raise_r>
 800906e:	bf00      	nop
 8009070:	2000000c 	.word	0x2000000c

08009074 <_kill_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_kill_r+0x20>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f000 f813 	bl	80090ac <_kill>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d102      	bne.n	8009090 <_kill_r+0x1c>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b103      	cbz	r3, 8009090 <_kill_r+0x1c>
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	20000298 	.word	0x20000298

08009098 <_getpid_r>:
 8009098:	f000 b800 	b.w	800909c <_getpid>

0800909c <_getpid>:
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <_getpid+0xc>)
 800909e:	2258      	movs	r2, #88	; 0x58
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	f04f 30ff 	mov.w	r0, #4294967295
 80090a6:	4770      	bx	lr
 80090a8:	20000298 	.word	0x20000298

080090ac <_kill>:
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <_kill+0xc>)
 80090ae:	2258      	movs	r2, #88	; 0x58
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	4770      	bx	lr
 80090b8:	20000298 	.word	0x20000298

080090bc <_exit>:
 80090bc:	e7fe      	b.n	80090bc <_exit>
	...

080090c0 <_init>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr

080090cc <_fini>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	bf00      	nop
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr
