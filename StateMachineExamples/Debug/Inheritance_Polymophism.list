
Inheritance_Polymophism.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000764  08000764  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000764  08000764  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000764  08000764  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000764  08000764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000768  08000768  00010768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800076c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000048  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a7d  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000500  00000000  00000000  00020b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f0  00000000  00000000  00021018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a8  00000000  00000000  00021108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d21  00000000  00000000  000211b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013f4  00000000  00000000  00022ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000072ce  00000000  00000000  000242c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002b593  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000048c  00000000  00000000  0002b5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800073c 	.word	0x0800073c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	0800073c 	.word	0x0800073c

080001e8 <Rectangle_ctor>:

 */
void Rectangle_ctor(Rectangle * const me,
					int16_t x0,int16_t y0,
					uint16_t w0,uint16_t h0)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	4608      	mov	r0, r1
 80001f2:	4611      	mov	r1, r2
 80001f4:	461a      	mov	r2, r3
 80001f6:	4603      	mov	r3, r0
 80001f8:	817b      	strh	r3, [r7, #10]
 80001fa:	460b      	mov	r3, r1
 80001fc:	813b      	strh	r3, [r7, #8]
 80001fe:	4613      	mov	r3, r2
 8000200:	80fb      	strh	r3, [r7, #6]
			(void (*)(Shape const * const me))&Rectangle_draw,
			(uint32_t (*)(Shape const * const me))Rectangle_area
	};


	Shape_ctor(&me->super, x0, y0); /*Shape class constructor*/
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000208:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f83b 	bl	8000288 <Shape_ctor>

	me->super.vptr = &vtable;
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <Rectangle_ctor+0x44>)
 8000216:	601a      	str	r2, [r3, #0]

	/* init attributes added in this class */
	me->width  = w0;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	88fa      	ldrh	r2, [r7, #6]
 800021c:	811a      	strh	r2, [r3, #8]
	me->height = h0;
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	8b3a      	ldrh	r2, [r7, #24]
 8000222:	815a      	strh	r2, [r3, #10]

}
 8000224:	bf00      	nop
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	08000754 	.word	0x08000754

08000230 <Rectangle_draw>:
 * @return			  - void
 *
 * @Note              - This function draws a rectangle based on width and height members

 */
void Rectangle_draw(Rectangle const * const me){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <Rectangle_area>:
 * @return			  - Rectangle area absolute value
 *
 * @Note              - This function calculates a rectangle area based on width and height members

 */
uint32_t Rectangle_area(Rectangle const * const me){
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

	uint32_t rect_area = 0;	/* rectangle area variable */
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]

	rect_area = (uint32_t)me->width * (uint32_t)me->height; /*rectangle area calculated & assigned to value */
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	891b      	ldrh	r3, [r3, #8]
 8000254:	461a      	mov	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	895b      	ldrh	r3, [r3, #10]
 800025a:	fb02 f303 	mul.w	r3, r2, r3
 800025e:	60fb      	str	r3, [r7, #12]

	return rect_area; /* rectangle area is returned */
 8000260:	68fb      	ldr	r3, [r7, #12]
}
 8000262:	4618      	mov	r0, r3
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <Shape_draw_vcall>:
void drawGraph(Shape const *graph[]);

/*virtual calls late binding*/

/* TODO: Information has to be written here */
static inline void Shape_draw_vcall(Shape const * const me){
 800026e:	b580      	push	{r7, lr}
 8000270:	b082      	sub	sp, #8
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]

	(*me->vptr->draw)(me);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	4798      	blx	r3
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <Shape_ctor>:
 *
 * @return            - void
 *
 * @Note              - This function initialises elements of Shape structure
 */
void Shape_ctor(Shape * const me,int16_t x0,int16_t y0){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	807b      	strh	r3, [r7, #2]
 8000294:	4613      	mov	r3, r2
 8000296:	803b      	strh	r3, [r7, #0]
	static const struct ShapeVtable vtable = {
		&Shape_draw,
		&Shape_area
	};

	me->vptr = &vtable;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <Shape_ctor+0x30>)
 800029c:	601a      	str	r2, [r3, #0]
	me->x = x0;       /*Shape structure x element are initiliased to x0*/
 800029e:	887a      	ldrh	r2, [r7, #2]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	809a      	strh	r2, [r3, #4]
	me->y = y0;		  /*Shape structure y element are initiliased to y0*/
 80002a4:	883a      	ldrh	r2, [r7, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	80da      	strh	r2, [r3, #6]
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0800075c 	.word	0x0800075c

080002bc <Shape_moveBy>:
 *
 * @return            - void
 *
 * @Note              - This function moves a shape by given dx and dy values.
 */
void Shape_moveBy(Shape * const me,int16_t dx,int16_t dy){
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	807b      	strh	r3, [r7, #2]
 80002c8:	4613      	mov	r3, r2
 80002ca:	803b      	strh	r3, [r7, #0]
	me->x += dx;		/*Shape structure x element is increased by dx*/
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	889a      	ldrh	r2, [r3, #4]
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	4413      	add	r3, r2
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	809a      	strh	r2, [r3, #4]
	me->y += dy;		/*Shape structure y element is increased by dy*/
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	88da      	ldrh	r2, [r3, #6]
 80002de:	883b      	ldrh	r3, [r7, #0]
 80002e0:	4413      	add	r3, r2
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	80da      	strh	r2, [r3, #6]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <drawGraph>:
}



/* TODO: Information has to be written here */
void drawGraph(Shape const *graph[]){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0;graph[i] != (Shape *)0;i++){
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
 8000300:	e00a      	b.n	8000318 <drawGraph+0x24>
		Shape_draw_vcall(graph[i]); /*polymorphism*/
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4413      	add	r3, r2
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffae 	bl	800026e <Shape_draw_vcall>
	for(i=0;graph[i] != (Shape *)0;i++){
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	3301      	adds	r3, #1
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1ed      	bne.n	8000302 <drawGraph+0xe>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <Shape_draw>:


/*virtual calls late binding*/

/* TODO: Information has to be written here */
static void Shape_draw(Shape const * const me){
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	(void)me;  /* TODO: Information has to be written here */
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <Shape_area>:

/* TODO: Information has to be written here */
static uint32_t Shape_area(Shape const * const me){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	(void)me;  /* TODO: Information has to be written here */
	return 0U;
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <main>:


void  TaskStart (void *pdata);

int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af02      	add	r7, sp, #8
	Shape s2; /* Automatic allocation*/
	Shape *ps3 = malloc(sizeof(Shape)); /*dynamic allocation*/
 8000362:	2008      	movs	r0, #8
 8000364:	f000 f8dc 	bl	8000520 <malloc>
 8000368:	4603      	mov	r3, r0
 800036a:	61fb      	str	r3, [r7, #28]

	Shape_ctor(&s1, 1, 2);
 800036c:	2202      	movs	r2, #2
 800036e:	2101      	movs	r1, #1
 8000370:	4823      	ldr	r0, [pc, #140]	; (8000400 <main+0xa4>)
 8000372:	f7ff ff89 	bl	8000288 <Shape_ctor>
	Shape_ctor(&s2, 3, 4);
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2204      	movs	r2, #4
 800037c:	2103      	movs	r1, #3
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff82 	bl	8000288 <Shape_ctor>
	Shape_ctor(ps3,  5, 6);
 8000384:	2206      	movs	r2, #6
 8000386:	2105      	movs	r1, #5
 8000388:	69f8      	ldr	r0, [r7, #28]
 800038a:	f7ff ff7d 	bl	8000288 <Shape_ctor>

	Rectangle_ctor((Rectangle *)ps3,5, 6, 10, 13);
 800038e:	230d      	movs	r3, #13
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	230a      	movs	r3, #10
 8000394:	2206      	movs	r2, #6
 8000396:	2105      	movs	r1, #5
 8000398:	69f8      	ldr	r0, [r7, #28]
 800039a:	f7ff ff25 	bl	80001e8 <Rectangle_ctor>
	Rectangle_ctor(&r1,1,2,15,10);
 800039e:	230a      	movs	r3, #10
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	230f      	movs	r3, #15
 80003a4:	2202      	movs	r2, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <main+0xa8>)
 80003aa:	f7ff ff1d 	bl	80001e8 <Rectangle_ctor>

	Shape const *graph[]= {
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <main+0xa4>)
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <main+0xa8>)
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
			(Shape *)&r1,
			ps3,
			(Shape *)0
	};

	drawGraph(graph);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff97 	bl	80002f4 <drawGraph>

	Shape_moveBy(&s1, 7, 8);
 80003c6:	2208      	movs	r2, #8
 80003c8:	2107      	movs	r1, #7
 80003ca:	480d      	ldr	r0, [pc, #52]	; (8000400 <main+0xa4>)
 80003cc:	f7ff ff76 	bl	80002bc <Shape_moveBy>
	Shape_moveBy(&s2, 9, 10);
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	220a      	movs	r2, #10
 80003d6:	2109      	movs	r1, #9
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff6f 	bl	80002bc <Shape_moveBy>
	Shape_moveBy(ps3, -1, -2);
 80003de:	f06f 0201 	mvn.w	r2, #1
 80003e2:	f04f 31ff 	mov.w	r1, #4294967295
 80003e6:	69f8      	ldr	r0, [r7, #28]
 80003e8:	f7ff ff68 	bl	80002bc <Shape_moveBy>

	a = Rectangle_area(&r1);
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <main+0xa8>)
 80003ee:	f7ff ff29 	bl	8000244 <Rectangle_area>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <main+0xac>)
 80003f6:	6013      	str	r3, [r2, #0]


	free(ps3);
 80003f8:	69f8      	ldr	r0, [r7, #28]
 80003fa:	f000 f899 	bl	8000530 <free>
//	OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);



    /* Loop forever */
	for(;;);
 80003fe:	e7fe      	b.n	80003fe <main+0xa2>
 8000400:	20000080 	.word	0x20000080
 8000404:	20000088 	.word	0x20000088
 8000408:	20000094 	.word	0x20000094

0800040c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <_sbrk+0x5c>)
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <_sbrk+0x60>)
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <_sbrk+0x64>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d102      	bne.n	800042e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <_sbrk+0x64>)
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <_sbrk+0x68>)
 800042c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <_sbrk+0x64>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	693a      	ldr	r2, [r7, #16]
 8000438:	429a      	cmp	r2, r3
 800043a:	d207      	bcs.n	800044c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800043c:	f000 f846 	bl	80004cc <__errno>
 8000440:	4603      	mov	r3, r0
 8000442:	220c      	movs	r2, #12
 8000444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	e009      	b.n	8000460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <_sbrk+0x64>)
 800045c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20020000 	.word	0x20020000
 800046c:	00000400 	.word	0x00000400
 8000470:	20000098 	.word	0x20000098
 8000474:	200000b0 	.word	0x200000b0

08000478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800047c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a6:	f000 f817 	bl	80004d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff ff57 	bl	800035c <main>

080004ae <LoopForever>:

LoopForever:
    b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   r0, =_estack
 80004b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004bc:	0800076c 	.word	0x0800076c
  ldr r2, =_sbss
 80004c0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004c4:	200000ac 	.word	0x200000ac

080004c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC_IRQHandler>
	...

080004cc <__errno>:
 80004cc:	4b01      	ldr	r3, [pc, #4]	; (80004d4 <__errno+0x8>)
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000

080004d8 <__libc_init_array>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	4d0d      	ldr	r5, [pc, #52]	; (8000510 <__libc_init_array+0x38>)
 80004dc:	4c0d      	ldr	r4, [pc, #52]	; (8000514 <__libc_init_array+0x3c>)
 80004de:	1b64      	subs	r4, r4, r5
 80004e0:	10a4      	asrs	r4, r4, #2
 80004e2:	2600      	movs	r6, #0
 80004e4:	42a6      	cmp	r6, r4
 80004e6:	d109      	bne.n	80004fc <__libc_init_array+0x24>
 80004e8:	4d0b      	ldr	r5, [pc, #44]	; (8000518 <__libc_init_array+0x40>)
 80004ea:	4c0c      	ldr	r4, [pc, #48]	; (800051c <__libc_init_array+0x44>)
 80004ec:	f000 f926 	bl	800073c <_init>
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	2600      	movs	r6, #0
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d105      	bne.n	8000506 <__libc_init_array+0x2e>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000500:	4798      	blx	r3
 8000502:	3601      	adds	r6, #1
 8000504:	e7ee      	b.n	80004e4 <__libc_init_array+0xc>
 8000506:	f855 3b04 	ldr.w	r3, [r5], #4
 800050a:	4798      	blx	r3
 800050c:	3601      	adds	r6, #1
 800050e:	e7f2      	b.n	80004f6 <__libc_init_array+0x1e>
 8000510:	08000764 	.word	0x08000764
 8000514:	08000764 	.word	0x08000764
 8000518:	08000764 	.word	0x08000764
 800051c:	08000768 	.word	0x08000768

08000520 <malloc>:
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <malloc+0xc>)
 8000522:	4601      	mov	r1, r0
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	f000 b877 	b.w	8000618 <_malloc_r>
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000

08000530 <free>:
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <free+0xc>)
 8000532:	4601      	mov	r1, r0
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	f000 b803 	b.w	8000540 <_free_r>
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000

08000540 <_free_r>:
 8000540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000542:	2900      	cmp	r1, #0
 8000544:	d044      	beq.n	80005d0 <_free_r+0x90>
 8000546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800054a:	9001      	str	r0, [sp, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	f1a1 0404 	sub.w	r4, r1, #4
 8000552:	bfb8      	it	lt
 8000554:	18e4      	addlt	r4, r4, r3
 8000556:	f000 f8e3 	bl	8000720 <__malloc_lock>
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <_free_r+0x94>)
 800055c:	9801      	ldr	r0, [sp, #4]
 800055e:	6813      	ldr	r3, [r2, #0]
 8000560:	b933      	cbnz	r3, 8000570 <_free_r+0x30>
 8000562:	6063      	str	r3, [r4, #4]
 8000564:	6014      	str	r4, [r2, #0]
 8000566:	b003      	add	sp, #12
 8000568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800056c:	f000 b8de 	b.w	800072c <__malloc_unlock>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <_free_r+0x46>
 8000574:	6825      	ldr	r5, [r4, #0]
 8000576:	1961      	adds	r1, r4, r5
 8000578:	428b      	cmp	r3, r1
 800057a:	bf01      	itttt	eq
 800057c:	6819      	ldreq	r1, [r3, #0]
 800057e:	685b      	ldreq	r3, [r3, #4]
 8000580:	1949      	addeq	r1, r1, r5
 8000582:	6021      	streq	r1, [r4, #0]
 8000584:	e7ed      	b.n	8000562 <_free_r+0x22>
 8000586:	461a      	mov	r2, r3
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	b10b      	cbz	r3, 8000590 <_free_r+0x50>
 800058c:	42a3      	cmp	r3, r4
 800058e:	d9fa      	bls.n	8000586 <_free_r+0x46>
 8000590:	6811      	ldr	r1, [r2, #0]
 8000592:	1855      	adds	r5, r2, r1
 8000594:	42a5      	cmp	r5, r4
 8000596:	d10b      	bne.n	80005b0 <_free_r+0x70>
 8000598:	6824      	ldr	r4, [r4, #0]
 800059a:	4421      	add	r1, r4
 800059c:	1854      	adds	r4, r2, r1
 800059e:	42a3      	cmp	r3, r4
 80005a0:	6011      	str	r1, [r2, #0]
 80005a2:	d1e0      	bne.n	8000566 <_free_r+0x26>
 80005a4:	681c      	ldr	r4, [r3, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	6053      	str	r3, [r2, #4]
 80005aa:	4421      	add	r1, r4
 80005ac:	6011      	str	r1, [r2, #0]
 80005ae:	e7da      	b.n	8000566 <_free_r+0x26>
 80005b0:	d902      	bls.n	80005b8 <_free_r+0x78>
 80005b2:	230c      	movs	r3, #12
 80005b4:	6003      	str	r3, [r0, #0]
 80005b6:	e7d6      	b.n	8000566 <_free_r+0x26>
 80005b8:	6825      	ldr	r5, [r4, #0]
 80005ba:	1961      	adds	r1, r4, r5
 80005bc:	428b      	cmp	r3, r1
 80005be:	bf04      	itt	eq
 80005c0:	6819      	ldreq	r1, [r3, #0]
 80005c2:	685b      	ldreq	r3, [r3, #4]
 80005c4:	6063      	str	r3, [r4, #4]
 80005c6:	bf04      	itt	eq
 80005c8:	1949      	addeq	r1, r1, r5
 80005ca:	6021      	streq	r1, [r4, #0]
 80005cc:	6054      	str	r4, [r2, #4]
 80005ce:	e7ca      	b.n	8000566 <_free_r+0x26>
 80005d0:	b003      	add	sp, #12
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <sbrk_aligned>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	4e0e      	ldr	r6, [pc, #56]	; (8000614 <sbrk_aligned+0x3c>)
 80005dc:	460c      	mov	r4, r1
 80005de:	6831      	ldr	r1, [r6, #0]
 80005e0:	4605      	mov	r5, r0
 80005e2:	b911      	cbnz	r1, 80005ea <sbrk_aligned+0x12>
 80005e4:	f000 f88c 	bl	8000700 <_sbrk_r>
 80005e8:	6030      	str	r0, [r6, #0]
 80005ea:	4621      	mov	r1, r4
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 f887 	bl	8000700 <_sbrk_r>
 80005f2:	1c43      	adds	r3, r0, #1
 80005f4:	d00a      	beq.n	800060c <sbrk_aligned+0x34>
 80005f6:	1cc4      	adds	r4, r0, #3
 80005f8:	f024 0403 	bic.w	r4, r4, #3
 80005fc:	42a0      	cmp	r0, r4
 80005fe:	d007      	beq.n	8000610 <sbrk_aligned+0x38>
 8000600:	1a21      	subs	r1, r4, r0
 8000602:	4628      	mov	r0, r5
 8000604:	f000 f87c 	bl	8000700 <_sbrk_r>
 8000608:	3001      	adds	r0, #1
 800060a:	d101      	bne.n	8000610 <sbrk_aligned+0x38>
 800060c:	f04f 34ff 	mov.w	r4, #4294967295
 8000610:	4620      	mov	r0, r4
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	200000a0 	.word	0x200000a0

08000618 <_malloc_r>:
 8000618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800061c:	1ccd      	adds	r5, r1, #3
 800061e:	f025 0503 	bic.w	r5, r5, #3
 8000622:	3508      	adds	r5, #8
 8000624:	2d0c      	cmp	r5, #12
 8000626:	bf38      	it	cc
 8000628:	250c      	movcc	r5, #12
 800062a:	2d00      	cmp	r5, #0
 800062c:	4607      	mov	r7, r0
 800062e:	db01      	blt.n	8000634 <_malloc_r+0x1c>
 8000630:	42a9      	cmp	r1, r5
 8000632:	d905      	bls.n	8000640 <_malloc_r+0x28>
 8000634:	230c      	movs	r3, #12
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	2600      	movs	r6, #0
 800063a:	4630      	mov	r0, r6
 800063c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000640:	4e2e      	ldr	r6, [pc, #184]	; (80006fc <_malloc_r+0xe4>)
 8000642:	f000 f86d 	bl	8000720 <__malloc_lock>
 8000646:	6833      	ldr	r3, [r6, #0]
 8000648:	461c      	mov	r4, r3
 800064a:	bb34      	cbnz	r4, 800069a <_malloc_r+0x82>
 800064c:	4629      	mov	r1, r5
 800064e:	4638      	mov	r0, r7
 8000650:	f7ff ffc2 	bl	80005d8 <sbrk_aligned>
 8000654:	1c43      	adds	r3, r0, #1
 8000656:	4604      	mov	r4, r0
 8000658:	d14d      	bne.n	80006f6 <_malloc_r+0xde>
 800065a:	6834      	ldr	r4, [r6, #0]
 800065c:	4626      	mov	r6, r4
 800065e:	2e00      	cmp	r6, #0
 8000660:	d140      	bne.n	80006e4 <_malloc_r+0xcc>
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	4631      	mov	r1, r6
 8000666:	4638      	mov	r0, r7
 8000668:	eb04 0803 	add.w	r8, r4, r3
 800066c:	f000 f848 	bl	8000700 <_sbrk_r>
 8000670:	4580      	cmp	r8, r0
 8000672:	d13a      	bne.n	80006ea <_malloc_r+0xd2>
 8000674:	6821      	ldr	r1, [r4, #0]
 8000676:	3503      	adds	r5, #3
 8000678:	1a6d      	subs	r5, r5, r1
 800067a:	f025 0503 	bic.w	r5, r5, #3
 800067e:	3508      	adds	r5, #8
 8000680:	2d0c      	cmp	r5, #12
 8000682:	bf38      	it	cc
 8000684:	250c      	movcc	r5, #12
 8000686:	4629      	mov	r1, r5
 8000688:	4638      	mov	r0, r7
 800068a:	f7ff ffa5 	bl	80005d8 <sbrk_aligned>
 800068e:	3001      	adds	r0, #1
 8000690:	d02b      	beq.n	80006ea <_malloc_r+0xd2>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	442b      	add	r3, r5
 8000696:	6023      	str	r3, [r4, #0]
 8000698:	e00e      	b.n	80006b8 <_malloc_r+0xa0>
 800069a:	6822      	ldr	r2, [r4, #0]
 800069c:	1b52      	subs	r2, r2, r5
 800069e:	d41e      	bmi.n	80006de <_malloc_r+0xc6>
 80006a0:	2a0b      	cmp	r2, #11
 80006a2:	d916      	bls.n	80006d2 <_malloc_r+0xba>
 80006a4:	1961      	adds	r1, r4, r5
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	6025      	str	r5, [r4, #0]
 80006aa:	bf18      	it	ne
 80006ac:	6059      	strne	r1, [r3, #4]
 80006ae:	6863      	ldr	r3, [r4, #4]
 80006b0:	bf08      	it	eq
 80006b2:	6031      	streq	r1, [r6, #0]
 80006b4:	5162      	str	r2, [r4, r5]
 80006b6:	604b      	str	r3, [r1, #4]
 80006b8:	4638      	mov	r0, r7
 80006ba:	f104 060b 	add.w	r6, r4, #11
 80006be:	f000 f835 	bl	800072c <__malloc_unlock>
 80006c2:	f026 0607 	bic.w	r6, r6, #7
 80006c6:	1d23      	adds	r3, r4, #4
 80006c8:	1af2      	subs	r2, r6, r3
 80006ca:	d0b6      	beq.n	800063a <_malloc_r+0x22>
 80006cc:	1b9b      	subs	r3, r3, r6
 80006ce:	50a3      	str	r3, [r4, r2]
 80006d0:	e7b3      	b.n	800063a <_malloc_r+0x22>
 80006d2:	6862      	ldr	r2, [r4, #4]
 80006d4:	42a3      	cmp	r3, r4
 80006d6:	bf0c      	ite	eq
 80006d8:	6032      	streq	r2, [r6, #0]
 80006da:	605a      	strne	r2, [r3, #4]
 80006dc:	e7ec      	b.n	80006b8 <_malloc_r+0xa0>
 80006de:	4623      	mov	r3, r4
 80006e0:	6864      	ldr	r4, [r4, #4]
 80006e2:	e7b2      	b.n	800064a <_malloc_r+0x32>
 80006e4:	4634      	mov	r4, r6
 80006e6:	6876      	ldr	r6, [r6, #4]
 80006e8:	e7b9      	b.n	800065e <_malloc_r+0x46>
 80006ea:	230c      	movs	r3, #12
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4638      	mov	r0, r7
 80006f0:	f000 f81c 	bl	800072c <__malloc_unlock>
 80006f4:	e7a1      	b.n	800063a <_malloc_r+0x22>
 80006f6:	6025      	str	r5, [r4, #0]
 80006f8:	e7de      	b.n	80006b8 <_malloc_r+0xa0>
 80006fa:	bf00      	nop
 80006fc:	2000009c 	.word	0x2000009c

08000700 <_sbrk_r>:
 8000700:	b538      	push	{r3, r4, r5, lr}
 8000702:	4d06      	ldr	r5, [pc, #24]	; (800071c <_sbrk_r+0x1c>)
 8000704:	2300      	movs	r3, #0
 8000706:	4604      	mov	r4, r0
 8000708:	4608      	mov	r0, r1
 800070a:	602b      	str	r3, [r5, #0]
 800070c:	f7ff fe7e 	bl	800040c <_sbrk>
 8000710:	1c43      	adds	r3, r0, #1
 8000712:	d102      	bne.n	800071a <_sbrk_r+0x1a>
 8000714:	682b      	ldr	r3, [r5, #0]
 8000716:	b103      	cbz	r3, 800071a <_sbrk_r+0x1a>
 8000718:	6023      	str	r3, [r4, #0]
 800071a:	bd38      	pop	{r3, r4, r5, pc}
 800071c:	200000a4 	.word	0x200000a4

08000720 <__malloc_lock>:
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <__malloc_lock+0x8>)
 8000722:	f000 b809 	b.w	8000738 <__retarget_lock_acquire_recursive>
 8000726:	bf00      	nop
 8000728:	200000a8 	.word	0x200000a8

0800072c <__malloc_unlock>:
 800072c:	4801      	ldr	r0, [pc, #4]	; (8000734 <__malloc_unlock+0x8>)
 800072e:	f000 b804 	b.w	800073a <__retarget_lock_release_recursive>
 8000732:	bf00      	nop
 8000734:	200000a8 	.word	0x200000a8

08000738 <__retarget_lock_acquire_recursive>:
 8000738:	4770      	bx	lr

0800073a <__retarget_lock_release_recursive>:
 800073a:	4770      	bx	lr

0800073c <_init>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr

08000748 <_fini>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr
